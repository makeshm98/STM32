
co2_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800a3c8  0800a3c8  0001a3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a908  0800a908  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a910  0800a910  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  0800aaec  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  0800aaec  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b871  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b63  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080f  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014ef1  00000000  00000000  0002e887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d51d  00000000  00000000  00043778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e6db  00000000  00000000  00050c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a28  00000000  00000000  000cf370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d2d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a3ac 	.word	0x0800a3ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a3ac 	.word	0x0800a3ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800a434 	.word	0x0800a434
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b0be      	sub	sp, #248	; 0xf8
 80025b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f000 fc4d 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 f999 	bl	80028ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ba:	f000 fa7d 	bl	8002ab8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025be:	f000 fa4b 	bl	8002a58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025c2:	f000 fa09 	bl	80029d8 <MX_I2C1_Init>
      //HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, txData_02, sizeof(txData_02), 1);

      //HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, rxData, ANSWERSIZE, 1000);

      // Transmit first set of data
      uint8_t data1[] = {0x21, 0xb1};
 80025c6:	21cc      	movs	r1, #204	; 0xcc
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	4abb      	ldr	r2, [pc, #748]	; (80028b8 <main+0x30c>)
 80025cc:	801a      	strh	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR << 1, &data1, sizeof(data1), 5000);
 80025ce:	187a      	adds	r2, r7, r1
 80025d0:	48ba      	ldr	r0, [pc, #744]	; (80028bc <main+0x310>)
 80025d2:	4bbb      	ldr	r3, [pc, #748]	; (80028c0 <main+0x314>)
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2302      	movs	r3, #2
 80025d8:	21c4      	movs	r1, #196	; 0xc4
 80025da:	f000 ff95 	bl	8003508 <HAL_I2C_Master_Transmit>

      // Transmit second set of data
      uint8_t data2[] = {0xec, 0x05};
 80025de:	21c8      	movs	r1, #200	; 0xc8
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	4ab8      	ldr	r2, [pc, #736]	; (80028c4 <main+0x318>)
 80025e4:	801a      	strh	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR << 1, &data2, sizeof(data2), 1000);
 80025e6:	187a      	adds	r2, r7, r1
 80025e8:	48b4      	ldr	r0, [pc, #720]	; (80028bc <main+0x310>)
 80025ea:	23fa      	movs	r3, #250	; 0xfa
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2302      	movs	r3, #2
 80025f2:	21c4      	movs	r1, #196	; 0xc4
 80025f4:	f000 ff88 	bl	8003508 <HAL_I2C_Master_Transmit>


      uint8_t received_data[9]; // Array to store received data


      HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR << 1, &received_data, 9, 10000);
 80025f8:	24bc      	movs	r4, #188	; 0xbc
 80025fa:	193a      	adds	r2, r7, r4
 80025fc:	48af      	ldr	r0, [pc, #700]	; (80028bc <main+0x310>)
 80025fe:	4bb2      	ldr	r3, [pc, #712]	; (80028c8 <main+0x31c>)
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2309      	movs	r3, #9
 8002604:	21c4      	movs	r1, #196	; 0xc4
 8002606:	f001 f887 	bl	8003718 <HAL_I2C_Master_Receive>


      uint8_t a = received_data[0];
 800260a:	20df      	movs	r0, #223	; 0xdf
 800260c:	183b      	adds	r3, r7, r0
 800260e:	0021      	movs	r1, r4
 8002610:	187a      	adds	r2, r7, r1
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	701a      	strb	r2, [r3, #0]
      uint8_t b = received_data[1];
 8002616:	24de      	movs	r4, #222	; 0xde
 8002618:	193b      	adds	r3, r7, r4
 800261a:	187a      	adds	r2, r7, r1
 800261c:	7852      	ldrb	r2, [r2, #1]
 800261e:	701a      	strb	r2, [r3, #0]

      // Convert the two bytes to a single hexadecimal string
      char hexBuffer[5];
      snprintf(hexBuffer, sizeof(hexBuffer), "%02X%02X", a, b);
 8002620:	183b      	adds	r3, r7, r0
 8002622:	7819      	ldrb	r1, [r3, #0]
 8002624:	193b      	adds	r3, r7, r4
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4aa8      	ldr	r2, [pc, #672]	; (80028cc <main+0x320>)
 800262a:	24b4      	movs	r4, #180	; 0xb4
 800262c:	1938      	adds	r0, r7, r4
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	000b      	movs	r3, r1
 8002632:	2105      	movs	r1, #5
 8002634:	f004 f9c6 	bl	80069c4 <sniprintf>

      // Convert the hexadecimal string back to decimal
      long merged_co2 = strtol(hexBuffer, NULL, 16);
 8002638:	193b      	adds	r3, r7, r4
 800263a:	2210      	movs	r2, #16
 800263c:	2100      	movs	r1, #0
 800263e:	0018      	movs	r0, r3
 8002640:	f003 fa5a 	bl	8005af8 <strtol>
 8002644:	0003      	movs	r3, r0
 8002646:	22d8      	movs	r2, #216	; 0xd8
 8002648:	18b9      	adds	r1, r7, r2
 800264a:	600b      	str	r3, [r1, #0]

      // Print the CO2 concentration in ppm
      //printf("co2: %ld in ppm \n", merged_co2);
      printf(merged_co2);
 800264c:	18bb      	adds	r3, r7, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0018      	movs	r0, r3
 8002652:	f004 f9a7 	bl	80069a4 <iprintf>
	      index += sprintf(buffer + index, "%02X ", received_data[i]);
	  }
*/
	    // Print received data over UART
	    char buffer[sizeof(received_data) * 3]; // Buffer for storing formatted data
	    for (int i = 0; i < sizeof(received_data); i++) {
 8002656:	2300      	movs	r3, #0
 8002658:	22ec      	movs	r2, #236	; 0xec
 800265a:	18ba      	adds	r2, r7, r2
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e020      	b.n	80026a2 <main+0xf6>
	        // Format the data into a string
	        sprintf(buffer, "Received data[%d]: 0x%02X\r\n", i, received_data[i]);
 8002660:	23bc      	movs	r3, #188	; 0xbc
 8002662:	18fa      	adds	r2, r7, r3
 8002664:	24ec      	movs	r4, #236	; 0xec
 8002666:	193b      	adds	r3, r7, r4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	18d3      	adds	r3, r2, r3
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	193a      	adds	r2, r7, r4
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4997      	ldr	r1, [pc, #604]	; (80028d0 <main+0x324>)
 8002674:	2598      	movs	r5, #152	; 0x98
 8002676:	1978      	adds	r0, r7, r5
 8002678:	f004 f9d8 	bl	8006a2c <siprintf>
	        // Transmit the formatted string over UART
	        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 10000);
 800267c:	197b      	adds	r3, r7, r5
 800267e:	0018      	movs	r0, r3
 8002680:	f7fd fd42 	bl	8000108 <strlen>
 8002684:	0003      	movs	r3, r0
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <main+0x31c>)
 800268a:	1979      	adds	r1, r7, r5
 800268c:	4891      	ldr	r0, [pc, #580]	; (80028d4 <main+0x328>)
 800268e:	f002 fc41 	bl	8004f14 <HAL_UART_Transmit>

	        HAL_Delay(100);
 8002692:	2064      	movs	r0, #100	; 0x64
 8002694:	f000 fc4c 	bl	8002f30 <HAL_Delay>
	    for (int i = 0; i < sizeof(received_data); i++) {
 8002698:	193b      	adds	r3, r7, r4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	193a      	adds	r2, r7, r4
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	23ec      	movs	r3, #236	; 0xec
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d9d9      	bls.n	8002660 <main+0xb4>


//This code section entire gives CO2 concentration in PPM for required criteria

	    char buffer_01[20]; // Adjust the buffer size accordingly
	    for (int i = 0; i < 2; i++) { // Iterate only twice
 80026ac:	2300      	movs	r3, #0
 80026ae:	22e8      	movs	r2, #232	; 0xe8
 80026b0:	18ba      	adds	r2, r7, r2
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02d      	b.n	8002712 <main+0x166>
	        // Format the data into a string
	    //here    //sprintf(buffer_01, "Received data[%d]: 0x%02X\r\n", i, received_data[i]);
	        // Transmit the formatted string over UART
	    // here    //HAL_UART_Transmit(&huart2, (uint8_t *)buffer_01, strlen(buffer_01), 10000);

	        uint16_t concatenated_value = (received_data[0] << 8) | received_data[1]; // Concatenated value
 80026b6:	21bc      	movs	r1, #188	; 0xbc
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	21ce      	movs	r1, #206	; 0xce
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	801a      	strh	r2, [r3, #0]

	        // Convert concatenated_value to a string
	        char buffer_01[6]; // Assuming max 5 digits and null terminator
	        sprintf(buffer_01, "%u", concatenated_value);
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	881a      	ldrh	r2, [r3, #0]
 80026d4:	4980      	ldr	r1, [pc, #512]	; (80028d8 <main+0x32c>)
 80026d6:	2414      	movs	r4, #20
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	0018      	movs	r0, r3
 80026dc:	f004 f9a6 	bl	8006a2c <siprintf>

	        if(i == 1)
 80026e0:	23e8      	movs	r3, #232	; 0xe8
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10a      	bne.n	8002700 <main+0x154>
	        {
	        // Transmit the concatenated decimal value over UART
	        HAL_UART_Transmit(&huart2, (uint8_t *)buffer_01, strlen(buffer_01), 10000);
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fd fd0b 	bl	8000108 <strlen>
 80026f2:	0003      	movs	r3, r0
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <main+0x31c>)
 80026f8:	1939      	adds	r1, r7, r4
 80026fa:	4876      	ldr	r0, [pc, #472]	; (80028d4 <main+0x328>)
 80026fc:	f002 fc0a 	bl	8004f14 <HAL_UART_Transmit>
	        }
	        HAL_Delay(100);
 8002700:	2064      	movs	r0, #100	; 0x64
 8002702:	f000 fc15 	bl	8002f30 <HAL_Delay>
	    for (int i = 0; i < 2; i++) { // Iterate only twice
 8002706:	22e8      	movs	r2, #232	; 0xe8
 8002708:	18bb      	adds	r3, r7, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	23e8      	movs	r3, #232	; 0xe8
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	ddcc      	ble.n	80026b6 <main+0x10a>
	    }
        // Transmit the concatenated decimal value over UART
        //HAL_UART_Transmit(&huart2, (uint8_t *)buffer_01, strlen(buffer_01), 10000);
        uint8_t message[] = " Co2 in ppm \t";
 800271c:	2574      	movs	r5, #116	; 0x74
 800271e:	197b      	adds	r3, r7, r5
 8002720:	4a6e      	ldr	r2, [pc, #440]	; (80028dc <main+0x330>)
 8002722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002724:	c313      	stmia	r3!, {r0, r1, r4}
 8002726:	8812      	ldrh	r2, [r2, #0]
 8002728:	801a      	strh	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, message,sizeof(message), 10);
 800272a:	1979      	adds	r1, r7, r5
 800272c:	4869      	ldr	r0, [pc, #420]	; (80028d4 <main+0x328>)
 800272e:	230a      	movs	r3, #10
 8002730:	220e      	movs	r2, #14
 8002732:	f002 fbef 	bl	8004f14 <HAL_UART_Transmit>
        HAL_Delay(1000);
 8002736:	23fa      	movs	r3, #250	; 0xfa
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fbf8 	bl	8002f30 <HAL_Delay>

//The co2 in ppm code ends here.

//This code section entire gives Temperature concentration in degrees for required criteria
	    char buffer_02[20]; // Adjust the buffer size accordingly
	    for (int i = 0; i < 2; i++) { // Iterate only twice
 8002740:	2300      	movs	r3, #0
 8002742:	22e4      	movs	r2, #228	; 0xe4
 8002744:	18ba      	adds	r2, r7, r2
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e03c      	b.n	80027c4 <main+0x218>
	        // Format the data into a string
	    //here    //sprintf(buffer_01, "Received data[%d]: 0x%02X\r\n", i, received_data[i]);
	        // Transmit the formatted string over UART
	    // here    //HAL_UART_Transmit(&huart2, (uint8_t *)buffer_01, strlen(buffer_01), 10000);

	        uint16_t concatenated_value_01 = (received_data[3] << 8) | received_data[4]; // Concatenated value
 800274a:	21bc      	movs	r1, #188	; 0xbc
 800274c:	187b      	adds	r3, r7, r1
 800274e:	78db      	ldrb	r3, [r3, #3]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21a      	sxth	r2, r3
 8002754:	187b      	adds	r3, r7, r1
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21a      	sxth	r2, r3
 800275e:	21d2      	movs	r1, #210	; 0xd2
 8002760:	187b      	adds	r3, r7, r1
 8002762:	801a      	strh	r2, [r3, #0]
	        uint16_t concatenated_value_02 = (-45) + 175 * concatenated_value_01/65536;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	22af      	movs	r2, #175	; 0xaf
 800276a:	4353      	muls	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	da02      	bge.n	8002776 <main+0x1ca>
 8002770:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <main+0x334>)
 8002772:	4694      	mov	ip, r2
 8002774:	4463      	add	r3, ip
 8002776:	141b      	asrs	r3, r3, #16
 8002778:	b29a      	uxth	r2, r3
 800277a:	21d0      	movs	r1, #208	; 0xd0
 800277c:	187b      	adds	r3, r7, r1
 800277e:	3a2d      	subs	r2, #45	; 0x2d
 8002780:	801a      	strh	r2, [r3, #0]
	        // Convert concatenated_value to a string
	        char buffer_02[6]; // Assuming max 5 digits and null terminator
	        sprintf(buffer_02, "%u", concatenated_value_02);
 8002782:	187b      	adds	r3, r7, r1
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	4954      	ldr	r1, [pc, #336]	; (80028d8 <main+0x32c>)
 8002788:	240c      	movs	r4, #12
 800278a:	193b      	adds	r3, r7, r4
 800278c:	0018      	movs	r0, r3
 800278e:	f004 f94d 	bl	8006a2c <siprintf>

	        if(i == 1)
 8002792:	23e4      	movs	r3, #228	; 0xe4
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10a      	bne.n	80027b2 <main+0x206>
	        {
	        // Transmit the concatenated decimal value over UART
	        HAL_UART_Transmit(&huart2, (uint8_t *)buffer_02, strlen(buffer_02), 10000);
 800279c:	193b      	adds	r3, r7, r4
 800279e:	0018      	movs	r0, r3
 80027a0:	f7fd fcb2 	bl	8000108 <strlen>
 80027a4:	0003      	movs	r3, r0
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <main+0x31c>)
 80027aa:	1939      	adds	r1, r7, r4
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <main+0x328>)
 80027ae:	f002 fbb1 	bl	8004f14 <HAL_UART_Transmit>
	        }
	        HAL_Delay(100);
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f000 fbbc 	bl	8002f30 <HAL_Delay>
	    for (int i = 0; i < 2; i++) { // Iterate only twice
 80027b8:	22e4      	movs	r2, #228	; 0xe4
 80027ba:	18bb      	adds	r3, r7, r2
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	18ba      	adds	r2, r7, r2
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	23e4      	movs	r3, #228	; 0xe4
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	ddbd      	ble.n	800274a <main+0x19e>
	    }
        // Transmit the concatenated decimal value over UART
        //HAL_UART_Transmit(&huart2, (uint8_t *)buffer_01, strlen(buffer_01), 10000);
        uint8_t message_01[] = " Degree celsius \t";
 80027ce:	254c      	movs	r5, #76	; 0x4c
 80027d0:	197b      	adds	r3, r7, r5
 80027d2:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <main+0x338>)
 80027d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80027d6:	c313      	stmia	r3!, {r0, r1, r4}
 80027d8:	6811      	ldr	r1, [r2, #0]
 80027da:	6019      	str	r1, [r3, #0]
 80027dc:	8892      	ldrh	r2, [r2, #4]
 80027de:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart2, message_01,sizeof(message_01), 10);
 80027e0:	1979      	adds	r1, r7, r5
 80027e2:	483c      	ldr	r0, [pc, #240]	; (80028d4 <main+0x328>)
 80027e4:	230a      	movs	r3, #10
 80027e6:	2212      	movs	r2, #18
 80027e8:	f002 fb94 	bl	8004f14 <HAL_UART_Transmit>
        HAL_Delay(1000);
 80027ec:	23fa      	movs	r3, #250	; 0xfa
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fb9d 	bl	8002f30 <HAL_Delay>
//This temperature code ends here

//This entire code section give relative humidity in percentage

        char buffer_03[20];
        for (int i = 0; i < 2; i++) {
 80027f6:	2300      	movs	r3, #0
 80027f8:	22e0      	movs	r2, #224	; 0xe0
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e03a      	b.n	8002876 <main+0x2ca>
	        uint16_t concatenated_value_03 = (received_data[6] << 8) | received_data[7]; // Concatenated value
 8002800:	21bc      	movs	r1, #188	; 0xbc
 8002802:	187b      	adds	r3, r7, r1
 8002804:	799b      	ldrb	r3, [r3, #6]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	b21a      	sxth	r2, r3
 800280a:	187b      	adds	r3, r7, r1
 800280c:	79db      	ldrb	r3, [r3, #7]
 800280e:	b21b      	sxth	r3, r3
 8002810:	4313      	orrs	r3, r2
 8002812:	b21a      	sxth	r2, r3
 8002814:	21d6      	movs	r1, #214	; 0xd6
 8002816:	187b      	adds	r3, r7, r1
 8002818:	801a      	strh	r2, [r3, #0]
	        uint16_t concatenated_value_04 = 100 * concatenated_value_03/65536;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2264      	movs	r2, #100	; 0x64
 8002820:	4353      	muls	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	da02      	bge.n	800282c <main+0x280>
 8002826:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <main+0x334>)
 8002828:	4694      	mov	ip, r2
 800282a:	4463      	add	r3, ip
 800282c:	141b      	asrs	r3, r3, #16
 800282e:	001a      	movs	r2, r3
 8002830:	21d4      	movs	r1, #212	; 0xd4
 8002832:	187b      	adds	r3, r7, r1
 8002834:	801a      	strh	r2, [r3, #0]
	        // Convert concatenated_value to a string
	        char buffer_03[6]; // Assuming max 5 digits and null terminator
	        sprintf(buffer_03, "%u", concatenated_value_04);
 8002836:	187b      	adds	r3, r7, r1
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <main+0x32c>)
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	0018      	movs	r0, r3
 8002840:	f004 f8f4 	bl	8006a2c <siprintf>

	        if(i == 1)
 8002844:	23e0      	movs	r3, #224	; 0xe0
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10a      	bne.n	8002864 <main+0x2b8>
	        {
	        // Transmit the concatenated decimal value over UART
	        HAL_UART_Transmit(&huart2, (uint8_t *)buffer_03, strlen(buffer_03), 10000);
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	0018      	movs	r0, r3
 8002852:	f7fd fc59 	bl	8000108 <strlen>
 8002856:	0003      	movs	r3, r0
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <main+0x31c>)
 800285c:	1d39      	adds	r1, r7, #4
 800285e:	481d      	ldr	r0, [pc, #116]	; (80028d4 <main+0x328>)
 8002860:	f002 fb58 	bl	8004f14 <HAL_UART_Transmit>
	        }
	        HAL_Delay(100);
 8002864:	2064      	movs	r0, #100	; 0x64
 8002866:	f000 fb63 	bl	8002f30 <HAL_Delay>
        for (int i = 0; i < 2; i++) {
 800286a:	22e0      	movs	r2, #224	; 0xe0
 800286c:	18bb      	adds	r3, r7, r2
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	18ba      	adds	r2, r7, r2
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	23e0      	movs	r3, #224	; 0xe0
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	ddbf      	ble.n	8002800 <main+0x254>
        }

        uint8_t message_02[] = " Relative Humidty in % \t\r\n";
 8002880:	251c      	movs	r5, #28
 8002882:	197b      	adds	r3, r7, r5
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <main+0x33c>)
 8002886:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002888:	c313      	stmia	r3!, {r0, r1, r4}
 800288a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800288c:	c313      	stmia	r3!, {r0, r1, r4}
 800288e:	8811      	ldrh	r1, [r2, #0]
 8002890:	8019      	strh	r1, [r3, #0]
 8002892:	7892      	ldrb	r2, [r2, #2]
 8002894:	709a      	strb	r2, [r3, #2]
        HAL_UART_Transmit(&huart2, message_02,sizeof(message_02), 10);
 8002896:	1979      	adds	r1, r7, r5
 8002898:	480e      	ldr	r0, [pc, #56]	; (80028d4 <main+0x328>)
 800289a:	230a      	movs	r3, #10
 800289c:	221b      	movs	r2, #27
 800289e:	f002 fb39 	bl	8004f14 <HAL_UART_Transmit>
        HAL_Delay(1000);
 80028a2:	23fa      	movs	r3, #250	; 0xfa
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 fb42 	bl	8002f30 <HAL_Delay>
	    sprintf(hex_sum, "0x%04X\r\n", decimal_sum);

	    // Transmit the concatenated string over UART
	    HAL_UART_Transmit(&huart2, (uint8_t *)hex_sum, strlen(hex_sum), 10000);
*/
	    HAL_Delay(1000);
 80028ac:	23fa      	movs	r3, #250	; 0xfa
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 fb3d 	bl	8002f30 <HAL_Delay>
  {
 80028b6:	e686      	b.n	80025c6 <main+0x1a>
 80028b8:	ffffb121 	.word	0xffffb121
 80028bc:	200001f0 	.word	0x200001f0
 80028c0:	00001388 	.word	0x00001388
 80028c4:	000005ec 	.word	0x000005ec
 80028c8:	00002710 	.word	0x00002710
 80028cc:	0800a3c8 	.word	0x0800a3c8
 80028d0:	0800a3d4 	.word	0x0800a3d4
 80028d4:	20000244 	.word	0x20000244
 80028d8:	0800a3f0 	.word	0x0800a3f0
 80028dc:	0800a3f4 	.word	0x0800a3f4
 80028e0:	0000ffff 	.word	0x0000ffff
 80028e4:	0800a404 	.word	0x0800a404
 80028e8:	0800a418 	.word	0x0800a418

080028ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b09d      	sub	sp, #116	; 0x74
 80028f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f2:	2438      	movs	r4, #56	; 0x38
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	0018      	movs	r0, r3
 80028f8:	2338      	movs	r3, #56	; 0x38
 80028fa:	001a      	movs	r2, r3
 80028fc:	2100      	movs	r1, #0
 80028fe:	f004 f901 	bl	8006b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002902:	2324      	movs	r3, #36	; 0x24
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	0018      	movs	r0, r3
 8002908:	2314      	movs	r3, #20
 800290a:	001a      	movs	r2, r3
 800290c:	2100      	movs	r1, #0
 800290e:	f004 f8f9 	bl	8006b04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002912:	003b      	movs	r3, r7
 8002914:	0018      	movs	r0, r3
 8002916:	2324      	movs	r3, #36	; 0x24
 8002918:	001a      	movs	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f004 f8f2 	bl	8006b04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <SystemClock_Config+0xe4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <SystemClock_Config+0xe8>)
 8002926:	401a      	ands	r2, r3
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <SystemClock_Config+0xe4>)
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	0109      	lsls	r1, r1, #4
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002932:	0021      	movs	r1, r4
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2201      	movs	r2, #1
 800293e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2210      	movs	r2, #16
 8002944:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002946:	187b      	adds	r3, r7, r1
 8002948:	2202      	movs	r2, #2
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800294c:	187b      	adds	r3, r7, r1
 800294e:	2200      	movs	r2, #0
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002952:	187b      	adds	r3, r7, r1
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0312      	lsls	r2, r2, #12
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	0412      	lsls	r2, r2, #16
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002962:	187b      	adds	r3, r7, r1
 8002964:	0018      	movs	r0, r3
 8002966:	f001 fb2d 	bl	8003fc4 <HAL_RCC_OscConfig>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800296e:	f000 f8c5 	bl	8002afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002972:	2124      	movs	r1, #36	; 0x24
 8002974:	187b      	adds	r3, r7, r1
 8002976:	220f      	movs	r2, #15
 8002978:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2203      	movs	r2, #3
 800297e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2101      	movs	r1, #1
 8002996:	0018      	movs	r0, r3
 8002998:	f001 fee8 	bl	800476c <HAL_RCC_ClockConfig>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d001      	beq.n	80029a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80029a0:	f000 f8ac 	bl	8002afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80029a4:	003b      	movs	r3, r7
 80029a6:	220a      	movs	r2, #10
 80029a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029aa:	003b      	movs	r3, r7
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029b0:	003b      	movs	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029b6:	003b      	movs	r3, r7
 80029b8:	0018      	movs	r0, r3
 80029ba:	f002 f8fb 	bl	8004bb4 <HAL_RCCEx_PeriphCLKConfig>
 80029be:	1e03      	subs	r3, r0, #0
 80029c0:	d001      	beq.n	80029c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80029c2:	f000 f89b 	bl	8002afc <Error_Handler>
  }
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b01d      	add	sp, #116	; 0x74
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40007000 	.word	0x40007000
 80029d4:	ffffe7ff 	.word	0xffffe7ff

080029d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <MX_I2C1_Init+0x78>)
 80029e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <MX_I2C1_Init+0x7c>)
 80029e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029e8:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_I2C1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 fce1 	bl	80033dc <HAL_I2C_Init>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a1e:	f000 f86d 	bl	8002afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a24:	2100      	movs	r1, #0
 8002a26:	0018      	movs	r0, r3
 8002a28:	f001 fa34 	bl	8003e94 <HAL_I2CEx_ConfigAnalogFilter>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a30:	f000 f864 	bl	8002afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <MX_I2C1_Init+0x74>)
 8002a36:	2100      	movs	r1, #0
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 fa77 	bl	8003f2c <HAL_I2CEx_ConfigDigitalFilter>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a42:	f000 f85b 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200001f0 	.word	0x200001f0
 8002a50:	40005400 	.word	0x40005400
 8002a54:	00707cbb 	.word	0x00707cbb

08002a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <MX_USART2_UART_Init+0x5c>)
 8002a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a64:	22e1      	movs	r2, #225	; 0xe1
 8002a66:	0252      	lsls	r2, r2, #9
 8002a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <MX_USART2_UART_Init+0x58>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f002 f9e5 	bl	8004e6c <HAL_UART_Init>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002aa6:	f000 f829 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000244 	.word	0x20000244
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002adc:	2102      	movs	r1, #2
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <MX_GPIO_Init+0x40>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_MspInit+0x24>)
 8002b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_MspInit+0x24>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_MspInit+0x24>)
 8002b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_MspInit+0x24>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0549      	lsls	r1, r1, #21
 8002b22:	430a      	orrs	r2, r1
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	240c      	movs	r4, #12
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	2314      	movs	r3, #20
 8002b40:	001a      	movs	r2, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	f003 ffde 	bl	8006b04 <memset>
  if(hi2c->Instance==I2C1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_I2C_MspInit+0x80>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d129      	bne.n	8002ba6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b58:	2102      	movs	r1, #2
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	2202      	movs	r2, #2
 8002b64:	4013      	ands	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	22c0      	movs	r2, #192	; 0xc0
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b72:	0021      	movs	r1, r4
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2212      	movs	r2, #18
 8002b78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	2203      	movs	r2, #3
 8002b84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b86:	187b      	adds	r3, r7, r1
 8002b88:	2204      	movs	r2, #4
 8002b8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_I2C_MspInit+0x88>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f000 faa4 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_I2C_MspInit+0x84>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0389      	lsls	r1, r1, #14
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b009      	add	sp, #36	; 0x24
 8002bac:	bd90      	pop	{r4, r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	40005400 	.word	0x40005400
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	50000400 	.word	0x50000400

08002bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b089      	sub	sp, #36	; 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	240c      	movs	r4, #12
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	0018      	movs	r0, r3
 8002bca:	2314      	movs	r3, #20
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2100      	movs	r1, #0
 8002bd0:	f003 ff98 	bl	8006b04 <memset>
  if(huart->Instance==USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_UART_MspInit+0x80>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d129      	bne.n	8002c32 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	0289      	lsls	r1, r1, #10
 8002be8:	430a      	orrs	r2, r1
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_UART_MspInit+0x84>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8002c04:	0021      	movs	r1, r4
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <HAL_UART_MspInit+0x88>)
 8002c0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2202      	movs	r2, #2
 8002c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2204      	movs	r2, #4
 8002c22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	187a      	adds	r2, r7, r1
 8002c26:	23a0      	movs	r3, #160	; 0xa0
 8002c28:	05db      	lsls	r3, r3, #23
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fa57 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b009      	add	sp, #36	; 0x24
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40021000 	.word	0x40021000
 8002c44:	00008004 	.word	0x00008004

08002c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <NMI_Handler+0x4>

08002c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c52:	e7fe      	b.n	8002c52 <HardFault_Handler+0x4>

08002c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6c:	f000 f944 	bl	8002ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0
  return 1;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_kill>:

int _kill(int pid, int sig)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c8c:	f003 ff94 	bl	8006bb8 <__errno>
 8002c90:	0003      	movs	r3, r0
 8002c92:	2216      	movs	r2, #22
 8002c94:	601a      	str	r2, [r3, #0]
  return -1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	425b      	negs	r3, r3
}
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_exit>:

void _exit (int status)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002caa:	2301      	movs	r3, #1
 8002cac:	425a      	negs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff ffe5 	bl	8002c82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cb8:	e7fe      	b.n	8002cb8 <_exit+0x16>

08002cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e00a      	b.n	8002ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ccc:	e000      	b.n	8002cd0 <_read+0x16>
 8002cce:	bf00      	nop
 8002cd0:	0001      	movs	r1, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	60ba      	str	r2, [r7, #8]
 8002cd8:	b2ca      	uxtb	r2, r1
 8002cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	dbf0      	blt.n	8002ccc <_read+0x12>
  }

  return len;
 8002cea:	687b      	ldr	r3, [r7, #4]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b006      	add	sp, #24
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e009      	b.n	8002d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	60ba      	str	r2, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	e000      	b.n	8002d14 <_write+0x20>
 8002d12:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbf1      	blt.n	8002d06 <_write+0x12>
  }
  return len;
 8002d22:	687b      	ldr	r3, [r7, #4]
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b006      	add	sp, #24
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_close>:

int _close(int file)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	425b      	negs	r3, r3
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	0192      	lsls	r2, r2, #6
 8002d50:	605a      	str	r2, [r3, #4]
  return 0;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_isatty>:

int _isatty(int file)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d64:	2301      	movs	r3, #1
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f003 ff00 	bl	8006bb8 <__errno>
 8002db8:	0003      	movs	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	18d2      	adds	r2, r2, r3
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b006      	add	sp, #24
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20005000 	.word	0x20005000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	200002cc 	.word	0x200002cc
 8002dec:	20000420 	.word	0x20000420

08002df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002dfe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e00:	f7ff fff6 	bl	8002df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <LoopForever+0xe>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e1c:	4c0a      	ldr	r4, [pc, #40]	; (8002e48 <LoopForever+0x16>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2a:	f003 fecb 	bl	8006bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2e:	f7ff fbbd 	bl	80025ac <main>

08002e32 <LoopForever>:

LoopForever:
    b LoopForever
 8002e32:	e7fe      	b.n	8002e32 <LoopForever>
   ldr   r0, =_estack
 8002e34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e40:	0800a918 	.word	0x0800a918
  ldr r2, =_sbss
 8002e44:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002e48:	20000420 	.word	0x20000420

08002e4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC1_COMP_IRQHandler>
	...

08002e50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_Init+0x3c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_Init+0x3c>)
 8002e62:	2140      	movs	r1, #64	; 0x40
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f000 f811 	bl	8002e90 <HAL_InitTick>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e001      	b.n	8002e7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e7a:	f7ff fe45 	bl	8002b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b002      	add	sp, #8
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_InitTick+0x5c>)
 8002e9a:	681c      	ldr	r4, [r3, #0]
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_InitTick+0x60>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	23fa      	movs	r3, #250	; 0xfa
 8002ea4:	0098      	lsls	r0, r3, #2
 8002ea6:	f7fd f94b 	bl	8000140 <__udivsi3>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	0019      	movs	r1, r3
 8002eae:	0020      	movs	r0, r4
 8002eb0:	f7fd f946 	bl	8000140 <__udivsi3>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f905 	bl	80030c6 <HAL_SYSTICK_Config>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00f      	b.n	8002ee4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d80b      	bhi.n	8002ee2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	425b      	negs	r3, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f8e2 	bl	800309c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_InitTick+0x64>)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b003      	add	sp, #12
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_IncTick+0x1c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	001a      	movs	r2, r3
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x20>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	18d2      	adds	r2, r2, r3
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_IncTick+0x20>)
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000008 	.word	0x20000008
 8002f18:	200002d0 	.word	0x200002d0

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_GetTick+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	200002d0 	.word	0x200002d0

08002f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_Delay+0x44>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	001a      	movs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	f7ff ffe0 	bl	8002f1c <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d8f7      	bhi.n	8002f58 <HAL_Delay+0x28>
  {
  }
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	20000008 	.word	0x20000008

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	0002      	movs	r2, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	1dfb      	adds	r3, r7, #7
 8002f84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8c:	d828      	bhi.n	8002fe0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <__NVIC_SetPriority+0xd4>)
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	33c0      	adds	r3, #192	; 0xc0
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	589b      	ldr	r3, [r3, r2]
 8002f9e:	1dfa      	adds	r2, r7, #7
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	00d2      	lsls	r2, r2, #3
 8002faa:	21ff      	movs	r1, #255	; 0xff
 8002fac:	4091      	lsls	r1, r2
 8002fae:	000a      	movs	r2, r1
 8002fb0:	43d2      	mvns	r2, r2
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	4003      	ands	r3, r0
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fcc:	481f      	ldr	r0, [pc, #124]	; (800304c <__NVIC_SetPriority+0xd4>)
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	33c0      	adds	r3, #192	; 0xc0
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fde:	e031      	b.n	8003044 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <__NVIC_SetPriority+0xd8>)
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	230f      	movs	r3, #15
 8002fea:	400b      	ands	r3, r1
 8002fec:	3b08      	subs	r3, #8
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	3306      	adds	r3, #6
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	18d3      	adds	r3, r2, r3
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1dfa      	adds	r2, r7, #7
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	0011      	movs	r1, r2
 8003000:	2203      	movs	r2, #3
 8003002:	400a      	ands	r2, r1
 8003004:	00d2      	lsls	r2, r2, #3
 8003006:	21ff      	movs	r1, #255	; 0xff
 8003008:	4091      	lsls	r1, r2
 800300a:	000a      	movs	r2, r1
 800300c:	43d2      	mvns	r2, r2
 800300e:	401a      	ands	r2, r3
 8003010:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	401a      	ands	r2, r3
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	2303      	movs	r3, #3
 8003022:	4003      	ands	r3, r0
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003028:	4809      	ldr	r0, [pc, #36]	; (8003050 <__NVIC_SetPriority+0xd8>)
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	001c      	movs	r4, r3
 8003030:	230f      	movs	r3, #15
 8003032:	4023      	ands	r3, r4
 8003034:	3b08      	subs	r3, #8
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	430a      	orrs	r2, r1
 800303a:	3306      	adds	r3, #6
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	18c3      	adds	r3, r0, r3
 8003040:	3304      	adds	r3, #4
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b003      	add	sp, #12
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1e5a      	subs	r2, r3, #1
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	045b      	lsls	r3, r3, #17
 8003064:	429a      	cmp	r2, r3
 8003066:	d301      	bcc.n	800306c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003068:	2301      	movs	r3, #1
 800306a:	e010      	b.n	800308e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <SysTick_Config+0x44>)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	3a01      	subs	r2, #1
 8003072:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003074:	2301      	movs	r3, #1
 8003076:	425b      	negs	r3, r3
 8003078:	2103      	movs	r1, #3
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff ff7c 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <SysTick_Config+0x44>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <SysTick_Config+0x44>)
 8003088:	2207      	movs	r2, #7
 800308a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800308c:	2300      	movs	r3, #0
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b002      	add	sp, #8
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	e000e010 	.word	0xe000e010

0800309c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	210f      	movs	r1, #15
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	1c02      	adds	r2, r0, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ffbf 	bl	8003054 <SysTick_Config>
 80030d6:	0003      	movs	r3, r0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80030f6:	e155      	b.n	80033a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4091      	lsls	r1, r2
 8003102:	000a      	movs	r2, r1
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d100      	bne.n	8003110 <HAL_GPIO_Init+0x30>
 800310e:	e146      	b.n	800339e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2203      	movs	r2, #3
 8003116:	4013      	ands	r3, r2
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	409a      	lsls	r2, r3
 8003136:	0013      	movs	r3, r2
 8003138:	43da      	mvns	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	43da      	mvns	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	2201      	movs	r2, #1
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	4013      	ands	r3, r2
 8003192:	2b03      	cmp	r3, #3
 8003194:	d017      	beq.n	80031c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	409a      	lsls	r2, r3
 80031a4:	0013      	movs	r3, r2
 80031a6:	43da      	mvns	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	0013      	movs	r3, r2
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2203      	movs	r2, #3
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d123      	bne.n	800321a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	58d3      	ldr	r3, [r2, r3]
 80031de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2207      	movs	r2, #7
 80031e4:	4013      	ands	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	409a      	lsls	r2, r3
 80031ec:	0013      	movs	r3, r2
 80031ee:	43da      	mvns	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2107      	movs	r1, #7
 80031fe:	400b      	ands	r3, r1
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	409a      	lsls	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	401a      	ands	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	0013      	movs	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	23c0      	movs	r3, #192	; 0xc0
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	4013      	ands	r3, r2
 8003258:	d100      	bne.n	800325c <HAL_GPIO_Init+0x17c>
 800325a:	e0a0      	b.n	800339e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_GPIO_Init+0x2dc>)
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_GPIO_Init+0x2dc>)
 8003262:	2101      	movs	r1, #1
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003268:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_GPIO_Init+0x2e0>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2203      	movs	r2, #3
 800327a:	4013      	ands	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	409a      	lsls	r2, r3
 8003282:	0013      	movs	r3, r2
 8003284:	43da      	mvns	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	23a0      	movs	r3, #160	; 0xa0
 8003290:	05db      	lsls	r3, r3, #23
 8003292:	429a      	cmp	r2, r3
 8003294:	d01f      	beq.n	80032d6 <HAL_GPIO_Init+0x1f6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_GPIO_Init+0x2e4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x1f2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a49      	ldr	r2, [pc, #292]	; (80033c8 <HAL_GPIO_Init+0x2e8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x1ee>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a48      	ldr	r2, [pc, #288]	; (80033cc <HAL_GPIO_Init+0x2ec>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x1ea>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a47      	ldr	r2, [pc, #284]	; (80033d0 <HAL_GPIO_Init+0x2f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x1e6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_GPIO_Init+0x2f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x1e2>
 80032be:	2305      	movs	r3, #5
 80032c0:	e00a      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_Init+0x1f8>
 80032d6:	2300      	movs	r3, #0
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	2103      	movs	r1, #3
 80032dc:	400a      	ands	r2, r1
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e8:	4935      	ldr	r1, [pc, #212]	; (80033c0 <HAL_GPIO_Init+0x2e0>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	3302      	adds	r3, #2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f6:	4b38      	ldr	r3, [pc, #224]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43da      	mvns	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	035b      	lsls	r3, r3, #13
 800330e:	4013      	ands	r3, r2
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43da      	mvns	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	039b      	lsls	r3, r3, #14
 8003338:	4013      	ands	r3, r2
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43da      	mvns	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	029b      	lsls	r3, r3, #10
 8003362:	4013      	ands	r3, r2
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	4013      	ands	r3, r2
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_GPIO_Init+0x2f8>)
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	40da      	lsrs	r2, r3
 80033ac:	1e13      	subs	r3, r2, #0
 80033ae:	d000      	beq.n	80033b2 <HAL_GPIO_Init+0x2d2>
 80033b0:	e6a2      	b.n	80030f8 <HAL_GPIO_Init+0x18>
  }
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b006      	add	sp, #24
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40010000 	.word	0x40010000
 80033c4:	50000400 	.word	0x50000400
 80033c8:	50000800 	.word	0x50000800
 80033cc:	50000c00 	.word	0x50000c00
 80033d0:	50001000 	.word	0x50001000
 80033d4:	50001c00 	.word	0x50001c00
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e082      	b.n	80034f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2241      	movs	r2, #65	; 0x41
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff fb93 	bl	8002b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2241      	movs	r2, #65	; 0x41
 800340e:	2124      	movs	r1, #36	; 0x24
 8003410:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	438a      	bics	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4934      	ldr	r1, [pc, #208]	; (80034fc <HAL_I2C_Init+0x120>)
 800342c:	400a      	ands	r2, r1
 800342e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4931      	ldr	r1, [pc, #196]	; (8003500 <HAL_I2C_Init+0x124>)
 800343c:	400a      	ands	r2, r1
 800343e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d108      	bne.n	800345a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	0209      	lsls	r1, r1, #8
 8003454:	430a      	orrs	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e007      	b.n	800346a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2184      	movs	r1, #132	; 0x84
 8003464:	0209      	lsls	r1, r1, #8
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d104      	bne.n	800347c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	491f      	ldr	r1, [pc, #124]	; (8003504 <HAL_I2C_Init+0x128>)
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	491a      	ldr	r1, [pc, #104]	; (8003500 <HAL_I2C_Init+0x124>)
 8003498:	400a      	ands	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69d9      	ldr	r1, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2241      	movs	r2, #65	; 0x41
 80034e0:	2120      	movs	r1, #32
 80034e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2242      	movs	r2, #66	; 0x42
 80034ee:	2100      	movs	r1, #0
 80034f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	f0ffffff 	.word	0xf0ffffff
 8003500:	ffff7fff 	.word	0xffff7fff
 8003504:	02008000 	.word	0x02008000

08003508 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	0008      	movs	r0, r1
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	0019      	movs	r1, r3
 8003516:	230a      	movs	r3, #10
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	1c02      	adds	r2, r0, #0
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	2308      	movs	r3, #8
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	1c0a      	adds	r2, r1, #0
 8003524:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2241      	movs	r2, #65	; 0x41
 800352a:	5c9b      	ldrb	r3, [r3, r2]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b20      	cmp	r3, #32
 8003530:	d000      	beq.n	8003534 <HAL_I2C_Master_Transmit+0x2c>
 8003532:	e0e7      	b.n	8003704 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	5c9b      	ldrb	r3, [r3, r2]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Master_Transmit+0x3a>
 800353e:	2302      	movs	r3, #2
 8003540:	e0e1      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2240      	movs	r2, #64	; 0x40
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800354a:	f7ff fce7 	bl	8002f1c <HAL_GetTick>
 800354e:	0003      	movs	r3, r0
 8003550:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	0219      	lsls	r1, r3, #8
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2319      	movs	r3, #25
 800355e:	2201      	movs	r2, #1
 8003560:	f000 fa04 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2241      	movs	r2, #65	; 0x41
 8003570:	2121      	movs	r1, #33	; 0x21
 8003572:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2242      	movs	r2, #66	; 0x42
 8003578:	2110      	movs	r1, #16
 800357a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2208      	movs	r2, #8
 800358c:	18ba      	adds	r2, r7, r2
 800358e:	8812      	ldrh	r2, [r2, #0]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2bff      	cmp	r3, #255	; 0xff
 80035a0:	d911      	bls.n	80035c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	045c      	lsls	r4, r3, #17
 80035b2:	230a      	movs	r3, #10
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	8819      	ldrh	r1, [r3, #0]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	4b55      	ldr	r3, [pc, #340]	; (8003710 <HAL_I2C_Master_Transmit+0x208>)
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0023      	movs	r3, r4
 80035c0:	f000 fc2e 	bl	8003e20 <I2C_TransferConfig>
 80035c4:	e075      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	049c      	lsls	r4, r3, #18
 80035da:	230a      	movs	r3, #10
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	8819      	ldrh	r1, [r3, #0]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <HAL_I2C_Master_Transmit+0x208>)
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	0023      	movs	r3, r4
 80035e8:	f000 fc1a 	bl	8003e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035ec:	e061      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fa07 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e081      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03a      	beq.n	80036b2 <HAL_I2C_Master_Transmit+0x1aa>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d136      	bne.n	80036b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	0013      	movs	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	f000 f98b 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e053      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2bff      	cmp	r3, #255	; 0xff
 8003666:	d911      	bls.n	800368c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	b2da      	uxtb	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	045c      	lsls	r4, r3, #17
 8003678:	230a      	movs	r3, #10
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	8819      	ldrh	r1, [r3, #0]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	0023      	movs	r3, r4
 8003686:	f000 fbcb 	bl	8003e20 <I2C_TransferConfig>
 800368a:	e012      	b.n	80036b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	049c      	lsls	r4, r3, #18
 80036a0:	230a      	movs	r3, #10
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	8819      	ldrh	r1, [r3, #0]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	0023      	movs	r3, r4
 80036ae:	f000 fbb7 	bl	8003e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d198      	bne.n	80035ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 f9e6 	bl	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2220      	movs	r2, #32
 80036d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	490c      	ldr	r1, [pc, #48]	; (8003714 <HAL_I2C_Master_Transmit+0x20c>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2241      	movs	r2, #65	; 0x41
 80036ec:	2120      	movs	r1, #32
 80036ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2242      	movs	r2, #66	; 0x42
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b007      	add	sp, #28
 800370c:	bd90      	pop	{r4, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	80002000 	.word	0x80002000
 8003714:	fe00e800 	.word	0xfe00e800

08003718 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	0008      	movs	r0, r1
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	0019      	movs	r1, r3
 8003726:	230a      	movs	r3, #10
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	1c02      	adds	r2, r0, #0
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	2308      	movs	r3, #8
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	1c0a      	adds	r2, r1, #0
 8003734:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2241      	movs	r2, #65	; 0x41
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	d000      	beq.n	8003744 <HAL_I2C_Master_Receive+0x2c>
 8003742:	e0e8      	b.n	8003916 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	; 0x40
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Master_Receive+0x3a>
 800374e:	2302      	movs	r3, #2
 8003750:	e0e2      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800375a:	f7ff fbdf 	bl	8002f1c <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	0219      	lsls	r1, r3, #8
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2319      	movs	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	f000 f8fc 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 8003774:	1e03      	subs	r3, r0, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0cd      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2241      	movs	r2, #65	; 0x41
 8003780:	2122      	movs	r1, #34	; 0x22
 8003782:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2242      	movs	r2, #66	; 0x42
 8003788:	2110      	movs	r1, #16
 800378a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2208      	movs	r2, #8
 800379c:	18ba      	adds	r2, r7, r2
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	; 0xff
 80037b0:	d911      	bls.n	80037d6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	045c      	lsls	r4, r3, #17
 80037c2:	230a      	movs	r3, #10
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	8819      	ldrh	r1, [r3, #0]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_I2C_Master_Receive+0x208>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	0023      	movs	r3, r4
 80037d0:	f000 fb26 	bl	8003e20 <I2C_TransferConfig>
 80037d4:	e076      	b.n	80038c4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	049c      	lsls	r4, r3, #18
 80037ea:	230a      	movs	r3, #10
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	8819      	ldrh	r1, [r3, #0]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_I2C_Master_Receive+0x208>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	0023      	movs	r3, r4
 80037f8:	f000 fb12 	bl	8003e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037fc:	e062      	b.n	80038c4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 f989 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e082      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d03a      	beq.n	80038c4 <HAL_I2C_Master_Receive+0x1ac>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d136      	bne.n	80038c4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	0013      	movs	r3, r2
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	f000 f882 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e053      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2bff      	cmp	r3, #255	; 0xff
 8003878:	d911      	bls.n	800389e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22ff      	movs	r2, #255	; 0xff
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	045c      	lsls	r4, r3, #17
 800388a:	230a      	movs	r3, #10
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	8819      	ldrh	r1, [r3, #0]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	0023      	movs	r3, r4
 8003898:	f000 fac2 	bl	8003e20 <I2C_TransferConfig>
 800389c:	e012      	b.n	80038c4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	049c      	lsls	r4, r3, #18
 80038b2:	230a      	movs	r3, #10
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	8819      	ldrh	r1, [r3, #0]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	0023      	movs	r3, r4
 80038c0:	f000 faae 	bl	8003e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d197      	bne.n	80037fe <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f8dd 	bl	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e01a      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2220      	movs	r2, #32
 80038e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	490b      	ldr	r1, [pc, #44]	; (8003924 <HAL_I2C_Master_Receive+0x20c>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2241      	movs	r2, #65	; 0x41
 80038fe:	2120      	movs	r1, #32
 8003900:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2242      	movs	r2, #66	; 0x42
 8003906:	2100      	movs	r1, #0
 8003908:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2240      	movs	r2, #64	; 0x40
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b007      	add	sp, #28
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	80002400 	.word	0x80002400
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	2b02      	cmp	r3, #2
 800393c:	d103      	bne.n	8003946 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2101      	movs	r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	619a      	str	r2, [r3, #24]
  }
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397c:	e030      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	d02d      	beq.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7ff faca 	bl	8002f1c <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d122      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	425a      	negs	r2, r3
 80039aa:	4153      	adcs	r3, r2
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	001a      	movs	r2, r3
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d113      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2220      	movs	r2, #32
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2241      	movs	r2, #65	; 0x41
 80039c8:	2120      	movs	r1, #32
 80039ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2242      	movs	r2, #66	; 0x42
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00f      	b.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	425a      	negs	r2, r3
 80039f0:	4153      	adcs	r3, r2
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	001a      	movs	r2, r3
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d0bf      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a14:	e032      	b.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f000 f8ff 	bl	8003c20 <I2C_IsErrorOccurred>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e030      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	d025      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7ff fa74 	bl	8002f1c <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11a      	bne.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d013      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	2220      	movs	r2, #32
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2241      	movs	r2, #65	; 0x41
 8003a64:	2120      	movs	r1, #32
 8003a66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2242      	movs	r2, #66	; 0x42
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e007      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2202      	movs	r2, #2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d1c5      	bne.n	8003a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	e02f      	b.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f8b9 	bl	8003c20 <I2C_IsErrorOccurred>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e02d      	b.n	8003b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7ff fa31 	bl	8002f1c <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11a      	bne.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d013      	beq.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	2220      	movs	r2, #32
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2241      	movs	r2, #65	; 0x41
 8003aea:	2120      	movs	r1, #32
 8003aec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2242      	movs	r2, #66	; 0x42
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d1c8      	bne.n	8003aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b28:	e06b      	b.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 f875 	bl	8003c20 <I2C_IsErrorOccurred>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e069      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2220      	movs	r2, #32
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d138      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2204      	movs	r2, #4
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d105      	bne.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e055      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d107      	bne.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
 8003b82:	e002      	b.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	491f      	ldr	r1, [pc, #124]	; (8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2241      	movs	r2, #65	; 0x41
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2242      	movs	r2, #66	; 0x42
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2240      	movs	r2, #64	; 0x40
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e029      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7ff f9ad 	bl	8002f1c <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d116      	bne.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d00f      	beq.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	2220      	movs	r2, #32
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2241      	movs	r2, #65	; 0x41
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2240      	movs	r2, #64	; 0x40
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d18c      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	fe00e800 	.word	0xfe00e800

08003c20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b08b      	sub	sp, #44	; 0x2c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2327      	movs	r3, #39	; 0x27
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2210      	movs	r2, #16
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <I2C_IsErrorOccurred+0x2e>
 8003c4c:	e082      	b.n	8003d54 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c56:	e060      	b.n	8003d1a <I2C_IsErrorOccurred+0xfa>
 8003c58:	2427      	movs	r4, #39	; 0x27
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	193a      	adds	r2, r7, r4
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	d058      	beq.n	8003d1a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7ff f958 	bl	8002f1c <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d306      	bcc.n	8003c86 <I2C_IsErrorOccurred+0x66>
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	193a      	adds	r2, r7, r4
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d149      	bne.n	8003d1a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	01db      	lsls	r3, r3, #7
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c94:	2013      	movs	r0, #19
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	2142      	movs	r1, #66	; 0x42
 8003c9c:	5c52      	ldrb	r2, [r2, r1]
 8003c9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	401a      	ands	r2, r3
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d126      	bne.n	8003d02 <I2C_IsErrorOccurred+0xe2>
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	01db      	lsls	r3, r3, #7
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d021      	beq.n	8003d02 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d01d      	beq.n	8003d02 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	01c9      	lsls	r1, r1, #7
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cd8:	f7ff f920 	bl	8002f1c <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce0:	e00f      	b.n	8003d02 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ce2:	f7ff f91b 	bl	8002f1c <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b19      	cmp	r3, #25
 8003cee:	d908      	bls.n	8003d02 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cf8:	2327      	movs	r3, #39	; 0x27
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]

              break;
 8003d00:	e00b      	b.n	8003d1a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2127      	movs	r1, #39	; 0x27
 8003d0e:	187a      	adds	r2, r7, r1
 8003d10:	1879      	adds	r1, r7, r1
 8003d12:	7809      	ldrb	r1, [r1, #0]
 8003d14:	7011      	strb	r1, [r2, #0]
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d1e3      	bne.n	8003ce2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2220      	movs	r2, #32
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d004      	beq.n	8003d32 <I2C_IsErrorOccurred+0x112>
 8003d28:	2327      	movs	r3, #39	; 0x27
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d092      	beq.n	8003c58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d32:	2327      	movs	r3, #39	; 0x27
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2204      	movs	r2, #4
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d4c:	2327      	movs	r3, #39	; 0x27
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00c      	beq.n	8003d80 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	0052      	lsls	r2, r2, #1
 8003d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d78:	2327      	movs	r3, #39	; 0x27
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4013      	ands	r3, r2
 8003d88:	d00c      	beq.n	8003da4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	00d2      	lsls	r2, r2, #3
 8003d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9c:	2327      	movs	r3, #39	; 0x27
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4013      	ands	r3, r2
 8003dac:	d00c      	beq.n	8003dc8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2202      	movs	r2, #2
 8003db2:	4313      	orrs	r3, r2
 8003db4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dc0:	2327      	movs	r3, #39	; 0x27
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003dc8:	2327      	movs	r3, #39	; 0x27
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01d      	beq.n	8003e0e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fda7 	bl	8003928 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	490d      	ldr	r1, [pc, #52]	; (8003e1c <I2C_IsErrorOccurred+0x1fc>)
 8003de6:	400a      	ands	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2241      	movs	r2, #65	; 0x41
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2242      	movs	r2, #66	; 0x42
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2240      	movs	r2, #64	; 0x40
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e0e:	2327      	movs	r3, #39	; 0x27
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	781b      	ldrb	r3, [r3, #0]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b00b      	add	sp, #44	; 0x2c
 8003e1a:	bd90      	pop	{r4, r7, pc}
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	0008      	movs	r0, r1
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	240a      	movs	r4, #10
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	1c02      	adds	r2, r0, #0
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	2009      	movs	r0, #9
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	1c0a      	adds	r2, r1, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	059b      	lsls	r3, r3, #22
 8003e44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e46:	183b      	adds	r3, r7, r0
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	0419      	lsls	r1, r3, #16
 8003e4c:	23ff      	movs	r3, #255	; 0xff
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e6a:	0d51      	lsrs	r1, r2, #21
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	400a      	ands	r2, r1
 8003e72:	4907      	ldr	r1, [pc, #28]	; (8003e90 <I2C_TransferConfig+0x70>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	43d2      	mvns	r2, r2
 8003e78:	401a      	ands	r2, r3
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b007      	add	sp, #28
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	03ff63ff 	.word	0x03ff63ff

08003e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2241      	movs	r2, #65	; 0x41
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d138      	bne.n	8003f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2240      	movs	r2, #64	; 0x40
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e032      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2240      	movs	r2, #64	; 0x40
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2241      	movs	r2, #65	; 0x41
 8003ec4:	2124      	movs	r1, #36	; 0x24
 8003ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4911      	ldr	r1, [pc, #68]	; (8003f28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2241      	movs	r2, #65	; 0x41
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b002      	add	sp, #8
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	ffffefff 	.word	0xffffefff

08003f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2241      	movs	r2, #65	; 0x41
 8003f3a:	5c9b      	ldrb	r3, [r3, r2]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d139      	bne.n	8003fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2240      	movs	r2, #64	; 0x40
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e033      	b.n	8003fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2241      	movs	r2, #65	; 0x41
 8003f5c:	2124      	movs	r1, #36	; 0x24
 8003f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2241      	movs	r2, #65	; 0x41
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	fffff0ff 	.word	0xfffff0ff

08003fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f000 fbbf 	bl	8004756 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd8:	4bc9      	ldr	r3, [pc, #804]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	220c      	movs	r2, #12
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fe2:	4bc7      	ldr	r3, [pc, #796]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <HAL_RCC_OscConfig+0x36>
 8003ff8:	e07e      	b.n	80040f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d007      	beq.n	8004010 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x68>
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	429a      	cmp	r2, r3
 800400e:	d10d      	bne.n	800402c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4bbb      	ldr	r3, [pc, #748]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	4013      	ands	r3, r2
 800401a:	d100      	bne.n	800401e <HAL_RCC_OscConfig+0x5a>
 800401c:	e06b      	b.n	80040f6 <HAL_RCC_OscConfig+0x132>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d167      	bne.n	80040f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f000 fb95 	bl	8004756 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	025b      	lsls	r3, r3, #9
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x84>
 8004038:	4bb1      	ldr	r3, [pc, #708]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4bb0      	ldr	r3, [pc, #704]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	0249      	lsls	r1, r1, #9
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e027      	b.n	8004098 <HAL_RCC_OscConfig+0xd4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	23a0      	movs	r3, #160	; 0xa0
 800404e:	02db      	lsls	r3, r3, #11
 8004050:	429a      	cmp	r2, r3
 8004052:	d10e      	bne.n	8004072 <HAL_RCC_OscConfig+0xae>
 8004054:	4baa      	ldr	r3, [pc, #680]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4ba9      	ldr	r3, [pc, #676]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	02c9      	lsls	r1, r1, #11
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	4ba7      	ldr	r3, [pc, #668]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4ba6      	ldr	r3, [pc, #664]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	0249      	lsls	r1, r1, #9
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e012      	b.n	8004098 <HAL_RCC_OscConfig+0xd4>
 8004072:	4ba3      	ldr	r3, [pc, #652]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4ba2      	ldr	r3, [pc, #648]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004078:	49a2      	ldr	r1, [pc, #648]	; (8004304 <HAL_RCC_OscConfig+0x340>)
 800407a:	400a      	ands	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	4ba0      	ldr	r3, [pc, #640]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	025b      	lsls	r3, r3, #9
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4b9c      	ldr	r3, [pc, #624]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b9b      	ldr	r3, [pc, #620]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004092:	499d      	ldr	r1, [pc, #628]	; (8004308 <HAL_RCC_OscConfig+0x344>)
 8004094:	400a      	ands	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe ff3c 	bl	8002f1c <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a8:	e009      	b.n	80040be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040aa:	f7fe ff37 	bl	8002f1c <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b64      	cmp	r3, #100	; 0x64
 80040b6:	d902      	bls.n	80040be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	f000 fb4c 	bl	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040be:	4b90      	ldr	r3, [pc, #576]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0ef      	beq.n	80040aa <HAL_RCC_OscConfig+0xe6>
 80040ca:	e015      	b.n	80040f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe ff26 	bl	8002f1c <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d6:	f7fe ff21 	bl	8002f1c <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b64      	cmp	r3, #100	; 0x64
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e336      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040e8:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	4013      	ands	r3, r2
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x112>
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2202      	movs	r2, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	d100      	bne.n	8004104 <HAL_RCC_OscConfig+0x140>
 8004102:	e099      	b.n	8004238 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2220      	movs	r2, #32
 800410e:	4013      	ands	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004112:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4b7a      	ldr	r3, [pc, #488]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004118:	2120      	movs	r1, #32
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	2220      	movs	r2, #32
 8004122:	4393      	bics	r3, r2
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d005      	beq.n	8004138 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d13e      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1ec>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d13b      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004138:	4b71      	ldr	r3, [pc, #452]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	4013      	ands	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_RCC_OscConfig+0x188>
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e304      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a6e      	ldr	r2, [pc, #440]	; (800430c <HAL_RCC_OscConfig+0x348>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	4b68      	ldr	r3, [pc, #416]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2209      	movs	r2, #9
 8004168:	4393      	bics	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	4b64      	ldr	r3, [pc, #400]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004174:	f000 fc42 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8004178:	0001      	movs	r1, r0
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	220f      	movs	r2, #15
 8004182:	4013      	ands	r3, r2
 8004184:	4a62      	ldr	r2, [pc, #392]	; (8004310 <HAL_RCC_OscConfig+0x34c>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	000a      	movs	r2, r1
 800418a:	40da      	lsrs	r2, r3
 800418c:	4b61      	ldr	r3, [pc, #388]	; (8004314 <HAL_RCC_OscConfig+0x350>)
 800418e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004190:	4b61      	ldr	r3, [pc, #388]	; (8004318 <HAL_RCC_OscConfig+0x354>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2513      	movs	r5, #19
 8004196:	197c      	adds	r4, r7, r5
 8004198:	0018      	movs	r0, r3
 800419a:	f7fe fe79 	bl	8002e90 <HAL_InitTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80041a2:	197b      	adds	r3, r7, r5
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d046      	beq.n	8004238 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80041aa:	197b      	adds	r3, r7, r5
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	e2d2      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d027      	beq.n	8004206 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80041b6:	4b52      	ldr	r3, [pc, #328]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2209      	movs	r2, #9
 80041bc:	4393      	bics	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe fea8 	bl	8002f1c <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d2:	f7fe fea3 	bl	8002f1c <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e2b8      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e4:	4b46      	ldr	r3, [pc, #280]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2204      	movs	r2, #4
 80041ea:	4013      	ands	r3, r2
 80041ec:	d0f1      	beq.n	80041d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4a46      	ldr	r2, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0x348>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	021a      	lsls	r2, r3, #8
 80041fe:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	e018      	b.n	8004238 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004206:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800420c:	2101      	movs	r1, #1
 800420e:	438a      	bics	r2, r1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fe83 	bl	8002f1c <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7fe fe7e 	bl	8002f1c <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e293      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800422e:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2204      	movs	r2, #4
 8004234:	4013      	ands	r3, r2
 8004236:	d1f1      	bne.n	800421c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2210      	movs	r2, #16
 800423e:	4013      	ands	r3, r2
 8004240:	d100      	bne.n	8004244 <HAL_RCC_OscConfig+0x280>
 8004242:	e0a2      	b.n	800438a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d140      	bne.n	80042cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d005      	beq.n	8004262 <HAL_RCC_OscConfig+0x29e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e279      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	4a2d      	ldr	r2, [pc, #180]	; (800431c <HAL_RCC_OscConfig+0x358>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004270:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	0a19      	lsrs	r1, r3, #8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	061a      	lsls	r2, r3, #24
 8004284:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	0b5b      	lsrs	r3, r3, #13
 8004290:	3301      	adds	r3, #1
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	0212      	lsls	r2, r2, #8
 8004296:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	210f      	movs	r1, #15
 80042a0:	400b      	ands	r3, r1
 80042a2:	491b      	ldr	r1, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x34c>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_OscConfig+0x350>)
 80042aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_RCC_OscConfig+0x354>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2513      	movs	r5, #19
 80042b2:	197c      	adds	r4, r7, r5
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fe fdeb 	bl	8002e90 <HAL_InitTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d061      	beq.n	800438a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80042c6:	197b      	adds	r3, r7, r5
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	e244      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d040      	beq.n	8004356 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCC_OscConfig+0x33c>)
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	0049      	lsls	r1, r1, #1
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fe fe1b 	bl	8002f1c <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042ea:	e019      	b.n	8004320 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ec:	f7fe fe16 	bl	8002f1c <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d912      	bls.n	8004320 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e22b      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	40021000 	.word	0x40021000
 8004304:	fffeffff 	.word	0xfffeffff
 8004308:	fffbffff 	.word	0xfffbffff
 800430c:	ffffe0ff 	.word	0xffffe0ff
 8004310:	0800a474 	.word	0x0800a474
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004
 800431c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004320:	4bca      	ldr	r3, [pc, #808]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d0df      	beq.n	80042ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800432c:	4bc7      	ldr	r3, [pc, #796]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4ac7      	ldr	r2, [pc, #796]	; (8004650 <HAL_RCC_OscConfig+0x68c>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433a:	4bc4      	ldr	r3, [pc, #784]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004340:	4bc2      	ldr	r3, [pc, #776]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	0a19      	lsrs	r1, r3, #8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	061a      	lsls	r2, r3, #24
 800434e:	4bbf      	ldr	r3, [pc, #764]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	e019      	b.n	800438a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004356:	4bbd      	ldr	r3, [pc, #756]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4bbc      	ldr	r3, [pc, #752]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800435c:	49bd      	ldr	r1, [pc, #756]	; (8004654 <HAL_RCC_OscConfig+0x690>)
 800435e:	400a      	ands	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe fddb 	bl	8002f1c <HAL_GetTick>
 8004366:	0003      	movs	r3, r0
 8004368:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800436c:	f7fe fdd6 	bl	8002f1c <HAL_GetTick>
 8004370:	0002      	movs	r2, r0
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1eb      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800437e:	4bb3      	ldr	r3, [pc, #716]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2208      	movs	r2, #8
 8004390:	4013      	ands	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d019      	beq.n	80043d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439c:	4bab      	ldr	r3, [pc, #684]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800439e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a0:	4baa      	ldr	r3, [pc, #680]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80043a2:	2101      	movs	r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fe fdb8 	bl	8002f1c <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe fdb3 	bl	8002f1c <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1c8      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043c4:	4ba1      	ldr	r3, [pc, #644]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	2202      	movs	r2, #2
 80043ca:	4013      	ands	r3, r2
 80043cc:	d0f1      	beq.n	80043b2 <HAL_RCC_OscConfig+0x3ee>
 80043ce:	e018      	b.n	8004402 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d0:	4b9e      	ldr	r3, [pc, #632]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80043d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043d4:	4b9d      	ldr	r3, [pc, #628]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	438a      	bics	r2, r1
 80043da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043dc:	f7fe fd9e 	bl	8002f1c <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e6:	f7fe fd99 	bl	8002f1c <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1ae      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043f8:	4b94      	ldr	r3, [pc, #592]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d1f1      	bne.n	80043e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2204      	movs	r2, #4
 8004408:	4013      	ands	r3, r2
 800440a:	d100      	bne.n	800440e <HAL_RCC_OscConfig+0x44a>
 800440c:	e0ae      	b.n	800456c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2023      	movs	r0, #35	; 0x23
 8004410:	183b      	adds	r3, r7, r0
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004416:	4b8d      	ldr	r3, [pc, #564]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	055b      	lsls	r3, r3, #21
 800441e:	4013      	ands	r3, r2
 8004420:	d109      	bne.n	8004436 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	4b8a      	ldr	r3, [pc, #552]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	0549      	lsls	r1, r1, #21
 800442c:	430a      	orrs	r2, r1
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004430:	183b      	adds	r3, r7, r0
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCC_OscConfig+0x694>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d11a      	bne.n	8004478 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b85      	ldr	r3, [pc, #532]	; (8004658 <HAL_RCC_OscConfig+0x694>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b84      	ldr	r3, [pc, #528]	; (8004658 <HAL_RCC_OscConfig+0x694>)
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	0049      	lsls	r1, r1, #1
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7fe fd64 	bl	8002f1c <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fe fd5f 	bl	8002f1c <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e174      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <HAL_RCC_OscConfig+0x694>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4013      	ands	r3, r2
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x4d0>
 8004484:	4b71      	ldr	r3, [pc, #452]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004488:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0049      	lsls	r1, r1, #1
 800448e:	430a      	orrs	r2, r1
 8004490:	651a      	str	r2, [r3, #80]	; 0x50
 8004492:	e031      	b.n	80044f8 <HAL_RCC_OscConfig+0x534>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10c      	bne.n	80044b6 <HAL_RCC_OscConfig+0x4f2>
 800449c:	4b6b      	ldr	r3, [pc, #428]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800449e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a0:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044a2:	496c      	ldr	r1, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x690>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	651a      	str	r2, [r3, #80]	; 0x50
 80044a8:	4b68      	ldr	r3, [pc, #416]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ac:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044ae:	496b      	ldr	r1, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x698>)
 80044b0:	400a      	ands	r2, r1
 80044b2:	651a      	str	r2, [r3, #80]	; 0x50
 80044b4:	e020      	b.n	80044f8 <HAL_RCC_OscConfig+0x534>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	23a0      	movs	r3, #160	; 0xa0
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10e      	bne.n	80044e0 <HAL_RCC_OscConfig+0x51c>
 80044c2:	4b62      	ldr	r3, [pc, #392]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044c6:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	00c9      	lsls	r1, r1, #3
 80044cc:	430a      	orrs	r2, r1
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044d4:	4b5d      	ldr	r3, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	0049      	lsls	r1, r1, #1
 80044da:	430a      	orrs	r2, r1
 80044dc:	651a      	str	r2, [r3, #80]	; 0x50
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0x534>
 80044e0:	4b5a      	ldr	r3, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044e4:	4b59      	ldr	r3, [pc, #356]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044e6:	495b      	ldr	r1, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x690>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	651a      	str	r2, [r3, #80]	; 0x50
 80044ec:	4b57      	ldr	r3, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044f0:	4b56      	ldr	r3, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80044f2:	495a      	ldr	r1, [pc, #360]	; (800465c <HAL_RCC_OscConfig+0x698>)
 80044f4:	400a      	ands	r2, r1
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fe fd0c 	bl	8002f1c <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004508:	e009      	b.n	800451e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fe fd07 	bl	8002f1c <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	4a52      	ldr	r2, [pc, #328]	; (8004660 <HAL_RCC_OscConfig+0x69c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e11b      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451e:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d0ef      	beq.n	800450a <HAL_RCC_OscConfig+0x546>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452c:	f7fe fcf6 	bl	8002f1c <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004534:	e009      	b.n	800454a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe fcf1 	bl	8002f1c <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	4a47      	ldr	r2, [pc, #284]	; (8004660 <HAL_RCC_OscConfig+0x69c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e105      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800454a:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800454c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d1ef      	bne.n	8004536 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004556:	2323      	movs	r3, #35	; 0x23
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004564:	4b39      	ldr	r3, [pc, #228]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004566:	493f      	ldr	r1, [pc, #252]	; (8004664 <HAL_RCC_OscConfig+0x6a0>)
 8004568:	400a      	ands	r2, r1
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2220      	movs	r2, #32
 8004572:	4013      	ands	r3, r2
 8004574:	d049      	beq.n	800460a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d026      	beq.n	80045cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b32      	ldr	r3, [pc, #200]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004584:	2101      	movs	r1, #1
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004590:	2101      	movs	r1, #1
 8004592:	430a      	orrs	r2, r1
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
 8004596:	4b34      	ldr	r3, [pc, #208]	; (8004668 <HAL_RCC_OscConfig+0x6a4>)
 8004598:	6a1a      	ldr	r2, [r3, #32]
 800459a:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x6a4>)
 800459c:	2180      	movs	r1, #128	; 0x80
 800459e:	0189      	lsls	r1, r1, #6
 80045a0:	430a      	orrs	r2, r1
 80045a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fe fcba 	bl	8002f1c <HAL_GetTick>
 80045a8:	0003      	movs	r3, r0
 80045aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ae:	f7fe fcb5 	bl	8002f1c <HAL_GetTick>
 80045b2:	0002      	movs	r2, r0
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0ca      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2202      	movs	r2, #2
 80045c6:	4013      	ands	r3, r2
 80045c8:	d0f1      	beq.n	80045ae <HAL_RCC_OscConfig+0x5ea>
 80045ca:	e01e      	b.n	800460a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b1e      	ldr	r3, [pc, #120]	; (800464c <HAL_RCC_OscConfig+0x688>)
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <HAL_RCC_OscConfig+0x6a4>)
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <HAL_RCC_OscConfig+0x6a4>)
 80045de:	4923      	ldr	r1, [pc, #140]	; (800466c <HAL_RCC_OscConfig+0x6a8>)
 80045e0:	400a      	ands	r2, r1
 80045e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fe fc9a 	bl	8002f1c <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ee:	f7fe fc95 	bl	8002f1c <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0aa      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d1f1      	bne.n	80045ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d100      	bne.n	8004614 <HAL_RCC_OscConfig+0x650>
 8004612:	e09f      	b.n	8004754 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d100      	bne.n	800461c <HAL_RCC_OscConfig+0x658>
 800461a:	e078      	b.n	800470e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d159      	bne.n	80046d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x688>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCC_OscConfig+0x688>)
 800462a:	4911      	ldr	r1, [pc, #68]	; (8004670 <HAL_RCC_OscConfig+0x6ac>)
 800462c:	400a      	ands	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fe fc74 	bl	8002f1c <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004638:	e01c      	b.n	8004674 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800463a:	f7fe fc6f 	bl	8002f1c <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d915      	bls.n	8004674 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e084      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
 800464c:	40021000 	.word	0x40021000
 8004650:	ffff1fff 	.word	0xffff1fff
 8004654:	fffffeff 	.word	0xfffffeff
 8004658:	40007000 	.word	0x40007000
 800465c:	fffffbff 	.word	0xfffffbff
 8004660:	00001388 	.word	0x00001388
 8004664:	efffffff 	.word	0xefffffff
 8004668:	40010000 	.word	0x40010000
 800466c:	ffffdfff 	.word	0xffffdfff
 8004670:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	049b      	lsls	r3, r3, #18
 800467c:	4013      	ands	r3, r2
 800467e:	d1dc      	bne.n	800463a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a37      	ldr	r2, [pc, #220]	; (8004764 <HAL_RCC_OscConfig+0x7a0>)
 8004686:	4013      	ands	r3, r2
 8004688:	0019      	movs	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	431a      	orrs	r2, r3
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	0449      	lsls	r1, r1, #17
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fe fc35 	bl	8002f1c <HAL_GetTick>
 80046b2:	0003      	movs	r3, r0
 80046b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fe fc30 	bl	8002f1c <HAL_GetTick>
 80046bc:	0002      	movs	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e045      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	049b      	lsls	r3, r3, #18
 80046d2:	4013      	ands	r3, r2
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x6f4>
 80046d6:	e03d      	b.n	8004754 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 80046de:	4922      	ldr	r1, [pc, #136]	; (8004768 <HAL_RCC_OscConfig+0x7a4>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe fc1a 	bl	8002f1c <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fe fc15 	bl	8002f1c <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e02a      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	049b      	lsls	r3, r3, #18
 8004708:	4013      	ands	r3, r2
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x72a>
 800470c:	e022      	b.n	8004754 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e01d      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCC_OscConfig+0x79c>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	025b      	lsls	r3, r3, #9
 8004726:	401a      	ands	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d10f      	bne.n	8004750 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	23f0      	movs	r3, #240	; 0xf0
 8004734:	039b      	lsls	r3, r3, #14
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	23c0      	movs	r3, #192	; 0xc0
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	401a      	ands	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b00a      	add	sp, #40	; 0x28
 800475c:	bdb0      	pop	{r4, r5, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	ff02ffff 	.word	0xff02ffff
 8004768:	feffffff 	.word	0xfeffffff

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e128      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	4013      	ands	r3, r2
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d91e      	bls.n	80047cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b93      	ldr	r3, [pc, #588]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	4393      	bics	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	4b90      	ldr	r3, [pc, #576]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047a0:	f7fe fbbc 	bl	8002f1c <HAL_GetTick>
 80047a4:	0003      	movs	r3, r0
 80047a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a8:	e009      	b.n	80047be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047aa:	f7fe fbb7 	bl	8002f1c <HAL_GetTick>
 80047ae:	0002      	movs	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	4a8a      	ldr	r2, [pc, #552]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e109      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b87      	ldr	r3, [pc, #540]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1ee      	bne.n	80047aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2202      	movs	r2, #2
 80047d2:	4013      	ands	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d6:	4b83      	ldr	r3, [pc, #524]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	22f0      	movs	r2, #240	; 0xf0
 80047dc:	4393      	bics	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	4b7f      	ldr	r3, [pc, #508]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 80047e6:	430a      	orrs	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	4013      	ands	r3, r2
 80047f2:	d100      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
 80047f4:	e089      	b.n	800490a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fe:	4b79      	ldr	r3, [pc, #484]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	029b      	lsls	r3, r3, #10
 8004806:	4013      	ands	r3, r2
 8004808:	d120      	bne.n	800484c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0e1      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004816:	4b73      	ldr	r3, [pc, #460]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	049b      	lsls	r3, r3, #18
 800481e:	4013      	ands	r3, r2
 8004820:	d114      	bne.n	800484c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0d5      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d106      	bne.n	800483c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800482e:	4b6d      	ldr	r3, [pc, #436]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2204      	movs	r2, #4
 8004834:	4013      	ands	r3, r2
 8004836:	d109      	bne.n	800484c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0ca      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800483c:	4b69      	ldr	r3, [pc, #420]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0c2      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484c:	4b65      	ldr	r3, [pc, #404]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2203      	movs	r2, #3
 8004852:	4393      	bics	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4b62      	ldr	r3, [pc, #392]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 800485c:	430a      	orrs	r2, r1
 800485e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fe fb5c 	bl	8002f1c <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d111      	bne.n	8004894 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004870:	e009      	b.n	8004886 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004872:	f7fe fb53 	bl	8002f1c <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0a5      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004886:	4b57      	ldr	r3, [pc, #348]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	220c      	movs	r2, #12
 800488c:	4013      	ands	r3, r2
 800488e:	2b08      	cmp	r3, #8
 8004890:	d1ef      	bne.n	8004872 <HAL_RCC_ClockConfig+0x106>
 8004892:	e03a      	b.n	800490a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d111      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489c:	e009      	b.n	80048b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489e:	f7fe fb3d 	bl	8002f1c <HAL_GetTick>
 80048a2:	0002      	movs	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e08f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b2:	4b4c      	ldr	r3, [pc, #304]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	220c      	movs	r2, #12
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d1ef      	bne.n	800489e <HAL_RCC_ClockConfig+0x132>
 80048be:	e024      	b.n	800490a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11b      	bne.n	8004900 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c8:	e009      	b.n	80048de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ca:	f7fe fb27 	bl	8002f1c <HAL_GetTick>
 80048ce:	0002      	movs	r2, r0
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	4a42      	ldr	r2, [pc, #264]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e079      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	220c      	movs	r2, #12
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d1ef      	bne.n	80048ca <HAL_RCC_ClockConfig+0x15e>
 80048ea:	e00e      	b.n	800490a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fe fb16 	bl	8002f1c <HAL_GetTick>
 80048f0:	0002      	movs	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e068      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004900:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	220c      	movs	r2, #12
 8004906:	4013      	ands	r3, r2
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800490a:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	4013      	ands	r3, r2
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d21e      	bcs.n	8004956 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	4393      	bics	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800492a:	f7fe faf7 	bl	8002f1c <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	e009      	b.n	8004948 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fe faf2 	bl	8002f1c <HAL_GetTick>
 8004938:	0002      	movs	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_RCC_ClockConfig+0x274>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e044      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_ClockConfig+0x270>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	4013      	ands	r3, r2
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d1ee      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2204      	movs	r2, #4
 800495c:	4013      	ands	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <HAL_RCC_ClockConfig+0x27c>)
 8004966:	4013      	ands	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004970:	430a      	orrs	r2, r1
 8004972:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2208      	movs	r2, #8
 800497a:	4013      	ands	r3, r2
 800497c:	d00a      	beq.n	8004994 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497e:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4a1a      	ldr	r2, [pc, #104]	; (80049ec <HAL_RCC_ClockConfig+0x280>)
 8004984:	4013      	ands	r3, r2
 8004986:	0019      	movs	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	00da      	lsls	r2, r3, #3
 800498e:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 8004990:	430a      	orrs	r2, r1
 8004992:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004994:	f000 f832 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8004998:	0001      	movs	r1, r0
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCC_ClockConfig+0x278>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	220f      	movs	r2, #15
 80049a2:	4013      	ands	r3, r2
 80049a4:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HAL_RCC_ClockConfig+0x284>)
 80049a6:	5cd3      	ldrb	r3, [r2, r3]
 80049a8:	000a      	movs	r2, r1
 80049aa:	40da      	lsrs	r2, r3
 80049ac:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_ClockConfig+0x288>)
 80049ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_RCC_ClockConfig+0x28c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	250b      	movs	r5, #11
 80049b6:	197c      	adds	r4, r7, r5
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fe fa69 	bl	8002e90 <HAL_InitTick>
 80049be:	0003      	movs	r3, r0
 80049c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80049c2:	197b      	adds	r3, r7, r5
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80049ca:	197b      	adds	r3, r7, r5
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bdb0      	pop	{r4, r5, r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	40022000 	.word	0x40022000
 80049e0:	00001388 	.word	0x00001388
 80049e4:	40021000 	.word	0x40021000
 80049e8:	fffff8ff 	.word	0xfffff8ff
 80049ec:	ffffc7ff 	.word	0xffffc7ff
 80049f0:	0800a474 	.word	0x0800a474
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b5b0      	push	{r4, r5, r7, lr}
 80049fe:	b08e      	sub	sp, #56	; 0x38
 8004a00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004a02:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d014      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x40>
 8004a12:	d900      	bls.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1a>
 8004a14:	e07b      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x112>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x24>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1e:	e076      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a20:	4b44      	ldr	r3, [pc, #272]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2210      	movs	r2, #16
 8004a26:	4013      	ands	r3, r2
 8004a28:	d002      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004a2a:	4b43      	ldr	r3, [pc, #268]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004a2e:	e07c      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004a32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a34:	e079      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a36:	4b42      	ldr	r3, [pc, #264]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a3a:	e076      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	0c9a      	lsrs	r2, r3, #18
 8004a40:	230f      	movs	r3, #15
 8004a42:	401a      	ands	r2, r3
 8004a44:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x148>)
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	0d9a      	lsrs	r2, r3, #22
 8004a4e:	2303      	movs	r3, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	3301      	adds	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a56:	4b37      	ldr	r3, [pc, #220]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	025b      	lsls	r3, r3, #9
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d01a      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	4a35      	ldr	r2, [pc, #212]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	69b8      	ldr	r0, [r7, #24]
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	f7fb fd39 	bl	80004e8 <__aeabi_lmul>
 8004a76:	0002      	movs	r2, r0
 8004a78:	000b      	movs	r3, r1
 8004a7a:	0010      	movs	r0, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f7fb fd0d 	bl	80004a8 <__aeabi_uldivmod>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	000b      	movs	r3, r1
 8004a92:	0013      	movs	r3, r2
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
 8004a96:	e037      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a98:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d01a      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aac:	2300      	movs	r3, #0
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	f7fb fd19 	bl	80004e8 <__aeabi_lmul>
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	000b      	movs	r3, r1
 8004aba:	0010      	movs	r0, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f7fb fced 	bl	80004a8 <__aeabi_uldivmod>
 8004ace:	0002      	movs	r2, r0
 8004ad0:	000b      	movs	r3, r1
 8004ad2:	0013      	movs	r3, r2
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad6:	e017      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	0018      	movs	r0, r3
 8004adc:	2300      	movs	r3, #0
 8004ade:	0019      	movs	r1, r3
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x140>)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f7fb fd00 	bl	80004e8 <__aeabi_lmul>
 8004ae8:	0002      	movs	r2, r0
 8004aea:	000b      	movs	r3, r1
 8004aec:	0010      	movs	r0, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	001c      	movs	r4, r3
 8004af4:	2300      	movs	r3, #0
 8004af6:	001d      	movs	r5, r3
 8004af8:	0022      	movs	r2, r4
 8004afa:	002b      	movs	r3, r5
 8004afc:	f7fb fcd4 	bl	80004a8 <__aeabi_uldivmod>
 8004b00:	0002      	movs	r2, r0
 8004b02:	000b      	movs	r3, r1
 8004b04:	0013      	movs	r3, r2
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b0c:	e00d      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	0b5b      	lsrs	r3, r3, #13
 8004b14:	2207      	movs	r2, #7
 8004b16:	4013      	ands	r3, r2
 8004b18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	0212      	lsls	r2, r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	0013      	movs	r3, r2
 8004b26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b28:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b00e      	add	sp, #56	; 0x38
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}
 8004b34:	40021000 	.word	0x40021000
 8004b38:	003d0900 	.word	0x003d0900
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200
 8004b44:	0800a48c 	.word	0x0800a48c

08004b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b02      	ldr	r3, [pc, #8]	; (8004b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff2 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b64:	0001      	movs	r1, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	2207      	movs	r2, #7
 8004b6e:	4013      	ands	r3, r2
 8004b70:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	40d9      	lsrs	r1, r3
 8004b76:	000b      	movs	r3, r1
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800a484 	.word	0x0800a484

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	0001      	movs	r1, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	2207      	movs	r2, #7
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	40d9      	lsrs	r1, r3
 8004ba2:	000b      	movs	r3, r1
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800a484 	.word	0x0800a484

08004bb4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004bbc:	2017      	movs	r0, #23
 8004bbe:	183b      	adds	r3, r7, r0
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d100      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004bce:	e0c7      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd0:	4b9b      	ldr	r3, [pc, #620]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	055b      	lsls	r3, r3, #21
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bdc:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	4b97      	ldr	r3, [pc, #604]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	0549      	lsls	r1, r1, #21
 8004be6:	430a      	orrs	r2, r1
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004bea:	183b      	adds	r3, r7, r0
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	4b94      	ldr	r3, [pc, #592]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2380      	movs	r3, #128	; 0x80
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d11a      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfc:	4b91      	ldr	r3, [pc, #580]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b90      	ldr	r3, [pc, #576]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0049      	lsls	r1, r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe f987 	bl	8002f1c <HAL_GetTick>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fe f982 	bl	8002f1c <HAL_GetTick>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e107      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b87      	ldr	r3, [pc, #540]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004c32:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	23c0      	movs	r3, #192	; 0xc0
 8004c38:	039b      	lsls	r3, r3, #14
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	23c0      	movs	r3, #192	; 0xc0
 8004c44:	039b      	lsls	r3, r3, #14
 8004c46:	4013      	ands	r3, r2
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d013      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	23c0      	movs	r3, #192	; 0xc0
 8004c54:	029b      	lsls	r3, r3, #10
 8004c56:	401a      	ands	r2, r3
 8004c58:	23c0      	movs	r3, #192	; 0xc0
 8004c5a:	029b      	lsls	r3, r3, #10
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d10a      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c60:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	401a      	ands	r2, r3
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d101      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0df      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004c76:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c7a:	23c0      	movs	r3, #192	; 0xc0
 8004c7c:	029b      	lsls	r3, r3, #10
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d03b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	23c0      	movs	r3, #192	; 0xc0
 8004c8e:	029b      	lsls	r3, r3, #10
 8004c90:	4013      	ands	r3, r2
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d033      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d02e      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004ca2:	4b67      	ldr	r3, [pc, #412]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cac:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb0:	4b63      	ldr	r3, [pc, #396]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	0309      	lsls	r1, r1, #12
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cba:	4b61      	ldr	r3, [pc, #388]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cbe:	4b60      	ldr	r3, [pc, #384]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cc0:	4962      	ldr	r1, [pc, #392]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004cc6:	4b5e      	ldr	r3, [pc, #376]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d014      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fe f921 	bl	8002f1c <HAL_GetTick>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cde:	e009      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fe f91c 	bl	8002f1c <HAL_GetTick>
 8004ce4:	0002      	movs	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a59      	ldr	r2, [pc, #356]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0a0      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf4:	4b52      	ldr	r3, [pc, #328]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0ef      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2220      	movs	r2, #32
 8004d06:	4013      	ands	r3, r2
 8004d08:	d01f      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	23c0      	movs	r3, #192	; 0xc0
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	401a      	ands	r2, r3
 8004d14:	23c0      	movs	r3, #192	; 0xc0
 8004d16:	029b      	lsls	r3, r3, #10
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004d1c:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a4c      	ldr	r2, [pc, #304]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	23c0      	movs	r3, #192	; 0xc0
 8004d2c:	039b      	lsls	r3, r3, #14
 8004d2e:	401a      	ands	r2, r3
 8004d30:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4b42      	ldr	r3, [pc, #264]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	23c0      	movs	r3, #192	; 0xc0
 8004d40:	029b      	lsls	r3, r3, #10
 8004d42:	401a      	ands	r2, r3
 8004d44:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d4a:	2317      	movs	r3, #23
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d58:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d5a:	493f      	ldr	r1, [pc, #252]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6a:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4393      	bics	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	220c      	movs	r2, #12
 8004d8e:	4393      	bics	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2204      	movs	r2, #4
 8004da2:	4013      	ands	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	4a2c      	ldr	r2, [pc, #176]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004db6:	430a      	orrs	r2, r1
 8004db8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	4013      	ands	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004df4:	430a      	orrs	r2, r1
 8004df6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2240      	movs	r2, #64	; 0x40
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e12:	430a      	orrs	r2, r1
 8004e14:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004e20:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e24:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b006      	add	sp, #24
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40007000 	.word	0x40007000
 8004e48:	fffcffff 	.word	0xfffcffff
 8004e4c:	fff7ffff 	.word	0xfff7ffff
 8004e50:	00001388 	.word	0x00001388
 8004e54:	ffcfffff 	.word	0xffcfffff
 8004e58:	efffffff 	.word	0xefffffff
 8004e5c:	fffff3ff 	.word	0xfffff3ff
 8004e60:	ffffcfff 	.word	0xffffcfff
 8004e64:	fbffffff 	.word	0xfbffffff
 8004e68:	fff3ffff 	.word	0xfff3ffff

08004e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e044      	b.n	8004f08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d107      	bne.n	8004e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2278      	movs	r2, #120	; 0x78
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fd fe93 	bl	8002bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2224      	movs	r2, #36	; 0x24
 8004e9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f8d0 	bl	8005054 <UART_SetConfig>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e024      	b.n	8004f08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f000 fb61 	bl	8005590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	490d      	ldr	r1, [pc, #52]	; (8004f10 <HAL_UART_Init+0xa4>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	212a      	movs	r1, #42	; 0x2a
 8004eea:	438a      	bics	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 fbf9 	bl	80056f8 <UART_CheckIdleState>
 8004f06:	0003      	movs	r3, r0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	ffffb7ff 	.word	0xffffb7ff

08004f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	1dbb      	adds	r3, r7, #6
 8004f22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d000      	beq.n	8004f2e <HAL_UART_Transmit+0x1a>
 8004f2c:	e08c      	b.n	8005048 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_UART_Transmit+0x28>
 8004f34:	1dbb      	adds	r3, r7, #6
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e084      	b.n	800504a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d109      	bne.n	8004f60 <HAL_UART_Transmit+0x4c>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2201      	movs	r2, #1
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d001      	beq.n	8004f60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e074      	b.n	800504a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2284      	movs	r2, #132	; 0x84
 8004f64:	2100      	movs	r1, #0
 8004f66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6e:	f7fd ffd5 	bl	8002f1c <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1dba      	adds	r2, r7, #6
 8004f7a:	2150      	movs	r1, #80	; 0x50
 8004f7c:	8812      	ldrh	r2, [r2, #0]
 8004f7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1dba      	adds	r2, r7, #6
 8004f84:	2152      	movs	r1, #82	; 0x52
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	015b      	lsls	r3, r3, #5
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d108      	bne.n	8004fa8 <HAL_UART_Transmit+0x94>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d104      	bne.n	8004fa8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e003      	b.n	8004fb0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fb0:	e02f      	b.n	8005012 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	0013      	movs	r3, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	f000 fc42 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8004fc4:	1e03      	subs	r3, r0, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e03b      	b.n	800504a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	001a      	movs	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	05d2      	lsls	r2, r2, #23
 8004fe4:	0dd2      	lsrs	r2, r2, #23
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	3302      	adds	r3, #2
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	e007      	b.n	8005000 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2252      	movs	r2, #82	; 0x52
 8005004:	5a9b      	ldrh	r3, [r3, r2]
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b299      	uxth	r1, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2252      	movs	r2, #82	; 0x52
 8005010:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2252      	movs	r2, #82	; 0x52
 8005016:	5a9b      	ldrh	r3, [r3, r2]
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1c9      	bne.n	8004fb2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	0013      	movs	r3, r2
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	; 0x40
 800502c:	f000 fc0c 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8005030:	1e03      	subs	r3, r0, #0
 8005032:	d004      	beq.n	800503e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e005      	b.n	800504a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b008      	add	sp, #32
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b08e      	sub	sp, #56	; 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800505c:	231a      	movs	r3, #26
 800505e:	2218      	movs	r2, #24
 8005060:	189b      	adds	r3, r3, r2
 8005062:	19db      	adds	r3, r3, r7
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	431a      	orrs	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	431a      	orrs	r2, r3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4313      	orrs	r3, r2
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4ac3      	ldr	r2, [pc, #780]	; (8005394 <UART_SetConfig+0x340>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005092:	430a      	orrs	r2, r1
 8005094:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4abe      	ldr	r2, [pc, #760]	; (8005398 <UART_SetConfig+0x344>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4ab8      	ldr	r2, [pc, #736]	; (800539c <UART_SetConfig+0x348>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c4:	4313      	orrs	r3, r2
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	4ab4      	ldr	r2, [pc, #720]	; (80053a0 <UART_SetConfig+0x34c>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	0019      	movs	r1, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050da:	430a      	orrs	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4ab0      	ldr	r2, [pc, #704]	; (80053a4 <UART_SetConfig+0x350>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d131      	bne.n	800514c <UART_SetConfig+0xf8>
 80050e8:	4baf      	ldr	r3, [pc, #700]	; (80053a8 <UART_SetConfig+0x354>)
 80050ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ec:	2203      	movs	r2, #3
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d01d      	beq.n	8005130 <UART_SetConfig+0xdc>
 80050f4:	d823      	bhi.n	800513e <UART_SetConfig+0xea>
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d00c      	beq.n	8005114 <UART_SetConfig+0xc0>
 80050fa:	d820      	bhi.n	800513e <UART_SetConfig+0xea>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <UART_SetConfig+0xb2>
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00e      	beq.n	8005122 <UART_SetConfig+0xce>
 8005104:	e01b      	b.n	800513e <UART_SetConfig+0xea>
 8005106:	231b      	movs	r3, #27
 8005108:	2218      	movs	r2, #24
 800510a:	189b      	adds	r3, r3, r2
 800510c:	19db      	adds	r3, r3, r7
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e0b4      	b.n	800527e <UART_SetConfig+0x22a>
 8005114:	231b      	movs	r3, #27
 8005116:	2218      	movs	r2, #24
 8005118:	189b      	adds	r3, r3, r2
 800511a:	19db      	adds	r3, r3, r7
 800511c:	2202      	movs	r2, #2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e0ad      	b.n	800527e <UART_SetConfig+0x22a>
 8005122:	231b      	movs	r3, #27
 8005124:	2218      	movs	r2, #24
 8005126:	189b      	adds	r3, r3, r2
 8005128:	19db      	adds	r3, r3, r7
 800512a:	2204      	movs	r2, #4
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e0a6      	b.n	800527e <UART_SetConfig+0x22a>
 8005130:	231b      	movs	r3, #27
 8005132:	2218      	movs	r2, #24
 8005134:	189b      	adds	r3, r3, r2
 8005136:	19db      	adds	r3, r3, r7
 8005138:	2208      	movs	r2, #8
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e09f      	b.n	800527e <UART_SetConfig+0x22a>
 800513e:	231b      	movs	r3, #27
 8005140:	2218      	movs	r2, #24
 8005142:	189b      	adds	r3, r3, r2
 8005144:	19db      	adds	r3, r3, r7
 8005146:	2210      	movs	r2, #16
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	e098      	b.n	800527e <UART_SetConfig+0x22a>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a96      	ldr	r2, [pc, #600]	; (80053ac <UART_SetConfig+0x358>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d131      	bne.n	80051ba <UART_SetConfig+0x166>
 8005156:	4b94      	ldr	r3, [pc, #592]	; (80053a8 <UART_SetConfig+0x354>)
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	220c      	movs	r2, #12
 800515c:	4013      	ands	r3, r2
 800515e:	2b0c      	cmp	r3, #12
 8005160:	d01d      	beq.n	800519e <UART_SetConfig+0x14a>
 8005162:	d823      	bhi.n	80051ac <UART_SetConfig+0x158>
 8005164:	2b08      	cmp	r3, #8
 8005166:	d00c      	beq.n	8005182 <UART_SetConfig+0x12e>
 8005168:	d820      	bhi.n	80051ac <UART_SetConfig+0x158>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <UART_SetConfig+0x120>
 800516e:	2b04      	cmp	r3, #4
 8005170:	d00e      	beq.n	8005190 <UART_SetConfig+0x13c>
 8005172:	e01b      	b.n	80051ac <UART_SetConfig+0x158>
 8005174:	231b      	movs	r3, #27
 8005176:	2218      	movs	r2, #24
 8005178:	189b      	adds	r3, r3, r2
 800517a:	19db      	adds	r3, r3, r7
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e07d      	b.n	800527e <UART_SetConfig+0x22a>
 8005182:	231b      	movs	r3, #27
 8005184:	2218      	movs	r2, #24
 8005186:	189b      	adds	r3, r3, r2
 8005188:	19db      	adds	r3, r3, r7
 800518a:	2202      	movs	r2, #2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e076      	b.n	800527e <UART_SetConfig+0x22a>
 8005190:	231b      	movs	r3, #27
 8005192:	2218      	movs	r2, #24
 8005194:	189b      	adds	r3, r3, r2
 8005196:	19db      	adds	r3, r3, r7
 8005198:	2204      	movs	r2, #4
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e06f      	b.n	800527e <UART_SetConfig+0x22a>
 800519e:	231b      	movs	r3, #27
 80051a0:	2218      	movs	r2, #24
 80051a2:	189b      	adds	r3, r3, r2
 80051a4:	19db      	adds	r3, r3, r7
 80051a6:	2208      	movs	r2, #8
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e068      	b.n	800527e <UART_SetConfig+0x22a>
 80051ac:	231b      	movs	r3, #27
 80051ae:	2218      	movs	r2, #24
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	19db      	adds	r3, r3, r7
 80051b4:	2210      	movs	r2, #16
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e061      	b.n	800527e <UART_SetConfig+0x22a>
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <UART_SetConfig+0x35c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d106      	bne.n	80051d2 <UART_SetConfig+0x17e>
 80051c4:	231b      	movs	r3, #27
 80051c6:	2218      	movs	r2, #24
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	19db      	adds	r3, r3, r7
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e055      	b.n	800527e <UART_SetConfig+0x22a>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a77      	ldr	r2, [pc, #476]	; (80053b4 <UART_SetConfig+0x360>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d106      	bne.n	80051ea <UART_SetConfig+0x196>
 80051dc:	231b      	movs	r3, #27
 80051de:	2218      	movs	r2, #24
 80051e0:	189b      	adds	r3, r3, r2
 80051e2:	19db      	adds	r3, r3, r7
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e049      	b.n	800527e <UART_SetConfig+0x22a>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6b      	ldr	r2, [pc, #428]	; (800539c <UART_SetConfig+0x348>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d13e      	bne.n	8005272 <UART_SetConfig+0x21e>
 80051f4:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <UART_SetConfig+0x354>)
 80051f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f8:	23c0      	movs	r3, #192	; 0xc0
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4013      	ands	r3, r2
 80051fe:	22c0      	movs	r2, #192	; 0xc0
 8005200:	0112      	lsls	r2, r2, #4
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <UART_SetConfig+0x202>
 8005206:	22c0      	movs	r2, #192	; 0xc0
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	4293      	cmp	r3, r2
 800520c:	d82a      	bhi.n	8005264 <UART_SetConfig+0x210>
 800520e:	2280      	movs	r2, #128	; 0x80
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	4293      	cmp	r3, r2
 8005214:	d011      	beq.n	800523a <UART_SetConfig+0x1e6>
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	4293      	cmp	r3, r2
 800521c:	d822      	bhi.n	8005264 <UART_SetConfig+0x210>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <UART_SetConfig+0x1d8>
 8005222:	2280      	movs	r2, #128	; 0x80
 8005224:	00d2      	lsls	r2, r2, #3
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <UART_SetConfig+0x1f4>
 800522a:	e01b      	b.n	8005264 <UART_SetConfig+0x210>
 800522c:	231b      	movs	r3, #27
 800522e:	2218      	movs	r2, #24
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e021      	b.n	800527e <UART_SetConfig+0x22a>
 800523a:	231b      	movs	r3, #27
 800523c:	2218      	movs	r2, #24
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e01a      	b.n	800527e <UART_SetConfig+0x22a>
 8005248:	231b      	movs	r3, #27
 800524a:	2218      	movs	r2, #24
 800524c:	189b      	adds	r3, r3, r2
 800524e:	19db      	adds	r3, r3, r7
 8005250:	2204      	movs	r2, #4
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e013      	b.n	800527e <UART_SetConfig+0x22a>
 8005256:	231b      	movs	r3, #27
 8005258:	2218      	movs	r2, #24
 800525a:	189b      	adds	r3, r3, r2
 800525c:	19db      	adds	r3, r3, r7
 800525e:	2208      	movs	r2, #8
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e00c      	b.n	800527e <UART_SetConfig+0x22a>
 8005264:	231b      	movs	r3, #27
 8005266:	2218      	movs	r2, #24
 8005268:	189b      	adds	r3, r3, r2
 800526a:	19db      	adds	r3, r3, r7
 800526c:	2210      	movs	r2, #16
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e005      	b.n	800527e <UART_SetConfig+0x22a>
 8005272:	231b      	movs	r3, #27
 8005274:	2218      	movs	r2, #24
 8005276:	189b      	adds	r3, r3, r2
 8005278:	19db      	adds	r3, r3, r7
 800527a:	2210      	movs	r2, #16
 800527c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a46      	ldr	r2, [pc, #280]	; (800539c <UART_SetConfig+0x348>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d000      	beq.n	800528a <UART_SetConfig+0x236>
 8005288:	e09a      	b.n	80053c0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800528a:	231b      	movs	r3, #27
 800528c:	2218      	movs	r2, #24
 800528e:	189b      	adds	r3, r3, r2
 8005290:	19db      	adds	r3, r3, r7
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d01d      	beq.n	80052d4 <UART_SetConfig+0x280>
 8005298:	dc20      	bgt.n	80052dc <UART_SetConfig+0x288>
 800529a:	2b04      	cmp	r3, #4
 800529c:	d015      	beq.n	80052ca <UART_SetConfig+0x276>
 800529e:	dc1d      	bgt.n	80052dc <UART_SetConfig+0x288>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <UART_SetConfig+0x256>
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d005      	beq.n	80052b4 <UART_SetConfig+0x260>
 80052a8:	e018      	b.n	80052dc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7ff fc57 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80052ae:	0003      	movs	r3, r0
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b2:	e01c      	b.n	80052ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b4:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <UART_SetConfig+0x354>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2210      	movs	r2, #16
 80052ba:	4013      	ands	r3, r2
 80052bc:	d002      	beq.n	80052c4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052be:	4b3e      	ldr	r3, [pc, #248]	; (80053b8 <UART_SetConfig+0x364>)
 80052c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052c2:	e014      	b.n	80052ee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <UART_SetConfig+0x368>)
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c8:	e011      	b.n	80052ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7ff fb97 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80052ce:	0003      	movs	r3, r0
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052d2:	e00c      	b.n	80052ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052da:	e008      	b.n	80052ee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052e0:	231a      	movs	r3, #26
 80052e2:	2218      	movs	r2, #24
 80052e4:	189b      	adds	r3, r3, r2
 80052e6:	19db      	adds	r3, r3, r7
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
        break;
 80052ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d100      	bne.n	80052f6 <UART_SetConfig+0x2a2>
 80052f4:	e133      	b.n	800555e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	0013      	movs	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005302:	429a      	cmp	r2, r3
 8005304:	d305      	bcc.n	8005312 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800530c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d906      	bls.n	8005320 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005312:	231a      	movs	r3, #26
 8005314:	2218      	movs	r2, #24
 8005316:	189b      	adds	r3, r3, r2
 8005318:	19db      	adds	r3, r3, r7
 800531a:	2201      	movs	r2, #1
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e11e      	b.n	800555e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	6939      	ldr	r1, [r7, #16]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	000b      	movs	r3, r1
 800532e:	0e1b      	lsrs	r3, r3, #24
 8005330:	0010      	movs	r0, r2
 8005332:	0205      	lsls	r5, r0, #8
 8005334:	431d      	orrs	r5, r3
 8005336:	000b      	movs	r3, r1
 8005338:	021c      	lsls	r4, r3, #8
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68b8      	ldr	r0, [r7, #8]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	1900      	adds	r0, r0, r4
 800534c:	4169      	adcs	r1, r5
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f7fb f8a4 	bl	80004a8 <__aeabi_uldivmod>
 8005360:	0002      	movs	r2, r0
 8005362:	000b      	movs	r3, r1
 8005364:	0013      	movs	r3, r2
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536a:	23c0      	movs	r3, #192	; 0xc0
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	429a      	cmp	r2, r3
 8005370:	d309      	bcc.n	8005386 <UART_SetConfig+0x332>
 8005372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	035b      	lsls	r3, r3, #13
 8005378:	429a      	cmp	r2, r3
 800537a:	d204      	bcs.n	8005386 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e0eb      	b.n	800555e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005386:	231a      	movs	r3, #26
 8005388:	2218      	movs	r2, #24
 800538a:	189b      	adds	r3, r3, r2
 800538c:	19db      	adds	r3, r3, r7
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e0e4      	b.n	800555e <UART_SetConfig+0x50a>
 8005394:	efff69f3 	.word	0xefff69f3
 8005398:	ffffcfff 	.word	0xffffcfff
 800539c:	40004800 	.word	0x40004800
 80053a0:	fffff4ff 	.word	0xfffff4ff
 80053a4:	40013800 	.word	0x40013800
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40004400 	.word	0x40004400
 80053b0:	40004c00 	.word	0x40004c00
 80053b4:	40005000 	.word	0x40005000
 80053b8:	003d0900 	.word	0x003d0900
 80053bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d000      	beq.n	80053ce <UART_SetConfig+0x37a>
 80053cc:	e070      	b.n	80054b0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80053ce:	231b      	movs	r3, #27
 80053d0:	2218      	movs	r2, #24
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	19db      	adds	r3, r3, r7
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d822      	bhi.n	8005422 <UART_SetConfig+0x3ce>
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	4b67      	ldr	r3, [pc, #412]	; (800557c <UART_SetConfig+0x528>)
 80053e0:	18d3      	adds	r3, r2, r3
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e6:	f7ff fbb9 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80053ea:	0003      	movs	r3, r0
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053ee:	e021      	b.n	8005434 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f0:	f7ff fbca 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80053f4:	0003      	movs	r3, r0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053f8:	e01c      	b.n	8005434 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fa:	4b61      	ldr	r3, [pc, #388]	; (8005580 <UART_SetConfig+0x52c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	4013      	ands	r3, r2
 8005402:	d002      	beq.n	800540a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005404:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <UART_SetConfig+0x530>)
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005408:	e014      	b.n	8005434 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800540a:	4b5f      	ldr	r3, [pc, #380]	; (8005588 <UART_SetConfig+0x534>)
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800540e:	e011      	b.n	8005434 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005410:	f7ff faf4 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8005414:	0003      	movs	r3, r0
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005418:	e00c      	b.n	8005434 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005420:	e008      	b.n	8005434 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005426:	231a      	movs	r3, #26
 8005428:	2218      	movs	r2, #24
 800542a:	189b      	adds	r3, r3, r2
 800542c:	19db      	adds	r3, r3, r7
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
        break;
 8005432:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d100      	bne.n	800543c <UART_SetConfig+0x3e8>
 800543a:	e090      	b.n	800555e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	005a      	lsls	r2, r3, #1
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	18d2      	adds	r2, r2, r3
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0019      	movs	r1, r3
 800544e:	0010      	movs	r0, r2
 8005450:	f7fa fe76 	bl	8000140 <__udivsi3>
 8005454:	0003      	movs	r3, r0
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d921      	bls.n	80054a2 <UART_SetConfig+0x44e>
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	025b      	lsls	r3, r3, #9
 8005464:	429a      	cmp	r2, r3
 8005466:	d21c      	bcs.n	80054a2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	b29a      	uxth	r2, r3
 800546c:	200e      	movs	r0, #14
 800546e:	2418      	movs	r4, #24
 8005470:	1903      	adds	r3, r0, r4
 8005472:	19db      	adds	r3, r3, r7
 8005474:	210f      	movs	r1, #15
 8005476:	438a      	bics	r2, r1
 8005478:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	2207      	movs	r2, #7
 8005482:	4013      	ands	r3, r2
 8005484:	b299      	uxth	r1, r3
 8005486:	1903      	adds	r3, r0, r4
 8005488:	19db      	adds	r3, r3, r7
 800548a:	1902      	adds	r2, r0, r4
 800548c:	19d2      	adds	r2, r2, r7
 800548e:	8812      	ldrh	r2, [r2, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	1902      	adds	r2, r0, r4
 800549a:	19d2      	adds	r2, r2, r7
 800549c:	8812      	ldrh	r2, [r2, #0]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e05d      	b.n	800555e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80054a2:	231a      	movs	r3, #26
 80054a4:	2218      	movs	r2, #24
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	19db      	adds	r3, r3, r7
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e056      	b.n	800555e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b0:	231b      	movs	r3, #27
 80054b2:	2218      	movs	r2, #24
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	19db      	adds	r3, r3, r7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d822      	bhi.n	8005504 <UART_SetConfig+0x4b0>
 80054be:	009a      	lsls	r2, r3, #2
 80054c0:	4b32      	ldr	r3, [pc, #200]	; (800558c <UART_SetConfig+0x538>)
 80054c2:	18d3      	adds	r3, r2, r3
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7ff fb48 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80054cc:	0003      	movs	r3, r0
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d0:	e021      	b.n	8005516 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d2:	f7ff fb59 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80054d6:	0003      	movs	r3, r0
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054da:	e01c      	b.n	8005516 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054dc:	4b28      	ldr	r3, [pc, #160]	; (8005580 <UART_SetConfig+0x52c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2210      	movs	r2, #16
 80054e2:	4013      	ands	r3, r2
 80054e4:	d002      	beq.n	80054ec <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <UART_SetConfig+0x530>)
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054ea:	e014      	b.n	8005516 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b26      	ldr	r3, [pc, #152]	; (8005588 <UART_SetConfig+0x534>)
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054f0:	e011      	b.n	8005516 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7ff fa83 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80054f6:	0003      	movs	r3, r0
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054fa:	e00c      	b.n	8005516 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005502:	e008      	b.n	8005516 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005508:	231a      	movs	r3, #26
 800550a:	2218      	movs	r2, #24
 800550c:	189b      	adds	r3, r3, r2
 800550e:	19db      	adds	r3, r3, r7
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
        break;
 8005514:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	085a      	lsrs	r2, r3, #1
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	18d2      	adds	r2, r2, r3
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	0019      	movs	r1, r3
 800552c:	0010      	movs	r0, r2
 800552e:	f7fa fe07 	bl	8000140 <__udivsi3>
 8005532:	0003      	movs	r3, r0
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	2b0f      	cmp	r3, #15
 800553a:	d90a      	bls.n	8005552 <UART_SetConfig+0x4fe>
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	025b      	lsls	r3, r3, #9
 8005542:	429a      	cmp	r2, r3
 8005544:	d205      	bcs.n	8005552 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	b29a      	uxth	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	e005      	b.n	800555e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005552:	231a      	movs	r3, #26
 8005554:	2218      	movs	r2, #24
 8005556:	189b      	adds	r3, r3, r2
 8005558:	19db      	adds	r3, r3, r7
 800555a:	2201      	movs	r2, #1
 800555c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2200      	movs	r2, #0
 8005562:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2200      	movs	r2, #0
 8005568:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800556a:	231a      	movs	r3, #26
 800556c:	2218      	movs	r2, #24
 800556e:	189b      	adds	r3, r3, r2
 8005570:	19db      	adds	r3, r3, r7
 8005572:	781b      	ldrb	r3, [r3, #0]
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b00e      	add	sp, #56	; 0x38
 800557a:	bdb0      	pop	{r4, r5, r7, pc}
 800557c:	0800a498 	.word	0x0800a498
 8005580:	40021000 	.word	0x40021000
 8005584:	003d0900 	.word	0x003d0900
 8005588:	00f42400 	.word	0x00f42400
 800558c:	0800a4bc 	.word	0x0800a4bc

08005590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	d00b      	beq.n	80055ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a4a      	ldr	r2, [pc, #296]	; (80056d4 <UART_AdvFeatureConfig+0x144>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	0019      	movs	r1, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2202      	movs	r2, #2
 80055c0:	4013      	ands	r3, r2
 80055c2:	d00b      	beq.n	80055dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <UART_AdvFeatureConfig+0x148>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2204      	movs	r2, #4
 80055e2:	4013      	ands	r3, r2
 80055e4:	d00b      	beq.n	80055fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a3b      	ldr	r2, [pc, #236]	; (80056dc <UART_AdvFeatureConfig+0x14c>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2208      	movs	r2, #8
 8005604:	4013      	ands	r3, r2
 8005606:	d00b      	beq.n	8005620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a34      	ldr	r2, [pc, #208]	; (80056e0 <UART_AdvFeatureConfig+0x150>)
 8005610:	4013      	ands	r3, r2
 8005612:	0019      	movs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2210      	movs	r2, #16
 8005626:	4013      	ands	r3, r2
 8005628:	d00b      	beq.n	8005642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <UART_AdvFeatureConfig+0x154>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2220      	movs	r2, #32
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <UART_AdvFeatureConfig+0x158>)
 8005654:	4013      	ands	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2240      	movs	r2, #64	; 0x40
 800566a:	4013      	ands	r3, r2
 800566c:	d01d      	beq.n	80056aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <UART_AdvFeatureConfig+0x15c>)
 8005676:	4013      	ands	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	035b      	lsls	r3, r3, #13
 800568e:	429a      	cmp	r2, r3
 8005690:	d10b      	bne.n	80056aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <UART_AdvFeatureConfig+0x160>)
 800569a:	4013      	ands	r3, r2
 800569c:	0019      	movs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	4013      	ands	r3, r2
 80056b2:	d00b      	beq.n	80056cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <UART_AdvFeatureConfig+0x164>)
 80056bc:	4013      	ands	r3, r2
 80056be:	0019      	movs	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
}
 80056cc:	46c0      	nop			; (mov r8, r8)
 80056ce:	46bd      	mov	sp, r7
 80056d0:	b002      	add	sp, #8
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	fffdffff 	.word	0xfffdffff
 80056d8:	fffeffff 	.word	0xfffeffff
 80056dc:	fffbffff 	.word	0xfffbffff
 80056e0:	ffff7fff 	.word	0xffff7fff
 80056e4:	ffffefff 	.word	0xffffefff
 80056e8:	ffffdfff 	.word	0xffffdfff
 80056ec:	ffefffff 	.word	0xffefffff
 80056f0:	ff9fffff 	.word	0xff9fffff
 80056f4:	fff7ffff 	.word	0xfff7ffff

080056f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b092      	sub	sp, #72	; 0x48
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2284      	movs	r2, #132	; 0x84
 8005704:	2100      	movs	r1, #0
 8005706:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005708:	f7fd fc08 	bl	8002f1c <HAL_GetTick>
 800570c:	0003      	movs	r3, r0
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2208      	movs	r2, #8
 8005718:	4013      	ands	r3, r2
 800571a:	2b08      	cmp	r3, #8
 800571c:	d12c      	bne.n	8005778 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	0391      	lsls	r1, r2, #14
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4a46      	ldr	r2, [pc, #280]	; (8005840 <UART_CheckIdleState+0x148>)
 8005728:	9200      	str	r2, [sp, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	f000 f88c 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8005730:	1e03      	subs	r3, r0, #0
 8005732:	d021      	beq.n	8005778 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
 800573e:	2301      	movs	r3, #1
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	438a      	bics	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2278      	movs	r2, #120	; 0x78
 8005770:	2100      	movs	r1, #0
 8005772:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e05f      	b.n	8005838 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	4013      	ands	r3, r2
 8005782:	2b04      	cmp	r3, #4
 8005784:	d146      	bne.n	8005814 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	03d1      	lsls	r1, r2, #15
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <UART_CheckIdleState+0x148>)
 8005790:	9200      	str	r2, [sp, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	f000 f858 	bl	8005848 <UART_WaitOnFlagUntilTimeout>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d03b      	beq.n	8005814 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579c:	f3ef 8310 	mrs	r3, PRIMASK
 80057a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80057a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
 80057a6:	2301      	movs	r3, #1
 80057a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4921      	ldr	r1, [pc, #132]	; (8005844 <UART_CheckIdleState+0x14c>)
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ce:	f3ef 8310 	mrs	r3, PRIMASK
 80057d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80057d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
 80057d8:	2301      	movs	r3, #1
 80057da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f383 8810 	msr	PRIMASK, r3
}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	438a      	bics	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	2120      	movs	r1, #32
 8005806:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2278      	movs	r2, #120	; 0x78
 800580c:	2100      	movs	r1, #0
 800580e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e011      	b.n	8005838 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	2120      	movs	r1, #32
 8005820:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2278      	movs	r2, #120	; 0x78
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	0018      	movs	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	b010      	add	sp, #64	; 0x40
 800583e:	bd80      	pop	{r7, pc}
 8005840:	01ffffff 	.word	0x01ffffff
 8005844:	fffffedf 	.word	0xfffffedf

08005848 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	1dfb      	adds	r3, r7, #7
 8005856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005858:	e04b      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	3301      	adds	r3, #1
 800585e:	d048      	beq.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005860:	f7fd fb5c 	bl	8002f1c <HAL_GetTick>
 8005864:	0002      	movs	r2, r0
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e04b      	b.n	8005912 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2204      	movs	r2, #4
 8005882:	4013      	ands	r3, r2
 8005884:	d035      	beq.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	2208      	movs	r2, #8
 800588e:	4013      	ands	r3, r2
 8005890:	2b08      	cmp	r3, #8
 8005892:	d111      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2208      	movs	r2, #8
 800589a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	0018      	movs	r0, r3
 80058a0:	f000 f83c 	bl	800591c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2284      	movs	r2, #132	; 0x84
 80058a8:	2108      	movs	r1, #8
 80058aa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2278      	movs	r2, #120	; 0x78
 80058b0:	2100      	movs	r1, #0
 80058b2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e02c      	b.n	8005912 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	401a      	ands	r2, r3
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d112      	bne.n	80058f2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 f81f 	bl	800591c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2284      	movs	r2, #132	; 0x84
 80058e2:	2120      	movs	r1, #32
 80058e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2278      	movs	r2, #120	; 0x78
 80058ea:	2100      	movs	r1, #0
 80058ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e00f      	b.n	8005912 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	4013      	ands	r3, r2
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	425a      	negs	r2, r3
 8005902:	4153      	adcs	r3, r2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	001a      	movs	r2, r3
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d0a4      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b004      	add	sp, #16
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005924:	f3ef 8310 	mrs	r3, PRIMASK
 8005928:	617b      	str	r3, [r7, #20]
  return(result);
 800592a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	2301      	movs	r3, #1
 8005930:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f383 8810 	msr	PRIMASK, r3
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4926      	ldr	r1, [pc, #152]	; (80059e0 <UART_EndRxTransfer+0xc4>)
 8005946:	400a      	ands	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f383 8810 	msr	PRIMASK, r3
}
 8005954:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005956:	f3ef 8310 	mrs	r3, PRIMASK
 800595a:	623b      	str	r3, [r7, #32]
  return(result);
 800595c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
 8005960:	2301      	movs	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	f383 8810 	msr	PRIMASK, r3
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2101      	movs	r1, #1
 8005978:	438a      	bics	r2, r1
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f383 8810 	msr	PRIMASK, r3
}
 8005986:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	2b01      	cmp	r3, #1
 800598e:	d118      	bne.n	80059c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	60bb      	str	r3, [r7, #8]
  return(result);
 8005996:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599a:	2301      	movs	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2110      	movs	r1, #16
 80059b2:	438a      	bics	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	2120      	movs	r1, #32
 80059c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b00e      	add	sp, #56	; 0x38
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	fffffedf 	.word	0xfffffedf

080059e4 <_strtol_l.constprop.0>:
 80059e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e6:	b087      	sub	sp, #28
 80059e8:	001e      	movs	r6, r3
 80059ea:	9005      	str	r0, [sp, #20]
 80059ec:	9101      	str	r1, [sp, #4]
 80059ee:	9202      	str	r2, [sp, #8]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d048      	beq.n	8005a86 <_strtol_l.constprop.0+0xa2>
 80059f4:	000b      	movs	r3, r1
 80059f6:	2e24      	cmp	r6, #36	; 0x24
 80059f8:	d845      	bhi.n	8005a86 <_strtol_l.constprop.0+0xa2>
 80059fa:	4a3b      	ldr	r2, [pc, #236]	; (8005ae8 <_strtol_l.constprop.0+0x104>)
 80059fc:	2108      	movs	r1, #8
 80059fe:	4694      	mov	ip, r2
 8005a00:	001a      	movs	r2, r3
 8005a02:	4660      	mov	r0, ip
 8005a04:	7814      	ldrb	r4, [r2, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	5d00      	ldrb	r0, [r0, r4]
 8005a0a:	001d      	movs	r5, r3
 8005a0c:	0007      	movs	r7, r0
 8005a0e:	400f      	ands	r7, r1
 8005a10:	4208      	tst	r0, r1
 8005a12:	d1f5      	bne.n	8005a00 <_strtol_l.constprop.0+0x1c>
 8005a14:	2c2d      	cmp	r4, #45	; 0x2d
 8005a16:	d13d      	bne.n	8005a94 <_strtol_l.constprop.0+0xb0>
 8005a18:	2701      	movs	r7, #1
 8005a1a:	781c      	ldrb	r4, [r3, #0]
 8005a1c:	1c95      	adds	r5, r2, #2
 8005a1e:	2e00      	cmp	r6, #0
 8005a20:	d05e      	beq.n	8005ae0 <_strtol_l.constprop.0+0xfc>
 8005a22:	2e10      	cmp	r6, #16
 8005a24:	d109      	bne.n	8005a3a <_strtol_l.constprop.0+0x56>
 8005a26:	2c30      	cmp	r4, #48	; 0x30
 8005a28:	d107      	bne.n	8005a3a <_strtol_l.constprop.0+0x56>
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	782b      	ldrb	r3, [r5, #0]
 8005a2e:	4393      	bics	r3, r2
 8005a30:	2b58      	cmp	r3, #88	; 0x58
 8005a32:	d150      	bne.n	8005ad6 <_strtol_l.constprop.0+0xf2>
 8005a34:	2610      	movs	r6, #16
 8005a36:	786c      	ldrb	r4, [r5, #1]
 8005a38:	3502      	adds	r5, #2
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <_strtol_l.constprop.0+0x108>)
 8005a3c:	0031      	movs	r1, r6
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	0018      	movs	r0, r3
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	f7fa fc02 	bl	800024c <__aeabi_uidivmod>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	9104      	str	r1, [sp, #16]
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	4684      	mov	ip, r0
 8005a50:	0010      	movs	r0, r2
 8005a52:	4249      	negs	r1, r1
 8005a54:	0023      	movs	r3, r4
 8005a56:	3b30      	subs	r3, #48	; 0x30
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d903      	bls.n	8005a64 <_strtol_l.constprop.0+0x80>
 8005a5c:	3b11      	subs	r3, #17
 8005a5e:	2b19      	cmp	r3, #25
 8005a60:	d81d      	bhi.n	8005a9e <_strtol_l.constprop.0+0xba>
 8005a62:	330a      	adds	r3, #10
 8005a64:	429e      	cmp	r6, r3
 8005a66:	dd1e      	ble.n	8005aa6 <_strtol_l.constprop.0+0xc2>
 8005a68:	1c54      	adds	r4, r2, #1
 8005a6a:	d009      	beq.n	8005a80 <_strtol_l.constprop.0+0x9c>
 8005a6c:	000a      	movs	r2, r1
 8005a6e:	4584      	cmp	ip, r0
 8005a70:	d306      	bcc.n	8005a80 <_strtol_l.constprop.0+0x9c>
 8005a72:	d102      	bne.n	8005a7a <_strtol_l.constprop.0+0x96>
 8005a74:	9c04      	ldr	r4, [sp, #16]
 8005a76:	429c      	cmp	r4, r3
 8005a78:	db02      	blt.n	8005a80 <_strtol_l.constprop.0+0x9c>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4370      	muls	r0, r6
 8005a7e:	1818      	adds	r0, r3, r0
 8005a80:	782c      	ldrb	r4, [r5, #0]
 8005a82:	3501      	adds	r5, #1
 8005a84:	e7e6      	b.n	8005a54 <_strtol_l.constprop.0+0x70>
 8005a86:	f001 f897 	bl	8006bb8 <__errno>
 8005a8a:	2316      	movs	r3, #22
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	2000      	movs	r0, #0
 8005a90:	b007      	add	sp, #28
 8005a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a94:	2c2b      	cmp	r4, #43	; 0x2b
 8005a96:	d1c2      	bne.n	8005a1e <_strtol_l.constprop.0+0x3a>
 8005a98:	781c      	ldrb	r4, [r3, #0]
 8005a9a:	1c95      	adds	r5, r2, #2
 8005a9c:	e7bf      	b.n	8005a1e <_strtol_l.constprop.0+0x3a>
 8005a9e:	0023      	movs	r3, r4
 8005aa0:	3b61      	subs	r3, #97	; 0x61
 8005aa2:	2b19      	cmp	r3, #25
 8005aa4:	d9dd      	bls.n	8005a62 <_strtol_l.constprop.0+0x7e>
 8005aa6:	1c53      	adds	r3, r2, #1
 8005aa8:	d109      	bne.n	8005abe <_strtol_l.constprop.0+0xda>
 8005aaa:	2322      	movs	r3, #34	; 0x22
 8005aac:	9a05      	ldr	r2, [sp, #20]
 8005aae:	9803      	ldr	r0, [sp, #12]
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	9b02      	ldr	r3, [sp, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0eb      	beq.n	8005a90 <_strtol_l.constprop.0+0xac>
 8005ab8:	1e6b      	subs	r3, r5, #1
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	e007      	b.n	8005ace <_strtol_l.constprop.0+0xea>
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d000      	beq.n	8005ac4 <_strtol_l.constprop.0+0xe0>
 8005ac2:	4240      	negs	r0, r0
 8005ac4:	9b02      	ldr	r3, [sp, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0e2      	beq.n	8005a90 <_strtol_l.constprop.0+0xac>
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d1f4      	bne.n	8005ab8 <_strtol_l.constprop.0+0xd4>
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	9a01      	ldr	r2, [sp, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e7dc      	b.n	8005a90 <_strtol_l.constprop.0+0xac>
 8005ad6:	2430      	movs	r4, #48	; 0x30
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	d1ae      	bne.n	8005a3a <_strtol_l.constprop.0+0x56>
 8005adc:	3608      	adds	r6, #8
 8005ade:	e7ac      	b.n	8005a3a <_strtol_l.constprop.0+0x56>
 8005ae0:	2c30      	cmp	r4, #48	; 0x30
 8005ae2:	d0a2      	beq.n	8005a2a <_strtol_l.constprop.0+0x46>
 8005ae4:	260a      	movs	r6, #10
 8005ae6:	e7a8      	b.n	8005a3a <_strtol_l.constprop.0+0x56>
 8005ae8:	0800a4e1 	.word	0x0800a4e1
 8005aec:	7fffffff 	.word	0x7fffffff

08005af0 <_strtol_r>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	f7ff ff77 	bl	80059e4 <_strtol_l.constprop.0>
 8005af6:	bd10      	pop	{r4, pc}

08005af8 <strtol>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4c04      	ldr	r4, [pc, #16]	; (8005b0c <strtol+0x14>)
 8005afc:	0013      	movs	r3, r2
 8005afe:	000a      	movs	r2, r1
 8005b00:	0001      	movs	r1, r0
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	f7ff ff6e 	bl	80059e4 <_strtol_l.constprop.0>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	20000064 	.word	0x20000064

08005b10 <__cvt>:
 8005b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b12:	001e      	movs	r6, r3
 8005b14:	2300      	movs	r3, #0
 8005b16:	0014      	movs	r4, r2
 8005b18:	b08b      	sub	sp, #44	; 0x2c
 8005b1a:	429e      	cmp	r6, r3
 8005b1c:	da04      	bge.n	8005b28 <__cvt+0x18>
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	0609      	lsls	r1, r1, #24
 8005b22:	1873      	adds	r3, r6, r1
 8005b24:	001e      	movs	r6, r3
 8005b26:	232d      	movs	r3, #45	; 0x2d
 8005b28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b2c:	7013      	strb	r3, [r2, #0]
 8005b2e:	2320      	movs	r3, #32
 8005b30:	2203      	movs	r2, #3
 8005b32:	439f      	bics	r7, r3
 8005b34:	2f46      	cmp	r7, #70	; 0x46
 8005b36:	d007      	beq.n	8005b48 <__cvt+0x38>
 8005b38:	003b      	movs	r3, r7
 8005b3a:	3b45      	subs	r3, #69	; 0x45
 8005b3c:	4259      	negs	r1, r3
 8005b3e:	414b      	adcs	r3, r1
 8005b40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b42:	3a01      	subs	r2, #1
 8005b44:	18cb      	adds	r3, r1, r3
 8005b46:	9310      	str	r3, [sp, #64]	; 0x40
 8005b48:	ab09      	add	r3, sp, #36	; 0x24
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	ab08      	add	r3, sp, #32
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b52:	9200      	str	r2, [sp, #0]
 8005b54:	9302      	str	r3, [sp, #8]
 8005b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b58:	0022      	movs	r2, r4
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	0033      	movs	r3, r6
 8005b5e:	f001 f8f7 	bl	8006d50 <_dtoa_r>
 8005b62:	0005      	movs	r5, r0
 8005b64:	2f47      	cmp	r7, #71	; 0x47
 8005b66:	d102      	bne.n	8005b6e <__cvt+0x5e>
 8005b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d528      	bpl.n	8005bc0 <__cvt+0xb0>
 8005b6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b70:	18eb      	adds	r3, r5, r3
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	2f46      	cmp	r7, #70	; 0x46
 8005b76:	d114      	bne.n	8005ba2 <__cvt+0x92>
 8005b78:	782b      	ldrb	r3, [r5, #0]
 8005b7a:	2b30      	cmp	r3, #48	; 0x30
 8005b7c:	d10c      	bne.n	8005b98 <__cvt+0x88>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2300      	movs	r3, #0
 8005b82:	0020      	movs	r0, r4
 8005b84:	0031      	movs	r1, r6
 8005b86:	f7fa fc61 	bl	800044c <__aeabi_dcmpeq>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d104      	bne.n	8005b98 <__cvt+0x88>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b9a:	9a07      	ldr	r2, [sp, #28]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	18d3      	adds	r3, r2, r3
 8005ba0:	9307      	str	r3, [sp, #28]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	0020      	movs	r0, r4
 8005ba8:	0031      	movs	r1, r6
 8005baa:	f7fa fc4f 	bl	800044c <__aeabi_dcmpeq>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d001      	beq.n	8005bb6 <__cvt+0xa6>
 8005bb2:	9b07      	ldr	r3, [sp, #28]
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2230      	movs	r2, #48	; 0x30
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	9907      	ldr	r1, [sp, #28]
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	d306      	bcc.n	8005bce <__cvt+0xbe>
 8005bc0:	0028      	movs	r0, r5
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bc6:	1b5b      	subs	r3, r3, r5
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	b00b      	add	sp, #44	; 0x2c
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e7f0      	b.n	8005bb8 <__cvt+0xa8>

08005bd6 <__exponent>:
 8005bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd8:	1c83      	adds	r3, r0, #2
 8005bda:	b087      	sub	sp, #28
 8005bdc:	9303      	str	r3, [sp, #12]
 8005bde:	0005      	movs	r5, r0
 8005be0:	000c      	movs	r4, r1
 8005be2:	232b      	movs	r3, #43	; 0x2b
 8005be4:	7002      	strb	r2, [r0, #0]
 8005be6:	2900      	cmp	r1, #0
 8005be8:	da01      	bge.n	8005bee <__exponent+0x18>
 8005bea:	424c      	negs	r4, r1
 8005bec:	3302      	adds	r3, #2
 8005bee:	706b      	strb	r3, [r5, #1]
 8005bf0:	2c09      	cmp	r4, #9
 8005bf2:	dd2f      	ble.n	8005c54 <__exponent+0x7e>
 8005bf4:	270a      	movs	r7, #10
 8005bf6:	ab04      	add	r3, sp, #16
 8005bf8:	1dde      	adds	r6, r3, #7
 8005bfa:	0020      	movs	r0, r4
 8005bfc:	0039      	movs	r1, r7
 8005bfe:	9601      	str	r6, [sp, #4]
 8005c00:	f7fa fc0e 	bl	8000420 <__aeabi_idivmod>
 8005c04:	3e01      	subs	r6, #1
 8005c06:	3130      	adds	r1, #48	; 0x30
 8005c08:	0020      	movs	r0, r4
 8005c0a:	7031      	strb	r1, [r6, #0]
 8005c0c:	0039      	movs	r1, r7
 8005c0e:	9402      	str	r4, [sp, #8]
 8005c10:	f7fa fb20 	bl	8000254 <__divsi3>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	0004      	movs	r4, r0
 8005c18:	2b63      	cmp	r3, #99	; 0x63
 8005c1a:	dcee      	bgt.n	8005bfa <__exponent+0x24>
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	3430      	adds	r4, #48	; 0x30
 8005c20:	1e9a      	subs	r2, r3, #2
 8005c22:	0013      	movs	r3, r2
 8005c24:	9903      	ldr	r1, [sp, #12]
 8005c26:	7014      	strb	r4, [r2, #0]
 8005c28:	a804      	add	r0, sp, #16
 8005c2a:	3007      	adds	r0, #7
 8005c2c:	4298      	cmp	r0, r3
 8005c2e:	d80c      	bhi.n	8005c4a <__exponent+0x74>
 8005c30:	2300      	movs	r3, #0
 8005c32:	4282      	cmp	r2, r0
 8005c34:	d804      	bhi.n	8005c40 <__exponent+0x6a>
 8005c36:	aa04      	add	r2, sp, #16
 8005c38:	3309      	adds	r3, #9
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	9a01      	ldr	r2, [sp, #4]
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	9a03      	ldr	r2, [sp, #12]
 8005c42:	18d3      	adds	r3, r2, r3
 8005c44:	1b58      	subs	r0, r3, r5
 8005c46:	b007      	add	sp, #28
 8005c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4a:	7818      	ldrb	r0, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	7008      	strb	r0, [r1, #0]
 8005c50:	3101      	adds	r1, #1
 8005c52:	e7e9      	b.n	8005c28 <__exponent+0x52>
 8005c54:	2330      	movs	r3, #48	; 0x30
 8005c56:	3430      	adds	r4, #48	; 0x30
 8005c58:	70ab      	strb	r3, [r5, #2]
 8005c5a:	70ec      	strb	r4, [r5, #3]
 8005c5c:	1d2b      	adds	r3, r5, #4
 8005c5e:	e7f1      	b.n	8005c44 <__exponent+0x6e>

08005c60 <_printf_float>:
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b095      	sub	sp, #84	; 0x54
 8005c64:	000c      	movs	r4, r1
 8005c66:	9208      	str	r2, [sp, #32]
 8005c68:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6c:	0007      	movs	r7, r0
 8005c6e:	f000 ff51 	bl	8006b14 <_localeconv_r>
 8005c72:	6803      	ldr	r3, [r0, #0]
 8005c74:	0018      	movs	r0, r3
 8005c76:	930c      	str	r3, [sp, #48]	; 0x30
 8005c78:	f7fa fa46 	bl	8000108 <strlen>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9312      	str	r3, [sp, #72]	; 0x48
 8005c80:	7e23      	ldrb	r3, [r4, #24]
 8005c82:	2207      	movs	r2, #7
 8005c84:	930a      	str	r3, [sp, #40]	; 0x28
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	900d      	str	r0, [sp, #52]	; 0x34
 8005c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	05c9      	lsls	r1, r1, #23
 8005c92:	d547      	bpl.n	8005d24 <_printf_float+0xc4>
 8005c94:	189b      	adds	r3, r3, r2
 8005c96:	4393      	bics	r3, r2
 8005c98:	001a      	movs	r2, r3
 8005c9a:	3208      	adds	r2, #8
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	681e      	ldr	r6, [r3, #0]
 8005ca0:	685d      	ldr	r5, [r3, #4]
 8005ca2:	0032      	movs	r2, r6
 8005ca4:	002b      	movs	r3, r5
 8005ca6:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ca8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005caa:	2201      	movs	r2, #1
 8005cac:	006b      	lsls	r3, r5, #1
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cb2:	0030      	movs	r0, r6
 8005cb4:	4bab      	ldr	r3, [pc, #684]	; (8005f64 <_printf_float+0x304>)
 8005cb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005cb8:	4252      	negs	r2, r2
 8005cba:	f7fc fb1d 	bl	80022f8 <__aeabi_dcmpun>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d132      	bne.n	8005d28 <_printf_float+0xc8>
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	0030      	movs	r0, r6
 8005cc6:	4ba7      	ldr	r3, [pc, #668]	; (8005f64 <_printf_float+0x304>)
 8005cc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005cca:	4252      	negs	r2, r2
 8005ccc:	f7fa fbce 	bl	800046c <__aeabi_dcmple>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d129      	bne.n	8005d28 <_printf_float+0xc8>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	0030      	movs	r0, r6
 8005cda:	0029      	movs	r1, r5
 8005cdc:	f7fa fbbc 	bl	8000458 <__aeabi_dcmplt>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d003      	beq.n	8005cec <_printf_float+0x8c>
 8005ce4:	0023      	movs	r3, r4
 8005ce6:	222d      	movs	r2, #45	; 0x2d
 8005ce8:	3343      	adds	r3, #67	; 0x43
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cee:	4d9e      	ldr	r5, [pc, #632]	; (8005f68 <_printf_float+0x308>)
 8005cf0:	2b47      	cmp	r3, #71	; 0x47
 8005cf2:	d900      	bls.n	8005cf6 <_printf_float+0x96>
 8005cf4:	4d9d      	ldr	r5, [pc, #628]	; (8005f6c <_printf_float+0x30c>)
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	439a      	bics	r2, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d08:	0021      	movs	r1, r4
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	aa13      	add	r2, sp, #76	; 0x4c
 8005d12:	f000 f9fb 	bl	800610c <_printf_common>
 8005d16:	3001      	adds	r0, #1
 8005d18:	d000      	beq.n	8005d1c <_printf_float+0xbc>
 8005d1a:	e0a3      	b.n	8005e64 <_printf_float+0x204>
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4240      	negs	r0, r0
 8005d20:	b015      	add	sp, #84	; 0x54
 8005d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d24:	3307      	adds	r3, #7
 8005d26:	e7b6      	b.n	8005c96 <_printf_float+0x36>
 8005d28:	0032      	movs	r2, r6
 8005d2a:	002b      	movs	r3, r5
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	0029      	movs	r1, r5
 8005d30:	f7fc fae2 	bl	80022f8 <__aeabi_dcmpun>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d00b      	beq.n	8005d50 <_printf_float+0xf0>
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	da03      	bge.n	8005d44 <_printf_float+0xe4>
 8005d3c:	0023      	movs	r3, r4
 8005d3e:	222d      	movs	r2, #45	; 0x2d
 8005d40:	3343      	adds	r3, #67	; 0x43
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d46:	4d8a      	ldr	r5, [pc, #552]	; (8005f70 <_printf_float+0x310>)
 8005d48:	2b47      	cmp	r3, #71	; 0x47
 8005d4a:	d9d4      	bls.n	8005cf6 <_printf_float+0x96>
 8005d4c:	4d89      	ldr	r5, [pc, #548]	; (8005f74 <_printf_float+0x314>)
 8005d4e:	e7d2      	b.n	8005cf6 <_printf_float+0x96>
 8005d50:	2220      	movs	r2, #32
 8005d52:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	4391      	bics	r1, r2
 8005d58:	910e      	str	r1, [sp, #56]	; 0x38
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	d14a      	bne.n	8005df4 <_printf_float+0x194>
 8005d5e:	3307      	adds	r3, #7
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	9206      	str	r2, [sp, #24]
 8005d6e:	aa12      	add	r2, sp, #72	; 0x48
 8005d70:	9205      	str	r2, [sp, #20]
 8005d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	9204      	str	r2, [sp, #16]
 8005d78:	aa11      	add	r2, sp, #68	; 0x44
 8005d7a:	9203      	str	r2, [sp, #12]
 8005d7c:	2223      	movs	r2, #35	; 0x23
 8005d7e:	a908      	add	r1, sp, #32
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	1852      	adds	r2, r2, r1
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	0032      	movs	r2, r6
 8005d8c:	002b      	movs	r3, r5
 8005d8e:	0038      	movs	r0, r7
 8005d90:	f7ff febe 	bl	8005b10 <__cvt>
 8005d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d96:	0005      	movs	r5, r0
 8005d98:	2b47      	cmp	r3, #71	; 0x47
 8005d9a:	d109      	bne.n	8005db0 <_printf_float+0x150>
 8005d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9e:	1cda      	adds	r2, r3, #3
 8005da0:	db02      	blt.n	8005da8 <_printf_float+0x148>
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	dd49      	ble.n	8005e3c <_printf_float+0x1dc>
 8005da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005daa:	3b02      	subs	r3, #2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	930a      	str	r3, [sp, #40]	; 0x28
 8005db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005db4:	2b65      	cmp	r3, #101	; 0x65
 8005db6:	d824      	bhi.n	8005e02 <_printf_float+0x1a2>
 8005db8:	0020      	movs	r0, r4
 8005dba:	001a      	movs	r2, r3
 8005dbc:	3901      	subs	r1, #1
 8005dbe:	3050      	adds	r0, #80	; 0x50
 8005dc0:	9111      	str	r1, [sp, #68]	; 0x44
 8005dc2:	f7ff ff08 	bl	8005bd6 <__exponent>
 8005dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dca:	1813      	adds	r3, r2, r0
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	2a01      	cmp	r2, #1
 8005dd0:	dc02      	bgt.n	8005dd8 <_printf_float+0x178>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	07d2      	lsls	r2, r2, #31
 8005dd6:	d501      	bpl.n	8005ddc <_printf_float+0x17c>
 8005dd8:	3301      	adds	r3, #1
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	2323      	movs	r3, #35	; 0x23
 8005dde:	aa08      	add	r2, sp, #32
 8005de0:	189b      	adds	r3, r3, r2
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d100      	bne.n	8005dea <_printf_float+0x18a>
 8005de8:	e78d      	b.n	8005d06 <_printf_float+0xa6>
 8005dea:	0023      	movs	r3, r4
 8005dec:	222d      	movs	r2, #45	; 0x2d
 8005dee:	3343      	adds	r3, #67	; 0x43
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e788      	b.n	8005d06 <_printf_float+0xa6>
 8005df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df6:	2a47      	cmp	r2, #71	; 0x47
 8005df8:	d1b3      	bne.n	8005d62 <_printf_float+0x102>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1b1      	bne.n	8005d62 <_printf_float+0x102>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	e7ae      	b.n	8005d60 <_printf_float+0x100>
 8005e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e04:	2b66      	cmp	r3, #102	; 0x66
 8005e06:	d11b      	bne.n	8005e40 <_printf_float+0x1e0>
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	dd09      	ble.n	8005e22 <_printf_float+0x1c2>
 8005e0e:	6121      	str	r1, [r4, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <_printf_float+0x1ba>
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	07d2      	lsls	r2, r2, #31
 8005e18:	d50b      	bpl.n	8005e32 <_printf_float+0x1d2>
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	185b      	adds	r3, r3, r1
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	e007      	b.n	8005e32 <_printf_float+0x1d2>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <_printf_float+0x1ce>
 8005e26:	2201      	movs	r2, #1
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	4211      	tst	r1, r2
 8005e2c:	d000      	beq.n	8005e30 <_printf_float+0x1d0>
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	6122      	str	r2, [r4, #16]
 8005e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e34:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e36:	2300      	movs	r3, #0
 8005e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e3a:	e7cf      	b.n	8005ddc <_printf_float+0x17c>
 8005e3c:	2367      	movs	r3, #103	; 0x67
 8005e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e44:	4299      	cmp	r1, r3
 8005e46:	db06      	blt.n	8005e56 <_printf_float+0x1f6>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	6121      	str	r1, [r4, #16]
 8005e4c:	07db      	lsls	r3, r3, #31
 8005e4e:	d5f0      	bpl.n	8005e32 <_printf_float+0x1d2>
 8005e50:	3101      	adds	r1, #1
 8005e52:	6121      	str	r1, [r4, #16]
 8005e54:	e7ed      	b.n	8005e32 <_printf_float+0x1d2>
 8005e56:	2201      	movs	r2, #1
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	dc01      	bgt.n	8005e60 <_printf_float+0x200>
 8005e5c:	1892      	adds	r2, r2, r2
 8005e5e:	1a52      	subs	r2, r2, r1
 8005e60:	189b      	adds	r3, r3, r2
 8005e62:	e7dc      	b.n	8005e1e <_printf_float+0x1be>
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	0553      	lsls	r3, r2, #21
 8005e68:	d408      	bmi.n	8005e7c <_printf_float+0x21c>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	002a      	movs	r2, r5
 8005e6e:	0038      	movs	r0, r7
 8005e70:	9908      	ldr	r1, [sp, #32]
 8005e72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e74:	47a8      	blx	r5
 8005e76:	3001      	adds	r0, #1
 8005e78:	d12a      	bne.n	8005ed0 <_printf_float+0x270>
 8005e7a:	e74f      	b.n	8005d1c <_printf_float+0xbc>
 8005e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e7e:	2b65      	cmp	r3, #101	; 0x65
 8005e80:	d800      	bhi.n	8005e84 <_printf_float+0x224>
 8005e82:	e0ec      	b.n	800605e <_printf_float+0x3fe>
 8005e84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005e86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f7fa fade 	bl	800044c <__aeabi_dcmpeq>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d034      	beq.n	8005efe <_printf_float+0x29e>
 8005e94:	2301      	movs	r3, #1
 8005e96:	0038      	movs	r0, r7
 8005e98:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <_printf_float+0x318>)
 8005e9a:	9908      	ldr	r1, [sp, #32]
 8005e9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e9e:	47a8      	blx	r5
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d100      	bne.n	8005ea6 <_printf_float+0x246>
 8005ea4:	e73a      	b.n	8005d1c <_printf_float+0xbc>
 8005ea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	db02      	blt.n	8005eb4 <_printf_float+0x254>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	07db      	lsls	r3, r3, #31
 8005eb2:	d50d      	bpl.n	8005ed0 <_printf_float+0x270>
 8005eb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005eb6:	0038      	movs	r0, r7
 8005eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ebc:	9908      	ldr	r1, [sp, #32]
 8005ebe:	47a8      	blx	r5
 8005ec0:	2500      	movs	r5, #0
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d100      	bne.n	8005ec8 <_printf_float+0x268>
 8005ec6:	e729      	b.n	8005d1c <_printf_float+0xbc>
 8005ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dc0a      	bgt.n	8005ee6 <_printf_float+0x286>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	079b      	lsls	r3, r3, #30
 8005ed4:	d500      	bpl.n	8005ed8 <_printf_float+0x278>
 8005ed6:	e116      	b.n	8006106 <_printf_float+0x4a6>
 8005ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eda:	68e0      	ldr	r0, [r4, #12]
 8005edc:	4298      	cmp	r0, r3
 8005ede:	db00      	blt.n	8005ee2 <_printf_float+0x282>
 8005ee0:	e71e      	b.n	8005d20 <_printf_float+0xc0>
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	e71c      	b.n	8005d20 <_printf_float+0xc0>
 8005ee6:	0022      	movs	r2, r4
 8005ee8:	2301      	movs	r3, #1
 8005eea:	0038      	movs	r0, r7
 8005eec:	9908      	ldr	r1, [sp, #32]
 8005eee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ef0:	321a      	adds	r2, #26
 8005ef2:	47b0      	blx	r6
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d100      	bne.n	8005efa <_printf_float+0x29a>
 8005ef8:	e710      	b.n	8005d1c <_printf_float+0xbc>
 8005efa:	3501      	adds	r5, #1
 8005efc:	e7e4      	b.n	8005ec8 <_printf_float+0x268>
 8005efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dc3b      	bgt.n	8005f7c <_printf_float+0x31c>
 8005f04:	2301      	movs	r3, #1
 8005f06:	0038      	movs	r0, r7
 8005f08:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <_printf_float+0x318>)
 8005f0a:	9908      	ldr	r1, [sp, #32]
 8005f0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f0e:	47b0      	blx	r6
 8005f10:	3001      	adds	r0, #1
 8005f12:	d100      	bne.n	8005f16 <_printf_float+0x2b6>
 8005f14:	e702      	b.n	8005d1c <_printf_float+0xbc>
 8005f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d102      	bne.n	8005f24 <_printf_float+0x2c4>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	07db      	lsls	r3, r3, #31
 8005f22:	d5d5      	bpl.n	8005ed0 <_printf_float+0x270>
 8005f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f26:	0038      	movs	r0, r7
 8005f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f2a:	9908      	ldr	r1, [sp, #32]
 8005f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f2e:	47b0      	blx	r6
 8005f30:	2300      	movs	r3, #0
 8005f32:	3001      	adds	r0, #1
 8005f34:	d100      	bne.n	8005f38 <_printf_float+0x2d8>
 8005f36:	e6f1      	b.n	8005d1c <_printf_float+0xbc>
 8005f38:	930a      	str	r3, [sp, #40]	; 0x28
 8005f3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f3e:	425b      	negs	r3, r3
 8005f40:	4293      	cmp	r3, r2
 8005f42:	dc01      	bgt.n	8005f48 <_printf_float+0x2e8>
 8005f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f46:	e791      	b.n	8005e6c <_printf_float+0x20c>
 8005f48:	0022      	movs	r2, r4
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	0038      	movs	r0, r7
 8005f4e:	9908      	ldr	r1, [sp, #32]
 8005f50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f52:	321a      	adds	r2, #26
 8005f54:	47b0      	blx	r6
 8005f56:	3001      	adds	r0, #1
 8005f58:	d100      	bne.n	8005f5c <_printf_float+0x2fc>
 8005f5a:	e6df      	b.n	8005d1c <_printf_float+0xbc>
 8005f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f5e:	3301      	adds	r3, #1
 8005f60:	e7ea      	b.n	8005f38 <_printf_float+0x2d8>
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	7fefffff 	.word	0x7fefffff
 8005f68:	0800a5e1 	.word	0x0800a5e1
 8005f6c:	0800a5e5 	.word	0x0800a5e5
 8005f70:	0800a5e9 	.word	0x0800a5e9
 8005f74:	0800a5ed 	.word	0x0800a5ed
 8005f78:	0800a5f1 	.word	0x0800a5f1
 8005f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f80:	920a      	str	r2, [sp, #40]	; 0x28
 8005f82:	429a      	cmp	r2, r3
 8005f84:	dd00      	ble.n	8005f88 <_printf_float+0x328>
 8005f86:	930a      	str	r3, [sp, #40]	; 0x28
 8005f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dc3d      	bgt.n	800600a <_printf_float+0x3aa>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	930e      	str	r3, [sp, #56]	; 0x38
 8005f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f94:	43db      	mvns	r3, r3
 8005f96:	17db      	asrs	r3, r3, #31
 8005f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005faa:	4293      	cmp	r3, r2
 8005fac:	dc36      	bgt.n	800601c <_printf_float+0x3bc>
 8005fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	db40      	blt.n	8006038 <_printf_float+0x3d8>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	07db      	lsls	r3, r3, #31
 8005fba:	d43d      	bmi.n	8006038 <_printf_float+0x3d8>
 8005fbc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc2:	1af3      	subs	r3, r6, r3
 8005fc4:	1ab6      	subs	r6, r6, r2
 8005fc6:	429e      	cmp	r6, r3
 8005fc8:	dd00      	ble.n	8005fcc <_printf_float+0x36c>
 8005fca:	001e      	movs	r6, r3
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	dc3c      	bgt.n	800604a <_printf_float+0x3ea>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fd4:	43f3      	mvns	r3, r6
 8005fd6:	17db      	asrs	r3, r3, #31
 8005fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fe2:	4032      	ands	r2, r6
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	dc00      	bgt.n	8005fee <_printf_float+0x38e>
 8005fec:	e770      	b.n	8005ed0 <_printf_float+0x270>
 8005fee:	0022      	movs	r2, r4
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	0038      	movs	r0, r7
 8005ff4:	9908      	ldr	r1, [sp, #32]
 8005ff6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ff8:	321a      	adds	r2, #26
 8005ffa:	47a8      	blx	r5
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d100      	bne.n	8006002 <_printf_float+0x3a2>
 8006000:	e68c      	b.n	8005d1c <_printf_float+0xbc>
 8006002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006004:	3301      	adds	r3, #1
 8006006:	930a      	str	r3, [sp, #40]	; 0x28
 8006008:	e7e7      	b.n	8005fda <_printf_float+0x37a>
 800600a:	002a      	movs	r2, r5
 800600c:	0038      	movs	r0, r7
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	9908      	ldr	r1, [sp, #32]
 8006012:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006014:	47b0      	blx	r6
 8006016:	3001      	adds	r0, #1
 8006018:	d1b9      	bne.n	8005f8e <_printf_float+0x32e>
 800601a:	e67f      	b.n	8005d1c <_printf_float+0xbc>
 800601c:	0022      	movs	r2, r4
 800601e:	2301      	movs	r3, #1
 8006020:	0038      	movs	r0, r7
 8006022:	9908      	ldr	r1, [sp, #32]
 8006024:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006026:	321a      	adds	r2, #26
 8006028:	47b0      	blx	r6
 800602a:	3001      	adds	r0, #1
 800602c:	d100      	bne.n	8006030 <_printf_float+0x3d0>
 800602e:	e675      	b.n	8005d1c <_printf_float+0xbc>
 8006030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006032:	3301      	adds	r3, #1
 8006034:	930e      	str	r3, [sp, #56]	; 0x38
 8006036:	e7b0      	b.n	8005f9a <_printf_float+0x33a>
 8006038:	0038      	movs	r0, r7
 800603a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800603e:	9908      	ldr	r1, [sp, #32]
 8006040:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006042:	47b0      	blx	r6
 8006044:	3001      	adds	r0, #1
 8006046:	d1b9      	bne.n	8005fbc <_printf_float+0x35c>
 8006048:	e668      	b.n	8005d1c <_printf_float+0xbc>
 800604a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604c:	0038      	movs	r0, r7
 800604e:	18ea      	adds	r2, r5, r3
 8006050:	9908      	ldr	r1, [sp, #32]
 8006052:	0033      	movs	r3, r6
 8006054:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006056:	47a8      	blx	r5
 8006058:	3001      	adds	r0, #1
 800605a:	d1b9      	bne.n	8005fd0 <_printf_float+0x370>
 800605c:	e65e      	b.n	8005d1c <_printf_float+0xbc>
 800605e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006060:	2b01      	cmp	r3, #1
 8006062:	dc02      	bgt.n	800606a <_printf_float+0x40a>
 8006064:	2301      	movs	r3, #1
 8006066:	421a      	tst	r2, r3
 8006068:	d03a      	beq.n	80060e0 <_printf_float+0x480>
 800606a:	2301      	movs	r3, #1
 800606c:	002a      	movs	r2, r5
 800606e:	0038      	movs	r0, r7
 8006070:	9908      	ldr	r1, [sp, #32]
 8006072:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006074:	47b0      	blx	r6
 8006076:	3001      	adds	r0, #1
 8006078:	d100      	bne.n	800607c <_printf_float+0x41c>
 800607a:	e64f      	b.n	8005d1c <_printf_float+0xbc>
 800607c:	0038      	movs	r0, r7
 800607e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006082:	9908      	ldr	r1, [sp, #32]
 8006084:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006086:	47b0      	blx	r6
 8006088:	3001      	adds	r0, #1
 800608a:	d100      	bne.n	800608e <_printf_float+0x42e>
 800608c:	e646      	b.n	8005d1c <_printf_float+0xbc>
 800608e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006090:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006092:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006094:	2200      	movs	r2, #0
 8006096:	001e      	movs	r6, r3
 8006098:	2300      	movs	r3, #0
 800609a:	f7fa f9d7 	bl	800044c <__aeabi_dcmpeq>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d11c      	bne.n	80060dc <_printf_float+0x47c>
 80060a2:	0033      	movs	r3, r6
 80060a4:	1c6a      	adds	r2, r5, #1
 80060a6:	3b01      	subs	r3, #1
 80060a8:	0038      	movs	r0, r7
 80060aa:	9908      	ldr	r1, [sp, #32]
 80060ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80060ae:	47a8      	blx	r5
 80060b0:	3001      	adds	r0, #1
 80060b2:	d10f      	bne.n	80060d4 <_printf_float+0x474>
 80060b4:	e632      	b.n	8005d1c <_printf_float+0xbc>
 80060b6:	0022      	movs	r2, r4
 80060b8:	2301      	movs	r3, #1
 80060ba:	0038      	movs	r0, r7
 80060bc:	9908      	ldr	r1, [sp, #32]
 80060be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80060c0:	321a      	adds	r2, #26
 80060c2:	47b0      	blx	r6
 80060c4:	3001      	adds	r0, #1
 80060c6:	d100      	bne.n	80060ca <_printf_float+0x46a>
 80060c8:	e628      	b.n	8005d1c <_printf_float+0xbc>
 80060ca:	3501      	adds	r5, #1
 80060cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ce:	3b01      	subs	r3, #1
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	dcf0      	bgt.n	80060b6 <_printf_float+0x456>
 80060d4:	0022      	movs	r2, r4
 80060d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d8:	3250      	adds	r2, #80	; 0x50
 80060da:	e6c8      	b.n	8005e6e <_printf_float+0x20e>
 80060dc:	2500      	movs	r5, #0
 80060de:	e7f5      	b.n	80060cc <_printf_float+0x46c>
 80060e0:	002a      	movs	r2, r5
 80060e2:	e7e1      	b.n	80060a8 <_printf_float+0x448>
 80060e4:	0022      	movs	r2, r4
 80060e6:	2301      	movs	r3, #1
 80060e8:	0038      	movs	r0, r7
 80060ea:	9908      	ldr	r1, [sp, #32]
 80060ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80060ee:	3219      	adds	r2, #25
 80060f0:	47b0      	blx	r6
 80060f2:	3001      	adds	r0, #1
 80060f4:	d100      	bne.n	80060f8 <_printf_float+0x498>
 80060f6:	e611      	b.n	8005d1c <_printf_float+0xbc>
 80060f8:	3501      	adds	r5, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	42ab      	cmp	r3, r5
 8006102:	dcef      	bgt.n	80060e4 <_printf_float+0x484>
 8006104:	e6e8      	b.n	8005ed8 <_printf_float+0x278>
 8006106:	2500      	movs	r5, #0
 8006108:	e7f7      	b.n	80060fa <_printf_float+0x49a>
 800610a:	46c0      	nop			; (mov r8, r8)

0800610c <_printf_common>:
 800610c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800610e:	0016      	movs	r6, r2
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	688a      	ldr	r2, [r1, #8]
 8006114:	690b      	ldr	r3, [r1, #16]
 8006116:	000c      	movs	r4, r1
 8006118:	9000      	str	r0, [sp, #0]
 800611a:	4293      	cmp	r3, r2
 800611c:	da00      	bge.n	8006120 <_printf_common+0x14>
 800611e:	0013      	movs	r3, r2
 8006120:	0022      	movs	r2, r4
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	3243      	adds	r2, #67	; 0x43
 8006126:	7812      	ldrb	r2, [r2, #0]
 8006128:	2a00      	cmp	r2, #0
 800612a:	d001      	beq.n	8006130 <_printf_common+0x24>
 800612c:	3301      	adds	r3, #1
 800612e:	6033      	str	r3, [r6, #0]
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	069b      	lsls	r3, r3, #26
 8006134:	d502      	bpl.n	800613c <_printf_common+0x30>
 8006136:	6833      	ldr	r3, [r6, #0]
 8006138:	3302      	adds	r3, #2
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	6822      	ldr	r2, [r4, #0]
 800613e:	2306      	movs	r3, #6
 8006140:	0015      	movs	r5, r2
 8006142:	401d      	ands	r5, r3
 8006144:	421a      	tst	r2, r3
 8006146:	d027      	beq.n	8006198 <_printf_common+0x8c>
 8006148:	0023      	movs	r3, r4
 800614a:	3343      	adds	r3, #67	; 0x43
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	4193      	sbcs	r3, r2
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d430      	bmi.n	80061ba <_printf_common+0xae>
 8006158:	0022      	movs	r2, r4
 800615a:	9901      	ldr	r1, [sp, #4]
 800615c:	9800      	ldr	r0, [sp, #0]
 800615e:	9d08      	ldr	r5, [sp, #32]
 8006160:	3243      	adds	r2, #67	; 0x43
 8006162:	47a8      	blx	r5
 8006164:	3001      	adds	r0, #1
 8006166:	d025      	beq.n	80061b4 <_printf_common+0xa8>
 8006168:	2206      	movs	r2, #6
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	2500      	movs	r5, #0
 800616e:	4013      	ands	r3, r2
 8006170:	2b04      	cmp	r3, #4
 8006172:	d105      	bne.n	8006180 <_printf_common+0x74>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	68e5      	ldr	r5, [r4, #12]
 8006178:	1aed      	subs	r5, r5, r3
 800617a:	43eb      	mvns	r3, r5
 800617c:	17db      	asrs	r3, r3, #31
 800617e:	401d      	ands	r5, r3
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	6922      	ldr	r2, [r4, #16]
 8006184:	4293      	cmp	r3, r2
 8006186:	dd01      	ble.n	800618c <_printf_common+0x80>
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	18ed      	adds	r5, r5, r3
 800618c:	2600      	movs	r6, #0
 800618e:	42b5      	cmp	r5, r6
 8006190:	d120      	bne.n	80061d4 <_printf_common+0xc8>
 8006192:	2000      	movs	r0, #0
 8006194:	e010      	b.n	80061b8 <_printf_common+0xac>
 8006196:	3501      	adds	r5, #1
 8006198:	68e3      	ldr	r3, [r4, #12]
 800619a:	6832      	ldr	r2, [r6, #0]
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	42ab      	cmp	r3, r5
 80061a0:	ddd2      	ble.n	8006148 <_printf_common+0x3c>
 80061a2:	0022      	movs	r2, r4
 80061a4:	2301      	movs	r3, #1
 80061a6:	9901      	ldr	r1, [sp, #4]
 80061a8:	9800      	ldr	r0, [sp, #0]
 80061aa:	9f08      	ldr	r7, [sp, #32]
 80061ac:	3219      	adds	r2, #25
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1f0      	bne.n	8006196 <_printf_common+0x8a>
 80061b4:	2001      	movs	r0, #1
 80061b6:	4240      	negs	r0, r0
 80061b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061ba:	2030      	movs	r0, #48	; 0x30
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	3143      	adds	r1, #67	; 0x43
 80061c0:	7008      	strb	r0, [r1, #0]
 80061c2:	0021      	movs	r1, r4
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	3145      	adds	r1, #69	; 0x45
 80061c8:	7809      	ldrb	r1, [r1, #0]
 80061ca:	18a2      	adds	r2, r4, r2
 80061cc:	3243      	adds	r2, #67	; 0x43
 80061ce:	3302      	adds	r3, #2
 80061d0:	7011      	strb	r1, [r2, #0]
 80061d2:	e7c1      	b.n	8006158 <_printf_common+0x4c>
 80061d4:	0022      	movs	r2, r4
 80061d6:	2301      	movs	r3, #1
 80061d8:	9901      	ldr	r1, [sp, #4]
 80061da:	9800      	ldr	r0, [sp, #0]
 80061dc:	9f08      	ldr	r7, [sp, #32]
 80061de:	321a      	adds	r2, #26
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	d0e6      	beq.n	80061b4 <_printf_common+0xa8>
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7d1      	b.n	800618e <_printf_common+0x82>
	...

080061ec <_printf_i>:
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b08b      	sub	sp, #44	; 0x2c
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	000a      	movs	r2, r1
 80061f4:	3243      	adds	r2, #67	; 0x43
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	9005      	str	r0, [sp, #20]
 80061fa:	9204      	str	r2, [sp, #16]
 80061fc:	7e0a      	ldrb	r2, [r1, #24]
 80061fe:	000c      	movs	r4, r1
 8006200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006202:	2a78      	cmp	r2, #120	; 0x78
 8006204:	d809      	bhi.n	800621a <_printf_i+0x2e>
 8006206:	2a62      	cmp	r2, #98	; 0x62
 8006208:	d80b      	bhi.n	8006222 <_printf_i+0x36>
 800620a:	2a00      	cmp	r2, #0
 800620c:	d100      	bne.n	8006210 <_printf_i+0x24>
 800620e:	e0be      	b.n	800638e <_printf_i+0x1a2>
 8006210:	497c      	ldr	r1, [pc, #496]	; (8006404 <_printf_i+0x218>)
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	2a58      	cmp	r2, #88	; 0x58
 8006216:	d100      	bne.n	800621a <_printf_i+0x2e>
 8006218:	e093      	b.n	8006342 <_printf_i+0x156>
 800621a:	0026      	movs	r6, r4
 800621c:	3642      	adds	r6, #66	; 0x42
 800621e:	7032      	strb	r2, [r6, #0]
 8006220:	e022      	b.n	8006268 <_printf_i+0x7c>
 8006222:	0010      	movs	r0, r2
 8006224:	3863      	subs	r0, #99	; 0x63
 8006226:	2815      	cmp	r0, #21
 8006228:	d8f7      	bhi.n	800621a <_printf_i+0x2e>
 800622a:	f7f9 ff7f 	bl	800012c <__gnu_thumb1_case_shi>
 800622e:	0016      	.short	0x0016
 8006230:	fff6001f 	.word	0xfff6001f
 8006234:	fff6fff6 	.word	0xfff6fff6
 8006238:	001ffff6 	.word	0x001ffff6
 800623c:	fff6fff6 	.word	0xfff6fff6
 8006240:	fff6fff6 	.word	0xfff6fff6
 8006244:	003600a3 	.word	0x003600a3
 8006248:	fff60083 	.word	0xfff60083
 800624c:	00b4fff6 	.word	0x00b4fff6
 8006250:	0036fff6 	.word	0x0036fff6
 8006254:	fff6fff6 	.word	0xfff6fff6
 8006258:	0087      	.short	0x0087
 800625a:	0026      	movs	r6, r4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	3642      	adds	r6, #66	; 0x42
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	7033      	strb	r3, [r6, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	e0a2      	b.n	80063b2 <_printf_i+0x1c6>
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	6809      	ldr	r1, [r1, #0]
 8006270:	1d02      	adds	r2, r0, #4
 8006272:	060d      	lsls	r5, r1, #24
 8006274:	d50b      	bpl.n	800628e <_printf_i+0xa2>
 8006276:	6805      	ldr	r5, [r0, #0]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	2d00      	cmp	r5, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0x9a>
 800627e:	232d      	movs	r3, #45	; 0x2d
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	426d      	negs	r5, r5
 8006284:	7013      	strb	r3, [r2, #0]
 8006286:	4b5f      	ldr	r3, [pc, #380]	; (8006404 <_printf_i+0x218>)
 8006288:	270a      	movs	r7, #10
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	e01b      	b.n	80062c6 <_printf_i+0xda>
 800628e:	6805      	ldr	r5, [r0, #0]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	0649      	lsls	r1, r1, #25
 8006294:	d5f1      	bpl.n	800627a <_printf_i+0x8e>
 8006296:	b22d      	sxth	r5, r5
 8006298:	e7ef      	b.n	800627a <_printf_i+0x8e>
 800629a:	680d      	ldr	r5, [r1, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	1d08      	adds	r0, r1, #4
 80062a0:	6018      	str	r0, [r3, #0]
 80062a2:	062e      	lsls	r6, r5, #24
 80062a4:	d501      	bpl.n	80062aa <_printf_i+0xbe>
 80062a6:	680d      	ldr	r5, [r1, #0]
 80062a8:	e003      	b.n	80062b2 <_printf_i+0xc6>
 80062aa:	066d      	lsls	r5, r5, #25
 80062ac:	d5fb      	bpl.n	80062a6 <_printf_i+0xba>
 80062ae:	680d      	ldr	r5, [r1, #0]
 80062b0:	b2ad      	uxth	r5, r5
 80062b2:	4b54      	ldr	r3, [pc, #336]	; (8006404 <_printf_i+0x218>)
 80062b4:	2708      	movs	r7, #8
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	2a6f      	cmp	r2, #111	; 0x6f
 80062ba:	d000      	beq.n	80062be <_printf_i+0xd2>
 80062bc:	3702      	adds	r7, #2
 80062be:	0023      	movs	r3, r4
 80062c0:	2200      	movs	r2, #0
 80062c2:	3343      	adds	r3, #67	; 0x43
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	db03      	blt.n	80062d6 <_printf_i+0xea>
 80062ce:	2104      	movs	r1, #4
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	438a      	bics	r2, r1
 80062d4:	6022      	str	r2, [r4, #0]
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d102      	bne.n	80062e0 <_printf_i+0xf4>
 80062da:	9e04      	ldr	r6, [sp, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <_printf_i+0x10e>
 80062e0:	9e04      	ldr	r6, [sp, #16]
 80062e2:	0028      	movs	r0, r5
 80062e4:	0039      	movs	r1, r7
 80062e6:	f7f9 ffb1 	bl	800024c <__aeabi_uidivmod>
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	3e01      	subs	r6, #1
 80062ee:	5c5b      	ldrb	r3, [r3, r1]
 80062f0:	7033      	strb	r3, [r6, #0]
 80062f2:	002b      	movs	r3, r5
 80062f4:	0005      	movs	r5, r0
 80062f6:	429f      	cmp	r7, r3
 80062f8:	d9f3      	bls.n	80062e2 <_printf_i+0xf6>
 80062fa:	2f08      	cmp	r7, #8
 80062fc:	d109      	bne.n	8006312 <_printf_i+0x126>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	07db      	lsls	r3, r3, #31
 8006302:	d506      	bpl.n	8006312 <_printf_i+0x126>
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	dc02      	bgt.n	8006312 <_printf_i+0x126>
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	3e01      	subs	r6, #1
 8006310:	7033      	strb	r3, [r6, #0]
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	1b9b      	subs	r3, r3, r6
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	0021      	movs	r1, r4
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	9805      	ldr	r0, [sp, #20]
 8006320:	9b06      	ldr	r3, [sp, #24]
 8006322:	aa09      	add	r2, sp, #36	; 0x24
 8006324:	f7ff fef2 	bl	800610c <_printf_common>
 8006328:	3001      	adds	r0, #1
 800632a:	d147      	bne.n	80063bc <_printf_i+0x1d0>
 800632c:	2001      	movs	r0, #1
 800632e:	4240      	negs	r0, r0
 8006330:	b00b      	add	sp, #44	; 0x2c
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006334:	2220      	movs	r2, #32
 8006336:	6809      	ldr	r1, [r1, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	6022      	str	r2, [r4, #0]
 800633c:	2278      	movs	r2, #120	; 0x78
 800633e:	4932      	ldr	r1, [pc, #200]	; (8006408 <_printf_i+0x21c>)
 8006340:	9103      	str	r1, [sp, #12]
 8006342:	0021      	movs	r1, r4
 8006344:	3145      	adds	r1, #69	; 0x45
 8006346:	700a      	strb	r2, [r1, #0]
 8006348:	6819      	ldr	r1, [r3, #0]
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	c920      	ldmia	r1!, {r5}
 800634e:	0610      	lsls	r0, r2, #24
 8006350:	d402      	bmi.n	8006358 <_printf_i+0x16c>
 8006352:	0650      	lsls	r0, r2, #25
 8006354:	d500      	bpl.n	8006358 <_printf_i+0x16c>
 8006356:	b2ad      	uxth	r5, r5
 8006358:	6019      	str	r1, [r3, #0]
 800635a:	07d3      	lsls	r3, r2, #31
 800635c:	d502      	bpl.n	8006364 <_printf_i+0x178>
 800635e:	2320      	movs	r3, #32
 8006360:	4313      	orrs	r3, r2
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	2710      	movs	r7, #16
 8006366:	2d00      	cmp	r5, #0
 8006368:	d1a9      	bne.n	80062be <_printf_i+0xd2>
 800636a:	2220      	movs	r2, #32
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	4393      	bics	r3, r2
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	e7a4      	b.n	80062be <_printf_i+0xd2>
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	680d      	ldr	r5, [r1, #0]
 8006378:	1d10      	adds	r0, r2, #4
 800637a:	6949      	ldr	r1, [r1, #20]
 800637c:	6018      	str	r0, [r3, #0]
 800637e:	6813      	ldr	r3, [r2, #0]
 8006380:	062e      	lsls	r6, r5, #24
 8006382:	d501      	bpl.n	8006388 <_printf_i+0x19c>
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	e002      	b.n	800638e <_printf_i+0x1a2>
 8006388:	066d      	lsls	r5, r5, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0x198>
 800638c:	8019      	strh	r1, [r3, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	9e04      	ldr	r6, [sp, #16]
 8006392:	6123      	str	r3, [r4, #16]
 8006394:	e7c0      	b.n	8006318 <_printf_i+0x12c>
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	1d11      	adds	r1, r2, #4
 800639a:	6019      	str	r1, [r3, #0]
 800639c:	6816      	ldr	r6, [r2, #0]
 800639e:	2100      	movs	r1, #0
 80063a0:	0030      	movs	r0, r6
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	f000 fc35 	bl	8006c12 <memchr>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d001      	beq.n	80063b0 <_printf_i+0x1c4>
 80063ac:	1b80      	subs	r0, r0, r6
 80063ae:	6060      	str	r0, [r4, #4]
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	2300      	movs	r3, #0
 80063b6:	9a04      	ldr	r2, [sp, #16]
 80063b8:	7013      	strb	r3, [r2, #0]
 80063ba:	e7ad      	b.n	8006318 <_printf_i+0x12c>
 80063bc:	0032      	movs	r2, r6
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	9906      	ldr	r1, [sp, #24]
 80063c2:	9805      	ldr	r0, [sp, #20]
 80063c4:	9d07      	ldr	r5, [sp, #28]
 80063c6:	47a8      	blx	r5
 80063c8:	3001      	adds	r0, #1
 80063ca:	d0af      	beq.n	800632c <_printf_i+0x140>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	079b      	lsls	r3, r3, #30
 80063d0:	d415      	bmi.n	80063fe <_printf_i+0x212>
 80063d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d4:	68e0      	ldr	r0, [r4, #12]
 80063d6:	4298      	cmp	r0, r3
 80063d8:	daaa      	bge.n	8006330 <_printf_i+0x144>
 80063da:	0018      	movs	r0, r3
 80063dc:	e7a8      	b.n	8006330 <_printf_i+0x144>
 80063de:	0022      	movs	r2, r4
 80063e0:	2301      	movs	r3, #1
 80063e2:	9906      	ldr	r1, [sp, #24]
 80063e4:	9805      	ldr	r0, [sp, #20]
 80063e6:	9e07      	ldr	r6, [sp, #28]
 80063e8:	3219      	adds	r2, #25
 80063ea:	47b0      	blx	r6
 80063ec:	3001      	adds	r0, #1
 80063ee:	d09d      	beq.n	800632c <_printf_i+0x140>
 80063f0:	3501      	adds	r5, #1
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dcf0      	bgt.n	80063de <_printf_i+0x1f2>
 80063fc:	e7e9      	b.n	80063d2 <_printf_i+0x1e6>
 80063fe:	2500      	movs	r5, #0
 8006400:	e7f7      	b.n	80063f2 <_printf_i+0x206>
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	0800a5f3 	.word	0x0800a5f3
 8006408:	0800a604 	.word	0x0800a604

0800640c <_scanf_float>:
 800640c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640e:	b08b      	sub	sp, #44	; 0x2c
 8006410:	0016      	movs	r6, r2
 8006412:	9002      	str	r0, [sp, #8]
 8006414:	22ae      	movs	r2, #174	; 0xae
 8006416:	2000      	movs	r0, #0
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	688b      	ldr	r3, [r1, #8]
 800641c:	000f      	movs	r7, r1
 800641e:	1e59      	subs	r1, r3, #1
 8006420:	0052      	lsls	r2, r2, #1
 8006422:	9006      	str	r0, [sp, #24]
 8006424:	4291      	cmp	r1, r2
 8006426:	d905      	bls.n	8006434 <_scanf_float+0x28>
 8006428:	3b5e      	subs	r3, #94	; 0x5e
 800642a:	3bff      	subs	r3, #255	; 0xff
 800642c:	9306      	str	r3, [sp, #24]
 800642e:	235e      	movs	r3, #94	; 0x5e
 8006430:	33ff      	adds	r3, #255	; 0xff
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	23f0      	movs	r3, #240	; 0xf0
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4313      	orrs	r3, r2
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	003b      	movs	r3, r7
 8006440:	2400      	movs	r4, #0
 8006442:	331c      	adds	r3, #28
 8006444:	001d      	movs	r5, r3
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	9403      	str	r4, [sp, #12]
 800644a:	9409      	str	r4, [sp, #36]	; 0x24
 800644c:	9408      	str	r4, [sp, #32]
 800644e:	9401      	str	r4, [sp, #4]
 8006450:	9405      	str	r4, [sp, #20]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	2a00      	cmp	r2, #0
 8006456:	d00a      	beq.n	800646e <_scanf_float+0x62>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b4e      	cmp	r3, #78	; 0x4e
 800645e:	d844      	bhi.n	80064ea <_scanf_float+0xde>
 8006460:	0018      	movs	r0, r3
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d82c      	bhi.n	80064c0 <_scanf_float+0xb4>
 8006466:	382b      	subs	r0, #43	; 0x2b
 8006468:	b2c1      	uxtb	r1, r0
 800646a:	290e      	cmp	r1, #14
 800646c:	d92a      	bls.n	80064c4 <_scanf_float+0xb8>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <_scanf_float+0x70>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	4aa3      	ldr	r2, [pc, #652]	; (8006704 <_scanf_float+0x2f8>)
 8006478:	4013      	ands	r3, r2
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	3b01      	subs	r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d900      	bls.n	8006486 <_scanf_float+0x7a>
 8006484:	e0f9      	b.n	800667a <_scanf_float+0x26e>
 8006486:	24be      	movs	r4, #190	; 0xbe
 8006488:	0064      	lsls	r4, r4, #1
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	429d      	cmp	r5, r3
 800648e:	d900      	bls.n	8006492 <_scanf_float+0x86>
 8006490:	e0e9      	b.n	8006666 <_scanf_float+0x25a>
 8006492:	2301      	movs	r3, #1
 8006494:	9303      	str	r3, [sp, #12]
 8006496:	e183      	b.n	80067a0 <_scanf_float+0x394>
 8006498:	0018      	movs	r0, r3
 800649a:	3861      	subs	r0, #97	; 0x61
 800649c:	280d      	cmp	r0, #13
 800649e:	d8e6      	bhi.n	800646e <_scanf_float+0x62>
 80064a0:	f7f9 fe44 	bl	800012c <__gnu_thumb1_case_shi>
 80064a4:	ffe50083 	.word	0xffe50083
 80064a8:	ffe5ffe5 	.word	0xffe5ffe5
 80064ac:	00a200b6 	.word	0x00a200b6
 80064b0:	ffe5ffe5 	.word	0xffe5ffe5
 80064b4:	ffe50089 	.word	0xffe50089
 80064b8:	ffe5ffe5 	.word	0xffe5ffe5
 80064bc:	0065ffe5 	.word	0x0065ffe5
 80064c0:	3841      	subs	r0, #65	; 0x41
 80064c2:	e7eb      	b.n	800649c <_scanf_float+0x90>
 80064c4:	280e      	cmp	r0, #14
 80064c6:	d8d2      	bhi.n	800646e <_scanf_float+0x62>
 80064c8:	f7f9 fe30 	bl	800012c <__gnu_thumb1_case_shi>
 80064cc:	ffd1004b 	.word	0xffd1004b
 80064d0:	0098004b 	.word	0x0098004b
 80064d4:	0020ffd1 	.word	0x0020ffd1
 80064d8:	00400040 	.word	0x00400040
 80064dc:	00400040 	.word	0x00400040
 80064e0:	00400040 	.word	0x00400040
 80064e4:	00400040 	.word	0x00400040
 80064e8:	0040      	.short	0x0040
 80064ea:	2b6e      	cmp	r3, #110	; 0x6e
 80064ec:	d809      	bhi.n	8006502 <_scanf_float+0xf6>
 80064ee:	2b60      	cmp	r3, #96	; 0x60
 80064f0:	d8d2      	bhi.n	8006498 <_scanf_float+0x8c>
 80064f2:	2b54      	cmp	r3, #84	; 0x54
 80064f4:	d07d      	beq.n	80065f2 <_scanf_float+0x1e6>
 80064f6:	2b59      	cmp	r3, #89	; 0x59
 80064f8:	d1b9      	bne.n	800646e <_scanf_float+0x62>
 80064fa:	2c07      	cmp	r4, #7
 80064fc:	d1b7      	bne.n	800646e <_scanf_float+0x62>
 80064fe:	2408      	movs	r4, #8
 8006500:	e02c      	b.n	800655c <_scanf_float+0x150>
 8006502:	2b74      	cmp	r3, #116	; 0x74
 8006504:	d075      	beq.n	80065f2 <_scanf_float+0x1e6>
 8006506:	2b79      	cmp	r3, #121	; 0x79
 8006508:	d0f7      	beq.n	80064fa <_scanf_float+0xee>
 800650a:	e7b0      	b.n	800646e <_scanf_float+0x62>
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	05c8      	lsls	r0, r1, #23
 8006510:	d51c      	bpl.n	800654c <_scanf_float+0x140>
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	4399      	bics	r1, r3
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <_scanf_float+0x120>
 8006524:	3b01      	subs	r3, #1
 8006526:	3201      	adds	r2, #1
 8006528:	9306      	str	r3, [sp, #24]
 800652a:	60ba      	str	r2, [r7, #8]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3b01      	subs	r3, #1
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	6873      	ldr	r3, [r6, #4]
 800653a:	3b01      	subs	r3, #1
 800653c:	6073      	str	r3, [r6, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	dc00      	bgt.n	8006544 <_scanf_float+0x138>
 8006542:	e086      	b.n	8006652 <_scanf_float+0x246>
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	3301      	adds	r3, #1
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	e782      	b.n	8006452 <_scanf_float+0x46>
 800654c:	9a03      	ldr	r2, [sp, #12]
 800654e:	1912      	adds	r2, r2, r4
 8006550:	2a00      	cmp	r2, #0
 8006552:	d18c      	bne.n	800646e <_scanf_float+0x62>
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	496c      	ldr	r1, [pc, #432]	; (8006708 <_scanf_float+0x2fc>)
 8006558:	400a      	ands	r2, r1
 800655a:	603a      	str	r2, [r7, #0]
 800655c:	702b      	strb	r3, [r5, #0]
 800655e:	3501      	adds	r5, #1
 8006560:	e7e4      	b.n	800652c <_scanf_float+0x120>
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	420a      	tst	r2, r1
 8006568:	d081      	beq.n	800646e <_scanf_float+0x62>
 800656a:	438a      	bics	r2, r1
 800656c:	e7f5      	b.n	800655a <_scanf_float+0x14e>
 800656e:	9a03      	ldr	r2, [sp, #12]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d10f      	bne.n	8006594 <_scanf_float+0x188>
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	2a00      	cmp	r2, #0
 8006578:	d10f      	bne.n	800659a <_scanf_float+0x18e>
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	21e0      	movs	r1, #224	; 0xe0
 800657e:	0010      	movs	r0, r2
 8006580:	00c9      	lsls	r1, r1, #3
 8006582:	4008      	ands	r0, r1
 8006584:	4288      	cmp	r0, r1
 8006586:	d108      	bne.n	800659a <_scanf_float+0x18e>
 8006588:	4960      	ldr	r1, [pc, #384]	; (800670c <_scanf_float+0x300>)
 800658a:	400a      	ands	r2, r1
 800658c:	603a      	str	r2, [r7, #0]
 800658e:	2201      	movs	r2, #1
 8006590:	9203      	str	r2, [sp, #12]
 8006592:	e7e3      	b.n	800655c <_scanf_float+0x150>
 8006594:	9a03      	ldr	r2, [sp, #12]
 8006596:	2a02      	cmp	r2, #2
 8006598:	d059      	beq.n	800664e <_scanf_float+0x242>
 800659a:	2c01      	cmp	r4, #1
 800659c:	d002      	beq.n	80065a4 <_scanf_float+0x198>
 800659e:	2c04      	cmp	r4, #4
 80065a0:	d000      	beq.n	80065a4 <_scanf_float+0x198>
 80065a2:	e764      	b.n	800646e <_scanf_float+0x62>
 80065a4:	3401      	adds	r4, #1
 80065a6:	b2e4      	uxtb	r4, r4
 80065a8:	e7d8      	b.n	800655c <_scanf_float+0x150>
 80065aa:	9a03      	ldr	r2, [sp, #12]
 80065ac:	2a01      	cmp	r2, #1
 80065ae:	d000      	beq.n	80065b2 <_scanf_float+0x1a6>
 80065b0:	e75d      	b.n	800646e <_scanf_float+0x62>
 80065b2:	2202      	movs	r2, #2
 80065b4:	e7ec      	b.n	8006590 <_scanf_float+0x184>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d110      	bne.n	80065dc <_scanf_float+0x1d0>
 80065ba:	9a01      	ldr	r2, [sp, #4]
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d000      	beq.n	80065c2 <_scanf_float+0x1b6>
 80065c0:	e758      	b.n	8006474 <_scanf_float+0x68>
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	21e0      	movs	r1, #224	; 0xe0
 80065c6:	0010      	movs	r0, r2
 80065c8:	00c9      	lsls	r1, r1, #3
 80065ca:	4008      	ands	r0, r1
 80065cc:	4288      	cmp	r0, r1
 80065ce:	d000      	beq.n	80065d2 <_scanf_float+0x1c6>
 80065d0:	e754      	b.n	800647c <_scanf_float+0x70>
 80065d2:	494e      	ldr	r1, [pc, #312]	; (800670c <_scanf_float+0x300>)
 80065d4:	3401      	adds	r4, #1
 80065d6:	400a      	ands	r2, r1
 80065d8:	603a      	str	r2, [r7, #0]
 80065da:	e7bf      	b.n	800655c <_scanf_float+0x150>
 80065dc:	21fd      	movs	r1, #253	; 0xfd
 80065de:	1ee2      	subs	r2, r4, #3
 80065e0:	420a      	tst	r2, r1
 80065e2:	d000      	beq.n	80065e6 <_scanf_float+0x1da>
 80065e4:	e743      	b.n	800646e <_scanf_float+0x62>
 80065e6:	e7dd      	b.n	80065a4 <_scanf_float+0x198>
 80065e8:	2c02      	cmp	r4, #2
 80065ea:	d000      	beq.n	80065ee <_scanf_float+0x1e2>
 80065ec:	e73f      	b.n	800646e <_scanf_float+0x62>
 80065ee:	2403      	movs	r4, #3
 80065f0:	e7b4      	b.n	800655c <_scanf_float+0x150>
 80065f2:	2c06      	cmp	r4, #6
 80065f4:	d000      	beq.n	80065f8 <_scanf_float+0x1ec>
 80065f6:	e73a      	b.n	800646e <_scanf_float+0x62>
 80065f8:	2407      	movs	r4, #7
 80065fa:	e7af      	b.n	800655c <_scanf_float+0x150>
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	0591      	lsls	r1, r2, #22
 8006600:	d400      	bmi.n	8006604 <_scanf_float+0x1f8>
 8006602:	e734      	b.n	800646e <_scanf_float+0x62>
 8006604:	4942      	ldr	r1, [pc, #264]	; (8006710 <_scanf_float+0x304>)
 8006606:	400a      	ands	r2, r1
 8006608:	603a      	str	r2, [r7, #0]
 800660a:	9a01      	ldr	r2, [sp, #4]
 800660c:	9205      	str	r2, [sp, #20]
 800660e:	e7a5      	b.n	800655c <_scanf_float+0x150>
 8006610:	21a0      	movs	r1, #160	; 0xa0
 8006612:	2080      	movs	r0, #128	; 0x80
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	00c9      	lsls	r1, r1, #3
 8006618:	4011      	ands	r1, r2
 800661a:	00c0      	lsls	r0, r0, #3
 800661c:	4281      	cmp	r1, r0
 800661e:	d006      	beq.n	800662e <_scanf_float+0x222>
 8006620:	4202      	tst	r2, r0
 8006622:	d100      	bne.n	8006626 <_scanf_float+0x21a>
 8006624:	e723      	b.n	800646e <_scanf_float+0x62>
 8006626:	9901      	ldr	r1, [sp, #4]
 8006628:	2900      	cmp	r1, #0
 800662a:	d100      	bne.n	800662e <_scanf_float+0x222>
 800662c:	e726      	b.n	800647c <_scanf_float+0x70>
 800662e:	0591      	lsls	r1, r2, #22
 8006630:	d404      	bmi.n	800663c <_scanf_float+0x230>
 8006632:	9901      	ldr	r1, [sp, #4]
 8006634:	9805      	ldr	r0, [sp, #20]
 8006636:	9509      	str	r5, [sp, #36]	; 0x24
 8006638:	1a09      	subs	r1, r1, r0
 800663a:	9108      	str	r1, [sp, #32]
 800663c:	4933      	ldr	r1, [pc, #204]	; (800670c <_scanf_float+0x300>)
 800663e:	400a      	ands	r2, r1
 8006640:	21c0      	movs	r1, #192	; 0xc0
 8006642:	0049      	lsls	r1, r1, #1
 8006644:	430a      	orrs	r2, r1
 8006646:	603a      	str	r2, [r7, #0]
 8006648:	2200      	movs	r2, #0
 800664a:	9201      	str	r2, [sp, #4]
 800664c:	e786      	b.n	800655c <_scanf_float+0x150>
 800664e:	2203      	movs	r2, #3
 8006650:	e79e      	b.n	8006590 <_scanf_float+0x184>
 8006652:	23c0      	movs	r3, #192	; 0xc0
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	0031      	movs	r1, r6
 8006658:	58fb      	ldr	r3, [r7, r3]
 800665a:	9802      	ldr	r0, [sp, #8]
 800665c:	4798      	blx	r3
 800665e:	2800      	cmp	r0, #0
 8006660:	d100      	bne.n	8006664 <_scanf_float+0x258>
 8006662:	e6f6      	b.n	8006452 <_scanf_float+0x46>
 8006664:	e703      	b.n	800646e <_scanf_float+0x62>
 8006666:	3d01      	subs	r5, #1
 8006668:	593b      	ldr	r3, [r7, r4]
 800666a:	0032      	movs	r2, r6
 800666c:	7829      	ldrb	r1, [r5, #0]
 800666e:	9802      	ldr	r0, [sp, #8]
 8006670:	4798      	blx	r3
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3b01      	subs	r3, #1
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	e707      	b.n	800648a <_scanf_float+0x7e>
 800667a:	1e63      	subs	r3, r4, #1
 800667c:	2b06      	cmp	r3, #6
 800667e:	d80e      	bhi.n	800669e <_scanf_float+0x292>
 8006680:	9503      	str	r5, [sp, #12]
 8006682:	2c02      	cmp	r4, #2
 8006684:	d920      	bls.n	80066c8 <_scanf_float+0x2bc>
 8006686:	1b63      	subs	r3, r4, r5
 8006688:	b2db      	uxtb	r3, r3
 800668a:	9306      	str	r3, [sp, #24]
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	9a06      	ldr	r2, [sp, #24]
 8006690:	189b      	adds	r3, r3, r2
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d827      	bhi.n	80066e8 <_scanf_float+0x2dc>
 8006698:	3c03      	subs	r4, #3
 800669a:	b2e4      	uxtb	r4, r4
 800669c:	1b2d      	subs	r5, r5, r4
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	05da      	lsls	r2, r3, #23
 80066a2:	d552      	bpl.n	800674a <_scanf_float+0x33e>
 80066a4:	055b      	lsls	r3, r3, #21
 80066a6:	d535      	bpl.n	8006714 <_scanf_float+0x308>
 80066a8:	24be      	movs	r4, #190	; 0xbe
 80066aa:	0064      	lsls	r4, r4, #1
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	429d      	cmp	r5, r3
 80066b0:	d800      	bhi.n	80066b4 <_scanf_float+0x2a8>
 80066b2:	e6ee      	b.n	8006492 <_scanf_float+0x86>
 80066b4:	3d01      	subs	r5, #1
 80066b6:	593b      	ldr	r3, [r7, r4]
 80066b8:	0032      	movs	r2, r6
 80066ba:	7829      	ldrb	r1, [r5, #0]
 80066bc:	9802      	ldr	r0, [sp, #8]
 80066be:	4798      	blx	r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e7f1      	b.n	80066ac <_scanf_float+0x2a0>
 80066c8:	24be      	movs	r4, #190	; 0xbe
 80066ca:	0064      	lsls	r4, r4, #1
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	429d      	cmp	r5, r3
 80066d0:	d800      	bhi.n	80066d4 <_scanf_float+0x2c8>
 80066d2:	e6de      	b.n	8006492 <_scanf_float+0x86>
 80066d4:	3d01      	subs	r5, #1
 80066d6:	593b      	ldr	r3, [r7, r4]
 80066d8:	0032      	movs	r2, r6
 80066da:	7829      	ldrb	r1, [r5, #0]
 80066dc:	9802      	ldr	r0, [sp, #8]
 80066de:	4798      	blx	r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	e7f1      	b.n	80066cc <_scanf_float+0x2c0>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	0032      	movs	r2, r6
 80066ec:	3b01      	subs	r3, #1
 80066ee:	7819      	ldrb	r1, [r3, #0]
 80066f0:	9303      	str	r3, [sp, #12]
 80066f2:	23be      	movs	r3, #190	; 0xbe
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	58fb      	ldr	r3, [r7, r3]
 80066f8:	9802      	ldr	r0, [sp, #8]
 80066fa:	4798      	blx	r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	e7c3      	b.n	800668c <_scanf_float+0x280>
 8006704:	fffffeff 	.word	0xfffffeff
 8006708:	fffffe7f 	.word	0xfffffe7f
 800670c:	fffff87f 	.word	0xfffff87f
 8006710:	fffffd7f 	.word	0xfffffd7f
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1e6c      	subs	r4, r5, #1
 8006718:	7821      	ldrb	r1, [r4, #0]
 800671a:	3b01      	subs	r3, #1
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	2965      	cmp	r1, #101	; 0x65
 8006720:	d00c      	beq.n	800673c <_scanf_float+0x330>
 8006722:	2945      	cmp	r1, #69	; 0x45
 8006724:	d00a      	beq.n	800673c <_scanf_float+0x330>
 8006726:	23be      	movs	r3, #190	; 0xbe
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	58fb      	ldr	r3, [r7, r3]
 800672c:	0032      	movs	r2, r6
 800672e:	9802      	ldr	r0, [sp, #8]
 8006730:	4798      	blx	r3
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1eac      	subs	r4, r5, #2
 8006736:	3b01      	subs	r3, #1
 8006738:	7821      	ldrb	r1, [r4, #0]
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	23be      	movs	r3, #190	; 0xbe
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	0032      	movs	r2, r6
 8006742:	58fb      	ldr	r3, [r7, r3]
 8006744:	9802      	ldr	r0, [sp, #8]
 8006746:	4798      	blx	r3
 8006748:	0025      	movs	r5, r4
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	2310      	movs	r3, #16
 800674e:	0011      	movs	r1, r2
 8006750:	4019      	ands	r1, r3
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	421a      	tst	r2, r3
 8006756:	d15b      	bne.n	8006810 <_scanf_float+0x404>
 8006758:	22c0      	movs	r2, #192	; 0xc0
 800675a:	7029      	strb	r1, [r5, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	00d2      	lsls	r2, r2, #3
 8006760:	4013      	ands	r3, r2
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	00d2      	lsls	r2, r2, #3
 8006766:	4293      	cmp	r3, r2
 8006768:	d11d      	bne.n	80067a6 <_scanf_float+0x39a>
 800676a:	9b05      	ldr	r3, [sp, #20]
 800676c:	9a01      	ldr	r2, [sp, #4]
 800676e:	9901      	ldr	r1, [sp, #4]
 8006770:	1a9a      	subs	r2, r3, r2
 8006772:	428b      	cmp	r3, r1
 8006774:	d124      	bne.n	80067c0 <_scanf_float+0x3b4>
 8006776:	2200      	movs	r2, #0
 8006778:	9904      	ldr	r1, [sp, #16]
 800677a:	9802      	ldr	r0, [sp, #8]
 800677c:	f002 fcdc 	bl	8009138 <_strtod_r>
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	0004      	movs	r4, r0
 8006786:	000d      	movs	r5, r1
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	0791      	lsls	r1, r2, #30
 800678c:	d525      	bpl.n	80067da <_scanf_float+0x3ce>
 800678e:	9907      	ldr	r1, [sp, #28]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	600a      	str	r2, [r1, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	601c      	str	r4, [r3, #0]
 8006798:	605d      	str	r5, [r3, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	9803      	ldr	r0, [sp, #12]
 80067a2:	b00b      	add	sp, #44	; 0x2c
 80067a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0e4      	beq.n	8006776 <_scanf_float+0x36a>
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	9a03      	ldr	r2, [sp, #12]
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	9802      	ldr	r0, [sp, #8]
 80067b4:	230a      	movs	r3, #10
 80067b6:	f7ff f99b 	bl	8005af0 <_strtol_r>
 80067ba:	9b08      	ldr	r3, [sp, #32]
 80067bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067be:	1ac2      	subs	r2, r0, r3
 80067c0:	003b      	movs	r3, r7
 80067c2:	3370      	adds	r3, #112	; 0x70
 80067c4:	33ff      	adds	r3, #255	; 0xff
 80067c6:	429d      	cmp	r5, r3
 80067c8:	d302      	bcc.n	80067d0 <_scanf_float+0x3c4>
 80067ca:	003d      	movs	r5, r7
 80067cc:	356f      	adds	r5, #111	; 0x6f
 80067ce:	35ff      	adds	r5, #255	; 0xff
 80067d0:	0028      	movs	r0, r5
 80067d2:	4910      	ldr	r1, [pc, #64]	; (8006814 <_scanf_float+0x408>)
 80067d4:	f000 f92a 	bl	8006a2c <siprintf>
 80067d8:	e7cd      	b.n	8006776 <_scanf_float+0x36a>
 80067da:	1d19      	adds	r1, r3, #4
 80067dc:	0752      	lsls	r2, r2, #29
 80067de:	d502      	bpl.n	80067e6 <_scanf_float+0x3da>
 80067e0:	9a07      	ldr	r2, [sp, #28]
 80067e2:	6011      	str	r1, [r2, #0]
 80067e4:	e7d6      	b.n	8006794 <_scanf_float+0x388>
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	0020      	movs	r0, r4
 80067ea:	6011      	str	r1, [r2, #0]
 80067ec:	681e      	ldr	r6, [r3, #0]
 80067ee:	0022      	movs	r2, r4
 80067f0:	002b      	movs	r3, r5
 80067f2:	0029      	movs	r1, r5
 80067f4:	f7fb fd80 	bl	80022f8 <__aeabi_dcmpun>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d004      	beq.n	8006806 <_scanf_float+0x3fa>
 80067fc:	4806      	ldr	r0, [pc, #24]	; (8006818 <_scanf_float+0x40c>)
 80067fe:	f000 fa13 	bl	8006c28 <nanf>
 8006802:	6030      	str	r0, [r6, #0]
 8006804:	e7c9      	b.n	800679a <_scanf_float+0x38e>
 8006806:	0020      	movs	r0, r4
 8006808:	0029      	movs	r1, r5
 800680a:	f7fb fe1f 	bl	800244c <__aeabi_d2f>
 800680e:	e7f8      	b.n	8006802 <_scanf_float+0x3f6>
 8006810:	2300      	movs	r3, #0
 8006812:	e63f      	b.n	8006494 <_scanf_float+0x88>
 8006814:	0800a615 	.word	0x0800a615
 8006818:	0800a8a4 	.word	0x0800a8a4

0800681c <std>:
 800681c:	2300      	movs	r3, #0
 800681e:	b510      	push	{r4, lr}
 8006820:	0004      	movs	r4, r0
 8006822:	6003      	str	r3, [r0, #0]
 8006824:	6043      	str	r3, [r0, #4]
 8006826:	6083      	str	r3, [r0, #8]
 8006828:	8181      	strh	r1, [r0, #12]
 800682a:	6643      	str	r3, [r0, #100]	; 0x64
 800682c:	81c2      	strh	r2, [r0, #14]
 800682e:	6103      	str	r3, [r0, #16]
 8006830:	6143      	str	r3, [r0, #20]
 8006832:	6183      	str	r3, [r0, #24]
 8006834:	0019      	movs	r1, r3
 8006836:	2208      	movs	r2, #8
 8006838:	305c      	adds	r0, #92	; 0x5c
 800683a:	f000 f963 	bl	8006b04 <memset>
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <std+0x50>)
 8006840:	6224      	str	r4, [r4, #32]
 8006842:	6263      	str	r3, [r4, #36]	; 0x24
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <std+0x54>)
 8006846:	62a3      	str	r3, [r4, #40]	; 0x28
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <std+0x58>)
 800684a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <std+0x5c>)
 800684e:	6323      	str	r3, [r4, #48]	; 0x30
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <std+0x60>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d005      	beq.n	8006862 <std+0x46>
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <std+0x64>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d002      	beq.n	8006862 <std+0x46>
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <std+0x68>)
 800685e:	429c      	cmp	r4, r3
 8006860:	d103      	bne.n	800686a <std+0x4e>
 8006862:	0020      	movs	r0, r4
 8006864:	3058      	adds	r0, #88	; 0x58
 8006866:	f000 f9d1 	bl	8006c0c <__retarget_lock_init_recursive>
 800686a:	bd10      	pop	{r4, pc}
 800686c:	08006a6d 	.word	0x08006a6d
 8006870:	08006a95 	.word	0x08006a95
 8006874:	08006acd 	.word	0x08006acd
 8006878:	08006af9 	.word	0x08006af9
 800687c:	200002d4 	.word	0x200002d4
 8006880:	2000033c 	.word	0x2000033c
 8006884:	200003a4 	.word	0x200003a4

08006888 <stdio_exit_handler>:
 8006888:	b510      	push	{r4, lr}
 800688a:	4a03      	ldr	r2, [pc, #12]	; (8006898 <stdio_exit_handler+0x10>)
 800688c:	4903      	ldr	r1, [pc, #12]	; (800689c <stdio_exit_handler+0x14>)
 800688e:	4804      	ldr	r0, [pc, #16]	; (80068a0 <stdio_exit_handler+0x18>)
 8006890:	f000 f86c 	bl	800696c <_fwalk_sglue>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	2000000c 	.word	0x2000000c
 800689c:	080097a9 	.word	0x080097a9
 80068a0:	20000018 	.word	0x20000018

080068a4 <cleanup_stdio>:
 80068a4:	6841      	ldr	r1, [r0, #4]
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <cleanup_stdio+0x30>)
 80068a8:	b510      	push	{r4, lr}
 80068aa:	0004      	movs	r4, r0
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d001      	beq.n	80068b4 <cleanup_stdio+0x10>
 80068b0:	f002 ff7a 	bl	80097a8 <_fflush_r>
 80068b4:	68a1      	ldr	r1, [r4, #8]
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <cleanup_stdio+0x34>)
 80068b8:	4299      	cmp	r1, r3
 80068ba:	d002      	beq.n	80068c2 <cleanup_stdio+0x1e>
 80068bc:	0020      	movs	r0, r4
 80068be:	f002 ff73 	bl	80097a8 <_fflush_r>
 80068c2:	68e1      	ldr	r1, [r4, #12]
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <cleanup_stdio+0x38>)
 80068c6:	4299      	cmp	r1, r3
 80068c8:	d002      	beq.n	80068d0 <cleanup_stdio+0x2c>
 80068ca:	0020      	movs	r0, r4
 80068cc:	f002 ff6c 	bl	80097a8 <_fflush_r>
 80068d0:	bd10      	pop	{r4, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	200002d4 	.word	0x200002d4
 80068d8:	2000033c 	.word	0x2000033c
 80068dc:	200003a4 	.word	0x200003a4

080068e0 <global_stdio_init.part.0>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <global_stdio_init.part.0+0x28>)
 80068e4:	4a09      	ldr	r2, [pc, #36]	; (800690c <global_stdio_init.part.0+0x2c>)
 80068e6:	2104      	movs	r1, #4
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	4809      	ldr	r0, [pc, #36]	; (8006910 <global_stdio_init.part.0+0x30>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	f7ff ff95 	bl	800681c <std>
 80068f2:	2201      	movs	r2, #1
 80068f4:	2109      	movs	r1, #9
 80068f6:	4807      	ldr	r0, [pc, #28]	; (8006914 <global_stdio_init.part.0+0x34>)
 80068f8:	f7ff ff90 	bl	800681c <std>
 80068fc:	2202      	movs	r2, #2
 80068fe:	2112      	movs	r1, #18
 8006900:	4805      	ldr	r0, [pc, #20]	; (8006918 <global_stdio_init.part.0+0x38>)
 8006902:	f7ff ff8b 	bl	800681c <std>
 8006906:	bd10      	pop	{r4, pc}
 8006908:	2000040c 	.word	0x2000040c
 800690c:	08006889 	.word	0x08006889
 8006910:	200002d4 	.word	0x200002d4
 8006914:	2000033c 	.word	0x2000033c
 8006918:	200003a4 	.word	0x200003a4

0800691c <__sfp_lock_acquire>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4802      	ldr	r0, [pc, #8]	; (8006928 <__sfp_lock_acquire+0xc>)
 8006920:	f000 f975 	bl	8006c0e <__retarget_lock_acquire_recursive>
 8006924:	bd10      	pop	{r4, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	20000415 	.word	0x20000415

0800692c <__sfp_lock_release>:
 800692c:	b510      	push	{r4, lr}
 800692e:	4802      	ldr	r0, [pc, #8]	; (8006938 <__sfp_lock_release+0xc>)
 8006930:	f000 f96e 	bl	8006c10 <__retarget_lock_release_recursive>
 8006934:	bd10      	pop	{r4, pc}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	20000415 	.word	0x20000415

0800693c <__sinit>:
 800693c:	b510      	push	{r4, lr}
 800693e:	0004      	movs	r4, r0
 8006940:	f7ff ffec 	bl	800691c <__sfp_lock_acquire>
 8006944:	6a23      	ldr	r3, [r4, #32]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <__sinit+0x14>
 800694a:	f7ff ffef 	bl	800692c <__sfp_lock_release>
 800694e:	bd10      	pop	{r4, pc}
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <__sinit+0x28>)
 8006952:	6223      	str	r3, [r4, #32]
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <__sinit+0x2c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f6      	bne.n	800694a <__sinit+0xe>
 800695c:	f7ff ffc0 	bl	80068e0 <global_stdio_init.part.0>
 8006960:	e7f3      	b.n	800694a <__sinit+0xe>
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	080068a5 	.word	0x080068a5
 8006968:	2000040c 	.word	0x2000040c

0800696c <_fwalk_sglue>:
 800696c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800696e:	0014      	movs	r4, r2
 8006970:	2600      	movs	r6, #0
 8006972:	9000      	str	r0, [sp, #0]
 8006974:	9101      	str	r1, [sp, #4]
 8006976:	68a5      	ldr	r5, [r4, #8]
 8006978:	6867      	ldr	r7, [r4, #4]
 800697a:	3f01      	subs	r7, #1
 800697c:	d504      	bpl.n	8006988 <_fwalk_sglue+0x1c>
 800697e:	6824      	ldr	r4, [r4, #0]
 8006980:	2c00      	cmp	r4, #0
 8006982:	d1f8      	bne.n	8006976 <_fwalk_sglue+0xa>
 8006984:	0030      	movs	r0, r6
 8006986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006988:	89ab      	ldrh	r3, [r5, #12]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d908      	bls.n	80069a0 <_fwalk_sglue+0x34>
 800698e:	220e      	movs	r2, #14
 8006990:	5eab      	ldrsh	r3, [r5, r2]
 8006992:	3301      	adds	r3, #1
 8006994:	d004      	beq.n	80069a0 <_fwalk_sglue+0x34>
 8006996:	0029      	movs	r1, r5
 8006998:	9800      	ldr	r0, [sp, #0]
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	4798      	blx	r3
 800699e:	4306      	orrs	r6, r0
 80069a0:	3568      	adds	r5, #104	; 0x68
 80069a2:	e7ea      	b.n	800697a <_fwalk_sglue+0xe>

080069a4 <iprintf>:
 80069a4:	b40f      	push	{r0, r1, r2, r3}
 80069a6:	b507      	push	{r0, r1, r2, lr}
 80069a8:	4905      	ldr	r1, [pc, #20]	; (80069c0 <iprintf+0x1c>)
 80069aa:	ab04      	add	r3, sp, #16
 80069ac:	6808      	ldr	r0, [r1, #0]
 80069ae:	cb04      	ldmia	r3!, {r2}
 80069b0:	6881      	ldr	r1, [r0, #8]
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	f002 fd52 	bl	800945c <_vfiprintf_r>
 80069b8:	b003      	add	sp, #12
 80069ba:	bc08      	pop	{r3}
 80069bc:	b004      	add	sp, #16
 80069be:	4718      	bx	r3
 80069c0:	20000064 	.word	0x20000064

080069c4 <sniprintf>:
 80069c4:	b40c      	push	{r2, r3}
 80069c6:	b530      	push	{r4, r5, lr}
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <sniprintf+0x64>)
 80069ca:	000c      	movs	r4, r1
 80069cc:	681d      	ldr	r5, [r3, #0]
 80069ce:	b09d      	sub	sp, #116	; 0x74
 80069d0:	2900      	cmp	r1, #0
 80069d2:	da08      	bge.n	80069e6 <sniprintf+0x22>
 80069d4:	238b      	movs	r3, #139	; 0x8b
 80069d6:	2001      	movs	r0, #1
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	4240      	negs	r0, r0
 80069dc:	b01d      	add	sp, #116	; 0x74
 80069de:	bc30      	pop	{r4, r5}
 80069e0:	bc08      	pop	{r3}
 80069e2:	b002      	add	sp, #8
 80069e4:	4718      	bx	r3
 80069e6:	2382      	movs	r3, #130	; 0x82
 80069e8:	466a      	mov	r2, sp
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	8293      	strh	r3, [r2, #20]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	4299      	cmp	r1, r3
 80069f6:	d000      	beq.n	80069fa <sniprintf+0x36>
 80069f8:	1e4b      	subs	r3, r1, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	2301      	movs	r3, #1
 8006a00:	466a      	mov	r2, sp
 8006a02:	425b      	negs	r3, r3
 8006a04:	82d3      	strh	r3, [r2, #22]
 8006a06:	0028      	movs	r0, r5
 8006a08:	ab21      	add	r3, sp, #132	; 0x84
 8006a0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a0c:	a902      	add	r1, sp, #8
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	f002 fbfc 	bl	800920c <_svfiprintf_r>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	da01      	bge.n	8006a1c <sniprintf+0x58>
 8006a18:	238b      	movs	r3, #139	; 0x8b
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	2c00      	cmp	r4, #0
 8006a1e:	d0dd      	beq.n	80069dc <sniprintf+0x18>
 8006a20:	2200      	movs	r2, #0
 8006a22:	9b02      	ldr	r3, [sp, #8]
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e7d9      	b.n	80069dc <sniprintf+0x18>
 8006a28:	20000064 	.word	0x20000064

08006a2c <siprintf>:
 8006a2c:	b40e      	push	{r1, r2, r3}
 8006a2e:	b500      	push	{lr}
 8006a30:	490b      	ldr	r1, [pc, #44]	; (8006a60 <siprintf+0x34>)
 8006a32:	b09c      	sub	sp, #112	; 0x70
 8006a34:	ab1d      	add	r3, sp, #116	; 0x74
 8006a36:	9002      	str	r0, [sp, #8]
 8006a38:	9006      	str	r0, [sp, #24]
 8006a3a:	9107      	str	r1, [sp, #28]
 8006a3c:	9104      	str	r1, [sp, #16]
 8006a3e:	4809      	ldr	r0, [pc, #36]	; (8006a64 <siprintf+0x38>)
 8006a40:	4909      	ldr	r1, [pc, #36]	; (8006a68 <siprintf+0x3c>)
 8006a42:	cb04      	ldmia	r3!, {r2}
 8006a44:	9105      	str	r1, [sp, #20]
 8006a46:	6800      	ldr	r0, [r0, #0]
 8006a48:	a902      	add	r1, sp, #8
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	f002 fbde 	bl	800920c <_svfiprintf_r>
 8006a50:	2200      	movs	r2, #0
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	b01c      	add	sp, #112	; 0x70
 8006a58:	bc08      	pop	{r3}
 8006a5a:	b003      	add	sp, #12
 8006a5c:	4718      	bx	r3
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	7fffffff 	.word	0x7fffffff
 8006a64:	20000064 	.word	0x20000064
 8006a68:	ffff0208 	.word	0xffff0208

08006a6c <__sread>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	000c      	movs	r4, r1
 8006a70:	250e      	movs	r5, #14
 8006a72:	5f49      	ldrsh	r1, [r1, r5]
 8006a74:	f000 f878 	bl	8006b68 <_read_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	db03      	blt.n	8006a84 <__sread+0x18>
 8006a7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a7e:	181b      	adds	r3, r3, r0
 8006a80:	6563      	str	r3, [r4, #84]	; 0x54
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	4a02      	ldr	r2, [pc, #8]	; (8006a90 <__sread+0x24>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	81a3      	strh	r3, [r4, #12]
 8006a8c:	e7f9      	b.n	8006a82 <__sread+0x16>
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	ffffefff 	.word	0xffffefff

08006a94 <__swrite>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	001f      	movs	r7, r3
 8006a98:	898b      	ldrh	r3, [r1, #12]
 8006a9a:	0005      	movs	r5, r0
 8006a9c:	000c      	movs	r4, r1
 8006a9e:	0016      	movs	r6, r2
 8006aa0:	05db      	lsls	r3, r3, #23
 8006aa2:	d505      	bpl.n	8006ab0 <__swrite+0x1c>
 8006aa4:	230e      	movs	r3, #14
 8006aa6:	5ec9      	ldrsh	r1, [r1, r3]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2302      	movs	r3, #2
 8006aac:	f000 f848 	bl	8006b40 <_lseek_r>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	4a05      	ldr	r2, [pc, #20]	; (8006ac8 <__swrite+0x34>)
 8006ab4:	0028      	movs	r0, r5
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	81a3      	strh	r3, [r4, #12]
 8006aba:	0032      	movs	r2, r6
 8006abc:	230e      	movs	r3, #14
 8006abe:	5ee1      	ldrsh	r1, [r4, r3]
 8006ac0:	003b      	movs	r3, r7
 8006ac2:	f000 f865 	bl	8006b90 <_write_r>
 8006ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac8:	ffffefff 	.word	0xffffefff

08006acc <__sseek>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	000c      	movs	r4, r1
 8006ad0:	250e      	movs	r5, #14
 8006ad2:	5f49      	ldrsh	r1, [r1, r5]
 8006ad4:	f000 f834 	bl	8006b40 <_lseek_r>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	1c42      	adds	r2, r0, #1
 8006adc:	d103      	bne.n	8006ae6 <__sseek+0x1a>
 8006ade:	4a05      	ldr	r2, [pc, #20]	; (8006af4 <__sseek+0x28>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	0152      	lsls	r2, r2, #5
 8006aea:	4313      	orrs	r3, r2
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	6560      	str	r0, [r4, #84]	; 0x54
 8006af0:	e7f8      	b.n	8006ae4 <__sseek+0x18>
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	ffffefff 	.word	0xffffefff

08006af8 <__sclose>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	230e      	movs	r3, #14
 8006afc:	5ec9      	ldrsh	r1, [r1, r3]
 8006afe:	f000 f80d 	bl	8006b1c <_close_r>
 8006b02:	bd10      	pop	{r4, pc}

08006b04 <memset>:
 8006b04:	0003      	movs	r3, r0
 8006b06:	1882      	adds	r2, r0, r2
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d100      	bne.n	8006b0e <memset+0xa>
 8006b0c:	4770      	bx	lr
 8006b0e:	7019      	strb	r1, [r3, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	e7f9      	b.n	8006b08 <memset+0x4>

08006b14 <_localeconv_r>:
 8006b14:	4800      	ldr	r0, [pc, #0]	; (8006b18 <_localeconv_r+0x4>)
 8006b16:	4770      	bx	lr
 8006b18:	20000158 	.word	0x20000158

08006b1c <_close_r>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b570      	push	{r4, r5, r6, lr}
 8006b20:	4d06      	ldr	r5, [pc, #24]	; (8006b3c <_close_r+0x20>)
 8006b22:	0004      	movs	r4, r0
 8006b24:	0008      	movs	r0, r1
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	f7fc f900 	bl	8002d2c <_close>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_close_r+0x1c>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d000      	beq.n	8006b38 <_close_r+0x1c>
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	bd70      	pop	{r4, r5, r6, pc}
 8006b3a:	46c0      	nop			; (mov r8, r8)
 8006b3c:	20000410 	.word	0x20000410

08006b40 <_lseek_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	0004      	movs	r4, r0
 8006b44:	0008      	movs	r0, r1
 8006b46:	0011      	movs	r1, r2
 8006b48:	001a      	movs	r2, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4d05      	ldr	r5, [pc, #20]	; (8006b64 <_lseek_r+0x24>)
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	f7fc f90d 	bl	8002d6e <_lseek>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d103      	bne.n	8006b60 <_lseek_r+0x20>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d000      	beq.n	8006b60 <_lseek_r+0x20>
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	20000410 	.word	0x20000410

08006b68 <_read_r>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	0008      	movs	r0, r1
 8006b6e:	0011      	movs	r1, r2
 8006b70:	001a      	movs	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	4d05      	ldr	r5, [pc, #20]	; (8006b8c <_read_r+0x24>)
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	f7fc f89f 	bl	8002cba <_read>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d103      	bne.n	8006b88 <_read_r+0x20>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d000      	beq.n	8006b88 <_read_r+0x20>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	20000410 	.word	0x20000410

08006b90 <_write_r>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	0004      	movs	r4, r0
 8006b94:	0008      	movs	r0, r1
 8006b96:	0011      	movs	r1, r2
 8006b98:	001a      	movs	r2, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4d05      	ldr	r5, [pc, #20]	; (8006bb4 <_write_r+0x24>)
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7fc f8a8 	bl	8002cf4 <_write>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d103      	bne.n	8006bb0 <_write_r+0x20>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d000      	beq.n	8006bb0 <_write_r+0x20>
 8006bae:	6023      	str	r3, [r4, #0]
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	20000410 	.word	0x20000410

08006bb8 <__errno>:
 8006bb8:	4b01      	ldr	r3, [pc, #4]	; (8006bc0 <__errno+0x8>)
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	4770      	bx	lr
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	20000064 	.word	0x20000064

08006bc4 <__libc_init_array>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	4c0c      	ldr	r4, [pc, #48]	; (8006bfc <__libc_init_array+0x38>)
 8006bca:	4d0d      	ldr	r5, [pc, #52]	; (8006c00 <__libc_init_array+0x3c>)
 8006bcc:	1b64      	subs	r4, r4, r5
 8006bce:	10a4      	asrs	r4, r4, #2
 8006bd0:	42a6      	cmp	r6, r4
 8006bd2:	d109      	bne.n	8006be8 <__libc_init_array+0x24>
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	f003 fbe9 	bl	800a3ac <_init>
 8006bda:	4c0a      	ldr	r4, [pc, #40]	; (8006c04 <__libc_init_array+0x40>)
 8006bdc:	4d0a      	ldr	r5, [pc, #40]	; (8006c08 <__libc_init_array+0x44>)
 8006bde:	1b64      	subs	r4, r4, r5
 8006be0:	10a4      	asrs	r4, r4, #2
 8006be2:	42a6      	cmp	r6, r4
 8006be4:	d105      	bne.n	8006bf2 <__libc_init_array+0x2e>
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	00b3      	lsls	r3, r6, #2
 8006bea:	58eb      	ldr	r3, [r5, r3]
 8006bec:	4798      	blx	r3
 8006bee:	3601      	adds	r6, #1
 8006bf0:	e7ee      	b.n	8006bd0 <__libc_init_array+0xc>
 8006bf2:	00b3      	lsls	r3, r6, #2
 8006bf4:	58eb      	ldr	r3, [r5, r3]
 8006bf6:	4798      	blx	r3
 8006bf8:	3601      	adds	r6, #1
 8006bfa:	e7f2      	b.n	8006be2 <__libc_init_array+0x1e>
 8006bfc:	0800a910 	.word	0x0800a910
 8006c00:	0800a910 	.word	0x0800a910
 8006c04:	0800a914 	.word	0x0800a914
 8006c08:	0800a910 	.word	0x0800a910

08006c0c <__retarget_lock_init_recursive>:
 8006c0c:	4770      	bx	lr

08006c0e <__retarget_lock_acquire_recursive>:
 8006c0e:	4770      	bx	lr

08006c10 <__retarget_lock_release_recursive>:
 8006c10:	4770      	bx	lr

08006c12 <memchr>:
 8006c12:	b2c9      	uxtb	r1, r1
 8006c14:	1882      	adds	r2, r0, r2
 8006c16:	4290      	cmp	r0, r2
 8006c18:	d101      	bne.n	8006c1e <memchr+0xc>
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	4770      	bx	lr
 8006c1e:	7803      	ldrb	r3, [r0, #0]
 8006c20:	428b      	cmp	r3, r1
 8006c22:	d0fb      	beq.n	8006c1c <memchr+0xa>
 8006c24:	3001      	adds	r0, #1
 8006c26:	e7f6      	b.n	8006c16 <memchr+0x4>

08006c28 <nanf>:
 8006c28:	4800      	ldr	r0, [pc, #0]	; (8006c2c <nanf+0x4>)
 8006c2a:	4770      	bx	lr
 8006c2c:	7fc00000 	.word	0x7fc00000

08006c30 <quorem>:
 8006c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c32:	6902      	ldr	r2, [r0, #16]
 8006c34:	690b      	ldr	r3, [r1, #16]
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	0007      	movs	r7, r0
 8006c3a:	9104      	str	r1, [sp, #16]
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	db69      	blt.n	8006d16 <quorem+0xe6>
 8006c42:	3b01      	subs	r3, #1
 8006c44:	009c      	lsls	r4, r3, #2
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	000b      	movs	r3, r1
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	9306      	str	r3, [sp, #24]
 8006c4e:	191b      	adds	r3, r3, r4
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	003b      	movs	r3, r7
 8006c54:	3314      	adds	r3, #20
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	191c      	adds	r4, r3, r4
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	6826      	ldr	r6, [r4, #0]
 8006c5e:	681d      	ldr	r5, [r3, #0]
 8006c60:	0030      	movs	r0, r6
 8006c62:	3501      	adds	r5, #1
 8006c64:	0029      	movs	r1, r5
 8006c66:	f7f9 fa6b 	bl	8000140 <__udivsi3>
 8006c6a:	9002      	str	r0, [sp, #8]
 8006c6c:	42ae      	cmp	r6, r5
 8006c6e:	d329      	bcc.n	8006cc4 <quorem+0x94>
 8006c70:	9b06      	ldr	r3, [sp, #24]
 8006c72:	2600      	movs	r6, #0
 8006c74:	469c      	mov	ip, r3
 8006c76:	9d03      	ldr	r5, [sp, #12]
 8006c78:	9606      	str	r6, [sp, #24]
 8006c7a:	4662      	mov	r2, ip
 8006c7c:	ca08      	ldmia	r2!, {r3}
 8006c7e:	6828      	ldr	r0, [r5, #0]
 8006c80:	4694      	mov	ip, r2
 8006c82:	9a02      	ldr	r2, [sp, #8]
 8006c84:	b299      	uxth	r1, r3
 8006c86:	4351      	muls	r1, r2
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	4353      	muls	r3, r2
 8006c8c:	1989      	adds	r1, r1, r6
 8006c8e:	0c0a      	lsrs	r2, r1, #16
 8006c90:	189b      	adds	r3, r3, r2
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	0c1e      	lsrs	r6, r3, #16
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	b282      	uxth	r2, r0
 8006c9a:	18d2      	adds	r2, r2, r3
 8006c9c:	466b      	mov	r3, sp
 8006c9e:	b289      	uxth	r1, r1
 8006ca0:	8b9b      	ldrh	r3, [r3, #28]
 8006ca2:	1a52      	subs	r2, r2, r1
 8006ca4:	0c01      	lsrs	r1, r0, #16
 8006ca6:	1ac9      	subs	r1, r1, r3
 8006ca8:	1413      	asrs	r3, r2, #16
 8006caa:	18cb      	adds	r3, r1, r3
 8006cac:	1419      	asrs	r1, r3, #16
 8006cae:	b292      	uxth	r2, r2
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	c508      	stmia	r5!, {r3}
 8006cb6:	9b05      	ldr	r3, [sp, #20]
 8006cb8:	9106      	str	r1, [sp, #24]
 8006cba:	4563      	cmp	r3, ip
 8006cbc:	d2dd      	bcs.n	8006c7a <quorem+0x4a>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d030      	beq.n	8006d26 <quorem+0xf6>
 8006cc4:	0038      	movs	r0, r7
 8006cc6:	9904      	ldr	r1, [sp, #16]
 8006cc8:	f001 fa2a 	bl	8008120 <__mcmp>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	db21      	blt.n	8006d14 <quorem+0xe4>
 8006cd0:	0038      	movs	r0, r7
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	9b02      	ldr	r3, [sp, #8]
 8006cd6:	9c04      	ldr	r4, [sp, #16]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	3014      	adds	r0, #20
 8006cde:	3414      	adds	r4, #20
 8006ce0:	6803      	ldr	r3, [r0, #0]
 8006ce2:	cc02      	ldmia	r4!, {r1}
 8006ce4:	b29d      	uxth	r5, r3
 8006ce6:	19ad      	adds	r5, r5, r6
 8006ce8:	b28a      	uxth	r2, r1
 8006cea:	1aaa      	subs	r2, r5, r2
 8006cec:	0c09      	lsrs	r1, r1, #16
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	1a5b      	subs	r3, r3, r1
 8006cf2:	1411      	asrs	r1, r2, #16
 8006cf4:	185b      	adds	r3, r3, r1
 8006cf6:	141e      	asrs	r6, r3, #16
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	041b      	lsls	r3, r3, #16
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	c008      	stmia	r0!, {r3}
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d2ec      	bcs.n	8006ce0 <quorem+0xb0>
 8006d06:	9b01      	ldr	r3, [sp, #4]
 8006d08:	9a03      	ldr	r2, [sp, #12]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	18d3      	adds	r3, r2, r3
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	d015      	beq.n	8006d40 <quorem+0x110>
 8006d14:	9802      	ldr	r0, [sp, #8]
 8006d16:	b009      	add	sp, #36	; 0x24
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d106      	bne.n	8006d2e <quorem+0xfe>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	3c04      	subs	r4, #4
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	d3f5      	bcc.n	8006d1a <quorem+0xea>
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e7c7      	b.n	8006cc4 <quorem+0x94>
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	2a00      	cmp	r2, #0
 8006d38:	d106      	bne.n	8006d48 <quorem+0x118>
 8006d3a:	9a01      	ldr	r2, [sp, #4]
 8006d3c:	3a01      	subs	r2, #1
 8006d3e:	9201      	str	r2, [sp, #4]
 8006d40:	9a03      	ldr	r2, [sp, #12]
 8006d42:	3b04      	subs	r3, #4
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d3f5      	bcc.n	8006d34 <quorem+0x104>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e7e2      	b.n	8006d14 <quorem+0xe4>
	...

08006d50 <_dtoa_r>:
 8006d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d52:	0014      	movs	r4, r2
 8006d54:	001d      	movs	r5, r3
 8006d56:	69c6      	ldr	r6, [r0, #28]
 8006d58:	b09d      	sub	sp, #116	; 0x74
 8006d5a:	9408      	str	r4, [sp, #32]
 8006d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d5e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006d60:	9004      	str	r0, [sp, #16]
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d10f      	bne.n	8006d86 <_dtoa_r+0x36>
 8006d66:	2010      	movs	r0, #16
 8006d68:	f000 fe4a 	bl	8007a00 <malloc>
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	1e02      	subs	r2, r0, #0
 8006d70:	61d8      	str	r0, [r3, #28]
 8006d72:	d104      	bne.n	8006d7e <_dtoa_r+0x2e>
 8006d74:	21ef      	movs	r1, #239	; 0xef
 8006d76:	4bc6      	ldr	r3, [pc, #792]	; (8007090 <_dtoa_r+0x340>)
 8006d78:	48c6      	ldr	r0, [pc, #792]	; (8007094 <_dtoa_r+0x344>)
 8006d7a:	f002 fe2d 	bl	80099d8 <__assert_func>
 8006d7e:	6046      	str	r6, [r0, #4]
 8006d80:	6086      	str	r6, [r0, #8]
 8006d82:	6006      	str	r6, [r0, #0]
 8006d84:	60c6      	str	r6, [r0, #12]
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	6819      	ldr	r1, [r3, #0]
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d00b      	beq.n	8006da8 <_dtoa_r+0x58>
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	2301      	movs	r3, #1
 8006d94:	4093      	lsls	r3, r2
 8006d96:	604a      	str	r2, [r1, #4]
 8006d98:	608b      	str	r3, [r1, #8]
 8006d9a:	9804      	ldr	r0, [sp, #16]
 8006d9c:	f000 ff32 	bl	8007c04 <_Bfree>
 8006da0:	2200      	movs	r2, #0
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	da1e      	bge.n	8006dea <_dtoa_r+0x9a>
 8006dac:	2301      	movs	r3, #1
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	006b      	lsls	r3, r5, #1
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	9309      	str	r3, [sp, #36]	; 0x24
 8006db6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006db8:	4bb7      	ldr	r3, [pc, #732]	; (8007098 <_dtoa_r+0x348>)
 8006dba:	4ab7      	ldr	r2, [pc, #732]	; (8007098 <_dtoa_r+0x348>)
 8006dbc:	403b      	ands	r3, r7
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d116      	bne.n	8006df0 <_dtoa_r+0xa0>
 8006dc2:	4bb6      	ldr	r3, [pc, #728]	; (800709c <_dtoa_r+0x34c>)
 8006dc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	033b      	lsls	r3, r7, #12
 8006dca:	0b1b      	lsrs	r3, r3, #12
 8006dcc:	4323      	orrs	r3, r4
 8006dce:	d101      	bne.n	8006dd4 <_dtoa_r+0x84>
 8006dd0:	f000 fdb5 	bl	800793e <_dtoa_r+0xbee>
 8006dd4:	4bb2      	ldr	r3, [pc, #712]	; (80070a0 <_dtoa_r+0x350>)
 8006dd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	2a00      	cmp	r2, #0
 8006ddc:	d002      	beq.n	8006de4 <_dtoa_r+0x94>
 8006dde:	4bb1      	ldr	r3, [pc, #708]	; (80070a4 <_dtoa_r+0x354>)
 8006de0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	9806      	ldr	r0, [sp, #24]
 8006de6:	b01d      	add	sp, #116	; 0x74
 8006de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dea:	2300      	movs	r3, #0
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	e7e2      	b.n	8006db6 <_dtoa_r+0x66>
 8006df0:	9a08      	ldr	r2, [sp, #32]
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	9210      	str	r2, [sp, #64]	; 0x40
 8006df6:	9311      	str	r3, [sp, #68]	; 0x44
 8006df8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006dfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f7f9 fb24 	bl	800044c <__aeabi_dcmpeq>
 8006e04:	1e06      	subs	r6, r0, #0
 8006e06:	d009      	beq.n	8006e1c <_dtoa_r+0xcc>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	4ba6      	ldr	r3, [pc, #664]	; (80070a8 <_dtoa_r+0x358>)
 8006e10:	9306      	str	r3, [sp, #24]
 8006e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0e5      	beq.n	8006de4 <_dtoa_r+0x94>
 8006e18:	4ba4      	ldr	r3, [pc, #656]	; (80070ac <_dtoa_r+0x35c>)
 8006e1a:	e7e1      	b.n	8006de0 <_dtoa_r+0x90>
 8006e1c:	ab1a      	add	r3, sp, #104	; 0x68
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	9804      	ldr	r0, [sp, #16]
 8006e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e2a:	f001 fa95 	bl	8008358 <__d2b>
 8006e2e:	007a      	lsls	r2, r7, #1
 8006e30:	9005      	str	r0, [sp, #20]
 8006e32:	0d52      	lsrs	r2, r2, #21
 8006e34:	d100      	bne.n	8006e38 <_dtoa_r+0xe8>
 8006e36:	e07b      	b.n	8006f30 <_dtoa_r+0x1e0>
 8006e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e3a:	9617      	str	r6, [sp, #92]	; 0x5c
 8006e3c:	0319      	lsls	r1, r3, #12
 8006e3e:	4b9c      	ldr	r3, [pc, #624]	; (80070b0 <_dtoa_r+0x360>)
 8006e40:	0b09      	lsrs	r1, r1, #12
 8006e42:	430b      	orrs	r3, r1
 8006e44:	499b      	ldr	r1, [pc, #620]	; (80070b4 <_dtoa_r+0x364>)
 8006e46:	1857      	adds	r7, r2, r1
 8006e48:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	2200      	movs	r2, #0
 8006e50:	4b99      	ldr	r3, [pc, #612]	; (80070b8 <_dtoa_r+0x368>)
 8006e52:	f7fa fecf 	bl	8001bf4 <__aeabi_dsub>
 8006e56:	4a99      	ldr	r2, [pc, #612]	; (80070bc <_dtoa_r+0x36c>)
 8006e58:	4b99      	ldr	r3, [pc, #612]	; (80070c0 <_dtoa_r+0x370>)
 8006e5a:	f7fa fc09 	bl	8001670 <__aeabi_dmul>
 8006e5e:	4a99      	ldr	r2, [pc, #612]	; (80070c4 <_dtoa_r+0x374>)
 8006e60:	4b99      	ldr	r3, [pc, #612]	; (80070c8 <_dtoa_r+0x378>)
 8006e62:	f7f9 fcab 	bl	80007bc <__aeabi_dadd>
 8006e66:	0004      	movs	r4, r0
 8006e68:	0038      	movs	r0, r7
 8006e6a:	000d      	movs	r5, r1
 8006e6c:	f7fb fa98 	bl	80023a0 <__aeabi_i2d>
 8006e70:	4a96      	ldr	r2, [pc, #600]	; (80070cc <_dtoa_r+0x37c>)
 8006e72:	4b97      	ldr	r3, [pc, #604]	; (80070d0 <_dtoa_r+0x380>)
 8006e74:	f7fa fbfc 	bl	8001670 <__aeabi_dmul>
 8006e78:	0002      	movs	r2, r0
 8006e7a:	000b      	movs	r3, r1
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	0029      	movs	r1, r5
 8006e80:	f7f9 fc9c 	bl	80007bc <__aeabi_dadd>
 8006e84:	0004      	movs	r4, r0
 8006e86:	000d      	movs	r5, r1
 8006e88:	f7fb fa54 	bl	8002334 <__aeabi_d2iz>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	9003      	str	r0, [sp, #12]
 8006e90:	2300      	movs	r3, #0
 8006e92:	0020      	movs	r0, r4
 8006e94:	0029      	movs	r1, r5
 8006e96:	f7f9 fadf 	bl	8000458 <__aeabi_dcmplt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d00b      	beq.n	8006eb6 <_dtoa_r+0x166>
 8006e9e:	9803      	ldr	r0, [sp, #12]
 8006ea0:	f7fb fa7e 	bl	80023a0 <__aeabi_i2d>
 8006ea4:	002b      	movs	r3, r5
 8006ea6:	0022      	movs	r2, r4
 8006ea8:	f7f9 fad0 	bl	800044c <__aeabi_dcmpeq>
 8006eac:	4243      	negs	r3, r0
 8006eae:	4158      	adcs	r0, r3
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	1a1b      	subs	r3, r3, r0
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	2b16      	cmp	r3, #22
 8006ebe:	d810      	bhi.n	8006ee2 <_dtoa_r+0x192>
 8006ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ec2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ec4:	9a03      	ldr	r2, [sp, #12]
 8006ec6:	4b83      	ldr	r3, [pc, #524]	; (80070d4 <_dtoa_r+0x384>)
 8006ec8:	00d2      	lsls	r2, r2, #3
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f7f9 fac2 	bl	8000458 <__aeabi_dcmplt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d047      	beq.n	8006f68 <_dtoa_r+0x218>
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9316      	str	r3, [sp, #88]	; 0x58
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ee8:	1bdb      	subs	r3, r3, r7
 8006eea:	1e5a      	subs	r2, r3, #1
 8006eec:	d53e      	bpl.n	8006f6c <_dtoa_r+0x21c>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	db38      	blt.n	8006f70 <_dtoa_r+0x220>
 8006efe:	9a03      	ldr	r2, [sp, #12]
 8006f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f02:	4694      	mov	ip, r2
 8006f04:	4463      	add	r3, ip
 8006f06:	930c      	str	r3, [sp, #48]	; 0x30
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f10:	2401      	movs	r4, #1
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d867      	bhi.n	8006fe6 <_dtoa_r+0x296>
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	dd02      	ble.n	8006f20 <_dtoa_r+0x1d0>
 8006f1a:	2400      	movs	r4, #0
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	9322      	str	r3, [sp, #136]	; 0x88
 8006f20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f22:	1e98      	subs	r0, r3, #2
 8006f24:	2803      	cmp	r0, #3
 8006f26:	d867      	bhi.n	8006ff8 <_dtoa_r+0x2a8>
 8006f28:	f7f9 f8f6 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006f2c:	5b383a2b 	.word	0x5b383a2b
 8006f30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f32:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006f34:	18f6      	adds	r6, r6, r3
 8006f36:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <_dtoa_r+0x388>)
 8006f38:	18f2      	adds	r2, r6, r3
 8006f3a:	2a20      	cmp	r2, #32
 8006f3c:	dd0f      	ble.n	8006f5e <_dtoa_r+0x20e>
 8006f3e:	2340      	movs	r3, #64	; 0x40
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	409f      	lsls	r7, r3
 8006f44:	4b65      	ldr	r3, [pc, #404]	; (80070dc <_dtoa_r+0x38c>)
 8006f46:	0038      	movs	r0, r7
 8006f48:	18f3      	adds	r3, r6, r3
 8006f4a:	40dc      	lsrs	r4, r3
 8006f4c:	4320      	orrs	r0, r4
 8006f4e:	f7fb fa57 	bl	8002400 <__aeabi_ui2d>
 8006f52:	2201      	movs	r2, #1
 8006f54:	4b62      	ldr	r3, [pc, #392]	; (80070e0 <_dtoa_r+0x390>)
 8006f56:	1e77      	subs	r7, r6, #1
 8006f58:	18cb      	adds	r3, r1, r3
 8006f5a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f5c:	e776      	b.n	8006e4c <_dtoa_r+0xfc>
 8006f5e:	2320      	movs	r3, #32
 8006f60:	0020      	movs	r0, r4
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	4098      	lsls	r0, r3
 8006f66:	e7f2      	b.n	8006f4e <_dtoa_r+0x1fe>
 8006f68:	9016      	str	r0, [sp, #88]	; 0x58
 8006f6a:	e7ba      	b.n	8006ee2 <_dtoa_r+0x192>
 8006f6c:	920c      	str	r2, [sp, #48]	; 0x30
 8006f6e:	e7c3      	b.n	8006ef8 <_dtoa_r+0x1a8>
 8006f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f72:	9a03      	ldr	r2, [sp, #12]
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	930a      	str	r3, [sp, #40]	; 0x28
 8006f78:	4253      	negs	r3, r2
 8006f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f80:	e7c5      	b.n	8006f0e <_dtoa_r+0x1be>
 8006f82:	2300      	movs	r3, #0
 8006f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f8a:	9307      	str	r3, [sp, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dc13      	bgt.n	8006fb8 <_dtoa_r+0x268>
 8006f90:	2301      	movs	r3, #1
 8006f92:	001a      	movs	r2, r3
 8006f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f96:	9307      	str	r3, [sp, #28]
 8006f98:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f9a:	e00d      	b.n	8006fb8 <_dtoa_r+0x268>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e7f1      	b.n	8006f84 <_dtoa_r+0x234>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa6:	4694      	mov	ip, r2
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	4463      	add	r3, ip
 8006fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fae:	3301      	adds	r3, #1
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dc00      	bgt.n	8006fb8 <_dtoa_r+0x268>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	69d0      	ldr	r0, [r2, #28]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	0015      	movs	r5, r2
 8006fc2:	3514      	adds	r5, #20
 8006fc4:	429d      	cmp	r5, r3
 8006fc6:	d91b      	bls.n	8007000 <_dtoa_r+0x2b0>
 8006fc8:	6041      	str	r1, [r0, #4]
 8006fca:	9804      	ldr	r0, [sp, #16]
 8006fcc:	f000 fdd6 	bl	8007b7c <_Balloc>
 8006fd0:	9006      	str	r0, [sp, #24]
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d117      	bne.n	8007006 <_dtoa_r+0x2b6>
 8006fd6:	21b0      	movs	r1, #176	; 0xb0
 8006fd8:	4b42      	ldr	r3, [pc, #264]	; (80070e4 <_dtoa_r+0x394>)
 8006fda:	482e      	ldr	r0, [pc, #184]	; (8007094 <_dtoa_r+0x344>)
 8006fdc:	9a06      	ldr	r2, [sp, #24]
 8006fde:	31ff      	adds	r1, #255	; 0xff
 8006fe0:	e6cb      	b.n	8006d7a <_dtoa_r+0x2a>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e7dd      	b.n	8006fa2 <_dtoa_r+0x252>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	940f      	str	r4, [sp, #60]	; 0x3c
 8006fea:	9322      	str	r3, [sp, #136]	; 0x88
 8006fec:	3b01      	subs	r3, #1
 8006fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ff0:	9307      	str	r3, [sp, #28]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	3313      	adds	r3, #19
 8006ff6:	e7cf      	b.n	8006f98 <_dtoa_r+0x248>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ffc:	3b02      	subs	r3, #2
 8006ffe:	e7f6      	b.n	8006fee <_dtoa_r+0x29e>
 8007000:	3101      	adds	r1, #1
 8007002:	0052      	lsls	r2, r2, #1
 8007004:	e7dc      	b.n	8006fc0 <_dtoa_r+0x270>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	9a06      	ldr	r2, [sp, #24]
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	9b07      	ldr	r3, [sp, #28]
 8007010:	2b0e      	cmp	r3, #14
 8007012:	d900      	bls.n	8007016 <_dtoa_r+0x2c6>
 8007014:	e0e5      	b.n	80071e2 <_dtoa_r+0x492>
 8007016:	2c00      	cmp	r4, #0
 8007018:	d100      	bne.n	800701c <_dtoa_r+0x2cc>
 800701a:	e0e2      	b.n	80071e2 <_dtoa_r+0x492>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dd64      	ble.n	80070ec <_dtoa_r+0x39c>
 8007022:	210f      	movs	r1, #15
 8007024:	9a03      	ldr	r2, [sp, #12]
 8007026:	4b2b      	ldr	r3, [pc, #172]	; (80070d4 <_dtoa_r+0x384>)
 8007028:	400a      	ands	r2, r1
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	189b      	adds	r3, r3, r2
 800702e:	681e      	ldr	r6, [r3, #0]
 8007030:	685f      	ldr	r7, [r3, #4]
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	2402      	movs	r4, #2
 8007036:	111d      	asrs	r5, r3, #4
 8007038:	05db      	lsls	r3, r3, #23
 800703a:	d50a      	bpl.n	8007052 <_dtoa_r+0x302>
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <_dtoa_r+0x398>)
 800703e:	400d      	ands	r5, r1
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007046:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007048:	f7f9 ff18 	bl	8000e7c <__aeabi_ddiv>
 800704c:	9008      	str	r0, [sp, #32]
 800704e:	9109      	str	r1, [sp, #36]	; 0x24
 8007050:	3401      	adds	r4, #1
 8007052:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <_dtoa_r+0x398>)
 8007054:	930e      	str	r3, [sp, #56]	; 0x38
 8007056:	2d00      	cmp	r5, #0
 8007058:	d108      	bne.n	800706c <_dtoa_r+0x31c>
 800705a:	9808      	ldr	r0, [sp, #32]
 800705c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800705e:	0032      	movs	r2, r6
 8007060:	003b      	movs	r3, r7
 8007062:	f7f9 ff0b 	bl	8000e7c <__aeabi_ddiv>
 8007066:	9008      	str	r0, [sp, #32]
 8007068:	9109      	str	r1, [sp, #36]	; 0x24
 800706a:	e05a      	b.n	8007122 <_dtoa_r+0x3d2>
 800706c:	2301      	movs	r3, #1
 800706e:	421d      	tst	r5, r3
 8007070:	d009      	beq.n	8007086 <_dtoa_r+0x336>
 8007072:	18e4      	adds	r4, r4, r3
 8007074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007076:	0030      	movs	r0, r6
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	0039      	movs	r1, r7
 800707e:	f7fa faf7 	bl	8001670 <__aeabi_dmul>
 8007082:	0006      	movs	r6, r0
 8007084:	000f      	movs	r7, r1
 8007086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007088:	106d      	asrs	r5, r5, #1
 800708a:	3308      	adds	r3, #8
 800708c:	e7e2      	b.n	8007054 <_dtoa_r+0x304>
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	0800a627 	.word	0x0800a627
 8007094:	0800a63e 	.word	0x0800a63e
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	0000270f 	.word	0x0000270f
 80070a0:	0800a623 	.word	0x0800a623
 80070a4:	0800a626 	.word	0x0800a626
 80070a8:	0800a5f1 	.word	0x0800a5f1
 80070ac:	0800a5f2 	.word	0x0800a5f2
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	fffffc01 	.word	0xfffffc01
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	636f4361 	.word	0x636f4361
 80070c0:	3fd287a7 	.word	0x3fd287a7
 80070c4:	8b60c8b3 	.word	0x8b60c8b3
 80070c8:	3fc68a28 	.word	0x3fc68a28
 80070cc:	509f79fb 	.word	0x509f79fb
 80070d0:	3fd34413 	.word	0x3fd34413
 80070d4:	0800a728 	.word	0x0800a728
 80070d8:	00000432 	.word	0x00000432
 80070dc:	00000412 	.word	0x00000412
 80070e0:	fe100000 	.word	0xfe100000
 80070e4:	0800a696 	.word	0x0800a696
 80070e8:	0800a700 	.word	0x0800a700
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	2402      	movs	r4, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d016      	beq.n	8007122 <_dtoa_r+0x3d2>
 80070f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80070f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070f8:	220f      	movs	r2, #15
 80070fa:	425d      	negs	r5, r3
 80070fc:	402a      	ands	r2, r5
 80070fe:	4bdd      	ldr	r3, [pc, #884]	; (8007474 <_dtoa_r+0x724>)
 8007100:	00d2      	lsls	r2, r2, #3
 8007102:	189b      	adds	r3, r3, r2
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f7fa fab2 	bl	8001670 <__aeabi_dmul>
 800710c:	2701      	movs	r7, #1
 800710e:	2300      	movs	r3, #0
 8007110:	9008      	str	r0, [sp, #32]
 8007112:	9109      	str	r1, [sp, #36]	; 0x24
 8007114:	4ed8      	ldr	r6, [pc, #864]	; (8007478 <_dtoa_r+0x728>)
 8007116:	112d      	asrs	r5, r5, #4
 8007118:	2d00      	cmp	r5, #0
 800711a:	d000      	beq.n	800711e <_dtoa_r+0x3ce>
 800711c:	e091      	b.n	8007242 <_dtoa_r+0x4f2>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1a1      	bne.n	8007066 <_dtoa_r+0x316>
 8007122:	9e08      	ldr	r6, [sp, #32]
 8007124:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007126:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007128:	2b00      	cmp	r3, #0
 800712a:	d100      	bne.n	800712e <_dtoa_r+0x3de>
 800712c:	e094      	b.n	8007258 <_dtoa_r+0x508>
 800712e:	2200      	movs	r2, #0
 8007130:	0030      	movs	r0, r6
 8007132:	0039      	movs	r1, r7
 8007134:	4bd1      	ldr	r3, [pc, #836]	; (800747c <_dtoa_r+0x72c>)
 8007136:	f7f9 f98f 	bl	8000458 <__aeabi_dcmplt>
 800713a:	2800      	cmp	r0, #0
 800713c:	d100      	bne.n	8007140 <_dtoa_r+0x3f0>
 800713e:	e08b      	b.n	8007258 <_dtoa_r+0x508>
 8007140:	9b07      	ldr	r3, [sp, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d100      	bne.n	8007148 <_dtoa_r+0x3f8>
 8007146:	e087      	b.n	8007258 <_dtoa_r+0x508>
 8007148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800714a:	2b00      	cmp	r3, #0
 800714c:	dd45      	ble.n	80071da <_dtoa_r+0x48a>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	3b01      	subs	r3, #1
 8007154:	930e      	str	r3, [sp, #56]	; 0x38
 8007156:	0030      	movs	r0, r6
 8007158:	4bc9      	ldr	r3, [pc, #804]	; (8007480 <_dtoa_r+0x730>)
 800715a:	0039      	movs	r1, r7
 800715c:	f7fa fa88 	bl	8001670 <__aeabi_dmul>
 8007160:	9008      	str	r0, [sp, #32]
 8007162:	9109      	str	r1, [sp, #36]	; 0x24
 8007164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007166:	3401      	adds	r4, #1
 8007168:	0020      	movs	r0, r4
 800716a:	9e08      	ldr	r6, [sp, #32]
 800716c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800716e:	9312      	str	r3, [sp, #72]	; 0x48
 8007170:	f7fb f916 	bl	80023a0 <__aeabi_i2d>
 8007174:	0032      	movs	r2, r6
 8007176:	003b      	movs	r3, r7
 8007178:	f7fa fa7a 	bl	8001670 <__aeabi_dmul>
 800717c:	2200      	movs	r2, #0
 800717e:	4bc1      	ldr	r3, [pc, #772]	; (8007484 <_dtoa_r+0x734>)
 8007180:	f7f9 fb1c 	bl	80007bc <__aeabi_dadd>
 8007184:	4ac0      	ldr	r2, [pc, #768]	; (8007488 <_dtoa_r+0x738>)
 8007186:	9014      	str	r0, [sp, #80]	; 0x50
 8007188:	9115      	str	r1, [sp, #84]	; 0x54
 800718a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800718c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800718e:	4694      	mov	ip, r2
 8007190:	9308      	str	r3, [sp, #32]
 8007192:	9409      	str	r4, [sp, #36]	; 0x24
 8007194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007196:	4463      	add	r3, ip
 8007198:	9318      	str	r3, [sp, #96]	; 0x60
 800719a:	9309      	str	r3, [sp, #36]	; 0x24
 800719c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d15e      	bne.n	8007260 <_dtoa_r+0x510>
 80071a2:	2200      	movs	r2, #0
 80071a4:	4bb9      	ldr	r3, [pc, #740]	; (800748c <_dtoa_r+0x73c>)
 80071a6:	0030      	movs	r0, r6
 80071a8:	0039      	movs	r1, r7
 80071aa:	f7fa fd23 	bl	8001bf4 <__aeabi_dsub>
 80071ae:	9a08      	ldr	r2, [sp, #32]
 80071b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80071b2:	0004      	movs	r4, r0
 80071b4:	000d      	movs	r5, r1
 80071b6:	f7f9 f963 	bl	8000480 <__aeabi_dcmpgt>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d000      	beq.n	80071c0 <_dtoa_r+0x470>
 80071be:	e2b3      	b.n	8007728 <_dtoa_r+0x9d8>
 80071c0:	48b3      	ldr	r0, [pc, #716]	; (8007490 <_dtoa_r+0x740>)
 80071c2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80071c4:	4684      	mov	ip, r0
 80071c6:	4461      	add	r1, ip
 80071c8:	000b      	movs	r3, r1
 80071ca:	0020      	movs	r0, r4
 80071cc:	0029      	movs	r1, r5
 80071ce:	9a08      	ldr	r2, [sp, #32]
 80071d0:	f7f9 f942 	bl	8000458 <__aeabi_dcmplt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d000      	beq.n	80071da <_dtoa_r+0x48a>
 80071d8:	e2a3      	b.n	8007722 <_dtoa_r+0x9d2>
 80071da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80071de:	9308      	str	r3, [sp, #32]
 80071e0:	9409      	str	r4, [sp, #36]	; 0x24
 80071e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da00      	bge.n	80071ea <_dtoa_r+0x49a>
 80071e8:	e179      	b.n	80074de <_dtoa_r+0x78e>
 80071ea:	9a03      	ldr	r2, [sp, #12]
 80071ec:	2a0e      	cmp	r2, #14
 80071ee:	dd00      	ble.n	80071f2 <_dtoa_r+0x4a2>
 80071f0:	e175      	b.n	80074de <_dtoa_r+0x78e>
 80071f2:	4ba0      	ldr	r3, [pc, #640]	; (8007474 <_dtoa_r+0x724>)
 80071f4:	00d2      	lsls	r2, r2, #3
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	681e      	ldr	r6, [r3, #0]
 80071fa:	685f      	ldr	r7, [r3, #4]
 80071fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	db00      	blt.n	8007204 <_dtoa_r+0x4b4>
 8007202:	e0e5      	b.n	80073d0 <_dtoa_r+0x680>
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd00      	ble.n	800720c <_dtoa_r+0x4bc>
 800720a:	e0e1      	b.n	80073d0 <_dtoa_r+0x680>
 800720c:	d000      	beq.n	8007210 <_dtoa_r+0x4c0>
 800720e:	e288      	b.n	8007722 <_dtoa_r+0x9d2>
 8007210:	2200      	movs	r2, #0
 8007212:	0030      	movs	r0, r6
 8007214:	0039      	movs	r1, r7
 8007216:	4b9d      	ldr	r3, [pc, #628]	; (800748c <_dtoa_r+0x73c>)
 8007218:	f7fa fa2a 	bl	8001670 <__aeabi_dmul>
 800721c:	9a08      	ldr	r2, [sp, #32]
 800721e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007220:	f7f9 f938 	bl	8000494 <__aeabi_dcmpge>
 8007224:	9e07      	ldr	r6, [sp, #28]
 8007226:	0037      	movs	r7, r6
 8007228:	2800      	cmp	r0, #0
 800722a:	d000      	beq.n	800722e <_dtoa_r+0x4de>
 800722c:	e25f      	b.n	80076ee <_dtoa_r+0x99e>
 800722e:	9b06      	ldr	r3, [sp, #24]
 8007230:	9a06      	ldr	r2, [sp, #24]
 8007232:	3301      	adds	r3, #1
 8007234:	9308      	str	r3, [sp, #32]
 8007236:	2331      	movs	r3, #49	; 0x31
 8007238:	7013      	strb	r3, [r2, #0]
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	e25a      	b.n	80076f8 <_dtoa_r+0x9a8>
 8007242:	423d      	tst	r5, r7
 8007244:	d005      	beq.n	8007252 <_dtoa_r+0x502>
 8007246:	6832      	ldr	r2, [r6, #0]
 8007248:	6873      	ldr	r3, [r6, #4]
 800724a:	f7fa fa11 	bl	8001670 <__aeabi_dmul>
 800724e:	003b      	movs	r3, r7
 8007250:	3401      	adds	r4, #1
 8007252:	106d      	asrs	r5, r5, #1
 8007254:	3608      	adds	r6, #8
 8007256:	e75f      	b.n	8007118 <_dtoa_r+0x3c8>
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	930e      	str	r3, [sp, #56]	; 0x38
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	e783      	b.n	8007168 <_dtoa_r+0x418>
 8007260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007262:	4b84      	ldr	r3, [pc, #528]	; (8007474 <_dtoa_r+0x724>)
 8007264:	3a01      	subs	r2, #1
 8007266:	00d2      	lsls	r2, r2, #3
 8007268:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800726a:	189b      	adds	r3, r3, r2
 800726c:	9c08      	ldr	r4, [sp, #32]
 800726e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2900      	cmp	r1, #0
 8007276:	d051      	beq.n	800731c <_dtoa_r+0x5cc>
 8007278:	2000      	movs	r0, #0
 800727a:	4986      	ldr	r1, [pc, #536]	; (8007494 <_dtoa_r+0x744>)
 800727c:	f7f9 fdfe 	bl	8000e7c <__aeabi_ddiv>
 8007280:	0022      	movs	r2, r4
 8007282:	002b      	movs	r3, r5
 8007284:	f7fa fcb6 	bl	8001bf4 <__aeabi_dsub>
 8007288:	9a06      	ldr	r2, [sp, #24]
 800728a:	0004      	movs	r4, r0
 800728c:	4694      	mov	ip, r2
 800728e:	000d      	movs	r5, r1
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	9314      	str	r3, [sp, #80]	; 0x50
 8007294:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007296:	4463      	add	r3, ip
 8007298:	9318      	str	r3, [sp, #96]	; 0x60
 800729a:	0039      	movs	r1, r7
 800729c:	0030      	movs	r0, r6
 800729e:	f7fb f849 	bl	8002334 <__aeabi_d2iz>
 80072a2:	9012      	str	r0, [sp, #72]	; 0x48
 80072a4:	f7fb f87c 	bl	80023a0 <__aeabi_i2d>
 80072a8:	0002      	movs	r2, r0
 80072aa:	000b      	movs	r3, r1
 80072ac:	0030      	movs	r0, r6
 80072ae:	0039      	movs	r1, r7
 80072b0:	f7fa fca0 	bl	8001bf4 <__aeabi_dsub>
 80072b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072b8:	3301      	adds	r3, #1
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072be:	0006      	movs	r6, r0
 80072c0:	3330      	adds	r3, #48	; 0x30
 80072c2:	7013      	strb	r3, [r2, #0]
 80072c4:	0022      	movs	r2, r4
 80072c6:	002b      	movs	r3, r5
 80072c8:	000f      	movs	r7, r1
 80072ca:	f7f9 f8c5 	bl	8000458 <__aeabi_dcmplt>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d174      	bne.n	80073bc <_dtoa_r+0x66c>
 80072d2:	0032      	movs	r2, r6
 80072d4:	003b      	movs	r3, r7
 80072d6:	2000      	movs	r0, #0
 80072d8:	4968      	ldr	r1, [pc, #416]	; (800747c <_dtoa_r+0x72c>)
 80072da:	f7fa fc8b 	bl	8001bf4 <__aeabi_dsub>
 80072de:	0022      	movs	r2, r4
 80072e0:	002b      	movs	r3, r5
 80072e2:	f7f9 f8b9 	bl	8000458 <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d000      	beq.n	80072ec <_dtoa_r+0x59c>
 80072ea:	e0d7      	b.n	800749c <_dtoa_r+0x74c>
 80072ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80072ee:	9a08      	ldr	r2, [sp, #32]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d100      	bne.n	80072f6 <_dtoa_r+0x5a6>
 80072f4:	e771      	b.n	80071da <_dtoa_r+0x48a>
 80072f6:	2200      	movs	r2, #0
 80072f8:	0020      	movs	r0, r4
 80072fa:	0029      	movs	r1, r5
 80072fc:	4b60      	ldr	r3, [pc, #384]	; (8007480 <_dtoa_r+0x730>)
 80072fe:	f7fa f9b7 	bl	8001670 <__aeabi_dmul>
 8007302:	4b5f      	ldr	r3, [pc, #380]	; (8007480 <_dtoa_r+0x730>)
 8007304:	0004      	movs	r4, r0
 8007306:	000d      	movs	r5, r1
 8007308:	0030      	movs	r0, r6
 800730a:	0039      	movs	r1, r7
 800730c:	2200      	movs	r2, #0
 800730e:	f7fa f9af 	bl	8001670 <__aeabi_dmul>
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	0006      	movs	r6, r0
 8007316:	000f      	movs	r7, r1
 8007318:	9314      	str	r3, [sp, #80]	; 0x50
 800731a:	e7be      	b.n	800729a <_dtoa_r+0x54a>
 800731c:	0020      	movs	r0, r4
 800731e:	0029      	movs	r1, r5
 8007320:	f7fa f9a6 	bl	8001670 <__aeabi_dmul>
 8007324:	9a06      	ldr	r2, [sp, #24]
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	4694      	mov	ip, r2
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800732e:	9014      	str	r0, [sp, #80]	; 0x50
 8007330:	9115      	str	r1, [sp, #84]	; 0x54
 8007332:	4463      	add	r3, ip
 8007334:	9319      	str	r3, [sp, #100]	; 0x64
 8007336:	0030      	movs	r0, r6
 8007338:	0039      	movs	r1, r7
 800733a:	f7fa fffb 	bl	8002334 <__aeabi_d2iz>
 800733e:	9018      	str	r0, [sp, #96]	; 0x60
 8007340:	f7fb f82e 	bl	80023a0 <__aeabi_i2d>
 8007344:	0002      	movs	r2, r0
 8007346:	000b      	movs	r3, r1
 8007348:	0030      	movs	r0, r6
 800734a:	0039      	movs	r1, r7
 800734c:	f7fa fc52 	bl	8001bf4 <__aeabi_dsub>
 8007350:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	3630      	adds	r6, #48	; 0x30
 8007356:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007358:	701e      	strb	r6, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	0004      	movs	r4, r0
 800735e:	000d      	movs	r5, r1
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	4293      	cmp	r3, r2
 8007364:	d12d      	bne.n	80073c2 <_dtoa_r+0x672>
 8007366:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007368:	9915      	ldr	r1, [sp, #84]	; 0x54
 800736a:	9a06      	ldr	r2, [sp, #24]
 800736c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800736e:	4694      	mov	ip, r2
 8007370:	4463      	add	r3, ip
 8007372:	2200      	movs	r2, #0
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	4b47      	ldr	r3, [pc, #284]	; (8007494 <_dtoa_r+0x744>)
 8007378:	f7f9 fa20 	bl	80007bc <__aeabi_dadd>
 800737c:	0002      	movs	r2, r0
 800737e:	000b      	movs	r3, r1
 8007380:	0020      	movs	r0, r4
 8007382:	0029      	movs	r1, r5
 8007384:	f7f9 f87c 	bl	8000480 <__aeabi_dcmpgt>
 8007388:	2800      	cmp	r0, #0
 800738a:	d000      	beq.n	800738e <_dtoa_r+0x63e>
 800738c:	e086      	b.n	800749c <_dtoa_r+0x74c>
 800738e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007392:	2000      	movs	r0, #0
 8007394:	493f      	ldr	r1, [pc, #252]	; (8007494 <_dtoa_r+0x744>)
 8007396:	f7fa fc2d 	bl	8001bf4 <__aeabi_dsub>
 800739a:	0002      	movs	r2, r0
 800739c:	000b      	movs	r3, r1
 800739e:	0020      	movs	r0, r4
 80073a0:	0029      	movs	r1, r5
 80073a2:	f7f9 f859 	bl	8000458 <__aeabi_dcmplt>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d100      	bne.n	80073ac <_dtoa_r+0x65c>
 80073aa:	e716      	b.n	80071da <_dtoa_r+0x48a>
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	001a      	movs	r2, r3
 80073b0:	3a01      	subs	r2, #1
 80073b2:	9208      	str	r2, [sp, #32]
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	2a30      	cmp	r2, #48	; 0x30
 80073b8:	d0f8      	beq.n	80073ac <_dtoa_r+0x65c>
 80073ba:	9308      	str	r3, [sp, #32]
 80073bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073be:	9303      	str	r3, [sp, #12]
 80073c0:	e046      	b.n	8007450 <_dtoa_r+0x700>
 80073c2:	2200      	movs	r2, #0
 80073c4:	4b2e      	ldr	r3, [pc, #184]	; (8007480 <_dtoa_r+0x730>)
 80073c6:	f7fa f953 	bl	8001670 <__aeabi_dmul>
 80073ca:	0006      	movs	r6, r0
 80073cc:	000f      	movs	r7, r1
 80073ce:	e7b2      	b.n	8007336 <_dtoa_r+0x5e6>
 80073d0:	9b06      	ldr	r3, [sp, #24]
 80073d2:	9a06      	ldr	r2, [sp, #24]
 80073d4:	930a      	str	r3, [sp, #40]	; 0x28
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	9c08      	ldr	r4, [sp, #32]
 80073da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073dc:	3b01      	subs	r3, #1
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e2:	0032      	movs	r2, r6
 80073e4:	003b      	movs	r3, r7
 80073e6:	0020      	movs	r0, r4
 80073e8:	0029      	movs	r1, r5
 80073ea:	f7f9 fd47 	bl	8000e7c <__aeabi_ddiv>
 80073ee:	f7fa ffa1 	bl	8002334 <__aeabi_d2iz>
 80073f2:	9007      	str	r0, [sp, #28]
 80073f4:	f7fa ffd4 	bl	80023a0 <__aeabi_i2d>
 80073f8:	0032      	movs	r2, r6
 80073fa:	003b      	movs	r3, r7
 80073fc:	f7fa f938 	bl	8001670 <__aeabi_dmul>
 8007400:	0002      	movs	r2, r0
 8007402:	000b      	movs	r3, r1
 8007404:	0020      	movs	r0, r4
 8007406:	0029      	movs	r1, r5
 8007408:	f7fa fbf4 	bl	8001bf4 <__aeabi_dsub>
 800740c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740e:	001a      	movs	r2, r3
 8007410:	3201      	adds	r2, #1
 8007412:	920a      	str	r2, [sp, #40]	; 0x28
 8007414:	9208      	str	r2, [sp, #32]
 8007416:	9a07      	ldr	r2, [sp, #28]
 8007418:	3230      	adds	r2, #48	; 0x30
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d14f      	bne.n	80074c2 <_dtoa_r+0x772>
 8007422:	0002      	movs	r2, r0
 8007424:	000b      	movs	r3, r1
 8007426:	f7f9 f9c9 	bl	80007bc <__aeabi_dadd>
 800742a:	0032      	movs	r2, r6
 800742c:	003b      	movs	r3, r7
 800742e:	0004      	movs	r4, r0
 8007430:	000d      	movs	r5, r1
 8007432:	f7f9 f825 	bl	8000480 <__aeabi_dcmpgt>
 8007436:	2800      	cmp	r0, #0
 8007438:	d12e      	bne.n	8007498 <_dtoa_r+0x748>
 800743a:	0032      	movs	r2, r6
 800743c:	003b      	movs	r3, r7
 800743e:	0020      	movs	r0, r4
 8007440:	0029      	movs	r1, r5
 8007442:	f7f9 f803 	bl	800044c <__aeabi_dcmpeq>
 8007446:	2800      	cmp	r0, #0
 8007448:	d002      	beq.n	8007450 <_dtoa_r+0x700>
 800744a:	9b07      	ldr	r3, [sp, #28]
 800744c:	07de      	lsls	r6, r3, #31
 800744e:	d423      	bmi.n	8007498 <_dtoa_r+0x748>
 8007450:	9905      	ldr	r1, [sp, #20]
 8007452:	9804      	ldr	r0, [sp, #16]
 8007454:	f000 fbd6 	bl	8007c04 <_Bfree>
 8007458:	2300      	movs	r3, #0
 800745a:	9a08      	ldr	r2, [sp, #32]
 800745c:	7013      	strb	r3, [r2, #0]
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007462:	3301      	adds	r3, #1
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007468:	2b00      	cmp	r3, #0
 800746a:	d100      	bne.n	800746e <_dtoa_r+0x71e>
 800746c:	e4ba      	b.n	8006de4 <_dtoa_r+0x94>
 800746e:	9a08      	ldr	r2, [sp, #32]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e4b7      	b.n	8006de4 <_dtoa_r+0x94>
 8007474:	0800a728 	.word	0x0800a728
 8007478:	0800a700 	.word	0x0800a700
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	40240000 	.word	0x40240000
 8007484:	401c0000 	.word	0x401c0000
 8007488:	fcc00000 	.word	0xfcc00000
 800748c:	40140000 	.word	0x40140000
 8007490:	7cc00000 	.word	0x7cc00000
 8007494:	3fe00000 	.word	0x3fe00000
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	930e      	str	r3, [sp, #56]	; 0x38
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	9308      	str	r3, [sp, #32]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	781a      	ldrb	r2, [r3, #0]
 80074a4:	2a39      	cmp	r2, #57	; 0x39
 80074a6:	d108      	bne.n	80074ba <_dtoa_r+0x76a>
 80074a8:	9a06      	ldr	r2, [sp, #24]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d1f7      	bne.n	800749e <_dtoa_r+0x74e>
 80074ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074b0:	9906      	ldr	r1, [sp, #24]
 80074b2:	3201      	adds	r2, #1
 80074b4:	920e      	str	r2, [sp, #56]	; 0x38
 80074b6:	2230      	movs	r2, #48	; 0x30
 80074b8:	700a      	strb	r2, [r1, #0]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e77c      	b.n	80073bc <_dtoa_r+0x66c>
 80074c2:	2200      	movs	r2, #0
 80074c4:	4ba9      	ldr	r3, [pc, #676]	; (800776c <_dtoa_r+0xa1c>)
 80074c6:	f7fa f8d3 	bl	8001670 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	0004      	movs	r4, r0
 80074d0:	000d      	movs	r5, r1
 80074d2:	f7f8 ffbb 	bl	800044c <__aeabi_dcmpeq>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d100      	bne.n	80074dc <_dtoa_r+0x78c>
 80074da:	e782      	b.n	80073e2 <_dtoa_r+0x692>
 80074dc:	e7b8      	b.n	8007450 <_dtoa_r+0x700>
 80074de:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80074e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80074e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	d012      	beq.n	800750e <_dtoa_r+0x7be>
 80074e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	dc6e      	bgt.n	80075cc <_dtoa_r+0x87c>
 80074ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d065      	beq.n	80075c0 <_dtoa_r+0x870>
 80074f4:	4a9e      	ldr	r2, [pc, #632]	; (8007770 <_dtoa_r+0xa20>)
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074fa:	2101      	movs	r1, #1
 80074fc:	18d2      	adds	r2, r2, r3
 80074fe:	920a      	str	r2, [sp, #40]	; 0x28
 8007500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007502:	9804      	ldr	r0, [sp, #16]
 8007504:	18d3      	adds	r3, r2, r3
 8007506:	930c      	str	r3, [sp, #48]	; 0x30
 8007508:	f000 fc78 	bl	8007dfc <__i2b>
 800750c:	0007      	movs	r7, r0
 800750e:	2c00      	cmp	r4, #0
 8007510:	d00e      	beq.n	8007530 <_dtoa_r+0x7e0>
 8007512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd0b      	ble.n	8007530 <_dtoa_r+0x7e0>
 8007518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800751a:	0023      	movs	r3, r4
 800751c:	4294      	cmp	r4, r2
 800751e:	dd00      	ble.n	8007522 <_dtoa_r+0x7d2>
 8007520:	0013      	movs	r3, r2
 8007522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007524:	1ae4      	subs	r4, r4, r3
 8007526:	1ad2      	subs	r2, r2, r3
 8007528:	920a      	str	r2, [sp, #40]	; 0x28
 800752a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	930c      	str	r3, [sp, #48]	; 0x30
 8007530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01e      	beq.n	8007574 <_dtoa_r+0x824>
 8007536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d05c      	beq.n	80075f6 <_dtoa_r+0x8a6>
 800753c:	2d00      	cmp	r5, #0
 800753e:	dd10      	ble.n	8007562 <_dtoa_r+0x812>
 8007540:	0039      	movs	r1, r7
 8007542:	002a      	movs	r2, r5
 8007544:	9804      	ldr	r0, [sp, #16]
 8007546:	f000 fd21 	bl	8007f8c <__pow5mult>
 800754a:	9a05      	ldr	r2, [sp, #20]
 800754c:	0001      	movs	r1, r0
 800754e:	0007      	movs	r7, r0
 8007550:	9804      	ldr	r0, [sp, #16]
 8007552:	f000 fc6b 	bl	8007e2c <__multiply>
 8007556:	0006      	movs	r6, r0
 8007558:	9905      	ldr	r1, [sp, #20]
 800755a:	9804      	ldr	r0, [sp, #16]
 800755c:	f000 fb52 	bl	8007c04 <_Bfree>
 8007560:	9605      	str	r6, [sp, #20]
 8007562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007564:	1b5a      	subs	r2, r3, r5
 8007566:	42ab      	cmp	r3, r5
 8007568:	d004      	beq.n	8007574 <_dtoa_r+0x824>
 800756a:	9905      	ldr	r1, [sp, #20]
 800756c:	9804      	ldr	r0, [sp, #16]
 800756e:	f000 fd0d 	bl	8007f8c <__pow5mult>
 8007572:	9005      	str	r0, [sp, #20]
 8007574:	2101      	movs	r1, #1
 8007576:	9804      	ldr	r0, [sp, #16]
 8007578:	f000 fc40 	bl	8007dfc <__i2b>
 800757c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800757e:	0006      	movs	r6, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	dd3a      	ble.n	80075fa <_dtoa_r+0x8aa>
 8007584:	001a      	movs	r2, r3
 8007586:	0001      	movs	r1, r0
 8007588:	9804      	ldr	r0, [sp, #16]
 800758a:	f000 fcff 	bl	8007f8c <__pow5mult>
 800758e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007590:	0006      	movs	r6, r0
 8007592:	2500      	movs	r5, #0
 8007594:	2b01      	cmp	r3, #1
 8007596:	dc38      	bgt.n	800760a <_dtoa_r+0x8ba>
 8007598:	2500      	movs	r5, #0
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	42ab      	cmp	r3, r5
 800759e:	d130      	bne.n	8007602 <_dtoa_r+0x8b2>
 80075a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a2:	031b      	lsls	r3, r3, #12
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	d12c      	bne.n	8007602 <_dtoa_r+0x8b2>
 80075a8:	4b72      	ldr	r3, [pc, #456]	; (8007774 <_dtoa_r+0xa24>)
 80075aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ac:	4213      	tst	r3, r2
 80075ae:	d028      	beq.n	8007602 <_dtoa_r+0x8b2>
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	3501      	adds	r5, #1
 80075b4:	3301      	adds	r3, #1
 80075b6:	930a      	str	r3, [sp, #40]	; 0x28
 80075b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ba:	3301      	adds	r3, #1
 80075bc:	930c      	str	r3, [sp, #48]	; 0x30
 80075be:	e020      	b.n	8007602 <_dtoa_r+0x8b2>
 80075c0:	2336      	movs	r3, #54	; 0x36
 80075c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80075c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	e795      	b.n	80074f8 <_dtoa_r+0x7a8>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	1e5d      	subs	r5, r3, #1
 80075d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d2:	42ab      	cmp	r3, r5
 80075d4:	db07      	blt.n	80075e6 <_dtoa_r+0x896>
 80075d6:	1b5d      	subs	r5, r3, r5
 80075d8:	9b07      	ldr	r3, [sp, #28]
 80075da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da8b      	bge.n	80074f8 <_dtoa_r+0x7a8>
 80075e0:	1ae4      	subs	r4, r4, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	e788      	b.n	80074f8 <_dtoa_r+0x7a8>
 80075e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ea:	1aeb      	subs	r3, r5, r3
 80075ec:	18d3      	adds	r3, r2, r3
 80075ee:	950d      	str	r5, [sp, #52]	; 0x34
 80075f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075f2:	2500      	movs	r5, #0
 80075f4:	e7f0      	b.n	80075d8 <_dtoa_r+0x888>
 80075f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075f8:	e7b7      	b.n	800756a <_dtoa_r+0x81a>
 80075fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075fc:	2500      	movs	r5, #0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	ddca      	ble.n	8007598 <_dtoa_r+0x848>
 8007602:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007604:	2001      	movs	r0, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <_dtoa_r+0x8cc>
 800760a:	6933      	ldr	r3, [r6, #16]
 800760c:	3303      	adds	r3, #3
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	18f3      	adds	r3, r6, r3
 8007612:	6858      	ldr	r0, [r3, #4]
 8007614:	f000 fbaa 	bl	8007d6c <__hi0bits>
 8007618:	2320      	movs	r3, #32
 800761a:	1a18      	subs	r0, r3, r0
 800761c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800761e:	1818      	adds	r0, r3, r0
 8007620:	0002      	movs	r2, r0
 8007622:	231f      	movs	r3, #31
 8007624:	401a      	ands	r2, r3
 8007626:	4218      	tst	r0, r3
 8007628:	d047      	beq.n	80076ba <_dtoa_r+0x96a>
 800762a:	3301      	adds	r3, #1
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	2b04      	cmp	r3, #4
 8007630:	dd3f      	ble.n	80076b2 <_dtoa_r+0x962>
 8007632:	231c      	movs	r3, #28
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007638:	18e4      	adds	r4, r4, r3
 800763a:	18d2      	adds	r2, r2, r3
 800763c:	920a      	str	r2, [sp, #40]	; 0x28
 800763e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007640:	18d3      	adds	r3, r2, r3
 8007642:	930c      	str	r3, [sp, #48]	; 0x30
 8007644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd05      	ble.n	8007656 <_dtoa_r+0x906>
 800764a:	001a      	movs	r2, r3
 800764c:	9905      	ldr	r1, [sp, #20]
 800764e:	9804      	ldr	r0, [sp, #16]
 8007650:	f000 fcf8 	bl	8008044 <__lshift>
 8007654:	9005      	str	r0, [sp, #20]
 8007656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd05      	ble.n	8007668 <_dtoa_r+0x918>
 800765c:	0031      	movs	r1, r6
 800765e:	001a      	movs	r2, r3
 8007660:	9804      	ldr	r0, [sp, #16]
 8007662:	f000 fcef 	bl	8008044 <__lshift>
 8007666:	0006      	movs	r6, r0
 8007668:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800766a:	2b00      	cmp	r3, #0
 800766c:	d027      	beq.n	80076be <_dtoa_r+0x96e>
 800766e:	0031      	movs	r1, r6
 8007670:	9805      	ldr	r0, [sp, #20]
 8007672:	f000 fd55 	bl	8008120 <__mcmp>
 8007676:	2800      	cmp	r0, #0
 8007678:	da21      	bge.n	80076be <_dtoa_r+0x96e>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	220a      	movs	r2, #10
 800767e:	3b01      	subs	r3, #1
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	9905      	ldr	r1, [sp, #20]
 8007684:	2300      	movs	r3, #0
 8007686:	9804      	ldr	r0, [sp, #16]
 8007688:	f000 fae0 	bl	8007c4c <__multadd>
 800768c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768e:	9005      	str	r0, [sp, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d100      	bne.n	8007696 <_dtoa_r+0x946>
 8007694:	e15d      	b.n	8007952 <_dtoa_r+0xc02>
 8007696:	2300      	movs	r3, #0
 8007698:	0039      	movs	r1, r7
 800769a:	220a      	movs	r2, #10
 800769c:	9804      	ldr	r0, [sp, #16]
 800769e:	f000 fad5 	bl	8007c4c <__multadd>
 80076a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a4:	0007      	movs	r7, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dc49      	bgt.n	800773e <_dtoa_r+0x9ee>
 80076aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	dc0e      	bgt.n	80076ce <_dtoa_r+0x97e>
 80076b0:	e045      	b.n	800773e <_dtoa_r+0x9ee>
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d0c6      	beq.n	8007644 <_dtoa_r+0x8f4>
 80076b6:	331c      	adds	r3, #28
 80076b8:	e7bd      	b.n	8007636 <_dtoa_r+0x8e6>
 80076ba:	0013      	movs	r3, r2
 80076bc:	e7fb      	b.n	80076b6 <_dtoa_r+0x966>
 80076be:	9b07      	ldr	r3, [sp, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dc36      	bgt.n	8007732 <_dtoa_r+0x9e2>
 80076c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	dd33      	ble.n	8007732 <_dtoa_r+0x9e2>
 80076ca:	9b07      	ldr	r3, [sp, #28]
 80076cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10c      	bne.n	80076ee <_dtoa_r+0x99e>
 80076d4:	0031      	movs	r1, r6
 80076d6:	2205      	movs	r2, #5
 80076d8:	9804      	ldr	r0, [sp, #16]
 80076da:	f000 fab7 	bl	8007c4c <__multadd>
 80076de:	0006      	movs	r6, r0
 80076e0:	0001      	movs	r1, r0
 80076e2:	9805      	ldr	r0, [sp, #20]
 80076e4:	f000 fd1c 	bl	8008120 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	dd00      	ble.n	80076ee <_dtoa_r+0x99e>
 80076ec:	e59f      	b.n	800722e <_dtoa_r+0x4de>
 80076ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076f0:	43db      	mvns	r3, r3
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	9b06      	ldr	r3, [sp, #24]
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	2500      	movs	r5, #0
 80076fa:	0031      	movs	r1, r6
 80076fc:	9804      	ldr	r0, [sp, #16]
 80076fe:	f000 fa81 	bl	8007c04 <_Bfree>
 8007702:	2f00      	cmp	r7, #0
 8007704:	d100      	bne.n	8007708 <_dtoa_r+0x9b8>
 8007706:	e6a3      	b.n	8007450 <_dtoa_r+0x700>
 8007708:	2d00      	cmp	r5, #0
 800770a:	d005      	beq.n	8007718 <_dtoa_r+0x9c8>
 800770c:	42bd      	cmp	r5, r7
 800770e:	d003      	beq.n	8007718 <_dtoa_r+0x9c8>
 8007710:	0029      	movs	r1, r5
 8007712:	9804      	ldr	r0, [sp, #16]
 8007714:	f000 fa76 	bl	8007c04 <_Bfree>
 8007718:	0039      	movs	r1, r7
 800771a:	9804      	ldr	r0, [sp, #16]
 800771c:	f000 fa72 	bl	8007c04 <_Bfree>
 8007720:	e696      	b.n	8007450 <_dtoa_r+0x700>
 8007722:	2600      	movs	r6, #0
 8007724:	0037      	movs	r7, r6
 8007726:	e7e2      	b.n	80076ee <_dtoa_r+0x99e>
 8007728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800772a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	0037      	movs	r7, r6
 8007730:	e57d      	b.n	800722e <_dtoa_r+0x4de>
 8007732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d100      	bne.n	800773a <_dtoa_r+0x9ea>
 8007738:	e0c3      	b.n	80078c2 <_dtoa_r+0xb72>
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	930b      	str	r3, [sp, #44]	; 0x2c
 800773e:	2c00      	cmp	r4, #0
 8007740:	dd05      	ble.n	800774e <_dtoa_r+0x9fe>
 8007742:	0039      	movs	r1, r7
 8007744:	0022      	movs	r2, r4
 8007746:	9804      	ldr	r0, [sp, #16]
 8007748:	f000 fc7c 	bl	8008044 <__lshift>
 800774c:	0007      	movs	r7, r0
 800774e:	0038      	movs	r0, r7
 8007750:	2d00      	cmp	r5, #0
 8007752:	d024      	beq.n	800779e <_dtoa_r+0xa4e>
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	9804      	ldr	r0, [sp, #16]
 8007758:	f000 fa10 	bl	8007b7c <_Balloc>
 800775c:	1e04      	subs	r4, r0, #0
 800775e:	d111      	bne.n	8007784 <_dtoa_r+0xa34>
 8007760:	0022      	movs	r2, r4
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <_dtoa_r+0xa28>)
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <_dtoa_r+0xa2c>)
 8007766:	4906      	ldr	r1, [pc, #24]	; (8007780 <_dtoa_r+0xa30>)
 8007768:	f7ff fb07 	bl	8006d7a <_dtoa_r+0x2a>
 800776c:	40240000 	.word	0x40240000
 8007770:	00000433 	.word	0x00000433
 8007774:	7ff00000 	.word	0x7ff00000
 8007778:	0800a696 	.word	0x0800a696
 800777c:	0800a63e 	.word	0x0800a63e
 8007780:	000002ef 	.word	0x000002ef
 8007784:	0039      	movs	r1, r7
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	310c      	adds	r1, #12
 800778a:	3202      	adds	r2, #2
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	300c      	adds	r0, #12
 8007790:	f002 f912 	bl	80099b8 <memcpy>
 8007794:	2201      	movs	r2, #1
 8007796:	0021      	movs	r1, r4
 8007798:	9804      	ldr	r0, [sp, #16]
 800779a:	f000 fc53 	bl	8008044 <__lshift>
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	189b      	adds	r3, r3, r2
 80077a8:	2201      	movs	r2, #1
 80077aa:	003d      	movs	r5, r7
 80077ac:	0007      	movs	r7, r0
 80077ae:	930e      	str	r3, [sp, #56]	; 0x38
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	4013      	ands	r3, r2
 80077b4:	930d      	str	r3, [sp, #52]	; 0x34
 80077b6:	0031      	movs	r1, r6
 80077b8:	9805      	ldr	r0, [sp, #20]
 80077ba:	f7ff fa39 	bl	8006c30 <quorem>
 80077be:	0029      	movs	r1, r5
 80077c0:	0004      	movs	r4, r0
 80077c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80077c4:	9805      	ldr	r0, [sp, #20]
 80077c6:	f000 fcab 	bl	8008120 <__mcmp>
 80077ca:	003a      	movs	r2, r7
 80077cc:	900c      	str	r0, [sp, #48]	; 0x30
 80077ce:	0031      	movs	r1, r6
 80077d0:	9804      	ldr	r0, [sp, #16]
 80077d2:	f000 fcc1 	bl	8008158 <__mdiff>
 80077d6:	2201      	movs	r2, #1
 80077d8:	68c3      	ldr	r3, [r0, #12]
 80077da:	3430      	adds	r4, #48	; 0x30
 80077dc:	9008      	str	r0, [sp, #32]
 80077de:	920a      	str	r2, [sp, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <_dtoa_r+0xa9e>
 80077e4:	0001      	movs	r1, r0
 80077e6:	9805      	ldr	r0, [sp, #20]
 80077e8:	f000 fc9a 	bl	8008120 <__mcmp>
 80077ec:	900a      	str	r0, [sp, #40]	; 0x28
 80077ee:	9908      	ldr	r1, [sp, #32]
 80077f0:	9804      	ldr	r0, [sp, #16]
 80077f2:	f000 fa07 	bl	8007c04 <_Bfree>
 80077f6:	9b07      	ldr	r3, [sp, #28]
 80077f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fa:	3301      	adds	r3, #1
 80077fc:	9308      	str	r3, [sp, #32]
 80077fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007800:	4313      	orrs	r3, r2
 8007802:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007804:	4313      	orrs	r3, r2
 8007806:	d109      	bne.n	800781c <_dtoa_r+0xacc>
 8007808:	2c39      	cmp	r4, #57	; 0x39
 800780a:	d022      	beq.n	8007852 <_dtoa_r+0xb02>
 800780c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd01      	ble.n	8007816 <_dtoa_r+0xac6>
 8007812:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007814:	3431      	adds	r4, #49	; 0x31
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	701c      	strb	r4, [r3, #0]
 800781a:	e76e      	b.n	80076fa <_dtoa_r+0x9aa>
 800781c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800781e:	2b00      	cmp	r3, #0
 8007820:	db04      	blt.n	800782c <_dtoa_r+0xadc>
 8007822:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007824:	4313      	orrs	r3, r2
 8007826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007828:	4313      	orrs	r3, r2
 800782a:	d11e      	bne.n	800786a <_dtoa_r+0xb1a>
 800782c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	ddf1      	ble.n	8007816 <_dtoa_r+0xac6>
 8007832:	9905      	ldr	r1, [sp, #20]
 8007834:	2201      	movs	r2, #1
 8007836:	9804      	ldr	r0, [sp, #16]
 8007838:	f000 fc04 	bl	8008044 <__lshift>
 800783c:	0031      	movs	r1, r6
 800783e:	9005      	str	r0, [sp, #20]
 8007840:	f000 fc6e 	bl	8008120 <__mcmp>
 8007844:	2800      	cmp	r0, #0
 8007846:	dc02      	bgt.n	800784e <_dtoa_r+0xafe>
 8007848:	d1e5      	bne.n	8007816 <_dtoa_r+0xac6>
 800784a:	07e3      	lsls	r3, r4, #31
 800784c:	d5e3      	bpl.n	8007816 <_dtoa_r+0xac6>
 800784e:	2c39      	cmp	r4, #57	; 0x39
 8007850:	d1df      	bne.n	8007812 <_dtoa_r+0xac2>
 8007852:	2339      	movs	r3, #57	; 0x39
 8007854:	9a07      	ldr	r2, [sp, #28]
 8007856:	7013      	strb	r3, [r2, #0]
 8007858:	9b08      	ldr	r3, [sp, #32]
 800785a:	9308      	str	r3, [sp, #32]
 800785c:	3b01      	subs	r3, #1
 800785e:	781a      	ldrb	r2, [r3, #0]
 8007860:	2a39      	cmp	r2, #57	; 0x39
 8007862:	d063      	beq.n	800792c <_dtoa_r+0xbdc>
 8007864:	3201      	adds	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e747      	b.n	80076fa <_dtoa_r+0x9aa>
 800786a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd03      	ble.n	8007878 <_dtoa_r+0xb28>
 8007870:	2c39      	cmp	r4, #57	; 0x39
 8007872:	d0ee      	beq.n	8007852 <_dtoa_r+0xb02>
 8007874:	3401      	adds	r4, #1
 8007876:	e7ce      	b.n	8007816 <_dtoa_r+0xac6>
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	9a07      	ldr	r2, [sp, #28]
 800787c:	701c      	strb	r4, [r3, #0]
 800787e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007880:	4293      	cmp	r3, r2
 8007882:	d03e      	beq.n	8007902 <_dtoa_r+0xbb2>
 8007884:	2300      	movs	r3, #0
 8007886:	220a      	movs	r2, #10
 8007888:	9905      	ldr	r1, [sp, #20]
 800788a:	9804      	ldr	r0, [sp, #16]
 800788c:	f000 f9de 	bl	8007c4c <__multadd>
 8007890:	2300      	movs	r3, #0
 8007892:	9005      	str	r0, [sp, #20]
 8007894:	220a      	movs	r2, #10
 8007896:	0029      	movs	r1, r5
 8007898:	9804      	ldr	r0, [sp, #16]
 800789a:	42bd      	cmp	r5, r7
 800789c:	d106      	bne.n	80078ac <_dtoa_r+0xb5c>
 800789e:	f000 f9d5 	bl	8007c4c <__multadd>
 80078a2:	0005      	movs	r5, r0
 80078a4:	0007      	movs	r7, r0
 80078a6:	9b08      	ldr	r3, [sp, #32]
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	e784      	b.n	80077b6 <_dtoa_r+0xa66>
 80078ac:	f000 f9ce 	bl	8007c4c <__multadd>
 80078b0:	0039      	movs	r1, r7
 80078b2:	0005      	movs	r5, r0
 80078b4:	2300      	movs	r3, #0
 80078b6:	220a      	movs	r2, #10
 80078b8:	9804      	ldr	r0, [sp, #16]
 80078ba:	f000 f9c7 	bl	8007c4c <__multadd>
 80078be:	0007      	movs	r7, r0
 80078c0:	e7f1      	b.n	80078a6 <_dtoa_r+0xb56>
 80078c2:	9b07      	ldr	r3, [sp, #28]
 80078c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c6:	2500      	movs	r5, #0
 80078c8:	0031      	movs	r1, r6
 80078ca:	9805      	ldr	r0, [sp, #20]
 80078cc:	f7ff f9b0 	bl	8006c30 <quorem>
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	3030      	adds	r0, #48	; 0x30
 80078d4:	5558      	strb	r0, [r3, r5]
 80078d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d8:	3501      	adds	r5, #1
 80078da:	0004      	movs	r4, r0
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dd07      	ble.n	80078f0 <_dtoa_r+0xba0>
 80078e0:	2300      	movs	r3, #0
 80078e2:	220a      	movs	r2, #10
 80078e4:	9905      	ldr	r1, [sp, #20]
 80078e6:	9804      	ldr	r0, [sp, #16]
 80078e8:	f000 f9b0 	bl	8007c4c <__multadd>
 80078ec:	9005      	str	r0, [sp, #20]
 80078ee:	e7eb      	b.n	80078c8 <_dtoa_r+0xb78>
 80078f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078f2:	2301      	movs	r3, #1
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	dd00      	ble.n	80078fa <_dtoa_r+0xbaa>
 80078f8:	0013      	movs	r3, r2
 80078fa:	2500      	movs	r5, #0
 80078fc:	9a06      	ldr	r2, [sp, #24]
 80078fe:	18d3      	adds	r3, r2, r3
 8007900:	9308      	str	r3, [sp, #32]
 8007902:	9905      	ldr	r1, [sp, #20]
 8007904:	2201      	movs	r2, #1
 8007906:	9804      	ldr	r0, [sp, #16]
 8007908:	f000 fb9c 	bl	8008044 <__lshift>
 800790c:	0031      	movs	r1, r6
 800790e:	9005      	str	r0, [sp, #20]
 8007910:	f000 fc06 	bl	8008120 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	dc9f      	bgt.n	8007858 <_dtoa_r+0xb08>
 8007918:	d101      	bne.n	800791e <_dtoa_r+0xbce>
 800791a:	07e4      	lsls	r4, r4, #31
 800791c:	d49c      	bmi.n	8007858 <_dtoa_r+0xb08>
 800791e:	9b08      	ldr	r3, [sp, #32]
 8007920:	9308      	str	r3, [sp, #32]
 8007922:	3b01      	subs	r3, #1
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	2a30      	cmp	r2, #48	; 0x30
 8007928:	d0fa      	beq.n	8007920 <_dtoa_r+0xbd0>
 800792a:	e6e6      	b.n	80076fa <_dtoa_r+0x9aa>
 800792c:	9a06      	ldr	r2, [sp, #24]
 800792e:	429a      	cmp	r2, r3
 8007930:	d193      	bne.n	800785a <_dtoa_r+0xb0a>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	2331      	movs	r3, #49	; 0x31
 800793a:	7013      	strb	r3, [r2, #0]
 800793c:	e6dd      	b.n	80076fa <_dtoa_r+0x9aa>
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <_dtoa_r+0xc14>)
 8007940:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007942:	9306      	str	r3, [sp, #24]
 8007944:	4b08      	ldr	r3, [pc, #32]	; (8007968 <_dtoa_r+0xc18>)
 8007946:	2a00      	cmp	r2, #0
 8007948:	d001      	beq.n	800794e <_dtoa_r+0xbfe>
 800794a:	f7ff fa49 	bl	8006de0 <_dtoa_r+0x90>
 800794e:	f7ff fa49 	bl	8006de4 <_dtoa_r+0x94>
 8007952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	dcb6      	bgt.n	80078c6 <_dtoa_r+0xb76>
 8007958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800795a:	2b02      	cmp	r3, #2
 800795c:	dd00      	ble.n	8007960 <_dtoa_r+0xc10>
 800795e:	e6b6      	b.n	80076ce <_dtoa_r+0x97e>
 8007960:	e7b1      	b.n	80078c6 <_dtoa_r+0xb76>
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	0800a61a 	.word	0x0800a61a
 8007968:	0800a622 	.word	0x0800a622

0800796c <_free_r>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	0005      	movs	r5, r0
 8007970:	2900      	cmp	r1, #0
 8007972:	d010      	beq.n	8007996 <_free_r+0x2a>
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	da00      	bge.n	800797e <_free_r+0x12>
 800797c:	18e4      	adds	r4, r4, r3
 800797e:	0028      	movs	r0, r5
 8007980:	f000 f8ec 	bl	8007b5c <__malloc_lock>
 8007984:	4a1d      	ldr	r2, [pc, #116]	; (80079fc <_free_r+0x90>)
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <_free_r+0x2c>
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	6014      	str	r4, [r2, #0]
 8007990:	0028      	movs	r0, r5
 8007992:	f000 f8eb 	bl	8007b6c <__malloc_unlock>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	42a3      	cmp	r3, r4
 800799a:	d908      	bls.n	80079ae <_free_r+0x42>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	1821      	adds	r1, r4, r0
 80079a0:	428b      	cmp	r3, r1
 80079a2:	d1f3      	bne.n	800798c <_free_r+0x20>
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	1809      	adds	r1, r1, r0
 80079aa:	6021      	str	r1, [r4, #0]
 80079ac:	e7ee      	b.n	800798c <_free_r+0x20>
 80079ae:	001a      	movs	r2, r3
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <_free_r+0x4e>
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	d9f9      	bls.n	80079ae <_free_r+0x42>
 80079ba:	6811      	ldr	r1, [r2, #0]
 80079bc:	1850      	adds	r0, r2, r1
 80079be:	42a0      	cmp	r0, r4
 80079c0:	d10b      	bne.n	80079da <_free_r+0x6e>
 80079c2:	6820      	ldr	r0, [r4, #0]
 80079c4:	1809      	adds	r1, r1, r0
 80079c6:	1850      	adds	r0, r2, r1
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	4283      	cmp	r3, r0
 80079cc:	d1e0      	bne.n	8007990 <_free_r+0x24>
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	1841      	adds	r1, r0, r1
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	6053      	str	r3, [r2, #4]
 80079d8:	e7da      	b.n	8007990 <_free_r+0x24>
 80079da:	42a0      	cmp	r0, r4
 80079dc:	d902      	bls.n	80079e4 <_free_r+0x78>
 80079de:	230c      	movs	r3, #12
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	e7d5      	b.n	8007990 <_free_r+0x24>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	1821      	adds	r1, r4, r0
 80079e8:	428b      	cmp	r3, r1
 80079ea:	d103      	bne.n	80079f4 <_free_r+0x88>
 80079ec:	6819      	ldr	r1, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	1809      	adds	r1, r1, r0
 80079f2:	6021      	str	r1, [r4, #0]
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	6054      	str	r4, [r2, #4]
 80079f8:	e7ca      	b.n	8007990 <_free_r+0x24>
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	20000418 	.word	0x20000418

08007a00 <malloc>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <malloc+0x10>)
 8007a04:	0001      	movs	r1, r0
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	f000 f826 	bl	8007a58 <_malloc_r>
 8007a0c:	bd10      	pop	{r4, pc}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	20000064 	.word	0x20000064

08007a14 <sbrk_aligned>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0f      	ldr	r6, [pc, #60]	; (8007a54 <sbrk_aligned+0x40>)
 8007a18:	000d      	movs	r5, r1
 8007a1a:	6831      	ldr	r1, [r6, #0]
 8007a1c:	0004      	movs	r4, r0
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d102      	bne.n	8007a28 <sbrk_aligned+0x14>
 8007a22:	f001 ffb7 	bl	8009994 <_sbrk_r>
 8007a26:	6030      	str	r0, [r6, #0]
 8007a28:	0029      	movs	r1, r5
 8007a2a:	0020      	movs	r0, r4
 8007a2c:	f001 ffb2 	bl	8009994 <_sbrk_r>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d00a      	beq.n	8007a4a <sbrk_aligned+0x36>
 8007a34:	2303      	movs	r3, #3
 8007a36:	1cc5      	adds	r5, r0, #3
 8007a38:	439d      	bics	r5, r3
 8007a3a:	42a8      	cmp	r0, r5
 8007a3c:	d007      	beq.n	8007a4e <sbrk_aligned+0x3a>
 8007a3e:	1a29      	subs	r1, r5, r0
 8007a40:	0020      	movs	r0, r4
 8007a42:	f001 ffa7 	bl	8009994 <_sbrk_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	d101      	bne.n	8007a4e <sbrk_aligned+0x3a>
 8007a4a:	2501      	movs	r5, #1
 8007a4c:	426d      	negs	r5, r5
 8007a4e:	0028      	movs	r0, r5
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	2000041c 	.word	0x2000041c

08007a58 <_malloc_r>:
 8007a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	1ccb      	adds	r3, r1, #3
 8007a5e:	4393      	bics	r3, r2
 8007a60:	3308      	adds	r3, #8
 8007a62:	0006      	movs	r6, r0
 8007a64:	001f      	movs	r7, r3
 8007a66:	2b0c      	cmp	r3, #12
 8007a68:	d238      	bcs.n	8007adc <_malloc_r+0x84>
 8007a6a:	270c      	movs	r7, #12
 8007a6c:	42b9      	cmp	r1, r7
 8007a6e:	d837      	bhi.n	8007ae0 <_malloc_r+0x88>
 8007a70:	0030      	movs	r0, r6
 8007a72:	f000 f873 	bl	8007b5c <__malloc_lock>
 8007a76:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <_malloc_r+0x100>)
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	001c      	movs	r4, r3
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d133      	bne.n	8007aea <_malloc_r+0x92>
 8007a82:	0039      	movs	r1, r7
 8007a84:	0030      	movs	r0, r6
 8007a86:	f7ff ffc5 	bl	8007a14 <sbrk_aligned>
 8007a8a:	0004      	movs	r4, r0
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d15e      	bne.n	8007b4e <_malloc_r+0xf6>
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	681c      	ldr	r4, [r3, #0]
 8007a94:	0025      	movs	r5, r4
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	d14e      	bne.n	8007b38 <_malloc_r+0xe0>
 8007a9a:	2c00      	cmp	r4, #0
 8007a9c:	d051      	beq.n	8007b42 <_malloc_r+0xea>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	0029      	movs	r1, r5
 8007aa2:	18e3      	adds	r3, r4, r3
 8007aa4:	0030      	movs	r0, r6
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	f001 ff74 	bl	8009994 <_sbrk_r>
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	4283      	cmp	r3, r0
 8007ab0:	d147      	bne.n	8007b42 <_malloc_r+0xea>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0030      	movs	r0, r6
 8007ab6:	1aff      	subs	r7, r7, r3
 8007ab8:	0039      	movs	r1, r7
 8007aba:	f7ff ffab 	bl	8007a14 <sbrk_aligned>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d03f      	beq.n	8007b42 <_malloc_r+0xea>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	19db      	adds	r3, r3, r7
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	9b00      	ldr	r3, [sp, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d040      	beq.n	8007b52 <_malloc_r+0xfa>
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	42a2      	cmp	r2, r4
 8007ad4:	d133      	bne.n	8007b3e <_malloc_r+0xe6>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	e014      	b.n	8007b06 <_malloc_r+0xae>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dac5      	bge.n	8007a6c <_malloc_r+0x14>
 8007ae0:	230c      	movs	r3, #12
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	6033      	str	r3, [r6, #0]
 8007ae6:	0028      	movs	r0, r5
 8007ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	1bc9      	subs	r1, r1, r7
 8007aee:	d420      	bmi.n	8007b32 <_malloc_r+0xda>
 8007af0:	290b      	cmp	r1, #11
 8007af2:	d918      	bls.n	8007b26 <_malloc_r+0xce>
 8007af4:	19e2      	adds	r2, r4, r7
 8007af6:	6027      	str	r7, [r4, #0]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d112      	bne.n	8007b22 <_malloc_r+0xca>
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	6011      	str	r1, [r2, #0]
 8007b04:	6053      	str	r3, [r2, #4]
 8007b06:	0030      	movs	r0, r6
 8007b08:	0025      	movs	r5, r4
 8007b0a:	f000 f82f 	bl	8007b6c <__malloc_unlock>
 8007b0e:	2207      	movs	r2, #7
 8007b10:	350b      	adds	r5, #11
 8007b12:	1d23      	adds	r3, r4, #4
 8007b14:	4395      	bics	r5, r2
 8007b16:	1aea      	subs	r2, r5, r3
 8007b18:	429d      	cmp	r5, r3
 8007b1a:	d0e4      	beq.n	8007ae6 <_malloc_r+0x8e>
 8007b1c:	1b5b      	subs	r3, r3, r5
 8007b1e:	50a3      	str	r3, [r4, r2]
 8007b20:	e7e1      	b.n	8007ae6 <_malloc_r+0x8e>
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	e7ec      	b.n	8007b00 <_malloc_r+0xa8>
 8007b26:	6862      	ldr	r2, [r4, #4]
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d1d5      	bne.n	8007ad8 <_malloc_r+0x80>
 8007b2c:	9b00      	ldr	r3, [sp, #0]
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e7e9      	b.n	8007b06 <_malloc_r+0xae>
 8007b32:	0023      	movs	r3, r4
 8007b34:	6864      	ldr	r4, [r4, #4]
 8007b36:	e7a2      	b.n	8007a7e <_malloc_r+0x26>
 8007b38:	002c      	movs	r4, r5
 8007b3a:	686d      	ldr	r5, [r5, #4]
 8007b3c:	e7ab      	b.n	8007a96 <_malloc_r+0x3e>
 8007b3e:	0013      	movs	r3, r2
 8007b40:	e7c4      	b.n	8007acc <_malloc_r+0x74>
 8007b42:	230c      	movs	r3, #12
 8007b44:	0030      	movs	r0, r6
 8007b46:	6033      	str	r3, [r6, #0]
 8007b48:	f000 f810 	bl	8007b6c <__malloc_unlock>
 8007b4c:	e7cb      	b.n	8007ae6 <_malloc_r+0x8e>
 8007b4e:	6027      	str	r7, [r4, #0]
 8007b50:	e7d9      	b.n	8007b06 <_malloc_r+0xae>
 8007b52:	605b      	str	r3, [r3, #4]
 8007b54:	deff      	udf	#255	; 0xff
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	20000418 	.word	0x20000418

08007b5c <__malloc_lock>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4802      	ldr	r0, [pc, #8]	; (8007b68 <__malloc_lock+0xc>)
 8007b60:	f7ff f855 	bl	8006c0e <__retarget_lock_acquire_recursive>
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	20000414 	.word	0x20000414

08007b6c <__malloc_unlock>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4802      	ldr	r0, [pc, #8]	; (8007b78 <__malloc_unlock+0xc>)
 8007b70:	f7ff f84e 	bl	8006c10 <__retarget_lock_release_recursive>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	20000414 	.word	0x20000414

08007b7c <_Balloc>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	69c5      	ldr	r5, [r0, #28]
 8007b80:	0006      	movs	r6, r0
 8007b82:	000c      	movs	r4, r1
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	d10e      	bne.n	8007ba6 <_Balloc+0x2a>
 8007b88:	2010      	movs	r0, #16
 8007b8a:	f7ff ff39 	bl	8007a00 <malloc>
 8007b8e:	1e02      	subs	r2, r0, #0
 8007b90:	61f0      	str	r0, [r6, #28]
 8007b92:	d104      	bne.n	8007b9e <_Balloc+0x22>
 8007b94:	216b      	movs	r1, #107	; 0x6b
 8007b96:	4b19      	ldr	r3, [pc, #100]	; (8007bfc <_Balloc+0x80>)
 8007b98:	4819      	ldr	r0, [pc, #100]	; (8007c00 <_Balloc+0x84>)
 8007b9a:	f001 ff1d 	bl	80099d8 <__assert_func>
 8007b9e:	6045      	str	r5, [r0, #4]
 8007ba0:	6085      	str	r5, [r0, #8]
 8007ba2:	6005      	str	r5, [r0, #0]
 8007ba4:	60c5      	str	r5, [r0, #12]
 8007ba6:	69f5      	ldr	r5, [r6, #28]
 8007ba8:	68eb      	ldr	r3, [r5, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <_Balloc+0x5a>
 8007bae:	69f3      	ldr	r3, [r6, #28]
 8007bb0:	00a2      	lsls	r2, r4, #2
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	189b      	adds	r3, r3, r2
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d118      	bne.n	8007bee <_Balloc+0x72>
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	000d      	movs	r5, r1
 8007bc0:	40a5      	lsls	r5, r4
 8007bc2:	1d6a      	adds	r2, r5, #5
 8007bc4:	0030      	movs	r0, r6
 8007bc6:	0092      	lsls	r2, r2, #2
 8007bc8:	f001 ff24 	bl	8009a14 <_calloc_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d00c      	beq.n	8007bea <_Balloc+0x6e>
 8007bd0:	6044      	str	r4, [r0, #4]
 8007bd2:	6085      	str	r5, [r0, #8]
 8007bd4:	e00d      	b.n	8007bf2 <_Balloc+0x76>
 8007bd6:	2221      	movs	r2, #33	; 0x21
 8007bd8:	2104      	movs	r1, #4
 8007bda:	0030      	movs	r0, r6
 8007bdc:	f001 ff1a 	bl	8009a14 <_calloc_r>
 8007be0:	69f3      	ldr	r3, [r6, #28]
 8007be2:	60e8      	str	r0, [r5, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e1      	bne.n	8007bae <_Balloc+0x32>
 8007bea:	2000      	movs	r0, #0
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
 8007bee:	6802      	ldr	r2, [r0, #0]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6103      	str	r3, [r0, #16]
 8007bf6:	60c3      	str	r3, [r0, #12]
 8007bf8:	e7f8      	b.n	8007bec <_Balloc+0x70>
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	0800a627 	.word	0x0800a627
 8007c00:	0800a6a7 	.word	0x0800a6a7

08007c04 <_Bfree>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	69c6      	ldr	r6, [r0, #28]
 8007c08:	0005      	movs	r5, r0
 8007c0a:	000c      	movs	r4, r1
 8007c0c:	2e00      	cmp	r6, #0
 8007c0e:	d10e      	bne.n	8007c2e <_Bfree+0x2a>
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7ff fef5 	bl	8007a00 <malloc>
 8007c16:	1e02      	subs	r2, r0, #0
 8007c18:	61e8      	str	r0, [r5, #28]
 8007c1a:	d104      	bne.n	8007c26 <_Bfree+0x22>
 8007c1c:	218f      	movs	r1, #143	; 0x8f
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <_Bfree+0x40>)
 8007c20:	4809      	ldr	r0, [pc, #36]	; (8007c48 <_Bfree+0x44>)
 8007c22:	f001 fed9 	bl	80099d8 <__assert_func>
 8007c26:	6046      	str	r6, [r0, #4]
 8007c28:	6086      	str	r6, [r0, #8]
 8007c2a:	6006      	str	r6, [r0, #0]
 8007c2c:	60c6      	str	r6, [r0, #12]
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d007      	beq.n	8007c42 <_Bfree+0x3e>
 8007c32:	69eb      	ldr	r3, [r5, #28]
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	189b      	adds	r3, r3, r2
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	601c      	str	r4, [r3, #0]
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	0800a627 	.word	0x0800a627
 8007c48:	0800a6a7 	.word	0x0800a6a7

08007c4c <__multadd>:
 8007c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c4e:	000e      	movs	r6, r1
 8007c50:	9001      	str	r0, [sp, #4]
 8007c52:	000c      	movs	r4, r1
 8007c54:	001d      	movs	r5, r3
 8007c56:	2000      	movs	r0, #0
 8007c58:	690f      	ldr	r7, [r1, #16]
 8007c5a:	3614      	adds	r6, #20
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	3001      	adds	r0, #1
 8007c60:	b299      	uxth	r1, r3
 8007c62:	4351      	muls	r1, r2
 8007c64:	0c1b      	lsrs	r3, r3, #16
 8007c66:	4353      	muls	r3, r2
 8007c68:	1949      	adds	r1, r1, r5
 8007c6a:	0c0d      	lsrs	r5, r1, #16
 8007c6c:	195b      	adds	r3, r3, r5
 8007c6e:	0c1d      	lsrs	r5, r3, #16
 8007c70:	b289      	uxth	r1, r1
 8007c72:	041b      	lsls	r3, r3, #16
 8007c74:	185b      	adds	r3, r3, r1
 8007c76:	c608      	stmia	r6!, {r3}
 8007c78:	4287      	cmp	r7, r0
 8007c7a:	dcef      	bgt.n	8007c5c <__multadd+0x10>
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	d022      	beq.n	8007cc6 <__multadd+0x7a>
 8007c80:	68a3      	ldr	r3, [r4, #8]
 8007c82:	42bb      	cmp	r3, r7
 8007c84:	dc19      	bgt.n	8007cba <__multadd+0x6e>
 8007c86:	6861      	ldr	r1, [r4, #4]
 8007c88:	9801      	ldr	r0, [sp, #4]
 8007c8a:	3101      	adds	r1, #1
 8007c8c:	f7ff ff76 	bl	8007b7c <_Balloc>
 8007c90:	1e06      	subs	r6, r0, #0
 8007c92:	d105      	bne.n	8007ca0 <__multadd+0x54>
 8007c94:	0032      	movs	r2, r6
 8007c96:	21ba      	movs	r1, #186	; 0xba
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <__multadd+0x80>)
 8007c9a:	480d      	ldr	r0, [pc, #52]	; (8007cd0 <__multadd+0x84>)
 8007c9c:	f001 fe9c 	bl	80099d8 <__assert_func>
 8007ca0:	0021      	movs	r1, r4
 8007ca2:	6922      	ldr	r2, [r4, #16]
 8007ca4:	310c      	adds	r1, #12
 8007ca6:	3202      	adds	r2, #2
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	300c      	adds	r0, #12
 8007cac:	f001 fe84 	bl	80099b8 <memcpy>
 8007cb0:	0021      	movs	r1, r4
 8007cb2:	9801      	ldr	r0, [sp, #4]
 8007cb4:	f7ff ffa6 	bl	8007c04 <_Bfree>
 8007cb8:	0034      	movs	r4, r6
 8007cba:	1d3b      	adds	r3, r7, #4
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	18e3      	adds	r3, r4, r3
 8007cc0:	605d      	str	r5, [r3, #4]
 8007cc2:	1c7b      	adds	r3, r7, #1
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	0800a696 	.word	0x0800a696
 8007cd0:	0800a6a7 	.word	0x0800a6a7

08007cd4 <__s2b>:
 8007cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd6:	0006      	movs	r6, r0
 8007cd8:	0018      	movs	r0, r3
 8007cda:	000c      	movs	r4, r1
 8007cdc:	3008      	adds	r0, #8
 8007cde:	2109      	movs	r1, #9
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	0015      	movs	r5, r2
 8007ce4:	f7f8 fab6 	bl	8000254 <__divsi3>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	2100      	movs	r1, #0
 8007cec:	4283      	cmp	r3, r0
 8007cee:	db0a      	blt.n	8007d06 <__s2b+0x32>
 8007cf0:	0030      	movs	r0, r6
 8007cf2:	f7ff ff43 	bl	8007b7c <_Balloc>
 8007cf6:	1e01      	subs	r1, r0, #0
 8007cf8:	d108      	bne.n	8007d0c <__s2b+0x38>
 8007cfa:	000a      	movs	r2, r1
 8007cfc:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <__s2b+0x90>)
 8007cfe:	481a      	ldr	r0, [pc, #104]	; (8007d68 <__s2b+0x94>)
 8007d00:	31d3      	adds	r1, #211	; 0xd3
 8007d02:	f001 fe69 	bl	80099d8 <__assert_func>
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	3101      	adds	r1, #1
 8007d0a:	e7ef      	b.n	8007cec <__s2b+0x18>
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	6143      	str	r3, [r0, #20]
 8007d10:	2301      	movs	r3, #1
 8007d12:	6103      	str	r3, [r0, #16]
 8007d14:	2d09      	cmp	r5, #9
 8007d16:	dd18      	ble.n	8007d4a <__s2b+0x76>
 8007d18:	0023      	movs	r3, r4
 8007d1a:	3309      	adds	r3, #9
 8007d1c:	001f      	movs	r7, r3
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	1964      	adds	r4, r4, r5
 8007d22:	783b      	ldrb	r3, [r7, #0]
 8007d24:	220a      	movs	r2, #10
 8007d26:	0030      	movs	r0, r6
 8007d28:	3b30      	subs	r3, #48	; 0x30
 8007d2a:	f7ff ff8f 	bl	8007c4c <__multadd>
 8007d2e:	3701      	adds	r7, #1
 8007d30:	0001      	movs	r1, r0
 8007d32:	42a7      	cmp	r7, r4
 8007d34:	d1f5      	bne.n	8007d22 <__s2b+0x4e>
 8007d36:	002c      	movs	r4, r5
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	3c08      	subs	r4, #8
 8007d3c:	191c      	adds	r4, r3, r4
 8007d3e:	002f      	movs	r7, r5
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	429f      	cmp	r7, r3
 8007d44:	db04      	blt.n	8007d50 <__s2b+0x7c>
 8007d46:	0008      	movs	r0, r1
 8007d48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d4a:	2509      	movs	r5, #9
 8007d4c:	340a      	adds	r4, #10
 8007d4e:	e7f6      	b.n	8007d3e <__s2b+0x6a>
 8007d50:	1b63      	subs	r3, r4, r5
 8007d52:	5ddb      	ldrb	r3, [r3, r7]
 8007d54:	220a      	movs	r2, #10
 8007d56:	0030      	movs	r0, r6
 8007d58:	3b30      	subs	r3, #48	; 0x30
 8007d5a:	f7ff ff77 	bl	8007c4c <__multadd>
 8007d5e:	3701      	adds	r7, #1
 8007d60:	0001      	movs	r1, r0
 8007d62:	e7ed      	b.n	8007d40 <__s2b+0x6c>
 8007d64:	0800a696 	.word	0x0800a696
 8007d68:	0800a6a7 	.word	0x0800a6a7

08007d6c <__hi0bits>:
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	0c02      	lsrs	r2, r0, #16
 8007d70:	2000      	movs	r0, #0
 8007d72:	4282      	cmp	r2, r0
 8007d74:	d101      	bne.n	8007d7a <__hi0bits+0xe>
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	3010      	adds	r0, #16
 8007d7a:	0e1a      	lsrs	r2, r3, #24
 8007d7c:	d101      	bne.n	8007d82 <__hi0bits+0x16>
 8007d7e:	3008      	adds	r0, #8
 8007d80:	021b      	lsls	r3, r3, #8
 8007d82:	0f1a      	lsrs	r2, r3, #28
 8007d84:	d101      	bne.n	8007d8a <__hi0bits+0x1e>
 8007d86:	3004      	adds	r0, #4
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	0f9a      	lsrs	r2, r3, #30
 8007d8c:	d101      	bne.n	8007d92 <__hi0bits+0x26>
 8007d8e:	3002      	adds	r0, #2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	db03      	blt.n	8007d9e <__hi0bits+0x32>
 8007d96:	3001      	adds	r0, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	d400      	bmi.n	8007d9e <__hi0bits+0x32>
 8007d9c:	2020      	movs	r0, #32
 8007d9e:	4770      	bx	lr

08007da0 <__lo0bits>:
 8007da0:	6803      	ldr	r3, [r0, #0]
 8007da2:	0001      	movs	r1, r0
 8007da4:	2207      	movs	r2, #7
 8007da6:	0018      	movs	r0, r3
 8007da8:	4010      	ands	r0, r2
 8007daa:	4213      	tst	r3, r2
 8007dac:	d00d      	beq.n	8007dca <__lo0bits+0x2a>
 8007dae:	3a06      	subs	r2, #6
 8007db0:	2000      	movs	r0, #0
 8007db2:	4213      	tst	r3, r2
 8007db4:	d105      	bne.n	8007dc2 <__lo0bits+0x22>
 8007db6:	3002      	adds	r0, #2
 8007db8:	4203      	tst	r3, r0
 8007dba:	d003      	beq.n	8007dc4 <__lo0bits+0x24>
 8007dbc:	40d3      	lsrs	r3, r2
 8007dbe:	0010      	movs	r0, r2
 8007dc0:	600b      	str	r3, [r1, #0]
 8007dc2:	4770      	bx	lr
 8007dc4:	089b      	lsrs	r3, r3, #2
 8007dc6:	600b      	str	r3, [r1, #0]
 8007dc8:	e7fb      	b.n	8007dc2 <__lo0bits+0x22>
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d101      	bne.n	8007dd4 <__lo0bits+0x34>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	d101      	bne.n	8007dde <__lo0bits+0x3e>
 8007dda:	3008      	adds	r0, #8
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	071a      	lsls	r2, r3, #28
 8007de0:	d101      	bne.n	8007de6 <__lo0bits+0x46>
 8007de2:	3004      	adds	r0, #4
 8007de4:	091b      	lsrs	r3, r3, #4
 8007de6:	079a      	lsls	r2, r3, #30
 8007de8:	d101      	bne.n	8007dee <__lo0bits+0x4e>
 8007dea:	3002      	adds	r0, #2
 8007dec:	089b      	lsrs	r3, r3, #2
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d4e9      	bmi.n	8007dc6 <__lo0bits+0x26>
 8007df2:	3001      	adds	r0, #1
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	d1e6      	bne.n	8007dc6 <__lo0bits+0x26>
 8007df8:	2020      	movs	r0, #32
 8007dfa:	e7e2      	b.n	8007dc2 <__lo0bits+0x22>

08007dfc <__i2b>:
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	000c      	movs	r4, r1
 8007e00:	2101      	movs	r1, #1
 8007e02:	f7ff febb 	bl	8007b7c <_Balloc>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d107      	bne.n	8007e1a <__i2b+0x1e>
 8007e0a:	2146      	movs	r1, #70	; 0x46
 8007e0c:	4c05      	ldr	r4, [pc, #20]	; (8007e24 <__i2b+0x28>)
 8007e0e:	0002      	movs	r2, r0
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <__i2b+0x2c>)
 8007e12:	0020      	movs	r0, r4
 8007e14:	31ff      	adds	r1, #255	; 0xff
 8007e16:	f001 fddf 	bl	80099d8 <__assert_func>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	6144      	str	r4, [r0, #20]
 8007e1e:	6103      	str	r3, [r0, #16]
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	0800a6a7 	.word	0x0800a6a7
 8007e28:	0800a696 	.word	0x0800a696

08007e2c <__multiply>:
 8007e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2e:	0015      	movs	r5, r2
 8007e30:	690a      	ldr	r2, [r1, #16]
 8007e32:	692b      	ldr	r3, [r5, #16]
 8007e34:	000c      	movs	r4, r1
 8007e36:	b08b      	sub	sp, #44	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	da01      	bge.n	8007e40 <__multiply+0x14>
 8007e3c:	002c      	movs	r4, r5
 8007e3e:	000d      	movs	r5, r1
 8007e40:	6927      	ldr	r7, [r4, #16]
 8007e42:	692e      	ldr	r6, [r5, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	19bb      	adds	r3, r7, r6
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	68a3      	ldr	r3, [r4, #8]
 8007e4c:	19ba      	adds	r2, r7, r6
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	da00      	bge.n	8007e54 <__multiply+0x28>
 8007e52:	3101      	adds	r1, #1
 8007e54:	f7ff fe92 	bl	8007b7c <_Balloc>
 8007e58:	9002      	str	r0, [sp, #8]
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d106      	bne.n	8007e6c <__multiply+0x40>
 8007e5e:	21b1      	movs	r1, #177	; 0xb1
 8007e60:	4b48      	ldr	r3, [pc, #288]	; (8007f84 <__multiply+0x158>)
 8007e62:	4849      	ldr	r0, [pc, #292]	; (8007f88 <__multiply+0x15c>)
 8007e64:	9a02      	ldr	r2, [sp, #8]
 8007e66:	0049      	lsls	r1, r1, #1
 8007e68:	f001 fdb6 	bl	80099d8 <__assert_func>
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	3314      	adds	r3, #20
 8007e72:	469c      	mov	ip, r3
 8007e74:	19bb      	adds	r3, r7, r6
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4463      	add	r3, ip
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	4663      	mov	r3, ip
 8007e7e:	9904      	ldr	r1, [sp, #16]
 8007e80:	428b      	cmp	r3, r1
 8007e82:	d32a      	bcc.n	8007eda <__multiply+0xae>
 8007e84:	0023      	movs	r3, r4
 8007e86:	00bf      	lsls	r7, r7, #2
 8007e88:	3314      	adds	r3, #20
 8007e8a:	3514      	adds	r5, #20
 8007e8c:	9308      	str	r3, [sp, #32]
 8007e8e:	00b6      	lsls	r6, r6, #2
 8007e90:	19db      	adds	r3, r3, r7
 8007e92:	9305      	str	r3, [sp, #20]
 8007e94:	19ab      	adds	r3, r5, r6
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	2304      	movs	r3, #4
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	0023      	movs	r3, r4
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	3315      	adds	r3, #21
 8007ea2:	9501      	str	r5, [sp, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d305      	bcc.n	8007eb4 <__multiply+0x88>
 8007ea8:	1b13      	subs	r3, r2, r4
 8007eaa:	3b15      	subs	r3, #21
 8007eac:	089b      	lsrs	r3, r3, #2
 8007eae:	3301      	adds	r3, #1
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	9306      	str	r3, [sp, #24]
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d310      	bcc.n	8007ede <__multiply+0xb2>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd05      	ble.n	8007ece <__multiply+0xa2>
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d056      	beq.n	8007f7c <__multiply+0x150>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	9a03      	ldr	r2, [sp, #12]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	611a      	str	r2, [r3, #16]
 8007ed6:	b00b      	add	sp, #44	; 0x2c
 8007ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eda:	c304      	stmia	r3!, {r2}
 8007edc:	e7cf      	b.n	8007e7e <__multiply+0x52>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	b280      	uxth	r0, r0
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d01e      	beq.n	8007f26 <__multiply+0xfa>
 8007ee8:	4667      	mov	r7, ip
 8007eea:	2500      	movs	r5, #0
 8007eec:	9e08      	ldr	r6, [sp, #32]
 8007eee:	ce02      	ldmia	r6!, {r1}
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	b28b      	uxth	r3, r1
 8007ef6:	4343      	muls	r3, r0
 8007ef8:	001a      	movs	r2, r3
 8007efa:	466b      	mov	r3, sp
 8007efc:	8b9b      	ldrh	r3, [r3, #28]
 8007efe:	18d3      	adds	r3, r2, r3
 8007f00:	195b      	adds	r3, r3, r5
 8007f02:	0c0d      	lsrs	r5, r1, #16
 8007f04:	4345      	muls	r5, r0
 8007f06:	9a07      	ldr	r2, [sp, #28]
 8007f08:	0c11      	lsrs	r1, r2, #16
 8007f0a:	1869      	adds	r1, r5, r1
 8007f0c:	0c1a      	lsrs	r2, r3, #16
 8007f0e:	188a      	adds	r2, r1, r2
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	0c15      	lsrs	r5, r2, #16
 8007f14:	0412      	lsls	r2, r2, #16
 8007f16:	431a      	orrs	r2, r3
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	c704      	stmia	r7!, {r2}
 8007f1c:	42b3      	cmp	r3, r6
 8007f1e:	d8e6      	bhi.n	8007eee <__multiply+0xc2>
 8007f20:	4663      	mov	r3, ip
 8007f22:	9a06      	ldr	r2, [sp, #24]
 8007f24:	509d      	str	r5, [r3, r2]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	0c00      	lsrs	r0, r0, #16
 8007f2c:	d020      	beq.n	8007f70 <__multiply+0x144>
 8007f2e:	4663      	mov	r3, ip
 8007f30:	0025      	movs	r5, r4
 8007f32:	4661      	mov	r1, ip
 8007f34:	2700      	movs	r7, #0
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3514      	adds	r5, #20
 8007f3a:	682a      	ldr	r2, [r5, #0]
 8007f3c:	680e      	ldr	r6, [r1, #0]
 8007f3e:	b292      	uxth	r2, r2
 8007f40:	4342      	muls	r2, r0
 8007f42:	0c36      	lsrs	r6, r6, #16
 8007f44:	1992      	adds	r2, r2, r6
 8007f46:	19d2      	adds	r2, r2, r7
 8007f48:	0416      	lsls	r6, r2, #16
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	431e      	orrs	r6, r3
 8007f4e:	600e      	str	r6, [r1, #0]
 8007f50:	cd40      	ldmia	r5!, {r6}
 8007f52:	684b      	ldr	r3, [r1, #4]
 8007f54:	0c36      	lsrs	r6, r6, #16
 8007f56:	4346      	muls	r6, r0
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	0c12      	lsrs	r2, r2, #16
 8007f5c:	18f3      	adds	r3, r6, r3
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	9a05      	ldr	r2, [sp, #20]
 8007f62:	0c1f      	lsrs	r7, r3, #16
 8007f64:	3104      	adds	r1, #4
 8007f66:	42aa      	cmp	r2, r5
 8007f68:	d8e7      	bhi.n	8007f3a <__multiply+0x10e>
 8007f6a:	4662      	mov	r2, ip
 8007f6c:	9906      	ldr	r1, [sp, #24]
 8007f6e:	5053      	str	r3, [r2, r1]
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	2304      	movs	r3, #4
 8007f78:	449c      	add	ip, r3
 8007f7a:	e79b      	b.n	8007eb4 <__multiply+0x88>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	e79b      	b.n	8007ebc <__multiply+0x90>
 8007f84:	0800a696 	.word	0x0800a696
 8007f88:	0800a6a7 	.word	0x0800a6a7

08007f8c <__pow5mult>:
 8007f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8e:	2303      	movs	r3, #3
 8007f90:	0015      	movs	r5, r2
 8007f92:	0007      	movs	r7, r0
 8007f94:	000e      	movs	r6, r1
 8007f96:	401a      	ands	r2, r3
 8007f98:	421d      	tst	r5, r3
 8007f9a:	d008      	beq.n	8007fae <__pow5mult+0x22>
 8007f9c:	4925      	ldr	r1, [pc, #148]	; (8008034 <__pow5mult+0xa8>)
 8007f9e:	3a01      	subs	r2, #1
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	5852      	ldr	r2, [r2, r1]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	0031      	movs	r1, r6
 8007fa8:	f7ff fe50 	bl	8007c4c <__multadd>
 8007fac:	0006      	movs	r6, r0
 8007fae:	10ad      	asrs	r5, r5, #2
 8007fb0:	d03d      	beq.n	800802e <__pow5mult+0xa2>
 8007fb2:	69fc      	ldr	r4, [r7, #28]
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	d10f      	bne.n	8007fd8 <__pow5mult+0x4c>
 8007fb8:	2010      	movs	r0, #16
 8007fba:	f7ff fd21 	bl	8007a00 <malloc>
 8007fbe:	1e02      	subs	r2, r0, #0
 8007fc0:	61f8      	str	r0, [r7, #28]
 8007fc2:	d105      	bne.n	8007fd0 <__pow5mult+0x44>
 8007fc4:	21b4      	movs	r1, #180	; 0xb4
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <__pow5mult+0xac>)
 8007fc8:	481c      	ldr	r0, [pc, #112]	; (800803c <__pow5mult+0xb0>)
 8007fca:	31ff      	adds	r1, #255	; 0xff
 8007fcc:	f001 fd04 	bl	80099d8 <__assert_func>
 8007fd0:	6044      	str	r4, [r0, #4]
 8007fd2:	6084      	str	r4, [r0, #8]
 8007fd4:	6004      	str	r4, [r0, #0]
 8007fd6:	60c4      	str	r4, [r0, #12]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	689c      	ldr	r4, [r3, #8]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	2c00      	cmp	r4, #0
 8007fe0:	d108      	bne.n	8007ff4 <__pow5mult+0x68>
 8007fe2:	0038      	movs	r0, r7
 8007fe4:	4916      	ldr	r1, [pc, #88]	; (8008040 <__pow5mult+0xb4>)
 8007fe6:	f7ff ff09 	bl	8007dfc <__i2b>
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	0004      	movs	r4, r0
 8007fee:	6098      	str	r0, [r3, #8]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6003      	str	r3, [r0, #0]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	421d      	tst	r5, r3
 8007ff8:	d00a      	beq.n	8008010 <__pow5mult+0x84>
 8007ffa:	0031      	movs	r1, r6
 8007ffc:	0022      	movs	r2, r4
 8007ffe:	0038      	movs	r0, r7
 8008000:	f7ff ff14 	bl	8007e2c <__multiply>
 8008004:	0031      	movs	r1, r6
 8008006:	9001      	str	r0, [sp, #4]
 8008008:	0038      	movs	r0, r7
 800800a:	f7ff fdfb 	bl	8007c04 <_Bfree>
 800800e:	9e01      	ldr	r6, [sp, #4]
 8008010:	106d      	asrs	r5, r5, #1
 8008012:	d00c      	beq.n	800802e <__pow5mult+0xa2>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	2800      	cmp	r0, #0
 8008018:	d107      	bne.n	800802a <__pow5mult+0x9e>
 800801a:	0022      	movs	r2, r4
 800801c:	0021      	movs	r1, r4
 800801e:	0038      	movs	r0, r7
 8008020:	f7ff ff04 	bl	8007e2c <__multiply>
 8008024:	2300      	movs	r3, #0
 8008026:	6020      	str	r0, [r4, #0]
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	0004      	movs	r4, r0
 800802c:	e7e2      	b.n	8007ff4 <__pow5mult+0x68>
 800802e:	0030      	movs	r0, r6
 8008030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	0800a7f0 	.word	0x0800a7f0
 8008038:	0800a627 	.word	0x0800a627
 800803c:	0800a6a7 	.word	0x0800a6a7
 8008040:	00000271 	.word	0x00000271

08008044 <__lshift>:
 8008044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008046:	000c      	movs	r4, r1
 8008048:	0017      	movs	r7, r2
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	1155      	asrs	r5, r2, #5
 800804e:	b087      	sub	sp, #28
 8008050:	18eb      	adds	r3, r5, r3
 8008052:	9302      	str	r3, [sp, #8]
 8008054:	3301      	adds	r3, #1
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	6849      	ldr	r1, [r1, #4]
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	9004      	str	r0, [sp, #16]
 800805e:	9a01      	ldr	r2, [sp, #4]
 8008060:	4293      	cmp	r3, r2
 8008062:	db10      	blt.n	8008086 <__lshift+0x42>
 8008064:	9804      	ldr	r0, [sp, #16]
 8008066:	f7ff fd89 	bl	8007b7c <_Balloc>
 800806a:	2300      	movs	r3, #0
 800806c:	0002      	movs	r2, r0
 800806e:	0006      	movs	r6, r0
 8008070:	0019      	movs	r1, r3
 8008072:	3214      	adds	r2, #20
 8008074:	4298      	cmp	r0, r3
 8008076:	d10c      	bne.n	8008092 <__lshift+0x4e>
 8008078:	31df      	adds	r1, #223	; 0xdf
 800807a:	0032      	movs	r2, r6
 800807c:	4b26      	ldr	r3, [pc, #152]	; (8008118 <__lshift+0xd4>)
 800807e:	4827      	ldr	r0, [pc, #156]	; (800811c <__lshift+0xd8>)
 8008080:	31ff      	adds	r1, #255	; 0xff
 8008082:	f001 fca9 	bl	80099d8 <__assert_func>
 8008086:	3101      	adds	r1, #1
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	e7e8      	b.n	800805e <__lshift+0x1a>
 800808c:	0098      	lsls	r0, r3, #2
 800808e:	5011      	str	r1, [r2, r0]
 8008090:	3301      	adds	r3, #1
 8008092:	42ab      	cmp	r3, r5
 8008094:	dbfa      	blt.n	800808c <__lshift+0x48>
 8008096:	43eb      	mvns	r3, r5
 8008098:	17db      	asrs	r3, r3, #31
 800809a:	401d      	ands	r5, r3
 800809c:	211f      	movs	r1, #31
 800809e:	0023      	movs	r3, r4
 80080a0:	0038      	movs	r0, r7
 80080a2:	00ad      	lsls	r5, r5, #2
 80080a4:	1955      	adds	r5, r2, r5
 80080a6:	6922      	ldr	r2, [r4, #16]
 80080a8:	3314      	adds	r3, #20
 80080aa:	0092      	lsls	r2, r2, #2
 80080ac:	4008      	ands	r0, r1
 80080ae:	4684      	mov	ip, r0
 80080b0:	189a      	adds	r2, r3, r2
 80080b2:	420f      	tst	r7, r1
 80080b4:	d02a      	beq.n	800810c <__lshift+0xc8>
 80080b6:	3101      	adds	r1, #1
 80080b8:	1a09      	subs	r1, r1, r0
 80080ba:	9105      	str	r1, [sp, #20]
 80080bc:	2100      	movs	r1, #0
 80080be:	9503      	str	r5, [sp, #12]
 80080c0:	4667      	mov	r7, ip
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	40b8      	lsls	r0, r7
 80080c6:	4308      	orrs	r0, r1
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	c101      	stmia	r1!, {r0}
 80080cc:	9103      	str	r1, [sp, #12]
 80080ce:	9805      	ldr	r0, [sp, #20]
 80080d0:	cb02      	ldmia	r3!, {r1}
 80080d2:	40c1      	lsrs	r1, r0
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d8f3      	bhi.n	80080c0 <__lshift+0x7c>
 80080d8:	0020      	movs	r0, r4
 80080da:	3015      	adds	r0, #21
 80080dc:	2304      	movs	r3, #4
 80080de:	4282      	cmp	r2, r0
 80080e0:	d304      	bcc.n	80080ec <__lshift+0xa8>
 80080e2:	1b13      	subs	r3, r2, r4
 80080e4:	3b15      	subs	r3, #21
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	3301      	adds	r3, #1
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	50e9      	str	r1, [r5, r3]
 80080ee:	2900      	cmp	r1, #0
 80080f0:	d002      	beq.n	80080f8 <__lshift+0xb4>
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	3302      	adds	r3, #2
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	9804      	ldr	r0, [sp, #16]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	0021      	movs	r1, r4
 8008100:	6133      	str	r3, [r6, #16]
 8008102:	f7ff fd7f 	bl	8007c04 <_Bfree>
 8008106:	0030      	movs	r0, r6
 8008108:	b007      	add	sp, #28
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	cb02      	ldmia	r3!, {r1}
 800810e:	c502      	stmia	r5!, {r1}
 8008110:	429a      	cmp	r2, r3
 8008112:	d8fb      	bhi.n	800810c <__lshift+0xc8>
 8008114:	e7f0      	b.n	80080f8 <__lshift+0xb4>
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	0800a696 	.word	0x0800a696
 800811c:	0800a6a7 	.word	0x0800a6a7

08008120 <__mcmp>:
 8008120:	b530      	push	{r4, r5, lr}
 8008122:	690b      	ldr	r3, [r1, #16]
 8008124:	6904      	ldr	r4, [r0, #16]
 8008126:	0002      	movs	r2, r0
 8008128:	1ae0      	subs	r0, r4, r3
 800812a:	429c      	cmp	r4, r3
 800812c:	d10e      	bne.n	800814c <__mcmp+0x2c>
 800812e:	3214      	adds	r2, #20
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	3114      	adds	r1, #20
 8008134:	0014      	movs	r4, r2
 8008136:	18c9      	adds	r1, r1, r3
 8008138:	18d2      	adds	r2, r2, r3
 800813a:	3a04      	subs	r2, #4
 800813c:	3904      	subs	r1, #4
 800813e:	6815      	ldr	r5, [r2, #0]
 8008140:	680b      	ldr	r3, [r1, #0]
 8008142:	429d      	cmp	r5, r3
 8008144:	d003      	beq.n	800814e <__mcmp+0x2e>
 8008146:	2001      	movs	r0, #1
 8008148:	429d      	cmp	r5, r3
 800814a:	d303      	bcc.n	8008154 <__mcmp+0x34>
 800814c:	bd30      	pop	{r4, r5, pc}
 800814e:	4294      	cmp	r4, r2
 8008150:	d3f3      	bcc.n	800813a <__mcmp+0x1a>
 8008152:	e7fb      	b.n	800814c <__mcmp+0x2c>
 8008154:	4240      	negs	r0, r0
 8008156:	e7f9      	b.n	800814c <__mcmp+0x2c>

08008158 <__mdiff>:
 8008158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815a:	000e      	movs	r6, r1
 800815c:	0007      	movs	r7, r0
 800815e:	0011      	movs	r1, r2
 8008160:	0030      	movs	r0, r6
 8008162:	b087      	sub	sp, #28
 8008164:	0014      	movs	r4, r2
 8008166:	f7ff ffdb 	bl	8008120 <__mcmp>
 800816a:	1e05      	subs	r5, r0, #0
 800816c:	d110      	bne.n	8008190 <__mdiff+0x38>
 800816e:	0001      	movs	r1, r0
 8008170:	0038      	movs	r0, r7
 8008172:	f7ff fd03 	bl	8007b7c <_Balloc>
 8008176:	1e02      	subs	r2, r0, #0
 8008178:	d104      	bne.n	8008184 <__mdiff+0x2c>
 800817a:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <__mdiff+0x120>)
 800817c:	483f      	ldr	r0, [pc, #252]	; (800827c <__mdiff+0x124>)
 800817e:	4940      	ldr	r1, [pc, #256]	; (8008280 <__mdiff+0x128>)
 8008180:	f001 fc2a 	bl	80099d8 <__assert_func>
 8008184:	2301      	movs	r3, #1
 8008186:	6145      	str	r5, [r0, #20]
 8008188:	6103      	str	r3, [r0, #16]
 800818a:	0010      	movs	r0, r2
 800818c:	b007      	add	sp, #28
 800818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008190:	2301      	movs	r3, #1
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	2800      	cmp	r0, #0
 8008196:	db04      	blt.n	80081a2 <__mdiff+0x4a>
 8008198:	0023      	movs	r3, r4
 800819a:	0034      	movs	r4, r6
 800819c:	001e      	movs	r6, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	0038      	movs	r0, r7
 80081a4:	6861      	ldr	r1, [r4, #4]
 80081a6:	f7ff fce9 	bl	8007b7c <_Balloc>
 80081aa:	1e02      	subs	r2, r0, #0
 80081ac:	d103      	bne.n	80081b6 <__mdiff+0x5e>
 80081ae:	4b32      	ldr	r3, [pc, #200]	; (8008278 <__mdiff+0x120>)
 80081b0:	4832      	ldr	r0, [pc, #200]	; (800827c <__mdiff+0x124>)
 80081b2:	4934      	ldr	r1, [pc, #208]	; (8008284 <__mdiff+0x12c>)
 80081b4:	e7e4      	b.n	8008180 <__mdiff+0x28>
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	2700      	movs	r7, #0
 80081ba:	60c3      	str	r3, [r0, #12]
 80081bc:	6920      	ldr	r0, [r4, #16]
 80081be:	3414      	adds	r4, #20
 80081c0:	0083      	lsls	r3, r0, #2
 80081c2:	18e3      	adds	r3, r4, r3
 80081c4:	0021      	movs	r1, r4
 80081c6:	9401      	str	r4, [sp, #4]
 80081c8:	0034      	movs	r4, r6
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	6933      	ldr	r3, [r6, #16]
 80081ce:	3414      	adds	r4, #20
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	18e3      	adds	r3, r4, r3
 80081d4:	9303      	str	r3, [sp, #12]
 80081d6:	0013      	movs	r3, r2
 80081d8:	3314      	adds	r3, #20
 80081da:	469c      	mov	ip, r3
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	9104      	str	r1, [sp, #16]
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	cc02      	ldmia	r4!, {r1}
 80081e4:	cb20      	ldmia	r3!, {r5}
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	b2ab      	uxth	r3, r5
 80081ea:	19df      	adds	r7, r3, r7
 80081ec:	b28b      	uxth	r3, r1
 80081ee:	1afb      	subs	r3, r7, r3
 80081f0:	0c09      	lsrs	r1, r1, #16
 80081f2:	0c2d      	lsrs	r5, r5, #16
 80081f4:	1a6d      	subs	r5, r5, r1
 80081f6:	1419      	asrs	r1, r3, #16
 80081f8:	1869      	adds	r1, r5, r1
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	140f      	asrs	r7, r1, #16
 80081fe:	0409      	lsls	r1, r1, #16
 8008200:	4319      	orrs	r1, r3
 8008202:	4663      	mov	r3, ip
 8008204:	c302      	stmia	r3!, {r1}
 8008206:	469c      	mov	ip, r3
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	42a3      	cmp	r3, r4
 800820c:	d8e8      	bhi.n	80081e0 <__mdiff+0x88>
 800820e:	0031      	movs	r1, r6
 8008210:	9c03      	ldr	r4, [sp, #12]
 8008212:	3115      	adds	r1, #21
 8008214:	2304      	movs	r3, #4
 8008216:	428c      	cmp	r4, r1
 8008218:	d304      	bcc.n	8008224 <__mdiff+0xcc>
 800821a:	1ba3      	subs	r3, r4, r6
 800821c:	3b15      	subs	r3, #21
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	3301      	adds	r3, #1
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	9901      	ldr	r1, [sp, #4]
 8008226:	18cd      	adds	r5, r1, r3
 8008228:	9905      	ldr	r1, [sp, #20]
 800822a:	002e      	movs	r6, r5
 800822c:	18cb      	adds	r3, r1, r3
 800822e:	469c      	mov	ip, r3
 8008230:	9902      	ldr	r1, [sp, #8]
 8008232:	428e      	cmp	r6, r1
 8008234:	d310      	bcc.n	8008258 <__mdiff+0x100>
 8008236:	9e02      	ldr	r6, [sp, #8]
 8008238:	1ee9      	subs	r1, r5, #3
 800823a:	2400      	movs	r4, #0
 800823c:	428e      	cmp	r6, r1
 800823e:	d304      	bcc.n	800824a <__mdiff+0xf2>
 8008240:	0031      	movs	r1, r6
 8008242:	3103      	adds	r1, #3
 8008244:	1b49      	subs	r1, r1, r5
 8008246:	0889      	lsrs	r1, r1, #2
 8008248:	008c      	lsls	r4, r1, #2
 800824a:	191b      	adds	r3, r3, r4
 800824c:	3b04      	subs	r3, #4
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	2900      	cmp	r1, #0
 8008252:	d00f      	beq.n	8008274 <__mdiff+0x11c>
 8008254:	6110      	str	r0, [r2, #16]
 8008256:	e798      	b.n	800818a <__mdiff+0x32>
 8008258:	ce02      	ldmia	r6!, {r1}
 800825a:	b28c      	uxth	r4, r1
 800825c:	19e4      	adds	r4, r4, r7
 800825e:	0c0f      	lsrs	r7, r1, #16
 8008260:	1421      	asrs	r1, r4, #16
 8008262:	1879      	adds	r1, r7, r1
 8008264:	b2a4      	uxth	r4, r4
 8008266:	140f      	asrs	r7, r1, #16
 8008268:	0409      	lsls	r1, r1, #16
 800826a:	4321      	orrs	r1, r4
 800826c:	4664      	mov	r4, ip
 800826e:	c402      	stmia	r4!, {r1}
 8008270:	46a4      	mov	ip, r4
 8008272:	e7dd      	b.n	8008230 <__mdiff+0xd8>
 8008274:	3801      	subs	r0, #1
 8008276:	e7e9      	b.n	800824c <__mdiff+0xf4>
 8008278:	0800a696 	.word	0x0800a696
 800827c:	0800a6a7 	.word	0x0800a6a7
 8008280:	00000237 	.word	0x00000237
 8008284:	00000245 	.word	0x00000245

08008288 <__ulp>:
 8008288:	2000      	movs	r0, #0
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <__ulp+0x30>)
 800828c:	4019      	ands	r1, r3
 800828e:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <__ulp+0x34>)
 8008290:	18c9      	adds	r1, r1, r3
 8008292:	4281      	cmp	r1, r0
 8008294:	dc06      	bgt.n	80082a4 <__ulp+0x1c>
 8008296:	4249      	negs	r1, r1
 8008298:	150b      	asrs	r3, r1, #20
 800829a:	2b13      	cmp	r3, #19
 800829c:	dc03      	bgt.n	80082a6 <__ulp+0x1e>
 800829e:	2180      	movs	r1, #128	; 0x80
 80082a0:	0309      	lsls	r1, r1, #12
 80082a2:	4119      	asrs	r1, r3
 80082a4:	4770      	bx	lr
 80082a6:	3b14      	subs	r3, #20
 80082a8:	2001      	movs	r0, #1
 80082aa:	2b1e      	cmp	r3, #30
 80082ac:	dc02      	bgt.n	80082b4 <__ulp+0x2c>
 80082ae:	2080      	movs	r0, #128	; 0x80
 80082b0:	0600      	lsls	r0, r0, #24
 80082b2:	40d8      	lsrs	r0, r3
 80082b4:	2100      	movs	r1, #0
 80082b6:	e7f5      	b.n	80082a4 <__ulp+0x1c>
 80082b8:	7ff00000 	.word	0x7ff00000
 80082bc:	fcc00000 	.word	0xfcc00000

080082c0 <__b2d>:
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	0006      	movs	r6, r0
 80082c4:	6903      	ldr	r3, [r0, #16]
 80082c6:	3614      	adds	r6, #20
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	18f3      	adds	r3, r6, r3
 80082cc:	1f1d      	subs	r5, r3, #4
 80082ce:	682c      	ldr	r4, [r5, #0]
 80082d0:	000f      	movs	r7, r1
 80082d2:	0020      	movs	r0, r4
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	f7ff fd49 	bl	8007d6c <__hi0bits>
 80082da:	2220      	movs	r2, #32
 80082dc:	1a12      	subs	r2, r2, r0
 80082de:	603a      	str	r2, [r7, #0]
 80082e0:	0003      	movs	r3, r0
 80082e2:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <__b2d+0x94>)
 80082e4:	280a      	cmp	r0, #10
 80082e6:	dc15      	bgt.n	8008314 <__b2d+0x54>
 80082e8:	210b      	movs	r1, #11
 80082ea:	0027      	movs	r7, r4
 80082ec:	1a09      	subs	r1, r1, r0
 80082ee:	40cf      	lsrs	r7, r1
 80082f0:	433a      	orrs	r2, r7
 80082f2:	468c      	mov	ip, r1
 80082f4:	0011      	movs	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	42ae      	cmp	r6, r5
 80082fa:	d202      	bcs.n	8008302 <__b2d+0x42>
 80082fc:	9a01      	ldr	r2, [sp, #4]
 80082fe:	3a08      	subs	r2, #8
 8008300:	6812      	ldr	r2, [r2, #0]
 8008302:	3315      	adds	r3, #21
 8008304:	409c      	lsls	r4, r3
 8008306:	4663      	mov	r3, ip
 8008308:	0027      	movs	r7, r4
 800830a:	40da      	lsrs	r2, r3
 800830c:	4317      	orrs	r7, r2
 800830e:	0038      	movs	r0, r7
 8008310:	b003      	add	sp, #12
 8008312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008314:	2700      	movs	r7, #0
 8008316:	42ae      	cmp	r6, r5
 8008318:	d202      	bcs.n	8008320 <__b2d+0x60>
 800831a:	9d01      	ldr	r5, [sp, #4]
 800831c:	3d08      	subs	r5, #8
 800831e:	682f      	ldr	r7, [r5, #0]
 8008320:	210b      	movs	r1, #11
 8008322:	4249      	negs	r1, r1
 8008324:	468c      	mov	ip, r1
 8008326:	449c      	add	ip, r3
 8008328:	2b0b      	cmp	r3, #11
 800832a:	d010      	beq.n	800834e <__b2d+0x8e>
 800832c:	4661      	mov	r1, ip
 800832e:	2320      	movs	r3, #32
 8008330:	408c      	lsls	r4, r1
 8008332:	1a5b      	subs	r3, r3, r1
 8008334:	0039      	movs	r1, r7
 8008336:	40d9      	lsrs	r1, r3
 8008338:	430c      	orrs	r4, r1
 800833a:	4322      	orrs	r2, r4
 800833c:	0011      	movs	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	42b5      	cmp	r5, r6
 8008342:	d901      	bls.n	8008348 <__b2d+0x88>
 8008344:	3d04      	subs	r5, #4
 8008346:	682a      	ldr	r2, [r5, #0]
 8008348:	4664      	mov	r4, ip
 800834a:	40a7      	lsls	r7, r4
 800834c:	e7dd      	b.n	800830a <__b2d+0x4a>
 800834e:	4322      	orrs	r2, r4
 8008350:	0011      	movs	r1, r2
 8008352:	e7dc      	b.n	800830e <__b2d+0x4e>
 8008354:	3ff00000 	.word	0x3ff00000

08008358 <__d2b>:
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	2101      	movs	r1, #1
 800835c:	0014      	movs	r4, r2
 800835e:	001d      	movs	r5, r3
 8008360:	9f08      	ldr	r7, [sp, #32]
 8008362:	f7ff fc0b 	bl	8007b7c <_Balloc>
 8008366:	1e06      	subs	r6, r0, #0
 8008368:	d105      	bne.n	8008376 <__d2b+0x1e>
 800836a:	0032      	movs	r2, r6
 800836c:	4b24      	ldr	r3, [pc, #144]	; (8008400 <__d2b+0xa8>)
 800836e:	4825      	ldr	r0, [pc, #148]	; (8008404 <__d2b+0xac>)
 8008370:	4925      	ldr	r1, [pc, #148]	; (8008408 <__d2b+0xb0>)
 8008372:	f001 fb31 	bl	80099d8 <__assert_func>
 8008376:	032b      	lsls	r3, r5, #12
 8008378:	006d      	lsls	r5, r5, #1
 800837a:	0b1b      	lsrs	r3, r3, #12
 800837c:	0d6d      	lsrs	r5, r5, #21
 800837e:	d125      	bne.n	80083cc <__d2b+0x74>
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	2c00      	cmp	r4, #0
 8008384:	d028      	beq.n	80083d8 <__d2b+0x80>
 8008386:	4668      	mov	r0, sp
 8008388:	9400      	str	r4, [sp, #0]
 800838a:	f7ff fd09 	bl	8007da0 <__lo0bits>
 800838e:	9b01      	ldr	r3, [sp, #4]
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	2800      	cmp	r0, #0
 8008394:	d01e      	beq.n	80083d4 <__d2b+0x7c>
 8008396:	2220      	movs	r2, #32
 8008398:	001c      	movs	r4, r3
 800839a:	1a12      	subs	r2, r2, r0
 800839c:	4094      	lsls	r4, r2
 800839e:	0022      	movs	r2, r4
 80083a0:	40c3      	lsrs	r3, r0
 80083a2:	430a      	orrs	r2, r1
 80083a4:	6172      	str	r2, [r6, #20]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	9c01      	ldr	r4, [sp, #4]
 80083aa:	61b4      	str	r4, [r6, #24]
 80083ac:	1e63      	subs	r3, r4, #1
 80083ae:	419c      	sbcs	r4, r3
 80083b0:	3401      	adds	r4, #1
 80083b2:	6134      	str	r4, [r6, #16]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	d017      	beq.n	80083e8 <__d2b+0x90>
 80083b8:	2435      	movs	r4, #53	; 0x35
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <__d2b+0xb4>)
 80083bc:	18ed      	adds	r5, r5, r3
 80083be:	182d      	adds	r5, r5, r0
 80083c0:	603d      	str	r5, [r7, #0]
 80083c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c4:	1a24      	subs	r4, r4, r0
 80083c6:	601c      	str	r4, [r3, #0]
 80083c8:	0030      	movs	r0, r6
 80083ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083cc:	2280      	movs	r2, #128	; 0x80
 80083ce:	0352      	lsls	r2, r2, #13
 80083d0:	4313      	orrs	r3, r2
 80083d2:	e7d5      	b.n	8008380 <__d2b+0x28>
 80083d4:	6171      	str	r1, [r6, #20]
 80083d6:	e7e7      	b.n	80083a8 <__d2b+0x50>
 80083d8:	a801      	add	r0, sp, #4
 80083da:	f7ff fce1 	bl	8007da0 <__lo0bits>
 80083de:	9b01      	ldr	r3, [sp, #4]
 80083e0:	2401      	movs	r4, #1
 80083e2:	6173      	str	r3, [r6, #20]
 80083e4:	3020      	adds	r0, #32
 80083e6:	e7e4      	b.n	80083b2 <__d2b+0x5a>
 80083e8:	4b09      	ldr	r3, [pc, #36]	; (8008410 <__d2b+0xb8>)
 80083ea:	18c0      	adds	r0, r0, r3
 80083ec:	4b09      	ldr	r3, [pc, #36]	; (8008414 <__d2b+0xbc>)
 80083ee:	6038      	str	r0, [r7, #0]
 80083f0:	18e3      	adds	r3, r4, r3
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	18f3      	adds	r3, r6, r3
 80083f6:	6958      	ldr	r0, [r3, #20]
 80083f8:	f7ff fcb8 	bl	8007d6c <__hi0bits>
 80083fc:	0164      	lsls	r4, r4, #5
 80083fe:	e7e0      	b.n	80083c2 <__d2b+0x6a>
 8008400:	0800a696 	.word	0x0800a696
 8008404:	0800a6a7 	.word	0x0800a6a7
 8008408:	0000030f 	.word	0x0000030f
 800840c:	fffffbcd 	.word	0xfffffbcd
 8008410:	fffffbce 	.word	0xfffffbce
 8008414:	3fffffff 	.word	0x3fffffff

08008418 <__ratio>:
 8008418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841a:	b087      	sub	sp, #28
 800841c:	000f      	movs	r7, r1
 800841e:	a904      	add	r1, sp, #16
 8008420:	0006      	movs	r6, r0
 8008422:	f7ff ff4d 	bl	80082c0 <__b2d>
 8008426:	9000      	str	r0, [sp, #0]
 8008428:	9101      	str	r1, [sp, #4]
 800842a:	9c00      	ldr	r4, [sp, #0]
 800842c:	9d01      	ldr	r5, [sp, #4]
 800842e:	0038      	movs	r0, r7
 8008430:	a905      	add	r1, sp, #20
 8008432:	f7ff ff45 	bl	80082c0 <__b2d>
 8008436:	9002      	str	r0, [sp, #8]
 8008438:	9103      	str	r1, [sp, #12]
 800843a:	9a02      	ldr	r2, [sp, #8]
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	6930      	ldr	r0, [r6, #16]
 8008440:	6939      	ldr	r1, [r7, #16]
 8008442:	9e04      	ldr	r6, [sp, #16]
 8008444:	1a40      	subs	r0, r0, r1
 8008446:	9905      	ldr	r1, [sp, #20]
 8008448:	0140      	lsls	r0, r0, #5
 800844a:	1a71      	subs	r1, r6, r1
 800844c:	1841      	adds	r1, r0, r1
 800844e:	0508      	lsls	r0, r1, #20
 8008450:	2900      	cmp	r1, #0
 8008452:	dd07      	ble.n	8008464 <__ratio+0x4c>
 8008454:	9901      	ldr	r1, [sp, #4]
 8008456:	1845      	adds	r5, r0, r1
 8008458:	0020      	movs	r0, r4
 800845a:	0029      	movs	r1, r5
 800845c:	f7f8 fd0e 	bl	8000e7c <__aeabi_ddiv>
 8008460:	b007      	add	sp, #28
 8008462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008464:	9903      	ldr	r1, [sp, #12]
 8008466:	1a0b      	subs	r3, r1, r0
 8008468:	e7f6      	b.n	8008458 <__ratio+0x40>

0800846a <__copybits>:
 800846a:	b570      	push	{r4, r5, r6, lr}
 800846c:	0014      	movs	r4, r2
 800846e:	0005      	movs	r5, r0
 8008470:	3901      	subs	r1, #1
 8008472:	6913      	ldr	r3, [r2, #16]
 8008474:	1149      	asrs	r1, r1, #5
 8008476:	3101      	adds	r1, #1
 8008478:	0089      	lsls	r1, r1, #2
 800847a:	3414      	adds	r4, #20
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	1841      	adds	r1, r0, r1
 8008480:	18e3      	adds	r3, r4, r3
 8008482:	42a3      	cmp	r3, r4
 8008484:	d80d      	bhi.n	80084a2 <__copybits+0x38>
 8008486:	0014      	movs	r4, r2
 8008488:	3411      	adds	r4, #17
 800848a:	2500      	movs	r5, #0
 800848c:	429c      	cmp	r4, r3
 800848e:	d803      	bhi.n	8008498 <__copybits+0x2e>
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	3b11      	subs	r3, #17
 8008494:	089b      	lsrs	r3, r3, #2
 8008496:	009d      	lsls	r5, r3, #2
 8008498:	2300      	movs	r3, #0
 800849a:	1940      	adds	r0, r0, r5
 800849c:	4281      	cmp	r1, r0
 800849e:	d803      	bhi.n	80084a8 <__copybits+0x3e>
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	cc40      	ldmia	r4!, {r6}
 80084a4:	c540      	stmia	r5!, {r6}
 80084a6:	e7ec      	b.n	8008482 <__copybits+0x18>
 80084a8:	c008      	stmia	r0!, {r3}
 80084aa:	e7f7      	b.n	800849c <__copybits+0x32>

080084ac <__any_on>:
 80084ac:	0002      	movs	r2, r0
 80084ae:	6900      	ldr	r0, [r0, #16]
 80084b0:	b510      	push	{r4, lr}
 80084b2:	3214      	adds	r2, #20
 80084b4:	114b      	asrs	r3, r1, #5
 80084b6:	4298      	cmp	r0, r3
 80084b8:	db13      	blt.n	80084e2 <__any_on+0x36>
 80084ba:	dd0c      	ble.n	80084d6 <__any_on+0x2a>
 80084bc:	241f      	movs	r4, #31
 80084be:	0008      	movs	r0, r1
 80084c0:	4020      	ands	r0, r4
 80084c2:	4221      	tst	r1, r4
 80084c4:	d007      	beq.n	80084d6 <__any_on+0x2a>
 80084c6:	0099      	lsls	r1, r3, #2
 80084c8:	588c      	ldr	r4, [r1, r2]
 80084ca:	0021      	movs	r1, r4
 80084cc:	40c1      	lsrs	r1, r0
 80084ce:	4081      	lsls	r1, r0
 80084d0:	2001      	movs	r0, #1
 80084d2:	428c      	cmp	r4, r1
 80084d4:	d104      	bne.n	80084e0 <__any_on+0x34>
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	18d3      	adds	r3, r2, r3
 80084da:	4293      	cmp	r3, r2
 80084dc:	d803      	bhi.n	80084e6 <__any_on+0x3a>
 80084de:	2000      	movs	r0, #0
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	0003      	movs	r3, r0
 80084e4:	e7f7      	b.n	80084d6 <__any_on+0x2a>
 80084e6:	3b04      	subs	r3, #4
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	2900      	cmp	r1, #0
 80084ec:	d0f5      	beq.n	80084da <__any_on+0x2e>
 80084ee:	2001      	movs	r0, #1
 80084f0:	e7f6      	b.n	80084e0 <__any_on+0x34>
	...

080084f4 <sulp>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	0016      	movs	r6, r2
 80084f8:	000d      	movs	r5, r1
 80084fa:	f7ff fec5 	bl	8008288 <__ulp>
 80084fe:	2e00      	cmp	r6, #0
 8008500:	d00d      	beq.n	800851e <sulp+0x2a>
 8008502:	236b      	movs	r3, #107	; 0x6b
 8008504:	006a      	lsls	r2, r5, #1
 8008506:	0d52      	lsrs	r2, r2, #21
 8008508:	1a9b      	subs	r3, r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd07      	ble.n	800851e <sulp+0x2a>
 800850e:	2400      	movs	r4, #0
 8008510:	4a03      	ldr	r2, [pc, #12]	; (8008520 <sulp+0x2c>)
 8008512:	051b      	lsls	r3, r3, #20
 8008514:	189d      	adds	r5, r3, r2
 8008516:	002b      	movs	r3, r5
 8008518:	0022      	movs	r2, r4
 800851a:	f7f9 f8a9 	bl	8001670 <__aeabi_dmul>
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	3ff00000 	.word	0x3ff00000

08008524 <_strtod_l>:
 8008524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008526:	b0a1      	sub	sp, #132	; 0x84
 8008528:	9219      	str	r2, [sp, #100]	; 0x64
 800852a:	2200      	movs	r2, #0
 800852c:	2600      	movs	r6, #0
 800852e:	2700      	movs	r7, #0
 8008530:	9004      	str	r0, [sp, #16]
 8008532:	9107      	str	r1, [sp, #28]
 8008534:	921c      	str	r2, [sp, #112]	; 0x70
 8008536:	911b      	str	r1, [sp, #108]	; 0x6c
 8008538:	780a      	ldrb	r2, [r1, #0]
 800853a:	2a2b      	cmp	r2, #43	; 0x2b
 800853c:	d055      	beq.n	80085ea <_strtod_l+0xc6>
 800853e:	d841      	bhi.n	80085c4 <_strtod_l+0xa0>
 8008540:	2a0d      	cmp	r2, #13
 8008542:	d83b      	bhi.n	80085bc <_strtod_l+0x98>
 8008544:	2a08      	cmp	r2, #8
 8008546:	d83b      	bhi.n	80085c0 <_strtod_l+0x9c>
 8008548:	2a00      	cmp	r2, #0
 800854a:	d044      	beq.n	80085d6 <_strtod_l+0xb2>
 800854c:	2200      	movs	r2, #0
 800854e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008550:	2100      	movs	r1, #0
 8008552:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008554:	9109      	str	r1, [sp, #36]	; 0x24
 8008556:	782a      	ldrb	r2, [r5, #0]
 8008558:	2a30      	cmp	r2, #48	; 0x30
 800855a:	d000      	beq.n	800855e <_strtod_l+0x3a>
 800855c:	e085      	b.n	800866a <_strtod_l+0x146>
 800855e:	786a      	ldrb	r2, [r5, #1]
 8008560:	3120      	adds	r1, #32
 8008562:	438a      	bics	r2, r1
 8008564:	2a58      	cmp	r2, #88	; 0x58
 8008566:	d000      	beq.n	800856a <_strtod_l+0x46>
 8008568:	e075      	b.n	8008656 <_strtod_l+0x132>
 800856a:	9302      	str	r3, [sp, #8]
 800856c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800856e:	4a97      	ldr	r2, [pc, #604]	; (80087cc <_strtod_l+0x2a8>)
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	ab1c      	add	r3, sp, #112	; 0x70
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	9804      	ldr	r0, [sp, #16]
 8008578:	ab1d      	add	r3, sp, #116	; 0x74
 800857a:	a91b      	add	r1, sp, #108	; 0x6c
 800857c:	f001 fae2 	bl	8009b44 <__gethex>
 8008580:	230f      	movs	r3, #15
 8008582:	0002      	movs	r2, r0
 8008584:	401a      	ands	r2, r3
 8008586:	0004      	movs	r4, r0
 8008588:	9205      	str	r2, [sp, #20]
 800858a:	4218      	tst	r0, r3
 800858c:	d005      	beq.n	800859a <_strtod_l+0x76>
 800858e:	2a06      	cmp	r2, #6
 8008590:	d12d      	bne.n	80085ee <_strtod_l+0xca>
 8008592:	1c6b      	adds	r3, r5, #1
 8008594:	931b      	str	r3, [sp, #108]	; 0x6c
 8008596:	2300      	movs	r3, #0
 8008598:	930f      	str	r3, [sp, #60]	; 0x3c
 800859a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <_strtod_l+0x82>
 80085a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01b      	beq.n	80085e4 <_strtod_l+0xc0>
 80085ac:	2380      	movs	r3, #128	; 0x80
 80085ae:	0032      	movs	r2, r6
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	0010      	movs	r0, r2
 80085b6:	0019      	movs	r1, r3
 80085b8:	b021      	add	sp, #132	; 0x84
 80085ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085bc:	2a20      	cmp	r2, #32
 80085be:	d1c5      	bne.n	800854c <_strtod_l+0x28>
 80085c0:	3101      	adds	r1, #1
 80085c2:	e7b8      	b.n	8008536 <_strtod_l+0x12>
 80085c4:	2a2d      	cmp	r2, #45	; 0x2d
 80085c6:	d1c1      	bne.n	800854c <_strtod_l+0x28>
 80085c8:	3a2c      	subs	r2, #44	; 0x2c
 80085ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80085cc:	1c4a      	adds	r2, r1, #1
 80085ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80085d0:	784a      	ldrb	r2, [r1, #1]
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d1bc      	bne.n	8008550 <_strtod_l+0x2c>
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80085da:	2300      	movs	r3, #0
 80085dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80085de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1dd      	bne.n	80085a0 <_strtod_l+0x7c>
 80085e4:	0032      	movs	r2, r6
 80085e6:	003b      	movs	r3, r7
 80085e8:	e7e4      	b.n	80085b4 <_strtod_l+0x90>
 80085ea:	2200      	movs	r2, #0
 80085ec:	e7ed      	b.n	80085ca <_strtod_l+0xa6>
 80085ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d007      	beq.n	8008604 <_strtod_l+0xe0>
 80085f4:	2135      	movs	r1, #53	; 0x35
 80085f6:	a81e      	add	r0, sp, #120	; 0x78
 80085f8:	f7ff ff37 	bl	800846a <__copybits>
 80085fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80085fe:	9804      	ldr	r0, [sp, #16]
 8008600:	f7ff fb00 	bl	8007c04 <_Bfree>
 8008604:	9805      	ldr	r0, [sp, #20]
 8008606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008608:	3801      	subs	r0, #1
 800860a:	2804      	cmp	r0, #4
 800860c:	d806      	bhi.n	800861c <_strtod_l+0xf8>
 800860e:	f7f7 fd83 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008612:	0312      	.short	0x0312
 8008614:	1e1c      	.short	0x1e1c
 8008616:	12          	.byte	0x12
 8008617:	00          	.byte	0x00
 8008618:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800861a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800861c:	05e4      	lsls	r4, r4, #23
 800861e:	d502      	bpl.n	8008626 <_strtod_l+0x102>
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	061b      	lsls	r3, r3, #24
 8008624:	431f      	orrs	r7, r3
 8008626:	4b6a      	ldr	r3, [pc, #424]	; (80087d0 <_strtod_l+0x2ac>)
 8008628:	423b      	tst	r3, r7
 800862a:	d1b6      	bne.n	800859a <_strtod_l+0x76>
 800862c:	f7fe fac4 	bl	8006bb8 <__errno>
 8008630:	2322      	movs	r3, #34	; 0x22
 8008632:	6003      	str	r3, [r0, #0]
 8008634:	e7b1      	b.n	800859a <_strtod_l+0x76>
 8008636:	4967      	ldr	r1, [pc, #412]	; (80087d4 <_strtod_l+0x2b0>)
 8008638:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800863a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800863c:	400a      	ands	r2, r1
 800863e:	4966      	ldr	r1, [pc, #408]	; (80087d8 <_strtod_l+0x2b4>)
 8008640:	185b      	adds	r3, r3, r1
 8008642:	051b      	lsls	r3, r3, #20
 8008644:	431a      	orrs	r2, r3
 8008646:	0017      	movs	r7, r2
 8008648:	e7e8      	b.n	800861c <_strtod_l+0xf8>
 800864a:	4f61      	ldr	r7, [pc, #388]	; (80087d0 <_strtod_l+0x2ac>)
 800864c:	e7e6      	b.n	800861c <_strtod_l+0xf8>
 800864e:	2601      	movs	r6, #1
 8008650:	4f62      	ldr	r7, [pc, #392]	; (80087dc <_strtod_l+0x2b8>)
 8008652:	4276      	negs	r6, r6
 8008654:	e7e2      	b.n	800861c <_strtod_l+0xf8>
 8008656:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	921b      	str	r2, [sp, #108]	; 0x6c
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b30      	cmp	r3, #48	; 0x30
 8008660:	d0f9      	beq.n	8008656 <_strtod_l+0x132>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d099      	beq.n	800859a <_strtod_l+0x76>
 8008666:	2301      	movs	r3, #1
 8008668:	9309      	str	r3, [sp, #36]	; 0x24
 800866a:	2500      	movs	r5, #0
 800866c:	220a      	movs	r2, #10
 800866e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008670:	950d      	str	r5, [sp, #52]	; 0x34
 8008672:	9310      	str	r3, [sp, #64]	; 0x40
 8008674:	9508      	str	r5, [sp, #32]
 8008676:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008678:	7804      	ldrb	r4, [r0, #0]
 800867a:	0023      	movs	r3, r4
 800867c:	3b30      	subs	r3, #48	; 0x30
 800867e:	b2d9      	uxtb	r1, r3
 8008680:	2909      	cmp	r1, #9
 8008682:	d927      	bls.n	80086d4 <_strtod_l+0x1b0>
 8008684:	2201      	movs	r2, #1
 8008686:	4956      	ldr	r1, [pc, #344]	; (80087e0 <_strtod_l+0x2bc>)
 8008688:	f001 f973 	bl	8009972 <strncmp>
 800868c:	2800      	cmp	r0, #0
 800868e:	d031      	beq.n	80086f4 <_strtod_l+0x1d0>
 8008690:	2000      	movs	r0, #0
 8008692:	0023      	movs	r3, r4
 8008694:	4684      	mov	ip, r0
 8008696:	9a08      	ldr	r2, [sp, #32]
 8008698:	900c      	str	r0, [sp, #48]	; 0x30
 800869a:	9205      	str	r2, [sp, #20]
 800869c:	2220      	movs	r2, #32
 800869e:	0019      	movs	r1, r3
 80086a0:	4391      	bics	r1, r2
 80086a2:	000a      	movs	r2, r1
 80086a4:	2100      	movs	r1, #0
 80086a6:	9106      	str	r1, [sp, #24]
 80086a8:	2a45      	cmp	r2, #69	; 0x45
 80086aa:	d000      	beq.n	80086ae <_strtod_l+0x18a>
 80086ac:	e0c2      	b.n	8008834 <_strtod_l+0x310>
 80086ae:	9b05      	ldr	r3, [sp, #20]
 80086b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b2:	4303      	orrs	r3, r0
 80086b4:	4313      	orrs	r3, r2
 80086b6:	428b      	cmp	r3, r1
 80086b8:	d08d      	beq.n	80085d6 <_strtod_l+0xb2>
 80086ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086bc:	9307      	str	r3, [sp, #28]
 80086be:	3301      	adds	r3, #1
 80086c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80086c2:	9b07      	ldr	r3, [sp, #28]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	2b2b      	cmp	r3, #43	; 0x2b
 80086c8:	d071      	beq.n	80087ae <_strtod_l+0x28a>
 80086ca:	000c      	movs	r4, r1
 80086cc:	2b2d      	cmp	r3, #45	; 0x2d
 80086ce:	d174      	bne.n	80087ba <_strtod_l+0x296>
 80086d0:	2401      	movs	r4, #1
 80086d2:	e06d      	b.n	80087b0 <_strtod_l+0x28c>
 80086d4:	9908      	ldr	r1, [sp, #32]
 80086d6:	2908      	cmp	r1, #8
 80086d8:	dc09      	bgt.n	80086ee <_strtod_l+0x1ca>
 80086da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086dc:	4351      	muls	r1, r2
 80086de:	185b      	adds	r3, r3, r1
 80086e0:	930d      	str	r3, [sp, #52]	; 0x34
 80086e2:	9b08      	ldr	r3, [sp, #32]
 80086e4:	3001      	adds	r0, #1
 80086e6:	3301      	adds	r3, #1
 80086e8:	9308      	str	r3, [sp, #32]
 80086ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80086ec:	e7c3      	b.n	8008676 <_strtod_l+0x152>
 80086ee:	4355      	muls	r5, r2
 80086f0:	195d      	adds	r5, r3, r5
 80086f2:	e7f6      	b.n	80086e2 <_strtod_l+0x1be>
 80086f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80086fa:	9a08      	ldr	r2, [sp, #32]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2a00      	cmp	r2, #0
 8008700:	d03a      	beq.n	8008778 <_strtod_l+0x254>
 8008702:	900c      	str	r0, [sp, #48]	; 0x30
 8008704:	9205      	str	r2, [sp, #20]
 8008706:	001a      	movs	r2, r3
 8008708:	3a30      	subs	r2, #48	; 0x30
 800870a:	2a09      	cmp	r2, #9
 800870c:	d912      	bls.n	8008734 <_strtod_l+0x210>
 800870e:	2201      	movs	r2, #1
 8008710:	4694      	mov	ip, r2
 8008712:	e7c3      	b.n	800869c <_strtod_l+0x178>
 8008714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008716:	3001      	adds	r0, #1
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	921b      	str	r2, [sp, #108]	; 0x6c
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	2b30      	cmp	r3, #48	; 0x30
 8008720:	d0f8      	beq.n	8008714 <_strtod_l+0x1f0>
 8008722:	001a      	movs	r2, r3
 8008724:	3a31      	subs	r2, #49	; 0x31
 8008726:	2a08      	cmp	r2, #8
 8008728:	d83c      	bhi.n	80087a4 <_strtod_l+0x280>
 800872a:	900c      	str	r0, [sp, #48]	; 0x30
 800872c:	2000      	movs	r0, #0
 800872e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008730:	9005      	str	r0, [sp, #20]
 8008732:	9210      	str	r2, [sp, #64]	; 0x40
 8008734:	001a      	movs	r2, r3
 8008736:	1c41      	adds	r1, r0, #1
 8008738:	3a30      	subs	r2, #48	; 0x30
 800873a:	2b30      	cmp	r3, #48	; 0x30
 800873c:	d016      	beq.n	800876c <_strtod_l+0x248>
 800873e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008740:	185b      	adds	r3, r3, r1
 8008742:	930c      	str	r3, [sp, #48]	; 0x30
 8008744:	9b05      	ldr	r3, [sp, #20]
 8008746:	210a      	movs	r1, #10
 8008748:	469c      	mov	ip, r3
 800874a:	4484      	add	ip, r0
 800874c:	4563      	cmp	r3, ip
 800874e:	d115      	bne.n	800877c <_strtod_l+0x258>
 8008750:	9905      	ldr	r1, [sp, #20]
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	3101      	adds	r1, #1
 8008756:	1809      	adds	r1, r1, r0
 8008758:	181b      	adds	r3, r3, r0
 800875a:	9105      	str	r1, [sp, #20]
 800875c:	2b08      	cmp	r3, #8
 800875e:	dc19      	bgt.n	8008794 <_strtod_l+0x270>
 8008760:	230a      	movs	r3, #10
 8008762:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008764:	434b      	muls	r3, r1
 8008766:	2100      	movs	r1, #0
 8008768:	18d3      	adds	r3, r2, r3
 800876a:	930d      	str	r3, [sp, #52]	; 0x34
 800876c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800876e:	0008      	movs	r0, r1
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	921b      	str	r2, [sp, #108]	; 0x6c
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	e7c6      	b.n	8008706 <_strtod_l+0x1e2>
 8008778:	9808      	ldr	r0, [sp, #32]
 800877a:	e7d0      	b.n	800871e <_strtod_l+0x1fa>
 800877c:	1c5c      	adds	r4, r3, #1
 800877e:	2b08      	cmp	r3, #8
 8008780:	dc04      	bgt.n	800878c <_strtod_l+0x268>
 8008782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008784:	434b      	muls	r3, r1
 8008786:	930d      	str	r3, [sp, #52]	; 0x34
 8008788:	0023      	movs	r3, r4
 800878a:	e7df      	b.n	800874c <_strtod_l+0x228>
 800878c:	2c10      	cmp	r4, #16
 800878e:	dcfb      	bgt.n	8008788 <_strtod_l+0x264>
 8008790:	434d      	muls	r5, r1
 8008792:	e7f9      	b.n	8008788 <_strtod_l+0x264>
 8008794:	9b05      	ldr	r3, [sp, #20]
 8008796:	2100      	movs	r1, #0
 8008798:	2b10      	cmp	r3, #16
 800879a:	dce7      	bgt.n	800876c <_strtod_l+0x248>
 800879c:	230a      	movs	r3, #10
 800879e:	435d      	muls	r5, r3
 80087a0:	1955      	adds	r5, r2, r5
 80087a2:	e7e3      	b.n	800876c <_strtod_l+0x248>
 80087a4:	2200      	movs	r2, #0
 80087a6:	920c      	str	r2, [sp, #48]	; 0x30
 80087a8:	9205      	str	r2, [sp, #20]
 80087aa:	3201      	adds	r2, #1
 80087ac:	e7b0      	b.n	8008710 <_strtod_l+0x1ec>
 80087ae:	2400      	movs	r4, #0
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	3302      	adds	r3, #2
 80087b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80087b6:	9b07      	ldr	r3, [sp, #28]
 80087b8:	789b      	ldrb	r3, [r3, #2]
 80087ba:	001a      	movs	r2, r3
 80087bc:	3a30      	subs	r2, #48	; 0x30
 80087be:	2a09      	cmp	r2, #9
 80087c0:	d914      	bls.n	80087ec <_strtod_l+0x2c8>
 80087c2:	9a07      	ldr	r2, [sp, #28]
 80087c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80087c6:	2200      	movs	r2, #0
 80087c8:	e033      	b.n	8008832 <_strtod_l+0x30e>
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	0800a800 	.word	0x0800a800
 80087d0:	7ff00000 	.word	0x7ff00000
 80087d4:	ffefffff 	.word	0xffefffff
 80087d8:	00000433 	.word	0x00000433
 80087dc:	7fffffff 	.word	0x7fffffff
 80087e0:	0800a7fc 	.word	0x0800a7fc
 80087e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d0f9      	beq.n	80087e4 <_strtod_l+0x2c0>
 80087f0:	2200      	movs	r2, #0
 80087f2:	9206      	str	r2, [sp, #24]
 80087f4:	001a      	movs	r2, r3
 80087f6:	3a31      	subs	r2, #49	; 0x31
 80087f8:	2a08      	cmp	r2, #8
 80087fa:	d81b      	bhi.n	8008834 <_strtod_l+0x310>
 80087fc:	3b30      	subs	r3, #48	; 0x30
 80087fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008800:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008802:	9306      	str	r3, [sp, #24]
 8008804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008806:	1c59      	adds	r1, r3, #1
 8008808:	911b      	str	r1, [sp, #108]	; 0x6c
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	001a      	movs	r2, r3
 800880e:	3a30      	subs	r2, #48	; 0x30
 8008810:	2a09      	cmp	r2, #9
 8008812:	d93a      	bls.n	800888a <_strtod_l+0x366>
 8008814:	9a06      	ldr	r2, [sp, #24]
 8008816:	1a8a      	subs	r2, r1, r2
 8008818:	49b2      	ldr	r1, [pc, #712]	; (8008ae4 <_strtod_l+0x5c0>)
 800881a:	9106      	str	r1, [sp, #24]
 800881c:	2a08      	cmp	r2, #8
 800881e:	dc04      	bgt.n	800882a <_strtod_l+0x306>
 8008820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008822:	9206      	str	r2, [sp, #24]
 8008824:	428a      	cmp	r2, r1
 8008826:	dd00      	ble.n	800882a <_strtod_l+0x306>
 8008828:	9106      	str	r1, [sp, #24]
 800882a:	2c00      	cmp	r4, #0
 800882c:	d002      	beq.n	8008834 <_strtod_l+0x310>
 800882e:	9a06      	ldr	r2, [sp, #24]
 8008830:	4252      	negs	r2, r2
 8008832:	9206      	str	r2, [sp, #24]
 8008834:	9a05      	ldr	r2, [sp, #20]
 8008836:	2a00      	cmp	r2, #0
 8008838:	d14d      	bne.n	80088d6 <_strtod_l+0x3b2>
 800883a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800883c:	4310      	orrs	r0, r2
 800883e:	d000      	beq.n	8008842 <_strtod_l+0x31e>
 8008840:	e6ab      	b.n	800859a <_strtod_l+0x76>
 8008842:	4662      	mov	r2, ip
 8008844:	2a00      	cmp	r2, #0
 8008846:	d000      	beq.n	800884a <_strtod_l+0x326>
 8008848:	e6c5      	b.n	80085d6 <_strtod_l+0xb2>
 800884a:	2b69      	cmp	r3, #105	; 0x69
 800884c:	d027      	beq.n	800889e <_strtod_l+0x37a>
 800884e:	dc23      	bgt.n	8008898 <_strtod_l+0x374>
 8008850:	2b49      	cmp	r3, #73	; 0x49
 8008852:	d024      	beq.n	800889e <_strtod_l+0x37a>
 8008854:	2b4e      	cmp	r3, #78	; 0x4e
 8008856:	d000      	beq.n	800885a <_strtod_l+0x336>
 8008858:	e6bd      	b.n	80085d6 <_strtod_l+0xb2>
 800885a:	49a3      	ldr	r1, [pc, #652]	; (8008ae8 <_strtod_l+0x5c4>)
 800885c:	a81b      	add	r0, sp, #108	; 0x6c
 800885e:	f001 fba7 	bl	8009fb0 <__match>
 8008862:	2800      	cmp	r0, #0
 8008864:	d100      	bne.n	8008868 <_strtod_l+0x344>
 8008866:	e6b6      	b.n	80085d6 <_strtod_l+0xb2>
 8008868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b28      	cmp	r3, #40	; 0x28
 800886e:	d12c      	bne.n	80088ca <_strtod_l+0x3a6>
 8008870:	499e      	ldr	r1, [pc, #632]	; (8008aec <_strtod_l+0x5c8>)
 8008872:	aa1e      	add	r2, sp, #120	; 0x78
 8008874:	a81b      	add	r0, sp, #108	; 0x6c
 8008876:	f001 fbaf 	bl	8009fd8 <__hexnan>
 800887a:	2805      	cmp	r0, #5
 800887c:	d125      	bne.n	80088ca <_strtod_l+0x3a6>
 800887e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008880:	4a9b      	ldr	r2, [pc, #620]	; (8008af0 <_strtod_l+0x5cc>)
 8008882:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008884:	431a      	orrs	r2, r3
 8008886:	0017      	movs	r7, r2
 8008888:	e687      	b.n	800859a <_strtod_l+0x76>
 800888a:	220a      	movs	r2, #10
 800888c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800888e:	434a      	muls	r2, r1
 8008890:	18d2      	adds	r2, r2, r3
 8008892:	3a30      	subs	r2, #48	; 0x30
 8008894:	920e      	str	r2, [sp, #56]	; 0x38
 8008896:	e7b5      	b.n	8008804 <_strtod_l+0x2e0>
 8008898:	2b6e      	cmp	r3, #110	; 0x6e
 800889a:	d0de      	beq.n	800885a <_strtod_l+0x336>
 800889c:	e69b      	b.n	80085d6 <_strtod_l+0xb2>
 800889e:	4995      	ldr	r1, [pc, #596]	; (8008af4 <_strtod_l+0x5d0>)
 80088a0:	a81b      	add	r0, sp, #108	; 0x6c
 80088a2:	f001 fb85 	bl	8009fb0 <__match>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d100      	bne.n	80088ac <_strtod_l+0x388>
 80088aa:	e694      	b.n	80085d6 <_strtod_l+0xb2>
 80088ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088ae:	4992      	ldr	r1, [pc, #584]	; (8008af8 <_strtod_l+0x5d4>)
 80088b0:	3b01      	subs	r3, #1
 80088b2:	a81b      	add	r0, sp, #108	; 0x6c
 80088b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80088b6:	f001 fb7b 	bl	8009fb0 <__match>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d102      	bne.n	80088c4 <_strtod_l+0x3a0>
 80088be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088c0:	3301      	adds	r3, #1
 80088c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80088c4:	2600      	movs	r6, #0
 80088c6:	4f8a      	ldr	r7, [pc, #552]	; (8008af0 <_strtod_l+0x5cc>)
 80088c8:	e667      	b.n	800859a <_strtod_l+0x76>
 80088ca:	488c      	ldr	r0, [pc, #560]	; (8008afc <_strtod_l+0x5d8>)
 80088cc:	f001 f87e 	bl	80099cc <nan>
 80088d0:	0006      	movs	r6, r0
 80088d2:	000f      	movs	r7, r1
 80088d4:	e661      	b.n	800859a <_strtod_l+0x76>
 80088d6:	9b06      	ldr	r3, [sp, #24]
 80088d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	9309      	str	r3, [sp, #36]	; 0x24
 80088de:	9b08      	ldr	r3, [sp, #32]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <_strtod_l+0x3c4>
 80088e4:	9b05      	ldr	r3, [sp, #20]
 80088e6:	9308      	str	r3, [sp, #32]
 80088e8:	9c05      	ldr	r4, [sp, #20]
 80088ea:	2c10      	cmp	r4, #16
 80088ec:	dd00      	ble.n	80088f0 <_strtod_l+0x3cc>
 80088ee:	2410      	movs	r4, #16
 80088f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80088f2:	f7f9 fd85 	bl	8002400 <__aeabi_ui2d>
 80088f6:	9b05      	ldr	r3, [sp, #20]
 80088f8:	0006      	movs	r6, r0
 80088fa:	000f      	movs	r7, r1
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	dd15      	ble.n	800892c <_strtod_l+0x408>
 8008900:	0022      	movs	r2, r4
 8008902:	4b7f      	ldr	r3, [pc, #508]	; (8008b00 <_strtod_l+0x5dc>)
 8008904:	3a09      	subs	r2, #9
 8008906:	00d2      	lsls	r2, r2, #3
 8008908:	189b      	adds	r3, r3, r2
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f7f8 feaf 	bl	8001670 <__aeabi_dmul>
 8008912:	0006      	movs	r6, r0
 8008914:	0028      	movs	r0, r5
 8008916:	000f      	movs	r7, r1
 8008918:	f7f9 fd72 	bl	8002400 <__aeabi_ui2d>
 800891c:	0002      	movs	r2, r0
 800891e:	000b      	movs	r3, r1
 8008920:	0030      	movs	r0, r6
 8008922:	0039      	movs	r1, r7
 8008924:	f7f7 ff4a 	bl	80007bc <__aeabi_dadd>
 8008928:	0006      	movs	r6, r0
 800892a:	000f      	movs	r7, r1
 800892c:	9b05      	ldr	r3, [sp, #20]
 800892e:	2b0f      	cmp	r3, #15
 8008930:	dc39      	bgt.n	80089a6 <_strtod_l+0x482>
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d100      	bne.n	800893a <_strtod_l+0x416>
 8008938:	e62f      	b.n	800859a <_strtod_l+0x76>
 800893a:	dd24      	ble.n	8008986 <_strtod_l+0x462>
 800893c:	2b16      	cmp	r3, #22
 800893e:	dc09      	bgt.n	8008954 <_strtod_l+0x430>
 8008940:	496f      	ldr	r1, [pc, #444]	; (8008b00 <_strtod_l+0x5dc>)
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	18c9      	adds	r1, r1, r3
 8008946:	0032      	movs	r2, r6
 8008948:	6808      	ldr	r0, [r1, #0]
 800894a:	6849      	ldr	r1, [r1, #4]
 800894c:	003b      	movs	r3, r7
 800894e:	f7f8 fe8f 	bl	8001670 <__aeabi_dmul>
 8008952:	e7bd      	b.n	80088d0 <_strtod_l+0x3ac>
 8008954:	2325      	movs	r3, #37	; 0x25
 8008956:	9a05      	ldr	r2, [sp, #20]
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800895c:	4293      	cmp	r3, r2
 800895e:	db22      	blt.n	80089a6 <_strtod_l+0x482>
 8008960:	240f      	movs	r4, #15
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	4d66      	ldr	r5, [pc, #408]	; (8008b00 <_strtod_l+0x5dc>)
 8008966:	1ae4      	subs	r4, r4, r3
 8008968:	00e1      	lsls	r1, r4, #3
 800896a:	1869      	adds	r1, r5, r1
 800896c:	0032      	movs	r2, r6
 800896e:	6808      	ldr	r0, [r1, #0]
 8008970:	6849      	ldr	r1, [r1, #4]
 8008972:	003b      	movs	r3, r7
 8008974:	f7f8 fe7c 	bl	8001670 <__aeabi_dmul>
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	1b1c      	subs	r4, r3, r4
 800897c:	00e4      	lsls	r4, r4, #3
 800897e:	192d      	adds	r5, r5, r4
 8008980:	682a      	ldr	r2, [r5, #0]
 8008982:	686b      	ldr	r3, [r5, #4]
 8008984:	e7e3      	b.n	800894e <_strtod_l+0x42a>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	3316      	adds	r3, #22
 800898a:	db0c      	blt.n	80089a6 <_strtod_l+0x482>
 800898c:	9906      	ldr	r1, [sp, #24]
 800898e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008990:	4b5b      	ldr	r3, [pc, #364]	; (8008b00 <_strtod_l+0x5dc>)
 8008992:	1a52      	subs	r2, r2, r1
 8008994:	00d2      	lsls	r2, r2, #3
 8008996:	189b      	adds	r3, r3, r2
 8008998:	0030      	movs	r0, r6
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	0039      	movs	r1, r7
 80089a0:	f7f8 fa6c 	bl	8000e7c <__aeabi_ddiv>
 80089a4:	e794      	b.n	80088d0 <_strtod_l+0x3ac>
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	1b1c      	subs	r4, r3, r4
 80089aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ac:	18e4      	adds	r4, r4, r3
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	dd72      	ble.n	8008a98 <_strtod_l+0x574>
 80089b2:	220f      	movs	r2, #15
 80089b4:	0023      	movs	r3, r4
 80089b6:	4013      	ands	r3, r2
 80089b8:	4214      	tst	r4, r2
 80089ba:	d00a      	beq.n	80089d2 <_strtod_l+0x4ae>
 80089bc:	4950      	ldr	r1, [pc, #320]	; (8008b00 <_strtod_l+0x5dc>)
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	18c9      	adds	r1, r1, r3
 80089c2:	0032      	movs	r2, r6
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	6849      	ldr	r1, [r1, #4]
 80089c8:	003b      	movs	r3, r7
 80089ca:	f7f8 fe51 	bl	8001670 <__aeabi_dmul>
 80089ce:	0006      	movs	r6, r0
 80089d0:	000f      	movs	r7, r1
 80089d2:	230f      	movs	r3, #15
 80089d4:	439c      	bics	r4, r3
 80089d6:	d04a      	beq.n	8008a6e <_strtod_l+0x54a>
 80089d8:	3326      	adds	r3, #38	; 0x26
 80089da:	33ff      	adds	r3, #255	; 0xff
 80089dc:	429c      	cmp	r4, r3
 80089de:	dd22      	ble.n	8008a26 <_strtod_l+0x502>
 80089e0:	2300      	movs	r3, #0
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	9306      	str	r3, [sp, #24]
 80089e6:	930d      	str	r3, [sp, #52]	; 0x34
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	2322      	movs	r3, #34	; 0x22
 80089ec:	2600      	movs	r6, #0
 80089ee:	9a04      	ldr	r2, [sp, #16]
 80089f0:	4f3f      	ldr	r7, [pc, #252]	; (8008af0 <_strtod_l+0x5cc>)
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f6:	42b3      	cmp	r3, r6
 80089f8:	d100      	bne.n	80089fc <_strtod_l+0x4d8>
 80089fa:	e5ce      	b.n	800859a <_strtod_l+0x76>
 80089fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089fe:	9804      	ldr	r0, [sp, #16]
 8008a00:	f7ff f900 	bl	8007c04 <_Bfree>
 8008a04:	9908      	ldr	r1, [sp, #32]
 8008a06:	9804      	ldr	r0, [sp, #16]
 8008a08:	f7ff f8fc 	bl	8007c04 <_Bfree>
 8008a0c:	9906      	ldr	r1, [sp, #24]
 8008a0e:	9804      	ldr	r0, [sp, #16]
 8008a10:	f7ff f8f8 	bl	8007c04 <_Bfree>
 8008a14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a16:	9804      	ldr	r0, [sp, #16]
 8008a18:	f7ff f8f4 	bl	8007c04 <_Bfree>
 8008a1c:	9905      	ldr	r1, [sp, #20]
 8008a1e:	9804      	ldr	r0, [sp, #16]
 8008a20:	f7ff f8f0 	bl	8007c04 <_Bfree>
 8008a24:	e5b9      	b.n	800859a <_strtod_l+0x76>
 8008a26:	2300      	movs	r3, #0
 8008a28:	0030      	movs	r0, r6
 8008a2a:	0039      	movs	r1, r7
 8008a2c:	4d35      	ldr	r5, [pc, #212]	; (8008b04 <_strtod_l+0x5e0>)
 8008a2e:	1124      	asrs	r4, r4, #4
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	2c01      	cmp	r4, #1
 8008a34:	dc1e      	bgt.n	8008a74 <_strtod_l+0x550>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <_strtod_l+0x51a>
 8008a3a:	0006      	movs	r6, r0
 8008a3c:	000f      	movs	r7, r1
 8008a3e:	4b32      	ldr	r3, [pc, #200]	; (8008b08 <_strtod_l+0x5e4>)
 8008a40:	9a07      	ldr	r2, [sp, #28]
 8008a42:	18ff      	adds	r7, r7, r3
 8008a44:	4b2f      	ldr	r3, [pc, #188]	; (8008b04 <_strtod_l+0x5e0>)
 8008a46:	00d2      	lsls	r2, r2, #3
 8008a48:	189d      	adds	r5, r3, r2
 8008a4a:	6828      	ldr	r0, [r5, #0]
 8008a4c:	6869      	ldr	r1, [r5, #4]
 8008a4e:	0032      	movs	r2, r6
 8008a50:	003b      	movs	r3, r7
 8008a52:	f7f8 fe0d 	bl	8001670 <__aeabi_dmul>
 8008a56:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <_strtod_l+0x5cc>)
 8008a58:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <_strtod_l+0x5e8>)
 8008a5a:	0006      	movs	r6, r0
 8008a5c:	400b      	ands	r3, r1
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d8be      	bhi.n	80089e0 <_strtod_l+0x4bc>
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <_strtod_l+0x5ec>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d913      	bls.n	8008a90 <_strtod_l+0x56c>
 8008a68:	2601      	movs	r6, #1
 8008a6a:	4f2a      	ldr	r7, [pc, #168]	; (8008b14 <_strtod_l+0x5f0>)
 8008a6c:	4276      	negs	r6, r6
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	e088      	b.n	8008b86 <_strtod_l+0x662>
 8008a74:	2201      	movs	r2, #1
 8008a76:	4214      	tst	r4, r2
 8008a78:	d004      	beq.n	8008a84 <_strtod_l+0x560>
 8008a7a:	682a      	ldr	r2, [r5, #0]
 8008a7c:	686b      	ldr	r3, [r5, #4]
 8008a7e:	f7f8 fdf7 	bl	8001670 <__aeabi_dmul>
 8008a82:	2301      	movs	r3, #1
 8008a84:	9a07      	ldr	r2, [sp, #28]
 8008a86:	1064      	asrs	r4, r4, #1
 8008a88:	3201      	adds	r2, #1
 8008a8a:	9207      	str	r2, [sp, #28]
 8008a8c:	3508      	adds	r5, #8
 8008a8e:	e7d0      	b.n	8008a32 <_strtod_l+0x50e>
 8008a90:	23d4      	movs	r3, #212	; 0xd4
 8008a92:	049b      	lsls	r3, r3, #18
 8008a94:	18cf      	adds	r7, r1, r3
 8008a96:	e7ea      	b.n	8008a6e <_strtod_l+0x54a>
 8008a98:	2c00      	cmp	r4, #0
 8008a9a:	d0e8      	beq.n	8008a6e <_strtod_l+0x54a>
 8008a9c:	4264      	negs	r4, r4
 8008a9e:	230f      	movs	r3, #15
 8008aa0:	0022      	movs	r2, r4
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	421c      	tst	r4, r3
 8008aa6:	d00a      	beq.n	8008abe <_strtod_l+0x59a>
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <_strtod_l+0x5dc>)
 8008aaa:	00d2      	lsls	r2, r2, #3
 8008aac:	189b      	adds	r3, r3, r2
 8008aae:	0030      	movs	r0, r6
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0039      	movs	r1, r7
 8008ab6:	f7f8 f9e1 	bl	8000e7c <__aeabi_ddiv>
 8008aba:	0006      	movs	r6, r0
 8008abc:	000f      	movs	r7, r1
 8008abe:	1124      	asrs	r4, r4, #4
 8008ac0:	d0d5      	beq.n	8008a6e <_strtod_l+0x54a>
 8008ac2:	2c1f      	cmp	r4, #31
 8008ac4:	dd28      	ble.n	8008b18 <_strtod_l+0x5f4>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9305      	str	r3, [sp, #20]
 8008aca:	9306      	str	r3, [sp, #24]
 8008acc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ace:	9308      	str	r3, [sp, #32]
 8008ad0:	2322      	movs	r3, #34	; 0x22
 8008ad2:	9a04      	ldr	r2, [sp, #16]
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ada:	2700      	movs	r7, #0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d18d      	bne.n	80089fc <_strtod_l+0x4d8>
 8008ae0:	e55b      	b.n	800859a <_strtod_l+0x76>
 8008ae2:	46c0      	nop			; (mov r8, r8)
 8008ae4:	00004e1f 	.word	0x00004e1f
 8008ae8:	0800a5ee 	.word	0x0800a5ee
 8008aec:	0800a814 	.word	0x0800a814
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	0800a5e6 	.word	0x0800a5e6
 8008af8:	0800a61d 	.word	0x0800a61d
 8008afc:	0800a8a4 	.word	0x0800a8a4
 8008b00:	0800a728 	.word	0x0800a728
 8008b04:	0800a700 	.word	0x0800a700
 8008b08:	fcb00000 	.word	0xfcb00000
 8008b0c:	7ca00000 	.word	0x7ca00000
 8008b10:	7c900000 	.word	0x7c900000
 8008b14:	7fefffff 	.word	0x7fefffff
 8008b18:	2310      	movs	r3, #16
 8008b1a:	0022      	movs	r2, r4
 8008b1c:	401a      	ands	r2, r3
 8008b1e:	9207      	str	r2, [sp, #28]
 8008b20:	421c      	tst	r4, r3
 8008b22:	d001      	beq.n	8008b28 <_strtod_l+0x604>
 8008b24:	335a      	adds	r3, #90	; 0x5a
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	0030      	movs	r0, r6
 8008b2a:	0039      	movs	r1, r7
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4dc4      	ldr	r5, [pc, #784]	; (8008e40 <_strtod_l+0x91c>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	4214      	tst	r4, r2
 8008b34:	d004      	beq.n	8008b40 <_strtod_l+0x61c>
 8008b36:	682a      	ldr	r2, [r5, #0]
 8008b38:	686b      	ldr	r3, [r5, #4]
 8008b3a:	f7f8 fd99 	bl	8001670 <__aeabi_dmul>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	1064      	asrs	r4, r4, #1
 8008b42:	3508      	adds	r5, #8
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	d1f3      	bne.n	8008b30 <_strtod_l+0x60c>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <_strtod_l+0x62c>
 8008b4c:	0006      	movs	r6, r0
 8008b4e:	000f      	movs	r7, r1
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00f      	beq.n	8008b76 <_strtod_l+0x652>
 8008b56:	236b      	movs	r3, #107	; 0x6b
 8008b58:	007a      	lsls	r2, r7, #1
 8008b5a:	0d52      	lsrs	r2, r2, #21
 8008b5c:	0039      	movs	r1, r7
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dd08      	ble.n	8008b76 <_strtod_l+0x652>
 8008b64:	2b1f      	cmp	r3, #31
 8008b66:	dc00      	bgt.n	8008b6a <_strtod_l+0x646>
 8008b68:	e121      	b.n	8008dae <_strtod_l+0x88a>
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	2b34      	cmp	r3, #52	; 0x34
 8008b6e:	dc00      	bgt.n	8008b72 <_strtod_l+0x64e>
 8008b70:	e116      	b.n	8008da0 <_strtod_l+0x87c>
 8008b72:	27dc      	movs	r7, #220	; 0xdc
 8008b74:	04bf      	lsls	r7, r7, #18
 8008b76:	2200      	movs	r2, #0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	0030      	movs	r0, r6
 8008b7c:	0039      	movs	r1, r7
 8008b7e:	f7f7 fc65 	bl	800044c <__aeabi_dcmpeq>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d19f      	bne.n	8008ac6 <_strtod_l+0x5a2>
 8008b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b88:	9a08      	ldr	r2, [sp, #32]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	9804      	ldr	r0, [sp, #16]
 8008b92:	f7ff f89f 	bl	8007cd4 <__s2b>
 8008b96:	900d      	str	r0, [sp, #52]	; 0x34
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d100      	bne.n	8008b9e <_strtod_l+0x67a>
 8008b9c:	e720      	b.n	80089e0 <_strtod_l+0x4bc>
 8008b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba0:	9906      	ldr	r1, [sp, #24]
 8008ba2:	17da      	asrs	r2, r3, #31
 8008ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ba6:	1a5b      	subs	r3, r3, r1
 8008ba8:	401a      	ands	r2, r3
 8008baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bac:	9215      	str	r2, [sp, #84]	; 0x54
 8008bae:	43db      	mvns	r3, r3
 8008bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb2:	17db      	asrs	r3, r3, #31
 8008bb4:	401a      	ands	r2, r3
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9218      	str	r2, [sp, #96]	; 0x60
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc0:	9804      	ldr	r0, [sp, #16]
 8008bc2:	6859      	ldr	r1, [r3, #4]
 8008bc4:	f7fe ffda 	bl	8007b7c <_Balloc>
 8008bc8:	9008      	str	r0, [sp, #32]
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d100      	bne.n	8008bd0 <_strtod_l+0x6ac>
 8008bce:	e70c      	b.n	80089ea <_strtod_l+0x4c6>
 8008bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bd2:	300c      	adds	r0, #12
 8008bd4:	0019      	movs	r1, r3
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	310c      	adds	r1, #12
 8008bda:	3202      	adds	r2, #2
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	f000 feeb 	bl	80099b8 <memcpy>
 8008be2:	ab1e      	add	r3, sp, #120	; 0x78
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	ab1d      	add	r3, sp, #116	; 0x74
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	0032      	movs	r2, r6
 8008bec:	003b      	movs	r3, r7
 8008bee:	9804      	ldr	r0, [sp, #16]
 8008bf0:	9610      	str	r6, [sp, #64]	; 0x40
 8008bf2:	9711      	str	r7, [sp, #68]	; 0x44
 8008bf4:	f7ff fbb0 	bl	8008358 <__d2b>
 8008bf8:	901c      	str	r0, [sp, #112]	; 0x70
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d100      	bne.n	8008c00 <_strtod_l+0x6dc>
 8008bfe:	e6f4      	b.n	80089ea <_strtod_l+0x4c6>
 8008c00:	2101      	movs	r1, #1
 8008c02:	9804      	ldr	r0, [sp, #16]
 8008c04:	f7ff f8fa 	bl	8007dfc <__i2b>
 8008c08:	9006      	str	r0, [sp, #24]
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	d100      	bne.n	8008c10 <_strtod_l+0x6ec>
 8008c0e:	e6ec      	b.n	80089ea <_strtod_l+0x4c6>
 8008c10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c14:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008c16:	1ad4      	subs	r4, r2, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db01      	blt.n	8008c20 <_strtod_l+0x6fc>
 8008c1c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008c1e:	195d      	adds	r5, r3, r5
 8008c20:	9907      	ldr	r1, [sp, #28]
 8008c22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c24:	1a5b      	subs	r3, r3, r1
 8008c26:	2136      	movs	r1, #54	; 0x36
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	1a8a      	subs	r2, r1, r2
 8008c2c:	4985      	ldr	r1, [pc, #532]	; (8008e44 <_strtod_l+0x920>)
 8008c2e:	2001      	movs	r0, #1
 8008c30:	468c      	mov	ip, r1
 8008c32:	2100      	movs	r1, #0
 8008c34:	3b01      	subs	r3, #1
 8008c36:	9114      	str	r1, [sp, #80]	; 0x50
 8008c38:	9012      	str	r0, [sp, #72]	; 0x48
 8008c3a:	4563      	cmp	r3, ip
 8008c3c:	da07      	bge.n	8008c4e <_strtod_l+0x72a>
 8008c3e:	4661      	mov	r1, ip
 8008c40:	1ac9      	subs	r1, r1, r3
 8008c42:	1a52      	subs	r2, r2, r1
 8008c44:	291f      	cmp	r1, #31
 8008c46:	dd00      	ble.n	8008c4a <_strtod_l+0x726>
 8008c48:	e0b6      	b.n	8008db8 <_strtod_l+0x894>
 8008c4a:	4088      	lsls	r0, r1
 8008c4c:	9012      	str	r0, [sp, #72]	; 0x48
 8008c4e:	18ab      	adds	r3, r5, r2
 8008c50:	930c      	str	r3, [sp, #48]	; 0x30
 8008c52:	18a4      	adds	r4, r4, r2
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c58:	191c      	adds	r4, r3, r4
 8008c5a:	002b      	movs	r3, r5
 8008c5c:	4295      	cmp	r5, r2
 8008c5e:	dd00      	ble.n	8008c62 <_strtod_l+0x73e>
 8008c60:	0013      	movs	r3, r2
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	dd00      	ble.n	8008c68 <_strtod_l+0x744>
 8008c66:	0023      	movs	r3, r4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dd04      	ble.n	8008c76 <_strtod_l+0x752>
 8008c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c6e:	1ae4      	subs	r4, r4, r3
 8008c70:	1ad2      	subs	r2, r2, r3
 8008c72:	920c      	str	r2, [sp, #48]	; 0x30
 8008c74:	1aed      	subs	r5, r5, r3
 8008c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	dd17      	ble.n	8008cac <_strtod_l+0x788>
 8008c7c:	001a      	movs	r2, r3
 8008c7e:	9906      	ldr	r1, [sp, #24]
 8008c80:	9804      	ldr	r0, [sp, #16]
 8008c82:	f7ff f983 	bl	8007f8c <__pow5mult>
 8008c86:	9006      	str	r0, [sp, #24]
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d100      	bne.n	8008c8e <_strtod_l+0x76a>
 8008c8c:	e6ad      	b.n	80089ea <_strtod_l+0x4c6>
 8008c8e:	0001      	movs	r1, r0
 8008c90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c92:	9804      	ldr	r0, [sp, #16]
 8008c94:	f7ff f8ca 	bl	8007e2c <__multiply>
 8008c98:	900e      	str	r0, [sp, #56]	; 0x38
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d100      	bne.n	8008ca0 <_strtod_l+0x77c>
 8008c9e:	e6a4      	b.n	80089ea <_strtod_l+0x4c6>
 8008ca0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ca2:	9804      	ldr	r0, [sp, #16]
 8008ca4:	f7fe ffae 	bl	8007c04 <_Bfree>
 8008ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008caa:	931c      	str	r3, [sp, #112]	; 0x70
 8008cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd00      	ble.n	8008cb4 <_strtod_l+0x790>
 8008cb2:	e087      	b.n	8008dc4 <_strtod_l+0x8a0>
 8008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dd08      	ble.n	8008ccc <_strtod_l+0x7a8>
 8008cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cbc:	9908      	ldr	r1, [sp, #32]
 8008cbe:	9804      	ldr	r0, [sp, #16]
 8008cc0:	f7ff f964 	bl	8007f8c <__pow5mult>
 8008cc4:	9008      	str	r0, [sp, #32]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d100      	bne.n	8008ccc <_strtod_l+0x7a8>
 8008cca:	e68e      	b.n	80089ea <_strtod_l+0x4c6>
 8008ccc:	2c00      	cmp	r4, #0
 8008cce:	dd08      	ble.n	8008ce2 <_strtod_l+0x7be>
 8008cd0:	0022      	movs	r2, r4
 8008cd2:	9908      	ldr	r1, [sp, #32]
 8008cd4:	9804      	ldr	r0, [sp, #16]
 8008cd6:	f7ff f9b5 	bl	8008044 <__lshift>
 8008cda:	9008      	str	r0, [sp, #32]
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d100      	bne.n	8008ce2 <_strtod_l+0x7be>
 8008ce0:	e683      	b.n	80089ea <_strtod_l+0x4c6>
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	dd08      	ble.n	8008cf8 <_strtod_l+0x7d4>
 8008ce6:	002a      	movs	r2, r5
 8008ce8:	9906      	ldr	r1, [sp, #24]
 8008cea:	9804      	ldr	r0, [sp, #16]
 8008cec:	f7ff f9aa 	bl	8008044 <__lshift>
 8008cf0:	9006      	str	r0, [sp, #24]
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d100      	bne.n	8008cf8 <_strtod_l+0x7d4>
 8008cf6:	e678      	b.n	80089ea <_strtod_l+0x4c6>
 8008cf8:	9a08      	ldr	r2, [sp, #32]
 8008cfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008cfc:	9804      	ldr	r0, [sp, #16]
 8008cfe:	f7ff fa2b 	bl	8008158 <__mdiff>
 8008d02:	9005      	str	r0, [sp, #20]
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d100      	bne.n	8008d0a <_strtod_l+0x7e6>
 8008d08:	e66f      	b.n	80089ea <_strtod_l+0x4c6>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	68c3      	ldr	r3, [r0, #12]
 8008d0e:	9906      	ldr	r1, [sp, #24]
 8008d10:	60c2      	str	r2, [r0, #12]
 8008d12:	930c      	str	r3, [sp, #48]	; 0x30
 8008d14:	f7ff fa04 	bl	8008120 <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	da5d      	bge.n	8008dd8 <_strtod_l+0x8b4>
 8008d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d1e:	4333      	orrs	r3, r6
 8008d20:	d000      	beq.n	8008d24 <_strtod_l+0x800>
 8008d22:	e088      	b.n	8008e36 <_strtod_l+0x912>
 8008d24:	033b      	lsls	r3, r7, #12
 8008d26:	d000      	beq.n	8008d2a <_strtod_l+0x806>
 8008d28:	e085      	b.n	8008e36 <_strtod_l+0x912>
 8008d2a:	22d6      	movs	r2, #214	; 0xd6
 8008d2c:	4b46      	ldr	r3, [pc, #280]	; (8008e48 <_strtod_l+0x924>)
 8008d2e:	04d2      	lsls	r2, r2, #19
 8008d30:	403b      	ands	r3, r7
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d97f      	bls.n	8008e36 <_strtod_l+0x912>
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <_strtod_l+0x822>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	dd77      	ble.n	8008e36 <_strtod_l+0x912>
 8008d46:	9905      	ldr	r1, [sp, #20]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	9804      	ldr	r0, [sp, #16]
 8008d4c:	f7ff f97a 	bl	8008044 <__lshift>
 8008d50:	9906      	ldr	r1, [sp, #24]
 8008d52:	9005      	str	r0, [sp, #20]
 8008d54:	f7ff f9e4 	bl	8008120 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dd6c      	ble.n	8008e36 <_strtod_l+0x912>
 8008d5c:	9907      	ldr	r1, [sp, #28]
 8008d5e:	003b      	movs	r3, r7
 8008d60:	4a39      	ldr	r2, [pc, #228]	; (8008e48 <_strtod_l+0x924>)
 8008d62:	2900      	cmp	r1, #0
 8008d64:	d100      	bne.n	8008d68 <_strtod_l+0x844>
 8008d66:	e094      	b.n	8008e92 <_strtod_l+0x96e>
 8008d68:	0011      	movs	r1, r2
 8008d6a:	20d6      	movs	r0, #214	; 0xd6
 8008d6c:	4039      	ands	r1, r7
 8008d6e:	04c0      	lsls	r0, r0, #19
 8008d70:	4281      	cmp	r1, r0
 8008d72:	dd00      	ble.n	8008d76 <_strtod_l+0x852>
 8008d74:	e08d      	b.n	8008e92 <_strtod_l+0x96e>
 8008d76:	23dc      	movs	r3, #220	; 0xdc
 8008d78:	049b      	lsls	r3, r3, #18
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	dc00      	bgt.n	8008d80 <_strtod_l+0x85c>
 8008d7e:	e6a7      	b.n	8008ad0 <_strtod_l+0x5ac>
 8008d80:	0030      	movs	r0, r6
 8008d82:	0039      	movs	r1, r7
 8008d84:	4b31      	ldr	r3, [pc, #196]	; (8008e4c <_strtod_l+0x928>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	f7f8 fc72 	bl	8001670 <__aeabi_dmul>
 8008d8c:	4b2e      	ldr	r3, [pc, #184]	; (8008e48 <_strtod_l+0x924>)
 8008d8e:	0006      	movs	r6, r0
 8008d90:	000f      	movs	r7, r1
 8008d92:	420b      	tst	r3, r1
 8008d94:	d000      	beq.n	8008d98 <_strtod_l+0x874>
 8008d96:	e631      	b.n	80089fc <_strtod_l+0x4d8>
 8008d98:	2322      	movs	r3, #34	; 0x22
 8008d9a:	9a04      	ldr	r2, [sp, #16]
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	e62d      	b.n	80089fc <_strtod_l+0x4d8>
 8008da0:	234b      	movs	r3, #75	; 0x4b
 8008da2:	1a9a      	subs	r2, r3, r2
 8008da4:	3b4c      	subs	r3, #76	; 0x4c
 8008da6:	4093      	lsls	r3, r2
 8008da8:	4019      	ands	r1, r3
 8008daa:	000f      	movs	r7, r1
 8008dac:	e6e3      	b.n	8008b76 <_strtod_l+0x652>
 8008dae:	2201      	movs	r2, #1
 8008db0:	4252      	negs	r2, r2
 8008db2:	409a      	lsls	r2, r3
 8008db4:	4016      	ands	r6, r2
 8008db6:	e6de      	b.n	8008b76 <_strtod_l+0x652>
 8008db8:	4925      	ldr	r1, [pc, #148]	; (8008e50 <_strtod_l+0x92c>)
 8008dba:	1acb      	subs	r3, r1, r3
 8008dbc:	0001      	movs	r1, r0
 8008dbe:	4099      	lsls	r1, r3
 8008dc0:	9114      	str	r1, [sp, #80]	; 0x50
 8008dc2:	e743      	b.n	8008c4c <_strtod_l+0x728>
 8008dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008dc8:	9804      	ldr	r0, [sp, #16]
 8008dca:	f7ff f93b 	bl	8008044 <__lshift>
 8008dce:	901c      	str	r0, [sp, #112]	; 0x70
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d000      	beq.n	8008dd6 <_strtod_l+0x8b2>
 8008dd4:	e76e      	b.n	8008cb4 <_strtod_l+0x790>
 8008dd6:	e608      	b.n	80089ea <_strtod_l+0x4c6>
 8008dd8:	970e      	str	r7, [sp, #56]	; 0x38
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d177      	bne.n	8008ece <_strtod_l+0x9aa>
 8008dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008de0:	033b      	lsls	r3, r7, #12
 8008de2:	0b1b      	lsrs	r3, r3, #12
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	d039      	beq.n	8008e5c <_strtod_l+0x938>
 8008de8:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <_strtod_l+0x930>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d139      	bne.n	8008e62 <_strtod_l+0x93e>
 8008dee:	2101      	movs	r1, #1
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	4249      	negs	r1, r1
 8008df4:	0032      	movs	r2, r6
 8008df6:	0008      	movs	r0, r1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <_strtod_l+0x8f0>
 8008dfc:	24d4      	movs	r4, #212	; 0xd4
 8008dfe:	4b12      	ldr	r3, [pc, #72]	; (8008e48 <_strtod_l+0x924>)
 8008e00:	0008      	movs	r0, r1
 8008e02:	403b      	ands	r3, r7
 8008e04:	04e4      	lsls	r4, r4, #19
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	d804      	bhi.n	8008e14 <_strtod_l+0x8f0>
 8008e0a:	306c      	adds	r0, #108	; 0x6c
 8008e0c:	0d1b      	lsrs	r3, r3, #20
 8008e0e:	1ac3      	subs	r3, r0, r3
 8008e10:	4099      	lsls	r1, r3
 8008e12:	0008      	movs	r0, r1
 8008e14:	4282      	cmp	r2, r0
 8008e16:	d124      	bne.n	8008e62 <_strtod_l+0x93e>
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <_strtod_l+0x934>)
 8008e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008e1c:	4299      	cmp	r1, r3
 8008e1e:	d102      	bne.n	8008e26 <_strtod_l+0x902>
 8008e20:	3201      	adds	r2, #1
 8008e22:	d100      	bne.n	8008e26 <_strtod_l+0x902>
 8008e24:	e5e1      	b.n	80089ea <_strtod_l+0x4c6>
 8008e26:	4b08      	ldr	r3, [pc, #32]	; (8008e48 <_strtod_l+0x924>)
 8008e28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	401a      	ands	r2, r3
 8008e2e:	0013      	movs	r3, r2
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	0352      	lsls	r2, r2, #13
 8008e34:	189f      	adds	r7, r3, r2
 8008e36:	9b07      	ldr	r3, [sp, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1a1      	bne.n	8008d80 <_strtod_l+0x85c>
 8008e3c:	e5de      	b.n	80089fc <_strtod_l+0x4d8>
 8008e3e:	46c0      	nop			; (mov r8, r8)
 8008e40:	0800a828 	.word	0x0800a828
 8008e44:	fffffc02 	.word	0xfffffc02
 8008e48:	7ff00000 	.word	0x7ff00000
 8008e4c:	39500000 	.word	0x39500000
 8008e50:	fffffbe2 	.word	0xfffffbe2
 8008e54:	000fffff 	.word	0x000fffff
 8008e58:	7fefffff 	.word	0x7fefffff
 8008e5c:	4333      	orrs	r3, r6
 8008e5e:	d100      	bne.n	8008e62 <_strtod_l+0x93e>
 8008e60:	e77c      	b.n	8008d5c <_strtod_l+0x838>
 8008e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01d      	beq.n	8008ea4 <_strtod_l+0x980>
 8008e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e6c:	4213      	tst	r3, r2
 8008e6e:	d0e2      	beq.n	8008e36 <_strtod_l+0x912>
 8008e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e72:	0030      	movs	r0, r6
 8008e74:	0039      	movs	r1, r7
 8008e76:	9a07      	ldr	r2, [sp, #28]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d017      	beq.n	8008eac <_strtod_l+0x988>
 8008e7c:	f7ff fb3a 	bl	80084f4 <sulp>
 8008e80:	0002      	movs	r2, r0
 8008e82:	000b      	movs	r3, r1
 8008e84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e88:	f7f7 fc98 	bl	80007bc <__aeabi_dadd>
 8008e8c:	0006      	movs	r6, r0
 8008e8e:	000f      	movs	r7, r1
 8008e90:	e7d1      	b.n	8008e36 <_strtod_l+0x912>
 8008e92:	2601      	movs	r6, #1
 8008e94:	4013      	ands	r3, r2
 8008e96:	4a98      	ldr	r2, [pc, #608]	; (80090f8 <_strtod_l+0xbd4>)
 8008e98:	4276      	negs	r6, r6
 8008e9a:	189b      	adds	r3, r3, r2
 8008e9c:	4a97      	ldr	r2, [pc, #604]	; (80090fc <_strtod_l+0xbd8>)
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	0017      	movs	r7, r2
 8008ea2:	e7c8      	b.n	8008e36 <_strtod_l+0x912>
 8008ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ea6:	4233      	tst	r3, r6
 8008ea8:	d0c5      	beq.n	8008e36 <_strtod_l+0x912>
 8008eaa:	e7e1      	b.n	8008e70 <_strtod_l+0x94c>
 8008eac:	f7ff fb22 	bl	80084f4 <sulp>
 8008eb0:	0002      	movs	r2, r0
 8008eb2:	000b      	movs	r3, r1
 8008eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008eb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008eb8:	f7f8 fe9c 	bl	8001bf4 <__aeabi_dsub>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	0006      	movs	r6, r0
 8008ec2:	000f      	movs	r7, r1
 8008ec4:	f7f7 fac2 	bl	800044c <__aeabi_dcmpeq>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d0b4      	beq.n	8008e36 <_strtod_l+0x912>
 8008ecc:	e600      	b.n	8008ad0 <_strtod_l+0x5ac>
 8008ece:	9906      	ldr	r1, [sp, #24]
 8008ed0:	9805      	ldr	r0, [sp, #20]
 8008ed2:	f7ff faa1 	bl	8008418 <__ratio>
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	2200      	movs	r2, #0
 8008eda:	05db      	lsls	r3, r3, #23
 8008edc:	0004      	movs	r4, r0
 8008ede:	000d      	movs	r5, r1
 8008ee0:	f7f7 fac4 	bl	800046c <__aeabi_dcmple>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d06d      	beq.n	8008fc4 <_strtod_l+0xaa0>
 8008ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d000      	beq.n	8008ef0 <_strtod_l+0x9cc>
 8008eee:	e07e      	b.n	8008fee <_strtod_l+0xaca>
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	d158      	bne.n	8008fa6 <_strtod_l+0xa82>
 8008ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef6:	031b      	lsls	r3, r3, #12
 8008ef8:	d000      	beq.n	8008efc <_strtod_l+0x9d8>
 8008efa:	e07f      	b.n	8008ffc <_strtod_l+0xad8>
 8008efc:	2200      	movs	r2, #0
 8008efe:	0020      	movs	r0, r4
 8008f00:	0029      	movs	r1, r5
 8008f02:	4b7f      	ldr	r3, [pc, #508]	; (8009100 <_strtod_l+0xbdc>)
 8008f04:	f7f7 faa8 	bl	8000458 <__aeabi_dcmplt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d158      	bne.n	8008fbe <_strtod_l+0xa9a>
 8008f0c:	0020      	movs	r0, r4
 8008f0e:	0029      	movs	r1, r5
 8008f10:	2200      	movs	r2, #0
 8008f12:	4b7c      	ldr	r3, [pc, #496]	; (8009104 <_strtod_l+0xbe0>)
 8008f14:	f7f8 fbac 	bl	8001670 <__aeabi_dmul>
 8008f18:	0004      	movs	r4, r0
 8008f1a:	000d      	movs	r5, r1
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	061b      	lsls	r3, r3, #24
 8008f20:	940a      	str	r4, [sp, #40]	; 0x28
 8008f22:	18eb      	adds	r3, r5, r3
 8008f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2a:	9212      	str	r2, [sp, #72]	; 0x48
 8008f2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f2e:	4a76      	ldr	r2, [pc, #472]	; (8009108 <_strtod_l+0xbe4>)
 8008f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f32:	4013      	ands	r3, r2
 8008f34:	9314      	str	r3, [sp, #80]	; 0x50
 8008f36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f38:	4b74      	ldr	r3, [pc, #464]	; (800910c <_strtod_l+0xbe8>)
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d000      	beq.n	8008f40 <_strtod_l+0xa1c>
 8008f3e:	e091      	b.n	8009064 <_strtod_l+0xb40>
 8008f40:	4a73      	ldr	r2, [pc, #460]	; (8009110 <_strtod_l+0xbec>)
 8008f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f44:	4694      	mov	ip, r2
 8008f46:	4463      	add	r3, ip
 8008f48:	001f      	movs	r7, r3
 8008f4a:	0030      	movs	r0, r6
 8008f4c:	0019      	movs	r1, r3
 8008f4e:	f7ff f99b 	bl	8008288 <__ulp>
 8008f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f56:	f7f8 fb8b 	bl	8001670 <__aeabi_dmul>
 8008f5a:	0032      	movs	r2, r6
 8008f5c:	003b      	movs	r3, r7
 8008f5e:	f7f7 fc2d 	bl	80007bc <__aeabi_dadd>
 8008f62:	4a69      	ldr	r2, [pc, #420]	; (8009108 <_strtod_l+0xbe4>)
 8008f64:	4b6b      	ldr	r3, [pc, #428]	; (8009114 <_strtod_l+0xbf0>)
 8008f66:	0006      	movs	r6, r0
 8008f68:	400a      	ands	r2, r1
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d949      	bls.n	8009002 <_strtod_l+0xade>
 8008f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f70:	4b69      	ldr	r3, [pc, #420]	; (8009118 <_strtod_l+0xbf4>)
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d103      	bne.n	8008f7e <_strtod_l+0xa5a>
 8008f76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f78:	3301      	adds	r3, #1
 8008f7a:	d100      	bne.n	8008f7e <_strtod_l+0xa5a>
 8008f7c:	e535      	b.n	80089ea <_strtod_l+0x4c6>
 8008f7e:	2601      	movs	r6, #1
 8008f80:	4f65      	ldr	r7, [pc, #404]	; (8009118 <_strtod_l+0xbf4>)
 8008f82:	4276      	negs	r6, r6
 8008f84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008f86:	9804      	ldr	r0, [sp, #16]
 8008f88:	f7fe fe3c 	bl	8007c04 <_Bfree>
 8008f8c:	9908      	ldr	r1, [sp, #32]
 8008f8e:	9804      	ldr	r0, [sp, #16]
 8008f90:	f7fe fe38 	bl	8007c04 <_Bfree>
 8008f94:	9906      	ldr	r1, [sp, #24]
 8008f96:	9804      	ldr	r0, [sp, #16]
 8008f98:	f7fe fe34 	bl	8007c04 <_Bfree>
 8008f9c:	9905      	ldr	r1, [sp, #20]
 8008f9e:	9804      	ldr	r0, [sp, #16]
 8008fa0:	f7fe fe30 	bl	8007c04 <_Bfree>
 8008fa4:	e60b      	b.n	8008bbe <_strtod_l+0x69a>
 8008fa6:	2e01      	cmp	r6, #1
 8008fa8:	d103      	bne.n	8008fb2 <_strtod_l+0xa8e>
 8008faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d100      	bne.n	8008fb2 <_strtod_l+0xa8e>
 8008fb0:	e58e      	b.n	8008ad0 <_strtod_l+0x5ac>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4c59      	ldr	r4, [pc, #356]	; (800911c <_strtod_l+0xbf8>)
 8008fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008fbc:	e01c      	b.n	8008ff8 <_strtod_l+0xad4>
 8008fbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008fc0:	4d50      	ldr	r5, [pc, #320]	; (8009104 <_strtod_l+0xbe0>)
 8008fc2:	e7ab      	b.n	8008f1c <_strtod_l+0x9f8>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	0020      	movs	r0, r4
 8008fc8:	0029      	movs	r1, r5
 8008fca:	4b4e      	ldr	r3, [pc, #312]	; (8009104 <_strtod_l+0xbe0>)
 8008fcc:	f7f8 fb50 	bl	8001670 <__aeabi_dmul>
 8008fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd2:	0004      	movs	r4, r0
 8008fd4:	000b      	movs	r3, r1
 8008fd6:	000d      	movs	r5, r1
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	d104      	bne.n	8008fe6 <_strtod_l+0xac2>
 8008fdc:	2280      	movs	r2, #128	; 0x80
 8008fde:	0612      	lsls	r2, r2, #24
 8008fe0:	900a      	str	r0, [sp, #40]	; 0x28
 8008fe2:	188b      	adds	r3, r1, r2
 8008fe4:	e79e      	b.n	8008f24 <_strtod_l+0xa00>
 8008fe6:	0002      	movs	r2, r0
 8008fe8:	920a      	str	r2, [sp, #40]	; 0x28
 8008fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fec:	e79b      	b.n	8008f26 <_strtod_l+0xa02>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4c43      	ldr	r4, [pc, #268]	; (8009100 <_strtod_l+0xbdc>)
 8008ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff4:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ff6:	2400      	movs	r4, #0
 8008ff8:	4d41      	ldr	r5, [pc, #260]	; (8009100 <_strtod_l+0xbdc>)
 8008ffa:	e794      	b.n	8008f26 <_strtod_l+0xa02>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4c47      	ldr	r4, [pc, #284]	; (800911c <_strtod_l+0xbf8>)
 8009000:	e7f7      	b.n	8008ff2 <_strtod_l+0xace>
 8009002:	23d4      	movs	r3, #212	; 0xd4
 8009004:	049b      	lsls	r3, r3, #18
 8009006:	18cf      	adds	r7, r1, r3
 8009008:	9b07      	ldr	r3, [sp, #28]
 800900a:	970e      	str	r7, [sp, #56]	; 0x38
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1b9      	bne.n	8008f84 <_strtod_l+0xa60>
 8009010:	4b3d      	ldr	r3, [pc, #244]	; (8009108 <_strtod_l+0xbe4>)
 8009012:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009014:	403b      	ands	r3, r7
 8009016:	429a      	cmp	r2, r3
 8009018:	d1b4      	bne.n	8008f84 <_strtod_l+0xa60>
 800901a:	0020      	movs	r0, r4
 800901c:	0029      	movs	r1, r5
 800901e:	f7f7 faaf 	bl	8000580 <__aeabi_d2lz>
 8009022:	f7f7 fae9 	bl	80005f8 <__aeabi_l2d>
 8009026:	0002      	movs	r2, r0
 8009028:	000b      	movs	r3, r1
 800902a:	0020      	movs	r0, r4
 800902c:	0029      	movs	r1, r5
 800902e:	f7f8 fde1 	bl	8001bf4 <__aeabi_dsub>
 8009032:	033b      	lsls	r3, r7, #12
 8009034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009036:	0b1b      	lsrs	r3, r3, #12
 8009038:	4333      	orrs	r3, r6
 800903a:	4313      	orrs	r3, r2
 800903c:	0004      	movs	r4, r0
 800903e:	000d      	movs	r5, r1
 8009040:	4a37      	ldr	r2, [pc, #220]	; (8009120 <_strtod_l+0xbfc>)
 8009042:	2b00      	cmp	r3, #0
 8009044:	d054      	beq.n	80090f0 <_strtod_l+0xbcc>
 8009046:	4b37      	ldr	r3, [pc, #220]	; (8009124 <_strtod_l+0xc00>)
 8009048:	f7f7 fa06 	bl	8000458 <__aeabi_dcmplt>
 800904c:	2800      	cmp	r0, #0
 800904e:	d000      	beq.n	8009052 <_strtod_l+0xb2e>
 8009050:	e4d4      	b.n	80089fc <_strtod_l+0x4d8>
 8009052:	0020      	movs	r0, r4
 8009054:	0029      	movs	r1, r5
 8009056:	4a34      	ldr	r2, [pc, #208]	; (8009128 <_strtod_l+0xc04>)
 8009058:	4b2a      	ldr	r3, [pc, #168]	; (8009104 <_strtod_l+0xbe0>)
 800905a:	f7f7 fa11 	bl	8000480 <__aeabi_dcmpgt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d090      	beq.n	8008f84 <_strtod_l+0xa60>
 8009062:	e4cb      	b.n	80089fc <_strtod_l+0x4d8>
 8009064:	9b07      	ldr	r3, [sp, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d02b      	beq.n	80090c2 <_strtod_l+0xb9e>
 800906a:	23d4      	movs	r3, #212	; 0xd4
 800906c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800906e:	04db      	lsls	r3, r3, #19
 8009070:	429a      	cmp	r2, r3
 8009072:	d826      	bhi.n	80090c2 <_strtod_l+0xb9e>
 8009074:	0020      	movs	r0, r4
 8009076:	0029      	movs	r1, r5
 8009078:	4a2c      	ldr	r2, [pc, #176]	; (800912c <_strtod_l+0xc08>)
 800907a:	4b2d      	ldr	r3, [pc, #180]	; (8009130 <_strtod_l+0xc0c>)
 800907c:	f7f7 f9f6 	bl	800046c <__aeabi_dcmple>
 8009080:	2800      	cmp	r0, #0
 8009082:	d017      	beq.n	80090b4 <_strtod_l+0xb90>
 8009084:	0020      	movs	r0, r4
 8009086:	0029      	movs	r1, r5
 8009088:	f7f7 fa5c 	bl	8000544 <__aeabi_d2uiz>
 800908c:	2800      	cmp	r0, #0
 800908e:	d100      	bne.n	8009092 <_strtod_l+0xb6e>
 8009090:	3001      	adds	r0, #1
 8009092:	f7f9 f9b5 	bl	8002400 <__aeabi_ui2d>
 8009096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009098:	0004      	movs	r4, r0
 800909a:	000b      	movs	r3, r1
 800909c:	000d      	movs	r5, r1
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d122      	bne.n	80090e8 <_strtod_l+0xbc4>
 80090a2:	2280      	movs	r2, #128	; 0x80
 80090a4:	0612      	lsls	r2, r2, #24
 80090a6:	188b      	adds	r3, r1, r2
 80090a8:	9016      	str	r0, [sp, #88]	; 0x58
 80090aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80090ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090b0:	9212      	str	r2, [sp, #72]	; 0x48
 80090b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80090b4:	22d6      	movs	r2, #214	; 0xd6
 80090b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090b8:	04d2      	lsls	r2, r2, #19
 80090ba:	189b      	adds	r3, r3, r2
 80090bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090be:	1a9b      	subs	r3, r3, r2
 80090c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80090c2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80090c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80090c8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80090ca:	f7ff f8dd 	bl	8008288 <__ulp>
 80090ce:	0002      	movs	r2, r0
 80090d0:	000b      	movs	r3, r1
 80090d2:	0030      	movs	r0, r6
 80090d4:	0039      	movs	r1, r7
 80090d6:	f7f8 facb 	bl	8001670 <__aeabi_dmul>
 80090da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090de:	f7f7 fb6d 	bl	80007bc <__aeabi_dadd>
 80090e2:	0006      	movs	r6, r0
 80090e4:	000f      	movs	r7, r1
 80090e6:	e78f      	b.n	8009008 <_strtod_l+0xae4>
 80090e8:	0002      	movs	r2, r0
 80090ea:	9216      	str	r2, [sp, #88]	; 0x58
 80090ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80090ee:	e7dd      	b.n	80090ac <_strtod_l+0xb88>
 80090f0:	4b10      	ldr	r3, [pc, #64]	; (8009134 <_strtod_l+0xc10>)
 80090f2:	f7f7 f9b1 	bl	8000458 <__aeabi_dcmplt>
 80090f6:	e7b2      	b.n	800905e <_strtod_l+0xb3a>
 80090f8:	fff00000 	.word	0xfff00000
 80090fc:	000fffff 	.word	0x000fffff
 8009100:	3ff00000 	.word	0x3ff00000
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	7ff00000 	.word	0x7ff00000
 800910c:	7fe00000 	.word	0x7fe00000
 8009110:	fcb00000 	.word	0xfcb00000
 8009114:	7c9fffff 	.word	0x7c9fffff
 8009118:	7fefffff 	.word	0x7fefffff
 800911c:	bff00000 	.word	0xbff00000
 8009120:	94a03595 	.word	0x94a03595
 8009124:	3fdfffff 	.word	0x3fdfffff
 8009128:	35afe535 	.word	0x35afe535
 800912c:	ffc00000 	.word	0xffc00000
 8009130:	41dfffff 	.word	0x41dfffff
 8009134:	3fcfffff 	.word	0x3fcfffff

08009138 <_strtod_r>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4b02      	ldr	r3, [pc, #8]	; (8009144 <_strtod_r+0xc>)
 800913c:	f7ff f9f2 	bl	8008524 <_strtod_l>
 8009140:	bd10      	pop	{r4, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	20000068 	.word	0x20000068

08009148 <__ssputs_r>:
 8009148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800914a:	b085      	sub	sp, #20
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	9203      	str	r2, [sp, #12]
 8009150:	688e      	ldr	r6, [r1, #8]
 8009152:	9a01      	ldr	r2, [sp, #4]
 8009154:	0007      	movs	r7, r0
 8009156:	000c      	movs	r4, r1
 8009158:	680b      	ldr	r3, [r1, #0]
 800915a:	4296      	cmp	r6, r2
 800915c:	d831      	bhi.n	80091c2 <__ssputs_r+0x7a>
 800915e:	898a      	ldrh	r2, [r1, #12]
 8009160:	2190      	movs	r1, #144	; 0x90
 8009162:	00c9      	lsls	r1, r1, #3
 8009164:	420a      	tst	r2, r1
 8009166:	d029      	beq.n	80091bc <__ssputs_r+0x74>
 8009168:	2003      	movs	r0, #3
 800916a:	6921      	ldr	r1, [r4, #16]
 800916c:	1a5b      	subs	r3, r3, r1
 800916e:	9302      	str	r3, [sp, #8]
 8009170:	6963      	ldr	r3, [r4, #20]
 8009172:	4343      	muls	r3, r0
 8009174:	0fdd      	lsrs	r5, r3, #31
 8009176:	18ed      	adds	r5, r5, r3
 8009178:	9b01      	ldr	r3, [sp, #4]
 800917a:	9802      	ldr	r0, [sp, #8]
 800917c:	3301      	adds	r3, #1
 800917e:	181b      	adds	r3, r3, r0
 8009180:	106d      	asrs	r5, r5, #1
 8009182:	42ab      	cmp	r3, r5
 8009184:	d900      	bls.n	8009188 <__ssputs_r+0x40>
 8009186:	001d      	movs	r5, r3
 8009188:	0552      	lsls	r2, r2, #21
 800918a:	d529      	bpl.n	80091e0 <__ssputs_r+0x98>
 800918c:	0029      	movs	r1, r5
 800918e:	0038      	movs	r0, r7
 8009190:	f7fe fc62 	bl	8007a58 <_malloc_r>
 8009194:	1e06      	subs	r6, r0, #0
 8009196:	d02d      	beq.n	80091f4 <__ssputs_r+0xac>
 8009198:	9a02      	ldr	r2, [sp, #8]
 800919a:	6921      	ldr	r1, [r4, #16]
 800919c:	f000 fc0c 	bl	80099b8 <memcpy>
 80091a0:	89a2      	ldrh	r2, [r4, #12]
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <__ssputs_r+0xc0>)
 80091a4:	401a      	ands	r2, r3
 80091a6:	2380      	movs	r3, #128	; 0x80
 80091a8:	4313      	orrs	r3, r2
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	6126      	str	r6, [r4, #16]
 80091b0:	18f6      	adds	r6, r6, r3
 80091b2:	6026      	str	r6, [r4, #0]
 80091b4:	6165      	str	r5, [r4, #20]
 80091b6:	9e01      	ldr	r6, [sp, #4]
 80091b8:	1aed      	subs	r5, r5, r3
 80091ba:	60a5      	str	r5, [r4, #8]
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	429e      	cmp	r6, r3
 80091c0:	d900      	bls.n	80091c4 <__ssputs_r+0x7c>
 80091c2:	9e01      	ldr	r6, [sp, #4]
 80091c4:	0032      	movs	r2, r6
 80091c6:	9903      	ldr	r1, [sp, #12]
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	f000 fbbf 	bl	800994c <memmove>
 80091ce:	2000      	movs	r0, #0
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	1b9b      	subs	r3, r3, r6
 80091d4:	60a3      	str	r3, [r4, #8]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	199b      	adds	r3, r3, r6
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	b005      	add	sp, #20
 80091de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e0:	002a      	movs	r2, r5
 80091e2:	0038      	movs	r0, r7
 80091e4:	f000 ffb2 	bl	800a14c <_realloc_r>
 80091e8:	1e06      	subs	r6, r0, #0
 80091ea:	d1df      	bne.n	80091ac <__ssputs_r+0x64>
 80091ec:	0038      	movs	r0, r7
 80091ee:	6921      	ldr	r1, [r4, #16]
 80091f0:	f7fe fbbc 	bl	800796c <_free_r>
 80091f4:	230c      	movs	r3, #12
 80091f6:	2001      	movs	r0, #1
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	89a2      	ldrh	r2, [r4, #12]
 80091fc:	3334      	adds	r3, #52	; 0x34
 80091fe:	4313      	orrs	r3, r2
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	4240      	negs	r0, r0
 8009204:	e7ea      	b.n	80091dc <__ssputs_r+0x94>
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	fffffb7f 	.word	0xfffffb7f

0800920c <_svfiprintf_r>:
 800920c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920e:	b0a1      	sub	sp, #132	; 0x84
 8009210:	9003      	str	r0, [sp, #12]
 8009212:	001d      	movs	r5, r3
 8009214:	898b      	ldrh	r3, [r1, #12]
 8009216:	000f      	movs	r7, r1
 8009218:	0016      	movs	r6, r2
 800921a:	061b      	lsls	r3, r3, #24
 800921c:	d511      	bpl.n	8009242 <_svfiprintf_r+0x36>
 800921e:	690b      	ldr	r3, [r1, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10e      	bne.n	8009242 <_svfiprintf_r+0x36>
 8009224:	2140      	movs	r1, #64	; 0x40
 8009226:	f7fe fc17 	bl	8007a58 <_malloc_r>
 800922a:	6038      	str	r0, [r7, #0]
 800922c:	6138      	str	r0, [r7, #16]
 800922e:	2800      	cmp	r0, #0
 8009230:	d105      	bne.n	800923e <_svfiprintf_r+0x32>
 8009232:	230c      	movs	r3, #12
 8009234:	9a03      	ldr	r2, [sp, #12]
 8009236:	3801      	subs	r0, #1
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	b021      	add	sp, #132	; 0x84
 800923c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	2300      	movs	r3, #0
 8009244:	ac08      	add	r4, sp, #32
 8009246:	6163      	str	r3, [r4, #20]
 8009248:	3320      	adds	r3, #32
 800924a:	7663      	strb	r3, [r4, #25]
 800924c:	3310      	adds	r3, #16
 800924e:	76a3      	strb	r3, [r4, #26]
 8009250:	9507      	str	r5, [sp, #28]
 8009252:	0035      	movs	r5, r6
 8009254:	782b      	ldrb	r3, [r5, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <_svfiprintf_r+0x52>
 800925a:	2b25      	cmp	r3, #37	; 0x25
 800925c:	d148      	bne.n	80092f0 <_svfiprintf_r+0xe4>
 800925e:	1bab      	subs	r3, r5, r6
 8009260:	9305      	str	r3, [sp, #20]
 8009262:	42b5      	cmp	r5, r6
 8009264:	d00b      	beq.n	800927e <_svfiprintf_r+0x72>
 8009266:	0032      	movs	r2, r6
 8009268:	0039      	movs	r1, r7
 800926a:	9803      	ldr	r0, [sp, #12]
 800926c:	f7ff ff6c 	bl	8009148 <__ssputs_r>
 8009270:	3001      	adds	r0, #1
 8009272:	d100      	bne.n	8009276 <_svfiprintf_r+0x6a>
 8009274:	e0af      	b.n	80093d6 <_svfiprintf_r+0x1ca>
 8009276:	6963      	ldr	r3, [r4, #20]
 8009278:	9a05      	ldr	r2, [sp, #20]
 800927a:	189b      	adds	r3, r3, r2
 800927c:	6163      	str	r3, [r4, #20]
 800927e:	782b      	ldrb	r3, [r5, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d100      	bne.n	8009286 <_svfiprintf_r+0x7a>
 8009284:	e0a7      	b.n	80093d6 <_svfiprintf_r+0x1ca>
 8009286:	2201      	movs	r2, #1
 8009288:	2300      	movs	r3, #0
 800928a:	4252      	negs	r2, r2
 800928c:	6062      	str	r2, [r4, #4]
 800928e:	a904      	add	r1, sp, #16
 8009290:	3254      	adds	r2, #84	; 0x54
 8009292:	1852      	adds	r2, r2, r1
 8009294:	1c6e      	adds	r6, r5, #1
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	60e3      	str	r3, [r4, #12]
 800929a:	60a3      	str	r3, [r4, #8]
 800929c:	7013      	strb	r3, [r2, #0]
 800929e:	65a3      	str	r3, [r4, #88]	; 0x58
 80092a0:	4b55      	ldr	r3, [pc, #340]	; (80093f8 <_svfiprintf_r+0x1ec>)
 80092a2:	2205      	movs	r2, #5
 80092a4:	0018      	movs	r0, r3
 80092a6:	7831      	ldrb	r1, [r6, #0]
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	f7fd fcb2 	bl	8006c12 <memchr>
 80092ae:	1c75      	adds	r5, r6, #1
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d11f      	bne.n	80092f4 <_svfiprintf_r+0xe8>
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	06d3      	lsls	r3, r2, #27
 80092b8:	d504      	bpl.n	80092c4 <_svfiprintf_r+0xb8>
 80092ba:	2353      	movs	r3, #83	; 0x53
 80092bc:	a904      	add	r1, sp, #16
 80092be:	185b      	adds	r3, r3, r1
 80092c0:	2120      	movs	r1, #32
 80092c2:	7019      	strb	r1, [r3, #0]
 80092c4:	0713      	lsls	r3, r2, #28
 80092c6:	d504      	bpl.n	80092d2 <_svfiprintf_r+0xc6>
 80092c8:	2353      	movs	r3, #83	; 0x53
 80092ca:	a904      	add	r1, sp, #16
 80092cc:	185b      	adds	r3, r3, r1
 80092ce:	212b      	movs	r1, #43	; 0x2b
 80092d0:	7019      	strb	r1, [r3, #0]
 80092d2:	7833      	ldrb	r3, [r6, #0]
 80092d4:	2b2a      	cmp	r3, #42	; 0x2a
 80092d6:	d016      	beq.n	8009306 <_svfiprintf_r+0xfa>
 80092d8:	0035      	movs	r5, r6
 80092da:	2100      	movs	r1, #0
 80092dc:	200a      	movs	r0, #10
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	782a      	ldrb	r2, [r5, #0]
 80092e2:	1c6e      	adds	r6, r5, #1
 80092e4:	3a30      	subs	r2, #48	; 0x30
 80092e6:	2a09      	cmp	r2, #9
 80092e8:	d94e      	bls.n	8009388 <_svfiprintf_r+0x17c>
 80092ea:	2900      	cmp	r1, #0
 80092ec:	d111      	bne.n	8009312 <_svfiprintf_r+0x106>
 80092ee:	e017      	b.n	8009320 <_svfiprintf_r+0x114>
 80092f0:	3501      	adds	r5, #1
 80092f2:	e7af      	b.n	8009254 <_svfiprintf_r+0x48>
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	1ac0      	subs	r0, r0, r3
 80092fa:	2301      	movs	r3, #1
 80092fc:	4083      	lsls	r3, r0
 80092fe:	4313      	orrs	r3, r2
 8009300:	002e      	movs	r6, r5
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	e7cc      	b.n	80092a0 <_svfiprintf_r+0x94>
 8009306:	9b07      	ldr	r3, [sp, #28]
 8009308:	1d19      	adds	r1, r3, #4
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9107      	str	r1, [sp, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	db01      	blt.n	8009316 <_svfiprintf_r+0x10a>
 8009312:	930b      	str	r3, [sp, #44]	; 0x2c
 8009314:	e004      	b.n	8009320 <_svfiprintf_r+0x114>
 8009316:	425b      	negs	r3, r3
 8009318:	60e3      	str	r3, [r4, #12]
 800931a:	2302      	movs	r3, #2
 800931c:	4313      	orrs	r3, r2
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	782b      	ldrb	r3, [r5, #0]
 8009322:	2b2e      	cmp	r3, #46	; 0x2e
 8009324:	d10a      	bne.n	800933c <_svfiprintf_r+0x130>
 8009326:	786b      	ldrb	r3, [r5, #1]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d135      	bne.n	8009398 <_svfiprintf_r+0x18c>
 800932c:	9b07      	ldr	r3, [sp, #28]
 800932e:	3502      	adds	r5, #2
 8009330:	1d1a      	adds	r2, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9207      	str	r2, [sp, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	db2b      	blt.n	8009392 <_svfiprintf_r+0x186>
 800933a:	9309      	str	r3, [sp, #36]	; 0x24
 800933c:	4e2f      	ldr	r6, [pc, #188]	; (80093fc <_svfiprintf_r+0x1f0>)
 800933e:	2203      	movs	r2, #3
 8009340:	0030      	movs	r0, r6
 8009342:	7829      	ldrb	r1, [r5, #0]
 8009344:	f7fd fc65 	bl	8006c12 <memchr>
 8009348:	2800      	cmp	r0, #0
 800934a:	d006      	beq.n	800935a <_svfiprintf_r+0x14e>
 800934c:	2340      	movs	r3, #64	; 0x40
 800934e:	1b80      	subs	r0, r0, r6
 8009350:	4083      	lsls	r3, r0
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	3501      	adds	r5, #1
 8009356:	4313      	orrs	r3, r2
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	7829      	ldrb	r1, [r5, #0]
 800935c:	2206      	movs	r2, #6
 800935e:	4828      	ldr	r0, [pc, #160]	; (8009400 <_svfiprintf_r+0x1f4>)
 8009360:	1c6e      	adds	r6, r5, #1
 8009362:	7621      	strb	r1, [r4, #24]
 8009364:	f7fd fc55 	bl	8006c12 <memchr>
 8009368:	2800      	cmp	r0, #0
 800936a:	d03c      	beq.n	80093e6 <_svfiprintf_r+0x1da>
 800936c:	4b25      	ldr	r3, [pc, #148]	; (8009404 <_svfiprintf_r+0x1f8>)
 800936e:	2b00      	cmp	r3, #0
 8009370:	d125      	bne.n	80093be <_svfiprintf_r+0x1b2>
 8009372:	2207      	movs	r2, #7
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	3307      	adds	r3, #7
 8009378:	4393      	bics	r3, r2
 800937a:	3308      	adds	r3, #8
 800937c:	9307      	str	r3, [sp, #28]
 800937e:	6963      	ldr	r3, [r4, #20]
 8009380:	9a04      	ldr	r2, [sp, #16]
 8009382:	189b      	adds	r3, r3, r2
 8009384:	6163      	str	r3, [r4, #20]
 8009386:	e764      	b.n	8009252 <_svfiprintf_r+0x46>
 8009388:	4343      	muls	r3, r0
 800938a:	0035      	movs	r5, r6
 800938c:	2101      	movs	r1, #1
 800938e:	189b      	adds	r3, r3, r2
 8009390:	e7a6      	b.n	80092e0 <_svfiprintf_r+0xd4>
 8009392:	2301      	movs	r3, #1
 8009394:	425b      	negs	r3, r3
 8009396:	e7d0      	b.n	800933a <_svfiprintf_r+0x12e>
 8009398:	2300      	movs	r3, #0
 800939a:	200a      	movs	r0, #10
 800939c:	001a      	movs	r2, r3
 800939e:	3501      	adds	r5, #1
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	7829      	ldrb	r1, [r5, #0]
 80093a4:	1c6e      	adds	r6, r5, #1
 80093a6:	3930      	subs	r1, #48	; 0x30
 80093a8:	2909      	cmp	r1, #9
 80093aa:	d903      	bls.n	80093b4 <_svfiprintf_r+0x1a8>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0c5      	beq.n	800933c <_svfiprintf_r+0x130>
 80093b0:	9209      	str	r2, [sp, #36]	; 0x24
 80093b2:	e7c3      	b.n	800933c <_svfiprintf_r+0x130>
 80093b4:	4342      	muls	r2, r0
 80093b6:	0035      	movs	r5, r6
 80093b8:	2301      	movs	r3, #1
 80093ba:	1852      	adds	r2, r2, r1
 80093bc:	e7f1      	b.n	80093a2 <_svfiprintf_r+0x196>
 80093be:	aa07      	add	r2, sp, #28
 80093c0:	9200      	str	r2, [sp, #0]
 80093c2:	0021      	movs	r1, r4
 80093c4:	003a      	movs	r2, r7
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <_svfiprintf_r+0x1fc>)
 80093c8:	9803      	ldr	r0, [sp, #12]
 80093ca:	f7fc fc49 	bl	8005c60 <_printf_float>
 80093ce:	9004      	str	r0, [sp, #16]
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	3301      	adds	r3, #1
 80093d4:	d1d3      	bne.n	800937e <_svfiprintf_r+0x172>
 80093d6:	89bb      	ldrh	r3, [r7, #12]
 80093d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80093da:	065b      	lsls	r3, r3, #25
 80093dc:	d400      	bmi.n	80093e0 <_svfiprintf_r+0x1d4>
 80093de:	e72c      	b.n	800923a <_svfiprintf_r+0x2e>
 80093e0:	2001      	movs	r0, #1
 80093e2:	4240      	negs	r0, r0
 80093e4:	e729      	b.n	800923a <_svfiprintf_r+0x2e>
 80093e6:	aa07      	add	r2, sp, #28
 80093e8:	9200      	str	r2, [sp, #0]
 80093ea:	0021      	movs	r1, r4
 80093ec:	003a      	movs	r2, r7
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <_svfiprintf_r+0x1fc>)
 80093f0:	9803      	ldr	r0, [sp, #12]
 80093f2:	f7fc fefb 	bl	80061ec <_printf_i>
 80093f6:	e7ea      	b.n	80093ce <_svfiprintf_r+0x1c2>
 80093f8:	0800a850 	.word	0x0800a850
 80093fc:	0800a856 	.word	0x0800a856
 8009400:	0800a85a 	.word	0x0800a85a
 8009404:	08005c61 	.word	0x08005c61
 8009408:	08009149 	.word	0x08009149

0800940c <__sfputc_r>:
 800940c:	6893      	ldr	r3, [r2, #8]
 800940e:	b510      	push	{r4, lr}
 8009410:	3b01      	subs	r3, #1
 8009412:	6093      	str	r3, [r2, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da04      	bge.n	8009422 <__sfputc_r+0x16>
 8009418:	6994      	ldr	r4, [r2, #24]
 800941a:	42a3      	cmp	r3, r4
 800941c:	db07      	blt.n	800942e <__sfputc_r+0x22>
 800941e:	290a      	cmp	r1, #10
 8009420:	d005      	beq.n	800942e <__sfputc_r+0x22>
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	1c58      	adds	r0, r3, #1
 8009426:	6010      	str	r0, [r2, #0]
 8009428:	7019      	strb	r1, [r3, #0]
 800942a:	0008      	movs	r0, r1
 800942c:	bd10      	pop	{r4, pc}
 800942e:	f000 f9e6 	bl	80097fe <__swbuf_r>
 8009432:	0001      	movs	r1, r0
 8009434:	e7f9      	b.n	800942a <__sfputc_r+0x1e>

08009436 <__sfputs_r>:
 8009436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009438:	0006      	movs	r6, r0
 800943a:	000f      	movs	r7, r1
 800943c:	0014      	movs	r4, r2
 800943e:	18d5      	adds	r5, r2, r3
 8009440:	42ac      	cmp	r4, r5
 8009442:	d101      	bne.n	8009448 <__sfputs_r+0x12>
 8009444:	2000      	movs	r0, #0
 8009446:	e007      	b.n	8009458 <__sfputs_r+0x22>
 8009448:	7821      	ldrb	r1, [r4, #0]
 800944a:	003a      	movs	r2, r7
 800944c:	0030      	movs	r0, r6
 800944e:	f7ff ffdd 	bl	800940c <__sfputc_r>
 8009452:	3401      	adds	r4, #1
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d1f3      	bne.n	8009440 <__sfputs_r+0xa>
 8009458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800945c <_vfiprintf_r>:
 800945c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945e:	b0a1      	sub	sp, #132	; 0x84
 8009460:	000f      	movs	r7, r1
 8009462:	0015      	movs	r5, r2
 8009464:	001e      	movs	r6, r3
 8009466:	9003      	str	r0, [sp, #12]
 8009468:	2800      	cmp	r0, #0
 800946a:	d004      	beq.n	8009476 <_vfiprintf_r+0x1a>
 800946c:	6a03      	ldr	r3, [r0, #32]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <_vfiprintf_r+0x1a>
 8009472:	f7fd fa63 	bl	800693c <__sinit>
 8009476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009478:	07db      	lsls	r3, r3, #31
 800947a:	d405      	bmi.n	8009488 <_vfiprintf_r+0x2c>
 800947c:	89bb      	ldrh	r3, [r7, #12]
 800947e:	059b      	lsls	r3, r3, #22
 8009480:	d402      	bmi.n	8009488 <_vfiprintf_r+0x2c>
 8009482:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009484:	f7fd fbc3 	bl	8006c0e <__retarget_lock_acquire_recursive>
 8009488:	89bb      	ldrh	r3, [r7, #12]
 800948a:	071b      	lsls	r3, r3, #28
 800948c:	d502      	bpl.n	8009494 <_vfiprintf_r+0x38>
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d113      	bne.n	80094bc <_vfiprintf_r+0x60>
 8009494:	0039      	movs	r1, r7
 8009496:	9803      	ldr	r0, [sp, #12]
 8009498:	f000 f9f4 	bl	8009884 <__swsetup_r>
 800949c:	2800      	cmp	r0, #0
 800949e:	d00d      	beq.n	80094bc <_vfiprintf_r+0x60>
 80094a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a2:	07db      	lsls	r3, r3, #31
 80094a4:	d503      	bpl.n	80094ae <_vfiprintf_r+0x52>
 80094a6:	2001      	movs	r0, #1
 80094a8:	4240      	negs	r0, r0
 80094aa:	b021      	add	sp, #132	; 0x84
 80094ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ae:	89bb      	ldrh	r3, [r7, #12]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	d4f8      	bmi.n	80094a6 <_vfiprintf_r+0x4a>
 80094b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80094b6:	f7fd fbab 	bl	8006c10 <__retarget_lock_release_recursive>
 80094ba:	e7f4      	b.n	80094a6 <_vfiprintf_r+0x4a>
 80094bc:	2300      	movs	r3, #0
 80094be:	ac08      	add	r4, sp, #32
 80094c0:	6163      	str	r3, [r4, #20]
 80094c2:	3320      	adds	r3, #32
 80094c4:	7663      	strb	r3, [r4, #25]
 80094c6:	3310      	adds	r3, #16
 80094c8:	76a3      	strb	r3, [r4, #26]
 80094ca:	9607      	str	r6, [sp, #28]
 80094cc:	002e      	movs	r6, r5
 80094ce:	7833      	ldrb	r3, [r6, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <_vfiprintf_r+0x7c>
 80094d4:	2b25      	cmp	r3, #37	; 0x25
 80094d6:	d148      	bne.n	800956a <_vfiprintf_r+0x10e>
 80094d8:	1b73      	subs	r3, r6, r5
 80094da:	9305      	str	r3, [sp, #20]
 80094dc:	42ae      	cmp	r6, r5
 80094de:	d00b      	beq.n	80094f8 <_vfiprintf_r+0x9c>
 80094e0:	002a      	movs	r2, r5
 80094e2:	0039      	movs	r1, r7
 80094e4:	9803      	ldr	r0, [sp, #12]
 80094e6:	f7ff ffa6 	bl	8009436 <__sfputs_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	d100      	bne.n	80094f0 <_vfiprintf_r+0x94>
 80094ee:	e0af      	b.n	8009650 <_vfiprintf_r+0x1f4>
 80094f0:	6963      	ldr	r3, [r4, #20]
 80094f2:	9a05      	ldr	r2, [sp, #20]
 80094f4:	189b      	adds	r3, r3, r2
 80094f6:	6163      	str	r3, [r4, #20]
 80094f8:	7833      	ldrb	r3, [r6, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d100      	bne.n	8009500 <_vfiprintf_r+0xa4>
 80094fe:	e0a7      	b.n	8009650 <_vfiprintf_r+0x1f4>
 8009500:	2201      	movs	r2, #1
 8009502:	2300      	movs	r3, #0
 8009504:	4252      	negs	r2, r2
 8009506:	6062      	str	r2, [r4, #4]
 8009508:	a904      	add	r1, sp, #16
 800950a:	3254      	adds	r2, #84	; 0x54
 800950c:	1852      	adds	r2, r2, r1
 800950e:	1c75      	adds	r5, r6, #1
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	60e3      	str	r3, [r4, #12]
 8009514:	60a3      	str	r3, [r4, #8]
 8009516:	7013      	strb	r3, [r2, #0]
 8009518:	65a3      	str	r3, [r4, #88]	; 0x58
 800951a:	4b59      	ldr	r3, [pc, #356]	; (8009680 <_vfiprintf_r+0x224>)
 800951c:	2205      	movs	r2, #5
 800951e:	0018      	movs	r0, r3
 8009520:	7829      	ldrb	r1, [r5, #0]
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	f7fd fb75 	bl	8006c12 <memchr>
 8009528:	1c6e      	adds	r6, r5, #1
 800952a:	2800      	cmp	r0, #0
 800952c:	d11f      	bne.n	800956e <_vfiprintf_r+0x112>
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	06d3      	lsls	r3, r2, #27
 8009532:	d504      	bpl.n	800953e <_vfiprintf_r+0xe2>
 8009534:	2353      	movs	r3, #83	; 0x53
 8009536:	a904      	add	r1, sp, #16
 8009538:	185b      	adds	r3, r3, r1
 800953a:	2120      	movs	r1, #32
 800953c:	7019      	strb	r1, [r3, #0]
 800953e:	0713      	lsls	r3, r2, #28
 8009540:	d504      	bpl.n	800954c <_vfiprintf_r+0xf0>
 8009542:	2353      	movs	r3, #83	; 0x53
 8009544:	a904      	add	r1, sp, #16
 8009546:	185b      	adds	r3, r3, r1
 8009548:	212b      	movs	r1, #43	; 0x2b
 800954a:	7019      	strb	r1, [r3, #0]
 800954c:	782b      	ldrb	r3, [r5, #0]
 800954e:	2b2a      	cmp	r3, #42	; 0x2a
 8009550:	d016      	beq.n	8009580 <_vfiprintf_r+0x124>
 8009552:	002e      	movs	r6, r5
 8009554:	2100      	movs	r1, #0
 8009556:	200a      	movs	r0, #10
 8009558:	68e3      	ldr	r3, [r4, #12]
 800955a:	7832      	ldrb	r2, [r6, #0]
 800955c:	1c75      	adds	r5, r6, #1
 800955e:	3a30      	subs	r2, #48	; 0x30
 8009560:	2a09      	cmp	r2, #9
 8009562:	d94e      	bls.n	8009602 <_vfiprintf_r+0x1a6>
 8009564:	2900      	cmp	r1, #0
 8009566:	d111      	bne.n	800958c <_vfiprintf_r+0x130>
 8009568:	e017      	b.n	800959a <_vfiprintf_r+0x13e>
 800956a:	3601      	adds	r6, #1
 800956c:	e7af      	b.n	80094ce <_vfiprintf_r+0x72>
 800956e:	9b05      	ldr	r3, [sp, #20]
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	1ac0      	subs	r0, r0, r3
 8009574:	2301      	movs	r3, #1
 8009576:	4083      	lsls	r3, r0
 8009578:	4313      	orrs	r3, r2
 800957a:	0035      	movs	r5, r6
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	e7cc      	b.n	800951a <_vfiprintf_r+0xbe>
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	1d19      	adds	r1, r3, #4
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	9107      	str	r1, [sp, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	db01      	blt.n	8009590 <_vfiprintf_r+0x134>
 800958c:	930b      	str	r3, [sp, #44]	; 0x2c
 800958e:	e004      	b.n	800959a <_vfiprintf_r+0x13e>
 8009590:	425b      	negs	r3, r3
 8009592:	60e3      	str	r3, [r4, #12]
 8009594:	2302      	movs	r3, #2
 8009596:	4313      	orrs	r3, r2
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	7833      	ldrb	r3, [r6, #0]
 800959c:	2b2e      	cmp	r3, #46	; 0x2e
 800959e:	d10a      	bne.n	80095b6 <_vfiprintf_r+0x15a>
 80095a0:	7873      	ldrb	r3, [r6, #1]
 80095a2:	2b2a      	cmp	r3, #42	; 0x2a
 80095a4:	d135      	bne.n	8009612 <_vfiprintf_r+0x1b6>
 80095a6:	9b07      	ldr	r3, [sp, #28]
 80095a8:	3602      	adds	r6, #2
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	9207      	str	r2, [sp, #28]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	db2b      	blt.n	800960c <_vfiprintf_r+0x1b0>
 80095b4:	9309      	str	r3, [sp, #36]	; 0x24
 80095b6:	4d33      	ldr	r5, [pc, #204]	; (8009684 <_vfiprintf_r+0x228>)
 80095b8:	2203      	movs	r2, #3
 80095ba:	0028      	movs	r0, r5
 80095bc:	7831      	ldrb	r1, [r6, #0]
 80095be:	f7fd fb28 	bl	8006c12 <memchr>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d006      	beq.n	80095d4 <_vfiprintf_r+0x178>
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	1b40      	subs	r0, r0, r5
 80095ca:	4083      	lsls	r3, r0
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	3601      	adds	r6, #1
 80095d0:	4313      	orrs	r3, r2
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	7831      	ldrb	r1, [r6, #0]
 80095d6:	2206      	movs	r2, #6
 80095d8:	482b      	ldr	r0, [pc, #172]	; (8009688 <_vfiprintf_r+0x22c>)
 80095da:	1c75      	adds	r5, r6, #1
 80095dc:	7621      	strb	r1, [r4, #24]
 80095de:	f7fd fb18 	bl	8006c12 <memchr>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d043      	beq.n	800966e <_vfiprintf_r+0x212>
 80095e6:	4b29      	ldr	r3, [pc, #164]	; (800968c <_vfiprintf_r+0x230>)
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d125      	bne.n	8009638 <_vfiprintf_r+0x1dc>
 80095ec:	2207      	movs	r2, #7
 80095ee:	9b07      	ldr	r3, [sp, #28]
 80095f0:	3307      	adds	r3, #7
 80095f2:	4393      	bics	r3, r2
 80095f4:	3308      	adds	r3, #8
 80095f6:	9307      	str	r3, [sp, #28]
 80095f8:	6963      	ldr	r3, [r4, #20]
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	189b      	adds	r3, r3, r2
 80095fe:	6163      	str	r3, [r4, #20]
 8009600:	e764      	b.n	80094cc <_vfiprintf_r+0x70>
 8009602:	4343      	muls	r3, r0
 8009604:	002e      	movs	r6, r5
 8009606:	2101      	movs	r1, #1
 8009608:	189b      	adds	r3, r3, r2
 800960a:	e7a6      	b.n	800955a <_vfiprintf_r+0xfe>
 800960c:	2301      	movs	r3, #1
 800960e:	425b      	negs	r3, r3
 8009610:	e7d0      	b.n	80095b4 <_vfiprintf_r+0x158>
 8009612:	2300      	movs	r3, #0
 8009614:	200a      	movs	r0, #10
 8009616:	001a      	movs	r2, r3
 8009618:	3601      	adds	r6, #1
 800961a:	6063      	str	r3, [r4, #4]
 800961c:	7831      	ldrb	r1, [r6, #0]
 800961e:	1c75      	adds	r5, r6, #1
 8009620:	3930      	subs	r1, #48	; 0x30
 8009622:	2909      	cmp	r1, #9
 8009624:	d903      	bls.n	800962e <_vfiprintf_r+0x1d2>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0c5      	beq.n	80095b6 <_vfiprintf_r+0x15a>
 800962a:	9209      	str	r2, [sp, #36]	; 0x24
 800962c:	e7c3      	b.n	80095b6 <_vfiprintf_r+0x15a>
 800962e:	4342      	muls	r2, r0
 8009630:	002e      	movs	r6, r5
 8009632:	2301      	movs	r3, #1
 8009634:	1852      	adds	r2, r2, r1
 8009636:	e7f1      	b.n	800961c <_vfiprintf_r+0x1c0>
 8009638:	aa07      	add	r2, sp, #28
 800963a:	9200      	str	r2, [sp, #0]
 800963c:	0021      	movs	r1, r4
 800963e:	003a      	movs	r2, r7
 8009640:	4b13      	ldr	r3, [pc, #76]	; (8009690 <_vfiprintf_r+0x234>)
 8009642:	9803      	ldr	r0, [sp, #12]
 8009644:	f7fc fb0c 	bl	8005c60 <_printf_float>
 8009648:	9004      	str	r0, [sp, #16]
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	3301      	adds	r3, #1
 800964e:	d1d3      	bne.n	80095f8 <_vfiprintf_r+0x19c>
 8009650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009652:	07db      	lsls	r3, r3, #31
 8009654:	d405      	bmi.n	8009662 <_vfiprintf_r+0x206>
 8009656:	89bb      	ldrh	r3, [r7, #12]
 8009658:	059b      	lsls	r3, r3, #22
 800965a:	d402      	bmi.n	8009662 <_vfiprintf_r+0x206>
 800965c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800965e:	f7fd fad7 	bl	8006c10 <__retarget_lock_release_recursive>
 8009662:	89bb      	ldrh	r3, [r7, #12]
 8009664:	065b      	lsls	r3, r3, #25
 8009666:	d500      	bpl.n	800966a <_vfiprintf_r+0x20e>
 8009668:	e71d      	b.n	80094a6 <_vfiprintf_r+0x4a>
 800966a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800966c:	e71d      	b.n	80094aa <_vfiprintf_r+0x4e>
 800966e:	aa07      	add	r2, sp, #28
 8009670:	9200      	str	r2, [sp, #0]
 8009672:	0021      	movs	r1, r4
 8009674:	003a      	movs	r2, r7
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <_vfiprintf_r+0x234>)
 8009678:	9803      	ldr	r0, [sp, #12]
 800967a:	f7fc fdb7 	bl	80061ec <_printf_i>
 800967e:	e7e3      	b.n	8009648 <_vfiprintf_r+0x1ec>
 8009680:	0800a850 	.word	0x0800a850
 8009684:	0800a856 	.word	0x0800a856
 8009688:	0800a85a 	.word	0x0800a85a
 800968c:	08005c61 	.word	0x08005c61
 8009690:	08009437 	.word	0x08009437

08009694 <__sflush_r>:
 8009694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009696:	898b      	ldrh	r3, [r1, #12]
 8009698:	0005      	movs	r5, r0
 800969a:	000c      	movs	r4, r1
 800969c:	071a      	lsls	r2, r3, #28
 800969e:	d45c      	bmi.n	800975a <__sflush_r+0xc6>
 80096a0:	684a      	ldr	r2, [r1, #4]
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	dc04      	bgt.n	80096b0 <__sflush_r+0x1c>
 80096a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	dc01      	bgt.n	80096b0 <__sflush_r+0x1c>
 80096ac:	2000      	movs	r0, #0
 80096ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80096b2:	2f00      	cmp	r7, #0
 80096b4:	d0fa      	beq.n	80096ac <__sflush_r+0x18>
 80096b6:	2200      	movs	r2, #0
 80096b8:	2080      	movs	r0, #128	; 0x80
 80096ba:	682e      	ldr	r6, [r5, #0]
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	001a      	movs	r2, r3
 80096c0:	0140      	lsls	r0, r0, #5
 80096c2:	6a21      	ldr	r1, [r4, #32]
 80096c4:	4002      	ands	r2, r0
 80096c6:	4203      	tst	r3, r0
 80096c8:	d034      	beq.n	8009734 <__sflush_r+0xa0>
 80096ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	075b      	lsls	r3, r3, #29
 80096d0:	d506      	bpl.n	80096e0 <__sflush_r+0x4c>
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <__sflush_r+0x4c>
 80096dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096de:	1ac0      	subs	r0, r0, r3
 80096e0:	0002      	movs	r2, r0
 80096e2:	2300      	movs	r3, #0
 80096e4:	0028      	movs	r0, r5
 80096e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80096e8:	6a21      	ldr	r1, [r4, #32]
 80096ea:	47b8      	blx	r7
 80096ec:	89a2      	ldrh	r2, [r4, #12]
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d106      	bne.n	8009700 <__sflush_r+0x6c>
 80096f2:	6829      	ldr	r1, [r5, #0]
 80096f4:	291d      	cmp	r1, #29
 80096f6:	d82c      	bhi.n	8009752 <__sflush_r+0xbe>
 80096f8:	4b2a      	ldr	r3, [pc, #168]	; (80097a4 <__sflush_r+0x110>)
 80096fa:	410b      	asrs	r3, r1
 80096fc:	07db      	lsls	r3, r3, #31
 80096fe:	d428      	bmi.n	8009752 <__sflush_r+0xbe>
 8009700:	2300      	movs	r3, #0
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	04d2      	lsls	r2, r2, #19
 800970a:	d505      	bpl.n	8009718 <__sflush_r+0x84>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <__sflush_r+0x82>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d100      	bne.n	8009718 <__sflush_r+0x84>
 8009716:	6560      	str	r0, [r4, #84]	; 0x54
 8009718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971a:	602e      	str	r6, [r5, #0]
 800971c:	2900      	cmp	r1, #0
 800971e:	d0c5      	beq.n	80096ac <__sflush_r+0x18>
 8009720:	0023      	movs	r3, r4
 8009722:	3344      	adds	r3, #68	; 0x44
 8009724:	4299      	cmp	r1, r3
 8009726:	d002      	beq.n	800972e <__sflush_r+0x9a>
 8009728:	0028      	movs	r0, r5
 800972a:	f7fe f91f 	bl	800796c <_free_r>
 800972e:	2000      	movs	r0, #0
 8009730:	6360      	str	r0, [r4, #52]	; 0x34
 8009732:	e7bc      	b.n	80096ae <__sflush_r+0x1a>
 8009734:	2301      	movs	r3, #1
 8009736:	0028      	movs	r0, r5
 8009738:	47b8      	blx	r7
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	d1c6      	bne.n	80096cc <__sflush_r+0x38>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0c3      	beq.n	80096cc <__sflush_r+0x38>
 8009744:	2b1d      	cmp	r3, #29
 8009746:	d001      	beq.n	800974c <__sflush_r+0xb8>
 8009748:	2b16      	cmp	r3, #22
 800974a:	d101      	bne.n	8009750 <__sflush_r+0xbc>
 800974c:	602e      	str	r6, [r5, #0]
 800974e:	e7ad      	b.n	80096ac <__sflush_r+0x18>
 8009750:	89a2      	ldrh	r2, [r4, #12]
 8009752:	2340      	movs	r3, #64	; 0x40
 8009754:	4313      	orrs	r3, r2
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	e7a9      	b.n	80096ae <__sflush_r+0x1a>
 800975a:	690e      	ldr	r6, [r1, #16]
 800975c:	2e00      	cmp	r6, #0
 800975e:	d0a5      	beq.n	80096ac <__sflush_r+0x18>
 8009760:	680f      	ldr	r7, [r1, #0]
 8009762:	600e      	str	r6, [r1, #0]
 8009764:	1bba      	subs	r2, r7, r6
 8009766:	9201      	str	r2, [sp, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	079b      	lsls	r3, r3, #30
 800976c:	d100      	bne.n	8009770 <__sflush_r+0xdc>
 800976e:	694a      	ldr	r2, [r1, #20]
 8009770:	60a2      	str	r2, [r4, #8]
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	dd99      	ble.n	80096ac <__sflush_r+0x18>
 8009778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800977a:	0032      	movs	r2, r6
 800977c:	001f      	movs	r7, r3
 800977e:	0028      	movs	r0, r5
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	6a21      	ldr	r1, [r4, #32]
 8009784:	47b8      	blx	r7
 8009786:	2800      	cmp	r0, #0
 8009788:	dc06      	bgt.n	8009798 <__sflush_r+0x104>
 800978a:	2340      	movs	r3, #64	; 0x40
 800978c:	2001      	movs	r0, #1
 800978e:	89a2      	ldrh	r2, [r4, #12]
 8009790:	4240      	negs	r0, r0
 8009792:	4313      	orrs	r3, r2
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	e78a      	b.n	80096ae <__sflush_r+0x1a>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	1836      	adds	r6, r6, r0
 800979c:	1a1b      	subs	r3, r3, r0
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	e7e7      	b.n	8009772 <__sflush_r+0xde>
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	dfbffffe 	.word	0xdfbffffe

080097a8 <_fflush_r>:
 80097a8:	690b      	ldr	r3, [r1, #16]
 80097aa:	b570      	push	{r4, r5, r6, lr}
 80097ac:	0005      	movs	r5, r0
 80097ae:	000c      	movs	r4, r1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <_fflush_r+0x12>
 80097b4:	2500      	movs	r5, #0
 80097b6:	0028      	movs	r0, r5
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d004      	beq.n	80097c8 <_fflush_r+0x20>
 80097be:	6a03      	ldr	r3, [r0, #32]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <_fflush_r+0x20>
 80097c4:	f7fd f8ba 	bl	800693c <__sinit>
 80097c8:	220c      	movs	r2, #12
 80097ca:	5ea3      	ldrsh	r3, [r4, r2]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0f1      	beq.n	80097b4 <_fflush_r+0xc>
 80097d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d2:	07d2      	lsls	r2, r2, #31
 80097d4:	d404      	bmi.n	80097e0 <_fflush_r+0x38>
 80097d6:	059b      	lsls	r3, r3, #22
 80097d8:	d402      	bmi.n	80097e0 <_fflush_r+0x38>
 80097da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097dc:	f7fd fa17 	bl	8006c0e <__retarget_lock_acquire_recursive>
 80097e0:	0028      	movs	r0, r5
 80097e2:	0021      	movs	r1, r4
 80097e4:	f7ff ff56 	bl	8009694 <__sflush_r>
 80097e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ea:	0005      	movs	r5, r0
 80097ec:	07db      	lsls	r3, r3, #31
 80097ee:	d4e2      	bmi.n	80097b6 <_fflush_r+0xe>
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	059b      	lsls	r3, r3, #22
 80097f4:	d4df      	bmi.n	80097b6 <_fflush_r+0xe>
 80097f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f8:	f7fd fa0a 	bl	8006c10 <__retarget_lock_release_recursive>
 80097fc:	e7db      	b.n	80097b6 <_fflush_r+0xe>

080097fe <__swbuf_r>:
 80097fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009800:	0006      	movs	r6, r0
 8009802:	000d      	movs	r5, r1
 8009804:	0014      	movs	r4, r2
 8009806:	2800      	cmp	r0, #0
 8009808:	d004      	beq.n	8009814 <__swbuf_r+0x16>
 800980a:	6a03      	ldr	r3, [r0, #32]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <__swbuf_r+0x16>
 8009810:	f7fd f894 	bl	800693c <__sinit>
 8009814:	69a3      	ldr	r3, [r4, #24]
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	071b      	lsls	r3, r3, #28
 800981c:	d528      	bpl.n	8009870 <__swbuf_r+0x72>
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d025      	beq.n	8009870 <__swbuf_r+0x72>
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	6820      	ldr	r0, [r4, #0]
 8009828:	b2ef      	uxtb	r7, r5
 800982a:	1ac0      	subs	r0, r0, r3
 800982c:	6963      	ldr	r3, [r4, #20]
 800982e:	b2ed      	uxtb	r5, r5
 8009830:	4283      	cmp	r3, r0
 8009832:	dc05      	bgt.n	8009840 <__swbuf_r+0x42>
 8009834:	0021      	movs	r1, r4
 8009836:	0030      	movs	r0, r6
 8009838:	f7ff ffb6 	bl	80097a8 <_fflush_r>
 800983c:	2800      	cmp	r0, #0
 800983e:	d11d      	bne.n	800987c <__swbuf_r+0x7e>
 8009840:	68a3      	ldr	r3, [r4, #8]
 8009842:	3001      	adds	r0, #1
 8009844:	3b01      	subs	r3, #1
 8009846:	60a3      	str	r3, [r4, #8]
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	701f      	strb	r7, [r3, #0]
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	4283      	cmp	r3, r0
 8009854:	d004      	beq.n	8009860 <__swbuf_r+0x62>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	07db      	lsls	r3, r3, #31
 800985a:	d507      	bpl.n	800986c <__swbuf_r+0x6e>
 800985c:	2d0a      	cmp	r5, #10
 800985e:	d105      	bne.n	800986c <__swbuf_r+0x6e>
 8009860:	0021      	movs	r1, r4
 8009862:	0030      	movs	r0, r6
 8009864:	f7ff ffa0 	bl	80097a8 <_fflush_r>
 8009868:	2800      	cmp	r0, #0
 800986a:	d107      	bne.n	800987c <__swbuf_r+0x7e>
 800986c:	0028      	movs	r0, r5
 800986e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009870:	0021      	movs	r1, r4
 8009872:	0030      	movs	r0, r6
 8009874:	f000 f806 	bl	8009884 <__swsetup_r>
 8009878:	2800      	cmp	r0, #0
 800987a:	d0d3      	beq.n	8009824 <__swbuf_r+0x26>
 800987c:	2501      	movs	r5, #1
 800987e:	426d      	negs	r5, r5
 8009880:	e7f4      	b.n	800986c <__swbuf_r+0x6e>
	...

08009884 <__swsetup_r>:
 8009884:	4b30      	ldr	r3, [pc, #192]	; (8009948 <__swsetup_r+0xc4>)
 8009886:	b570      	push	{r4, r5, r6, lr}
 8009888:	0005      	movs	r5, r0
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	000c      	movs	r4, r1
 800988e:	2800      	cmp	r0, #0
 8009890:	d004      	beq.n	800989c <__swsetup_r+0x18>
 8009892:	6a03      	ldr	r3, [r0, #32]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <__swsetup_r+0x18>
 8009898:	f7fd f850 	bl	800693c <__sinit>
 800989c:	230c      	movs	r3, #12
 800989e:	5ee2      	ldrsh	r2, [r4, r3]
 80098a0:	b293      	uxth	r3, r2
 80098a2:	0711      	lsls	r1, r2, #28
 80098a4:	d423      	bmi.n	80098ee <__swsetup_r+0x6a>
 80098a6:	06d9      	lsls	r1, r3, #27
 80098a8:	d407      	bmi.n	80098ba <__swsetup_r+0x36>
 80098aa:	2309      	movs	r3, #9
 80098ac:	2001      	movs	r0, #1
 80098ae:	602b      	str	r3, [r5, #0]
 80098b0:	3337      	adds	r3, #55	; 0x37
 80098b2:	4313      	orrs	r3, r2
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	4240      	negs	r0, r0
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
 80098ba:	075b      	lsls	r3, r3, #29
 80098bc:	d513      	bpl.n	80098e6 <__swsetup_r+0x62>
 80098be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d008      	beq.n	80098d6 <__swsetup_r+0x52>
 80098c4:	0023      	movs	r3, r4
 80098c6:	3344      	adds	r3, #68	; 0x44
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d002      	beq.n	80098d2 <__swsetup_r+0x4e>
 80098cc:	0028      	movs	r0, r5
 80098ce:	f7fe f84d 	bl	800796c <_free_r>
 80098d2:	2300      	movs	r3, #0
 80098d4:	6363      	str	r3, [r4, #52]	; 0x34
 80098d6:	2224      	movs	r2, #36	; 0x24
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	4393      	bics	r3, r2
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	2300      	movs	r3, #0
 80098e0:	6063      	str	r3, [r4, #4]
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	2308      	movs	r3, #8
 80098e8:	89a2      	ldrh	r2, [r4, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10b      	bne.n	800990c <__swsetup_r+0x88>
 80098f4:	21a0      	movs	r1, #160	; 0xa0
 80098f6:	2280      	movs	r2, #128	; 0x80
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	0089      	lsls	r1, r1, #2
 80098fc:	0092      	lsls	r2, r2, #2
 80098fe:	400b      	ands	r3, r1
 8009900:	4293      	cmp	r3, r2
 8009902:	d003      	beq.n	800990c <__swsetup_r+0x88>
 8009904:	0021      	movs	r1, r4
 8009906:	0028      	movs	r0, r5
 8009908:	f000 fc94 	bl	800a234 <__smakebuf_r>
 800990c:	220c      	movs	r2, #12
 800990e:	5ea3      	ldrsh	r3, [r4, r2]
 8009910:	2001      	movs	r0, #1
 8009912:	001a      	movs	r2, r3
 8009914:	b299      	uxth	r1, r3
 8009916:	4002      	ands	r2, r0
 8009918:	4203      	tst	r3, r0
 800991a:	d00f      	beq.n	800993c <__swsetup_r+0xb8>
 800991c:	2200      	movs	r2, #0
 800991e:	60a2      	str	r2, [r4, #8]
 8009920:	6962      	ldr	r2, [r4, #20]
 8009922:	4252      	negs	r2, r2
 8009924:	61a2      	str	r2, [r4, #24]
 8009926:	2000      	movs	r0, #0
 8009928:	6922      	ldr	r2, [r4, #16]
 800992a:	4282      	cmp	r2, r0
 800992c:	d1c4      	bne.n	80098b8 <__swsetup_r+0x34>
 800992e:	0609      	lsls	r1, r1, #24
 8009930:	d5c2      	bpl.n	80098b8 <__swsetup_r+0x34>
 8009932:	2240      	movs	r2, #64	; 0x40
 8009934:	4313      	orrs	r3, r2
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	3801      	subs	r0, #1
 800993a:	e7bd      	b.n	80098b8 <__swsetup_r+0x34>
 800993c:	0788      	lsls	r0, r1, #30
 800993e:	d400      	bmi.n	8009942 <__swsetup_r+0xbe>
 8009940:	6962      	ldr	r2, [r4, #20]
 8009942:	60a2      	str	r2, [r4, #8]
 8009944:	e7ef      	b.n	8009926 <__swsetup_r+0xa2>
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	20000064 	.word	0x20000064

0800994c <memmove>:
 800994c:	b510      	push	{r4, lr}
 800994e:	4288      	cmp	r0, r1
 8009950:	d902      	bls.n	8009958 <memmove+0xc>
 8009952:	188b      	adds	r3, r1, r2
 8009954:	4298      	cmp	r0, r3
 8009956:	d303      	bcc.n	8009960 <memmove+0x14>
 8009958:	2300      	movs	r3, #0
 800995a:	e007      	b.n	800996c <memmove+0x20>
 800995c:	5c8b      	ldrb	r3, [r1, r2]
 800995e:	5483      	strb	r3, [r0, r2]
 8009960:	3a01      	subs	r2, #1
 8009962:	d2fb      	bcs.n	800995c <memmove+0x10>
 8009964:	bd10      	pop	{r4, pc}
 8009966:	5ccc      	ldrb	r4, [r1, r3]
 8009968:	54c4      	strb	r4, [r0, r3]
 800996a:	3301      	adds	r3, #1
 800996c:	429a      	cmp	r2, r3
 800996e:	d1fa      	bne.n	8009966 <memmove+0x1a>
 8009970:	e7f8      	b.n	8009964 <memmove+0x18>

08009972 <strncmp>:
 8009972:	b530      	push	{r4, r5, lr}
 8009974:	0005      	movs	r5, r0
 8009976:	1e10      	subs	r0, r2, #0
 8009978:	d00b      	beq.n	8009992 <strncmp+0x20>
 800997a:	2400      	movs	r4, #0
 800997c:	3a01      	subs	r2, #1
 800997e:	5d2b      	ldrb	r3, [r5, r4]
 8009980:	5d08      	ldrb	r0, [r1, r4]
 8009982:	4283      	cmp	r3, r0
 8009984:	d104      	bne.n	8009990 <strncmp+0x1e>
 8009986:	42a2      	cmp	r2, r4
 8009988:	d002      	beq.n	8009990 <strncmp+0x1e>
 800998a:	3401      	adds	r4, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1f6      	bne.n	800997e <strncmp+0xc>
 8009990:	1a18      	subs	r0, r3, r0
 8009992:	bd30      	pop	{r4, r5, pc}

08009994 <_sbrk_r>:
 8009994:	2300      	movs	r3, #0
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	4d06      	ldr	r5, [pc, #24]	; (80099b4 <_sbrk_r+0x20>)
 800999a:	0004      	movs	r4, r0
 800999c:	0008      	movs	r0, r1
 800999e:	602b      	str	r3, [r5, #0]
 80099a0:	f7f9 f9f0 	bl	8002d84 <_sbrk>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d103      	bne.n	80099b0 <_sbrk_r+0x1c>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d000      	beq.n	80099b0 <_sbrk_r+0x1c>
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	bd70      	pop	{r4, r5, r6, pc}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	20000410 	.word	0x20000410

080099b8 <memcpy>:
 80099b8:	2300      	movs	r3, #0
 80099ba:	b510      	push	{r4, lr}
 80099bc:	429a      	cmp	r2, r3
 80099be:	d100      	bne.n	80099c2 <memcpy+0xa>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	5ccc      	ldrb	r4, [r1, r3]
 80099c4:	54c4      	strb	r4, [r0, r3]
 80099c6:	3301      	adds	r3, #1
 80099c8:	e7f8      	b.n	80099bc <memcpy+0x4>
	...

080099cc <nan>:
 80099cc:	2000      	movs	r0, #0
 80099ce:	4901      	ldr	r1, [pc, #4]	; (80099d4 <nan+0x8>)
 80099d0:	4770      	bx	lr
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	7ff80000 	.word	0x7ff80000

080099d8 <__assert_func>:
 80099d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099da:	0014      	movs	r4, r2
 80099dc:	001a      	movs	r2, r3
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <__assert_func+0x2c>)
 80099e0:	0005      	movs	r5, r0
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	000e      	movs	r6, r1
 80099e6:	68d8      	ldr	r0, [r3, #12]
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <__assert_func+0x30>)
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d101      	bne.n	80099f2 <__assert_func+0x1a>
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <__assert_func+0x34>)
 80099f0:	001c      	movs	r4, r3
 80099f2:	4907      	ldr	r1, [pc, #28]	; (8009a10 <__assert_func+0x38>)
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	9402      	str	r4, [sp, #8]
 80099f8:	002b      	movs	r3, r5
 80099fa:	9600      	str	r6, [sp, #0]
 80099fc:	f000 fbe2 	bl	800a1c4 <fiprintf>
 8009a00:	f000 fc7a 	bl	800a2f8 <abort>
 8009a04:	20000064 	.word	0x20000064
 8009a08:	0800a869 	.word	0x0800a869
 8009a0c:	0800a8a4 	.word	0x0800a8a4
 8009a10:	0800a876 	.word	0x0800a876

08009a14 <_calloc_r>:
 8009a14:	b570      	push	{r4, r5, r6, lr}
 8009a16:	0c0b      	lsrs	r3, r1, #16
 8009a18:	0c15      	lsrs	r5, r2, #16
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d11e      	bne.n	8009a5c <_calloc_r+0x48>
 8009a1e:	2d00      	cmp	r5, #0
 8009a20:	d10c      	bne.n	8009a3c <_calloc_r+0x28>
 8009a22:	b289      	uxth	r1, r1
 8009a24:	b294      	uxth	r4, r2
 8009a26:	434c      	muls	r4, r1
 8009a28:	0021      	movs	r1, r4
 8009a2a:	f7fe f815 	bl	8007a58 <_malloc_r>
 8009a2e:	1e05      	subs	r5, r0, #0
 8009a30:	d01b      	beq.n	8009a6a <_calloc_r+0x56>
 8009a32:	0022      	movs	r2, r4
 8009a34:	2100      	movs	r1, #0
 8009a36:	f7fd f865 	bl	8006b04 <memset>
 8009a3a:	e016      	b.n	8009a6a <_calloc_r+0x56>
 8009a3c:	1c2b      	adds	r3, r5, #0
 8009a3e:	1c0c      	adds	r4, r1, #0
 8009a40:	b289      	uxth	r1, r1
 8009a42:	b292      	uxth	r2, r2
 8009a44:	434a      	muls	r2, r1
 8009a46:	b2a1      	uxth	r1, r4
 8009a48:	b29c      	uxth	r4, r3
 8009a4a:	434c      	muls	r4, r1
 8009a4c:	0c13      	lsrs	r3, r2, #16
 8009a4e:	18e4      	adds	r4, r4, r3
 8009a50:	0c23      	lsrs	r3, r4, #16
 8009a52:	d107      	bne.n	8009a64 <_calloc_r+0x50>
 8009a54:	0424      	lsls	r4, r4, #16
 8009a56:	b292      	uxth	r2, r2
 8009a58:	4314      	orrs	r4, r2
 8009a5a:	e7e5      	b.n	8009a28 <_calloc_r+0x14>
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	d101      	bne.n	8009a64 <_calloc_r+0x50>
 8009a60:	1c14      	adds	r4, r2, #0
 8009a62:	e7ed      	b.n	8009a40 <_calloc_r+0x2c>
 8009a64:	230c      	movs	r3, #12
 8009a66:	2500      	movs	r5, #0
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	0028      	movs	r0, r5
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}

08009a6e <rshift>:
 8009a6e:	0002      	movs	r2, r0
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	6904      	ldr	r4, [r0, #16]
 8009a74:	114b      	asrs	r3, r1, #5
 8009a76:	b085      	sub	sp, #20
 8009a78:	3214      	adds	r2, #20
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	114d      	asrs	r5, r1, #5
 8009a7e:	0013      	movs	r3, r2
 8009a80:	42ac      	cmp	r4, r5
 8009a82:	dd32      	ble.n	8009aea <rshift+0x7c>
 8009a84:	261f      	movs	r6, #31
 8009a86:	000f      	movs	r7, r1
 8009a88:	114b      	asrs	r3, r1, #5
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	00a5      	lsls	r5, r4, #2
 8009a8e:	18d3      	adds	r3, r2, r3
 8009a90:	4037      	ands	r7, r6
 8009a92:	1955      	adds	r5, r2, r5
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	9701      	str	r7, [sp, #4]
 8009a98:	4231      	tst	r1, r6
 8009a9a:	d10d      	bne.n	8009ab8 <rshift+0x4a>
 8009a9c:	0016      	movs	r6, r2
 8009a9e:	0019      	movs	r1, r3
 8009aa0:	428d      	cmp	r5, r1
 8009aa2:	d836      	bhi.n	8009b12 <rshift+0xa4>
 8009aa4:	9900      	ldr	r1, [sp, #0]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	3903      	subs	r1, #3
 8009aaa:	428d      	cmp	r5, r1
 8009aac:	d302      	bcc.n	8009ab4 <rshift+0x46>
 8009aae:	9b02      	ldr	r3, [sp, #8]
 8009ab0:	1ae4      	subs	r4, r4, r3
 8009ab2:	00a3      	lsls	r3, r4, #2
 8009ab4:	18d3      	adds	r3, r2, r3
 8009ab6:	e018      	b.n	8009aea <rshift+0x7c>
 8009ab8:	2120      	movs	r1, #32
 8009aba:	9e01      	ldr	r6, [sp, #4]
 8009abc:	9f01      	ldr	r7, [sp, #4]
 8009abe:	1b89      	subs	r1, r1, r6
 8009ac0:	9e00      	ldr	r6, [sp, #0]
 8009ac2:	9103      	str	r1, [sp, #12]
 8009ac4:	ce02      	ldmia	r6!, {r1}
 8009ac6:	4694      	mov	ip, r2
 8009ac8:	40f9      	lsrs	r1, r7
 8009aca:	42b5      	cmp	r5, r6
 8009acc:	d816      	bhi.n	8009afc <rshift+0x8e>
 8009ace:	9e00      	ldr	r6, [sp, #0]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	42b5      	cmp	r5, r6
 8009ad6:	d303      	bcc.n	8009ae0 <rshift+0x72>
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	1ae3      	subs	r3, r4, r3
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	3b04      	subs	r3, #4
 8009ae0:	18d3      	adds	r3, r2, r3
 8009ae2:	6019      	str	r1, [r3, #0]
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d000      	beq.n	8009aea <rshift+0x7c>
 8009ae8:	3304      	adds	r3, #4
 8009aea:	1a99      	subs	r1, r3, r2
 8009aec:	1089      	asrs	r1, r1, #2
 8009aee:	6101      	str	r1, [r0, #16]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d101      	bne.n	8009af8 <rshift+0x8a>
 8009af4:	2300      	movs	r3, #0
 8009af6:	6143      	str	r3, [r0, #20]
 8009af8:	b005      	add	sp, #20
 8009afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afc:	6837      	ldr	r7, [r6, #0]
 8009afe:	9b03      	ldr	r3, [sp, #12]
 8009b00:	409f      	lsls	r7, r3
 8009b02:	430f      	orrs	r7, r1
 8009b04:	4661      	mov	r1, ip
 8009b06:	c180      	stmia	r1!, {r7}
 8009b08:	468c      	mov	ip, r1
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	ce02      	ldmia	r6!, {r1}
 8009b0e:	40d9      	lsrs	r1, r3
 8009b10:	e7db      	b.n	8009aca <rshift+0x5c>
 8009b12:	c980      	ldmia	r1!, {r7}
 8009b14:	c680      	stmia	r6!, {r7}
 8009b16:	e7c3      	b.n	8009aa0 <rshift+0x32>

08009b18 <__hexdig_fun>:
 8009b18:	0002      	movs	r2, r0
 8009b1a:	3a30      	subs	r2, #48	; 0x30
 8009b1c:	0003      	movs	r3, r0
 8009b1e:	2a09      	cmp	r2, #9
 8009b20:	d802      	bhi.n	8009b28 <__hexdig_fun+0x10>
 8009b22:	3b20      	subs	r3, #32
 8009b24:	b2d8      	uxtb	r0, r3
 8009b26:	4770      	bx	lr
 8009b28:	0002      	movs	r2, r0
 8009b2a:	3a61      	subs	r2, #97	; 0x61
 8009b2c:	2a05      	cmp	r2, #5
 8009b2e:	d801      	bhi.n	8009b34 <__hexdig_fun+0x1c>
 8009b30:	3b47      	subs	r3, #71	; 0x47
 8009b32:	e7f7      	b.n	8009b24 <__hexdig_fun+0xc>
 8009b34:	001a      	movs	r2, r3
 8009b36:	3a41      	subs	r2, #65	; 0x41
 8009b38:	2000      	movs	r0, #0
 8009b3a:	2a05      	cmp	r2, #5
 8009b3c:	d8f3      	bhi.n	8009b26 <__hexdig_fun+0xe>
 8009b3e:	3b27      	subs	r3, #39	; 0x27
 8009b40:	e7f0      	b.n	8009b24 <__hexdig_fun+0xc>
	...

08009b44 <__gethex>:
 8009b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b46:	b089      	sub	sp, #36	; 0x24
 8009b48:	9307      	str	r3, [sp, #28]
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	9201      	str	r2, [sp, #4]
 8009b4e:	680a      	ldr	r2, [r1, #0]
 8009b50:	425b      	negs	r3, r3
 8009b52:	9003      	str	r0, [sp, #12]
 8009b54:	9106      	str	r1, [sp, #24]
 8009b56:	1c96      	adds	r6, r2, #2
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	199a      	adds	r2, r3, r6
 8009b5c:	9600      	str	r6, [sp, #0]
 8009b5e:	9205      	str	r2, [sp, #20]
 8009b60:	9a00      	ldr	r2, [sp, #0]
 8009b62:	3601      	adds	r6, #1
 8009b64:	7810      	ldrb	r0, [r2, #0]
 8009b66:	2830      	cmp	r0, #48	; 0x30
 8009b68:	d0f7      	beq.n	8009b5a <__gethex+0x16>
 8009b6a:	f7ff ffd5 	bl	8009b18 <__hexdig_fun>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	001d      	movs	r5, r3
 8009b72:	9302      	str	r3, [sp, #8]
 8009b74:	4298      	cmp	r0, r3
 8009b76:	d11d      	bne.n	8009bb4 <__gethex+0x70>
 8009b78:	2201      	movs	r2, #1
 8009b7a:	49a6      	ldr	r1, [pc, #664]	; (8009e14 <__gethex+0x2d0>)
 8009b7c:	9800      	ldr	r0, [sp, #0]
 8009b7e:	f7ff fef8 	bl	8009972 <strncmp>
 8009b82:	0007      	movs	r7, r0
 8009b84:	42a8      	cmp	r0, r5
 8009b86:	d169      	bne.n	8009c5c <__gethex+0x118>
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	0034      	movs	r4, r6
 8009b8c:	7858      	ldrb	r0, [r3, #1]
 8009b8e:	f7ff ffc3 	bl	8009b18 <__hexdig_fun>
 8009b92:	2301      	movs	r3, #1
 8009b94:	9302      	str	r3, [sp, #8]
 8009b96:	42a8      	cmp	r0, r5
 8009b98:	d02f      	beq.n	8009bfa <__gethex+0xb6>
 8009b9a:	9600      	str	r6, [sp, #0]
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	7818      	ldrb	r0, [r3, #0]
 8009ba0:	2830      	cmp	r0, #48	; 0x30
 8009ba2:	d009      	beq.n	8009bb8 <__gethex+0x74>
 8009ba4:	f7ff ffb8 	bl	8009b18 <__hexdig_fun>
 8009ba8:	4242      	negs	r2, r0
 8009baa:	4142      	adcs	r2, r0
 8009bac:	2301      	movs	r3, #1
 8009bae:	0035      	movs	r5, r6
 8009bb0:	9202      	str	r2, [sp, #8]
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	9c00      	ldr	r4, [sp, #0]
 8009bb6:	e004      	b.n	8009bc2 <__gethex+0x7e>
 8009bb8:	9b00      	ldr	r3, [sp, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	e7ed      	b.n	8009b9c <__gethex+0x58>
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	7820      	ldrb	r0, [r4, #0]
 8009bc4:	f7ff ffa8 	bl	8009b18 <__hexdig_fun>
 8009bc8:	1e07      	subs	r7, r0, #0
 8009bca:	d1f9      	bne.n	8009bc0 <__gethex+0x7c>
 8009bcc:	2201      	movs	r2, #1
 8009bce:	0020      	movs	r0, r4
 8009bd0:	4990      	ldr	r1, [pc, #576]	; (8009e14 <__gethex+0x2d0>)
 8009bd2:	f7ff fece 	bl	8009972 <strncmp>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d10d      	bne.n	8009bf6 <__gethex+0xb2>
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	d106      	bne.n	8009bec <__gethex+0xa8>
 8009bde:	3401      	adds	r4, #1
 8009be0:	0025      	movs	r5, r4
 8009be2:	7820      	ldrb	r0, [r4, #0]
 8009be4:	f7ff ff98 	bl	8009b18 <__hexdig_fun>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d102      	bne.n	8009bf2 <__gethex+0xae>
 8009bec:	1b2d      	subs	r5, r5, r4
 8009bee:	00af      	lsls	r7, r5, #2
 8009bf0:	e003      	b.n	8009bfa <__gethex+0xb6>
 8009bf2:	3401      	adds	r4, #1
 8009bf4:	e7f5      	b.n	8009be2 <__gethex+0x9e>
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	d1f8      	bne.n	8009bec <__gethex+0xa8>
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	7823      	ldrb	r3, [r4, #0]
 8009bfe:	0026      	movs	r6, r4
 8009c00:	4393      	bics	r3, r2
 8009c02:	2b50      	cmp	r3, #80	; 0x50
 8009c04:	d11d      	bne.n	8009c42 <__gethex+0xfe>
 8009c06:	7863      	ldrb	r3, [r4, #1]
 8009c08:	2b2b      	cmp	r3, #43	; 0x2b
 8009c0a:	d02c      	beq.n	8009c66 <__gethex+0x122>
 8009c0c:	2b2d      	cmp	r3, #45	; 0x2d
 8009c0e:	d02e      	beq.n	8009c6e <__gethex+0x12a>
 8009c10:	2300      	movs	r3, #0
 8009c12:	1c66      	adds	r6, r4, #1
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	7830      	ldrb	r0, [r6, #0]
 8009c18:	f7ff ff7e 	bl	8009b18 <__hexdig_fun>
 8009c1c:	1e43      	subs	r3, r0, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b18      	cmp	r3, #24
 8009c22:	d82b      	bhi.n	8009c7c <__gethex+0x138>
 8009c24:	3810      	subs	r0, #16
 8009c26:	0005      	movs	r5, r0
 8009c28:	7870      	ldrb	r0, [r6, #1]
 8009c2a:	f7ff ff75 	bl	8009b18 <__hexdig_fun>
 8009c2e:	1e43      	subs	r3, r0, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	3601      	adds	r6, #1
 8009c34:	2b18      	cmp	r3, #24
 8009c36:	d91c      	bls.n	8009c72 <__gethex+0x12e>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d000      	beq.n	8009c40 <__gethex+0xfc>
 8009c3e:	426d      	negs	r5, r5
 8009c40:	197f      	adds	r7, r7, r5
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	601e      	str	r6, [r3, #0]
 8009c46:	9b02      	ldr	r3, [sp, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d019      	beq.n	8009c80 <__gethex+0x13c>
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	9b05      	ldr	r3, [sp, #20]
 8009c50:	42b3      	cmp	r3, r6
 8009c52:	d100      	bne.n	8009c56 <__gethex+0x112>
 8009c54:	3606      	adds	r6, #6
 8009c56:	0030      	movs	r0, r6
 8009c58:	b009      	add	sp, #36	; 0x24
 8009c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	2700      	movs	r7, #0
 8009c60:	9c00      	ldr	r4, [sp, #0]
 8009c62:	9302      	str	r3, [sp, #8]
 8009c64:	e7c9      	b.n	8009bfa <__gethex+0xb6>
 8009c66:	2300      	movs	r3, #0
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	1ca6      	adds	r6, r4, #2
 8009c6c:	e7d3      	b.n	8009c16 <__gethex+0xd2>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e7fa      	b.n	8009c68 <__gethex+0x124>
 8009c72:	230a      	movs	r3, #10
 8009c74:	435d      	muls	r5, r3
 8009c76:	182d      	adds	r5, r5, r0
 8009c78:	3d10      	subs	r5, #16
 8009c7a:	e7d5      	b.n	8009c28 <__gethex+0xe4>
 8009c7c:	0026      	movs	r6, r4
 8009c7e:	e7e0      	b.n	8009c42 <__gethex+0xfe>
 8009c80:	9b00      	ldr	r3, [sp, #0]
 8009c82:	9902      	ldr	r1, [sp, #8]
 8009c84:	1ae3      	subs	r3, r4, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	2b07      	cmp	r3, #7
 8009c8a:	dc0a      	bgt.n	8009ca2 <__gethex+0x15e>
 8009c8c:	9803      	ldr	r0, [sp, #12]
 8009c8e:	f7fd ff75 	bl	8007b7c <_Balloc>
 8009c92:	1e05      	subs	r5, r0, #0
 8009c94:	d108      	bne.n	8009ca8 <__gethex+0x164>
 8009c96:	002a      	movs	r2, r5
 8009c98:	21e4      	movs	r1, #228	; 0xe4
 8009c9a:	4b5f      	ldr	r3, [pc, #380]	; (8009e18 <__gethex+0x2d4>)
 8009c9c:	485f      	ldr	r0, [pc, #380]	; (8009e1c <__gethex+0x2d8>)
 8009c9e:	f7ff fe9b 	bl	80099d8 <__assert_func>
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	105b      	asrs	r3, r3, #1
 8009ca6:	e7ef      	b.n	8009c88 <__gethex+0x144>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	3314      	adds	r3, #20
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	9305      	str	r3, [sp, #20]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	001e      	movs	r6, r3
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d33f      	bcc.n	8009d3c <__gethex+0x1f8>
 8009cbc:	9c05      	ldr	r4, [sp, #20]
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	c440      	stmia	r4!, {r6}
 8009cc2:	1ae4      	subs	r4, r4, r3
 8009cc4:	10a4      	asrs	r4, r4, #2
 8009cc6:	0030      	movs	r0, r6
 8009cc8:	612c      	str	r4, [r5, #16]
 8009cca:	f7fe f84f 	bl	8007d6c <__hi0bits>
 8009cce:	9b01      	ldr	r3, [sp, #4]
 8009cd0:	0164      	lsls	r4, r4, #5
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	1a26      	subs	r6, r4, r0
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	429e      	cmp	r6, r3
 8009cda:	dd51      	ble.n	8009d80 <__gethex+0x23c>
 8009cdc:	1af6      	subs	r6, r6, r3
 8009cde:	0031      	movs	r1, r6
 8009ce0:	0028      	movs	r0, r5
 8009ce2:	f7fe fbe3 	bl	80084ac <__any_on>
 8009ce6:	1e04      	subs	r4, r0, #0
 8009ce8:	d016      	beq.n	8009d18 <__gethex+0x1d4>
 8009cea:	2401      	movs	r4, #1
 8009cec:	231f      	movs	r3, #31
 8009cee:	0020      	movs	r0, r4
 8009cf0:	1e72      	subs	r2, r6, #1
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	4098      	lsls	r0, r3
 8009cf6:	0003      	movs	r3, r0
 8009cf8:	1151      	asrs	r1, r2, #5
 8009cfa:	9802      	ldr	r0, [sp, #8]
 8009cfc:	0089      	lsls	r1, r1, #2
 8009cfe:	5809      	ldr	r1, [r1, r0]
 8009d00:	4219      	tst	r1, r3
 8009d02:	d009      	beq.n	8009d18 <__gethex+0x1d4>
 8009d04:	42a2      	cmp	r2, r4
 8009d06:	dd06      	ble.n	8009d16 <__gethex+0x1d2>
 8009d08:	0028      	movs	r0, r5
 8009d0a:	1eb1      	subs	r1, r6, #2
 8009d0c:	f7fe fbce 	bl	80084ac <__any_on>
 8009d10:	3402      	adds	r4, #2
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d100      	bne.n	8009d18 <__gethex+0x1d4>
 8009d16:	2402      	movs	r4, #2
 8009d18:	0031      	movs	r1, r6
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	f7ff fea7 	bl	8009a6e <rshift>
 8009d20:	19bf      	adds	r7, r7, r6
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	42bb      	cmp	r3, r7
 8009d28:	da3a      	bge.n	8009da0 <__gethex+0x25c>
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	9803      	ldr	r0, [sp, #12]
 8009d2e:	f7fd ff69 	bl	8007c04 <_Bfree>
 8009d32:	2300      	movs	r3, #0
 8009d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d36:	26a3      	movs	r6, #163	; 0xa3
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e78c      	b.n	8009c56 <__gethex+0x112>
 8009d3c:	3c01      	subs	r4, #1
 8009d3e:	7823      	ldrb	r3, [r4, #0]
 8009d40:	2b2e      	cmp	r3, #46	; 0x2e
 8009d42:	d012      	beq.n	8009d6a <__gethex+0x226>
 8009d44:	9b04      	ldr	r3, [sp, #16]
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d104      	bne.n	8009d54 <__gethex+0x210>
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	c340      	stmia	r3!, {r6}
 8009d4e:	2600      	movs	r6, #0
 8009d50:	9305      	str	r3, [sp, #20]
 8009d52:	9604      	str	r6, [sp, #16]
 8009d54:	7820      	ldrb	r0, [r4, #0]
 8009d56:	f7ff fedf 	bl	8009b18 <__hexdig_fun>
 8009d5a:	230f      	movs	r3, #15
 8009d5c:	4018      	ands	r0, r3
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	4098      	lsls	r0, r3
 8009d62:	3304      	adds	r3, #4
 8009d64:	4306      	orrs	r6, r0
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	e7a5      	b.n	8009cb6 <__gethex+0x172>
 8009d6a:	9b00      	ldr	r3, [sp, #0]
 8009d6c:	42a3      	cmp	r3, r4
 8009d6e:	d8e9      	bhi.n	8009d44 <__gethex+0x200>
 8009d70:	2201      	movs	r2, #1
 8009d72:	0020      	movs	r0, r4
 8009d74:	4927      	ldr	r1, [pc, #156]	; (8009e14 <__gethex+0x2d0>)
 8009d76:	f7ff fdfc 	bl	8009972 <strncmp>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d1e2      	bne.n	8009d44 <__gethex+0x200>
 8009d7e:	e79a      	b.n	8009cb6 <__gethex+0x172>
 8009d80:	9b00      	ldr	r3, [sp, #0]
 8009d82:	2400      	movs	r4, #0
 8009d84:	429e      	cmp	r6, r3
 8009d86:	dacc      	bge.n	8009d22 <__gethex+0x1de>
 8009d88:	1b9e      	subs	r6, r3, r6
 8009d8a:	0029      	movs	r1, r5
 8009d8c:	0032      	movs	r2, r6
 8009d8e:	9803      	ldr	r0, [sp, #12]
 8009d90:	f7fe f958 	bl	8008044 <__lshift>
 8009d94:	0003      	movs	r3, r0
 8009d96:	3314      	adds	r3, #20
 8009d98:	0005      	movs	r5, r0
 8009d9a:	1bbf      	subs	r7, r7, r6
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	e7c0      	b.n	8009d22 <__gethex+0x1de>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	685e      	ldr	r6, [r3, #4]
 8009da4:	42be      	cmp	r6, r7
 8009da6:	dd70      	ble.n	8009e8a <__gethex+0x346>
 8009da8:	9b00      	ldr	r3, [sp, #0]
 8009daa:	1bf6      	subs	r6, r6, r7
 8009dac:	42b3      	cmp	r3, r6
 8009dae:	dc37      	bgt.n	8009e20 <__gethex+0x2dc>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d024      	beq.n	8009e02 <__gethex+0x2be>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d026      	beq.n	8009e0a <__gethex+0x2c6>
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d117      	bne.n	8009df0 <__gethex+0x2ac>
 8009dc0:	9b00      	ldr	r3, [sp, #0]
 8009dc2:	42b3      	cmp	r3, r6
 8009dc4:	d114      	bne.n	8009df0 <__gethex+0x2ac>
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10b      	bne.n	8009de2 <__gethex+0x29e>
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	9a07      	ldr	r2, [sp, #28]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2662      	movs	r6, #98	; 0x62
 8009dd2:	6013      	str	r3, [r2, #0]
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	9a02      	ldr	r2, [sp, #8]
 8009dd8:	612b      	str	r3, [r5, #16]
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dde:	601d      	str	r5, [r3, #0]
 8009de0:	e739      	b.n	8009c56 <__gethex+0x112>
 8009de2:	9900      	ldr	r1, [sp, #0]
 8009de4:	0028      	movs	r0, r5
 8009de6:	3901      	subs	r1, #1
 8009de8:	f7fe fb60 	bl	80084ac <__any_on>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d1ec      	bne.n	8009dca <__gethex+0x286>
 8009df0:	0029      	movs	r1, r5
 8009df2:	9803      	ldr	r0, [sp, #12]
 8009df4:	f7fd ff06 	bl	8007c04 <_Bfree>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfc:	2650      	movs	r6, #80	; 0x50
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	e729      	b.n	8009c56 <__gethex+0x112>
 8009e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1f3      	bne.n	8009df0 <__gethex+0x2ac>
 8009e08:	e7df      	b.n	8009dca <__gethex+0x286>
 8009e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1dc      	bne.n	8009dca <__gethex+0x286>
 8009e10:	e7ee      	b.n	8009df0 <__gethex+0x2ac>
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	0800a7fc 	.word	0x0800a7fc
 8009e18:	0800a696 	.word	0x0800a696
 8009e1c:	0800a8a5 	.word	0x0800a8a5
 8009e20:	1e77      	subs	r7, r6, #1
 8009e22:	2c00      	cmp	r4, #0
 8009e24:	d12f      	bne.n	8009e86 <__gethex+0x342>
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	d004      	beq.n	8009e34 <__gethex+0x2f0>
 8009e2a:	0039      	movs	r1, r7
 8009e2c:	0028      	movs	r0, r5
 8009e2e:	f7fe fb3d 	bl	80084ac <__any_on>
 8009e32:	0004      	movs	r4, r0
 8009e34:	231f      	movs	r3, #31
 8009e36:	117a      	asrs	r2, r7, #5
 8009e38:	401f      	ands	r7, r3
 8009e3a:	3b1e      	subs	r3, #30
 8009e3c:	40bb      	lsls	r3, r7
 8009e3e:	9902      	ldr	r1, [sp, #8]
 8009e40:	0092      	lsls	r2, r2, #2
 8009e42:	5852      	ldr	r2, [r2, r1]
 8009e44:	421a      	tst	r2, r3
 8009e46:	d001      	beq.n	8009e4c <__gethex+0x308>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	431c      	orrs	r4, r3
 8009e4c:	9b00      	ldr	r3, [sp, #0]
 8009e4e:	0031      	movs	r1, r6
 8009e50:	1b9b      	subs	r3, r3, r6
 8009e52:	2602      	movs	r6, #2
 8009e54:	0028      	movs	r0, r5
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	f7ff fe09 	bl	8009a6e <rshift>
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	685f      	ldr	r7, [r3, #4]
 8009e60:	2c00      	cmp	r4, #0
 8009e62:	d041      	beq.n	8009ee8 <__gethex+0x3a4>
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d010      	beq.n	8009e8e <__gethex+0x34a>
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d012      	beq.n	8009e96 <__gethex+0x352>
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d106      	bne.n	8009e82 <__gethex+0x33e>
 8009e74:	07a2      	lsls	r2, r4, #30
 8009e76:	d504      	bpl.n	8009e82 <__gethex+0x33e>
 8009e78:	9a02      	ldr	r2, [sp, #8]
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	4314      	orrs	r4, r2
 8009e7e:	421c      	tst	r4, r3
 8009e80:	d10c      	bne.n	8009e9c <__gethex+0x358>
 8009e82:	2310      	movs	r3, #16
 8009e84:	e02f      	b.n	8009ee6 <__gethex+0x3a2>
 8009e86:	2401      	movs	r4, #1
 8009e88:	e7d4      	b.n	8009e34 <__gethex+0x2f0>
 8009e8a:	2601      	movs	r6, #1
 8009e8c:	e7e8      	b.n	8009e60 <__gethex+0x31c>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e92:	1a9b      	subs	r3, r3, r2
 8009e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0f2      	beq.n	8009e82 <__gethex+0x33e>
 8009e9c:	692b      	ldr	r3, [r5, #16]
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	9302      	str	r3, [sp, #8]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	002b      	movs	r3, r5
 8009ea8:	9a04      	ldr	r2, [sp, #16]
 8009eaa:	3314      	adds	r3, #20
 8009eac:	1899      	adds	r1, r3, r2
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	1c54      	adds	r4, r2, #1
 8009eb2:	d01e      	beq.n	8009ef2 <__gethex+0x3ae>
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	002b      	movs	r3, r5
 8009eba:	3314      	adds	r3, #20
 8009ebc:	2e02      	cmp	r6, #2
 8009ebe:	d141      	bne.n	8009f44 <__gethex+0x400>
 8009ec0:	9a01      	ldr	r2, [sp, #4]
 8009ec2:	9900      	ldr	r1, [sp, #0]
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	3a01      	subs	r2, #1
 8009ec8:	428a      	cmp	r2, r1
 8009eca:	d10b      	bne.n	8009ee4 <__gethex+0x3a0>
 8009ecc:	221f      	movs	r2, #31
 8009ece:	9800      	ldr	r0, [sp, #0]
 8009ed0:	1149      	asrs	r1, r1, #5
 8009ed2:	4002      	ands	r2, r0
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	0004      	movs	r4, r0
 8009ed8:	4094      	lsls	r4, r2
 8009eda:	0089      	lsls	r1, r1, #2
 8009edc:	58cb      	ldr	r3, [r1, r3]
 8009ede:	4223      	tst	r3, r4
 8009ee0:	d000      	beq.n	8009ee4 <__gethex+0x3a0>
 8009ee2:	2601      	movs	r6, #1
 8009ee4:	2320      	movs	r3, #32
 8009ee6:	431e      	orrs	r6, r3
 8009ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eea:	601d      	str	r5, [r3, #0]
 8009eec:	9b07      	ldr	r3, [sp, #28]
 8009eee:	601f      	str	r7, [r3, #0]
 8009ef0:	e6b1      	b.n	8009c56 <__gethex+0x112>
 8009ef2:	c301      	stmia	r3!, {r0}
 8009ef4:	4299      	cmp	r1, r3
 8009ef6:	d8da      	bhi.n	8009eae <__gethex+0x36a>
 8009ef8:	68ab      	ldr	r3, [r5, #8]
 8009efa:	9a02      	ldr	r2, [sp, #8]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	db18      	blt.n	8009f32 <__gethex+0x3ee>
 8009f00:	6869      	ldr	r1, [r5, #4]
 8009f02:	9803      	ldr	r0, [sp, #12]
 8009f04:	3101      	adds	r1, #1
 8009f06:	f7fd fe39 	bl	8007b7c <_Balloc>
 8009f0a:	1e04      	subs	r4, r0, #0
 8009f0c:	d104      	bne.n	8009f18 <__gethex+0x3d4>
 8009f0e:	0022      	movs	r2, r4
 8009f10:	2184      	movs	r1, #132	; 0x84
 8009f12:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <__gethex+0x440>)
 8009f14:	481c      	ldr	r0, [pc, #112]	; (8009f88 <__gethex+0x444>)
 8009f16:	e6c2      	b.n	8009c9e <__gethex+0x15a>
 8009f18:	0029      	movs	r1, r5
 8009f1a:	692a      	ldr	r2, [r5, #16]
 8009f1c:	310c      	adds	r1, #12
 8009f1e:	3202      	adds	r2, #2
 8009f20:	0092      	lsls	r2, r2, #2
 8009f22:	300c      	adds	r0, #12
 8009f24:	f7ff fd48 	bl	80099b8 <memcpy>
 8009f28:	0029      	movs	r1, r5
 8009f2a:	9803      	ldr	r0, [sp, #12]
 8009f2c:	f7fd fe6a 	bl	8007c04 <_Bfree>
 8009f30:	0025      	movs	r5, r4
 8009f32:	692b      	ldr	r3, [r5, #16]
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	612a      	str	r2, [r5, #16]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	18eb      	adds	r3, r5, r3
 8009f40:	605a      	str	r2, [r3, #4]
 8009f42:	e7b9      	b.n	8009eb8 <__gethex+0x374>
 8009f44:	692a      	ldr	r2, [r5, #16]
 8009f46:	9902      	ldr	r1, [sp, #8]
 8009f48:	428a      	cmp	r2, r1
 8009f4a:	dd09      	ble.n	8009f60 <__gethex+0x41c>
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	0028      	movs	r0, r5
 8009f50:	f7ff fd8d 	bl	8009a6e <rshift>
 8009f54:	9b01      	ldr	r3, [sp, #4]
 8009f56:	3701      	adds	r7, #1
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	dac1      	bge.n	8009ee2 <__gethex+0x39e>
 8009f5e:	e6e4      	b.n	8009d2a <__gethex+0x1e6>
 8009f60:	221f      	movs	r2, #31
 8009f62:	9c00      	ldr	r4, [sp, #0]
 8009f64:	9900      	ldr	r1, [sp, #0]
 8009f66:	2601      	movs	r6, #1
 8009f68:	4014      	ands	r4, r2
 8009f6a:	4211      	tst	r1, r2
 8009f6c:	d0ba      	beq.n	8009ee4 <__gethex+0x3a0>
 8009f6e:	9a04      	ldr	r2, [sp, #16]
 8009f70:	189b      	adds	r3, r3, r2
 8009f72:	3b04      	subs	r3, #4
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	f7fd fef9 	bl	8007d6c <__hi0bits>
 8009f7a:	2320      	movs	r3, #32
 8009f7c:	1b1b      	subs	r3, r3, r4
 8009f7e:	4298      	cmp	r0, r3
 8009f80:	dbe4      	blt.n	8009f4c <__gethex+0x408>
 8009f82:	e7af      	b.n	8009ee4 <__gethex+0x3a0>
 8009f84:	0800a696 	.word	0x0800a696
 8009f88:	0800a8a5 	.word	0x0800a8a5

08009f8c <L_shift>:
 8009f8c:	2308      	movs	r3, #8
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	2520      	movs	r5, #32
 8009f92:	1a9a      	subs	r2, r3, r2
 8009f94:	0092      	lsls	r2, r2, #2
 8009f96:	1aad      	subs	r5, r5, r2
 8009f98:	6843      	ldr	r3, [r0, #4]
 8009f9a:	6804      	ldr	r4, [r0, #0]
 8009f9c:	001e      	movs	r6, r3
 8009f9e:	40ae      	lsls	r6, r5
 8009fa0:	40d3      	lsrs	r3, r2
 8009fa2:	4334      	orrs	r4, r6
 8009fa4:	6004      	str	r4, [r0, #0]
 8009fa6:	6043      	str	r3, [r0, #4]
 8009fa8:	3004      	adds	r0, #4
 8009faa:	4288      	cmp	r0, r1
 8009fac:	d3f4      	bcc.n	8009f98 <L_shift+0xc>
 8009fae:	bd70      	pop	{r4, r5, r6, pc}

08009fb0 <__match>:
 8009fb0:	b530      	push	{r4, r5, lr}
 8009fb2:	6803      	ldr	r3, [r0, #0]
 8009fb4:	780c      	ldrb	r4, [r1, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	2c00      	cmp	r4, #0
 8009fba:	d102      	bne.n	8009fc2 <__match+0x12>
 8009fbc:	6003      	str	r3, [r0, #0]
 8009fbe:	2001      	movs	r0, #1
 8009fc0:	bd30      	pop	{r4, r5, pc}
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	0015      	movs	r5, r2
 8009fc6:	3d41      	subs	r5, #65	; 0x41
 8009fc8:	2d19      	cmp	r5, #25
 8009fca:	d800      	bhi.n	8009fce <__match+0x1e>
 8009fcc:	3220      	adds	r2, #32
 8009fce:	3101      	adds	r1, #1
 8009fd0:	42a2      	cmp	r2, r4
 8009fd2:	d0ef      	beq.n	8009fb4 <__match+0x4>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	e7f3      	b.n	8009fc0 <__match+0x10>

08009fd8 <__hexnan>:
 8009fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fda:	680b      	ldr	r3, [r1, #0]
 8009fdc:	b08b      	sub	sp, #44	; 0x2c
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	9901      	ldr	r1, [sp, #4]
 8009fe2:	115a      	asrs	r2, r3, #5
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	188a      	adds	r2, r1, r2
 8009fe8:	9202      	str	r2, [sp, #8]
 8009fea:	0019      	movs	r1, r3
 8009fec:	221f      	movs	r2, #31
 8009fee:	4011      	ands	r1, r2
 8009ff0:	9008      	str	r0, [sp, #32]
 8009ff2:	9106      	str	r1, [sp, #24]
 8009ff4:	4213      	tst	r3, r2
 8009ff6:	d002      	beq.n	8009ffe <__hexnan+0x26>
 8009ff8:	9b02      	ldr	r3, [sp, #8]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	9302      	str	r3, [sp, #8]
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	2500      	movs	r5, #0
 800a002:	1f1f      	subs	r7, r3, #4
 800a004:	003e      	movs	r6, r7
 800a006:	003c      	movs	r4, r7
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	603d      	str	r5, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	9507      	str	r5, [sp, #28]
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	9503      	str	r5, [sp, #12]
 800a014:	9b05      	ldr	r3, [sp, #20]
 800a016:	3301      	adds	r3, #1
 800a018:	9309      	str	r3, [sp, #36]	; 0x24
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	785b      	ldrb	r3, [r3, #1]
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d028      	beq.n	800a076 <__hexnan+0x9e>
 800a024:	9804      	ldr	r0, [sp, #16]
 800a026:	f7ff fd77 	bl	8009b18 <__hexdig_fun>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d154      	bne.n	800a0d8 <__hexnan+0x100>
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	2b20      	cmp	r3, #32
 800a032:	d819      	bhi.n	800a068 <__hexnan+0x90>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	9a07      	ldr	r2, [sp, #28]
 800a038:	4293      	cmp	r3, r2
 800a03a:	dd12      	ble.n	800a062 <__hexnan+0x8a>
 800a03c:	42b4      	cmp	r4, r6
 800a03e:	d206      	bcs.n	800a04e <__hexnan+0x76>
 800a040:	2d07      	cmp	r5, #7
 800a042:	dc04      	bgt.n	800a04e <__hexnan+0x76>
 800a044:	002a      	movs	r2, r5
 800a046:	0031      	movs	r1, r6
 800a048:	0020      	movs	r0, r4
 800a04a:	f7ff ff9f 	bl	8009f8c <L_shift>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	2508      	movs	r5, #8
 800a052:	429c      	cmp	r4, r3
 800a054:	d905      	bls.n	800a062 <__hexnan+0x8a>
 800a056:	1f26      	subs	r6, r4, #4
 800a058:	2500      	movs	r5, #0
 800a05a:	0034      	movs	r4, r6
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	6035      	str	r5, [r6, #0]
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	e7d5      	b.n	800a014 <__hexnan+0x3c>
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	2b29      	cmp	r3, #41	; 0x29
 800a06c:	d159      	bne.n	800a122 <__hexnan+0x14a>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	9a08      	ldr	r2, [sp, #32]
 800a072:	3302      	adds	r3, #2
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d052      	beq.n	800a122 <__hexnan+0x14a>
 800a07c:	42b4      	cmp	r4, r6
 800a07e:	d206      	bcs.n	800a08e <__hexnan+0xb6>
 800a080:	2d07      	cmp	r5, #7
 800a082:	dc04      	bgt.n	800a08e <__hexnan+0xb6>
 800a084:	002a      	movs	r2, r5
 800a086:	0031      	movs	r1, r6
 800a088:	0020      	movs	r0, r4
 800a08a:	f7ff ff7f 	bl	8009f8c <L_shift>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	429c      	cmp	r4, r3
 800a092:	d935      	bls.n	800a100 <__hexnan+0x128>
 800a094:	001a      	movs	r2, r3
 800a096:	0023      	movs	r3, r4
 800a098:	cb02      	ldmia	r3!, {r1}
 800a09a:	c202      	stmia	r2!, {r1}
 800a09c:	429f      	cmp	r7, r3
 800a09e:	d2fb      	bcs.n	800a098 <__hexnan+0xc0>
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	1c62      	adds	r2, r4, #1
 800a0a4:	1ed9      	subs	r1, r3, #3
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	4291      	cmp	r1, r2
 800a0aa:	d305      	bcc.n	800a0b8 <__hexnan+0xe0>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	3b04      	subs	r3, #4
 800a0b0:	1b1b      	subs	r3, r3, r4
 800a0b2:	089b      	lsrs	r3, r3, #2
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	9a01      	ldr	r2, [sp, #4]
 800a0ba:	18d3      	adds	r3, r2, r3
 800a0bc:	2200      	movs	r2, #0
 800a0be:	c304      	stmia	r3!, {r2}
 800a0c0:	429f      	cmp	r7, r3
 800a0c2:	d2fc      	bcs.n	800a0be <__hexnan+0xe6>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <__hexnan+0xfc>
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	429f      	cmp	r7, r3
 800a0ce:	d126      	bne.n	800a11e <__hexnan+0x146>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	2005      	movs	r0, #5
 800a0d6:	e025      	b.n	800a124 <__hexnan+0x14c>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	3501      	adds	r5, #1
 800a0dc:	3301      	adds	r3, #1
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	2d08      	cmp	r5, #8
 800a0e2:	dd06      	ble.n	800a0f2 <__hexnan+0x11a>
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d9bb      	bls.n	800a062 <__hexnan+0x8a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2501      	movs	r5, #1
 800a0ee:	3c04      	subs	r4, #4
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	220f      	movs	r2, #15
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	4010      	ands	r0, r2
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	4303      	orrs	r3, r0
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	e7b0      	b.n	800a062 <__hexnan+0x8a>
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0de      	beq.n	800a0c4 <__hexnan+0xec>
 800a106:	2320      	movs	r3, #32
 800a108:	9a06      	ldr	r2, [sp, #24]
 800a10a:	9902      	ldr	r1, [sp, #8]
 800a10c:	1a9b      	subs	r3, r3, r2
 800a10e:	2201      	movs	r2, #1
 800a110:	4252      	negs	r2, r2
 800a112:	40da      	lsrs	r2, r3
 800a114:	3904      	subs	r1, #4
 800a116:	680b      	ldr	r3, [r1, #0]
 800a118:	4013      	ands	r3, r2
 800a11a:	600b      	str	r3, [r1, #0]
 800a11c:	e7d2      	b.n	800a0c4 <__hexnan+0xec>
 800a11e:	3f04      	subs	r7, #4
 800a120:	e7d0      	b.n	800a0c4 <__hexnan+0xec>
 800a122:	2004      	movs	r0, #4
 800a124:	b00b      	add	sp, #44	; 0x2c
 800a126:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a128 <__ascii_mbtowc>:
 800a128:	b082      	sub	sp, #8
 800a12a:	2900      	cmp	r1, #0
 800a12c:	d100      	bne.n	800a130 <__ascii_mbtowc+0x8>
 800a12e:	a901      	add	r1, sp, #4
 800a130:	1e10      	subs	r0, r2, #0
 800a132:	d006      	beq.n	800a142 <__ascii_mbtowc+0x1a>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <__ascii_mbtowc+0x1e>
 800a138:	7813      	ldrb	r3, [r2, #0]
 800a13a:	600b      	str	r3, [r1, #0]
 800a13c:	7810      	ldrb	r0, [r2, #0]
 800a13e:	1e43      	subs	r3, r0, #1
 800a140:	4198      	sbcs	r0, r3
 800a142:	b002      	add	sp, #8
 800a144:	4770      	bx	lr
 800a146:	2002      	movs	r0, #2
 800a148:	4240      	negs	r0, r0
 800a14a:	e7fa      	b.n	800a142 <__ascii_mbtowc+0x1a>

0800a14c <_realloc_r>:
 800a14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a14e:	0007      	movs	r7, r0
 800a150:	000e      	movs	r6, r1
 800a152:	0014      	movs	r4, r2
 800a154:	2900      	cmp	r1, #0
 800a156:	d105      	bne.n	800a164 <_realloc_r+0x18>
 800a158:	0011      	movs	r1, r2
 800a15a:	f7fd fc7d 	bl	8007a58 <_malloc_r>
 800a15e:	0005      	movs	r5, r0
 800a160:	0028      	movs	r0, r5
 800a162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a164:	2a00      	cmp	r2, #0
 800a166:	d103      	bne.n	800a170 <_realloc_r+0x24>
 800a168:	f7fd fc00 	bl	800796c <_free_r>
 800a16c:	0025      	movs	r5, r4
 800a16e:	e7f7      	b.n	800a160 <_realloc_r+0x14>
 800a170:	f000 f8c9 	bl	800a306 <_malloc_usable_size_r>
 800a174:	9001      	str	r0, [sp, #4]
 800a176:	4284      	cmp	r4, r0
 800a178:	d803      	bhi.n	800a182 <_realloc_r+0x36>
 800a17a:	0035      	movs	r5, r6
 800a17c:	0843      	lsrs	r3, r0, #1
 800a17e:	42a3      	cmp	r3, r4
 800a180:	d3ee      	bcc.n	800a160 <_realloc_r+0x14>
 800a182:	0021      	movs	r1, r4
 800a184:	0038      	movs	r0, r7
 800a186:	f7fd fc67 	bl	8007a58 <_malloc_r>
 800a18a:	1e05      	subs	r5, r0, #0
 800a18c:	d0e8      	beq.n	800a160 <_realloc_r+0x14>
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	0022      	movs	r2, r4
 800a192:	429c      	cmp	r4, r3
 800a194:	d900      	bls.n	800a198 <_realloc_r+0x4c>
 800a196:	001a      	movs	r2, r3
 800a198:	0031      	movs	r1, r6
 800a19a:	0028      	movs	r0, r5
 800a19c:	f7ff fc0c 	bl	80099b8 <memcpy>
 800a1a0:	0031      	movs	r1, r6
 800a1a2:	0038      	movs	r0, r7
 800a1a4:	f7fd fbe2 	bl	800796c <_free_r>
 800a1a8:	e7da      	b.n	800a160 <_realloc_r+0x14>

0800a1aa <__ascii_wctomb>:
 800a1aa:	0003      	movs	r3, r0
 800a1ac:	1e08      	subs	r0, r1, #0
 800a1ae:	d005      	beq.n	800a1bc <__ascii_wctomb+0x12>
 800a1b0:	2aff      	cmp	r2, #255	; 0xff
 800a1b2:	d904      	bls.n	800a1be <__ascii_wctomb+0x14>
 800a1b4:	228a      	movs	r2, #138	; 0x8a
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	4240      	negs	r0, r0
 800a1bc:	4770      	bx	lr
 800a1be:	2001      	movs	r0, #1
 800a1c0:	700a      	strb	r2, [r1, #0]
 800a1c2:	e7fb      	b.n	800a1bc <__ascii_wctomb+0x12>

0800a1c4 <fiprintf>:
 800a1c4:	b40e      	push	{r1, r2, r3}
 800a1c6:	b517      	push	{r0, r1, r2, r4, lr}
 800a1c8:	4c05      	ldr	r4, [pc, #20]	; (800a1e0 <fiprintf+0x1c>)
 800a1ca:	ab05      	add	r3, sp, #20
 800a1cc:	cb04      	ldmia	r3!, {r2}
 800a1ce:	0001      	movs	r1, r0
 800a1d0:	6820      	ldr	r0, [r4, #0]
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	f7ff f942 	bl	800945c <_vfiprintf_r>
 800a1d8:	bc1e      	pop	{r1, r2, r3, r4}
 800a1da:	bc08      	pop	{r3}
 800a1dc:	b003      	add	sp, #12
 800a1de:	4718      	bx	r3
 800a1e0:	20000064 	.word	0x20000064

0800a1e4 <__swhatbuf_r>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	000e      	movs	r6, r1
 800a1e8:	001d      	movs	r5, r3
 800a1ea:	230e      	movs	r3, #14
 800a1ec:	5ec9      	ldrsh	r1, [r1, r3]
 800a1ee:	0014      	movs	r4, r2
 800a1f0:	b096      	sub	sp, #88	; 0x58
 800a1f2:	2900      	cmp	r1, #0
 800a1f4:	da0c      	bge.n	800a210 <__swhatbuf_r+0x2c>
 800a1f6:	89b2      	ldrh	r2, [r6, #12]
 800a1f8:	2380      	movs	r3, #128	; 0x80
 800a1fa:	0011      	movs	r1, r2
 800a1fc:	4019      	ands	r1, r3
 800a1fe:	421a      	tst	r2, r3
 800a200:	d013      	beq.n	800a22a <__swhatbuf_r+0x46>
 800a202:	2100      	movs	r1, #0
 800a204:	3b40      	subs	r3, #64	; 0x40
 800a206:	2000      	movs	r0, #0
 800a208:	6029      	str	r1, [r5, #0]
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	b016      	add	sp, #88	; 0x58
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	466a      	mov	r2, sp
 800a212:	f000 f84d 	bl	800a2b0 <_fstat_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	dbed      	blt.n	800a1f6 <__swhatbuf_r+0x12>
 800a21a:	23f0      	movs	r3, #240	; 0xf0
 800a21c:	9901      	ldr	r1, [sp, #4]
 800a21e:	021b      	lsls	r3, r3, #8
 800a220:	4019      	ands	r1, r3
 800a222:	4b03      	ldr	r3, [pc, #12]	; (800a230 <__swhatbuf_r+0x4c>)
 800a224:	18c9      	adds	r1, r1, r3
 800a226:	424b      	negs	r3, r1
 800a228:	4159      	adcs	r1, r3
 800a22a:	2380      	movs	r3, #128	; 0x80
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	e7ea      	b.n	800a206 <__swhatbuf_r+0x22>
 800a230:	ffffe000 	.word	0xffffe000

0800a234 <__smakebuf_r>:
 800a234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a236:	2602      	movs	r6, #2
 800a238:	898b      	ldrh	r3, [r1, #12]
 800a23a:	0005      	movs	r5, r0
 800a23c:	000c      	movs	r4, r1
 800a23e:	4233      	tst	r3, r6
 800a240:	d006      	beq.n	800a250 <__smakebuf_r+0x1c>
 800a242:	0023      	movs	r3, r4
 800a244:	3347      	adds	r3, #71	; 0x47
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	2301      	movs	r3, #1
 800a24c:	6163      	str	r3, [r4, #20]
 800a24e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a250:	466a      	mov	r2, sp
 800a252:	ab01      	add	r3, sp, #4
 800a254:	f7ff ffc6 	bl	800a1e4 <__swhatbuf_r>
 800a258:	9900      	ldr	r1, [sp, #0]
 800a25a:	0007      	movs	r7, r0
 800a25c:	0028      	movs	r0, r5
 800a25e:	f7fd fbfb 	bl	8007a58 <_malloc_r>
 800a262:	2800      	cmp	r0, #0
 800a264:	d108      	bne.n	800a278 <__smakebuf_r+0x44>
 800a266:	220c      	movs	r2, #12
 800a268:	5ea3      	ldrsh	r3, [r4, r2]
 800a26a:	059a      	lsls	r2, r3, #22
 800a26c:	d4ef      	bmi.n	800a24e <__smakebuf_r+0x1a>
 800a26e:	2203      	movs	r2, #3
 800a270:	4393      	bics	r3, r2
 800a272:	431e      	orrs	r6, r3
 800a274:	81a6      	strh	r6, [r4, #12]
 800a276:	e7e4      	b.n	800a242 <__smakebuf_r+0xe>
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	89a2      	ldrh	r2, [r4, #12]
 800a27c:	6020      	str	r0, [r4, #0]
 800a27e:	4313      	orrs	r3, r2
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	9b00      	ldr	r3, [sp, #0]
 800a284:	6120      	str	r0, [r4, #16]
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <__smakebuf_r+0x74>
 800a28e:	0028      	movs	r0, r5
 800a290:	230e      	movs	r3, #14
 800a292:	5ee1      	ldrsh	r1, [r4, r3]
 800a294:	f000 f81e 	bl	800a2d4 <_isatty_r>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d005      	beq.n	800a2a8 <__smakebuf_r+0x74>
 800a29c:	2303      	movs	r3, #3
 800a29e:	89a2      	ldrh	r2, [r4, #12]
 800a2a0:	439a      	bics	r2, r3
 800a2a2:	3b02      	subs	r3, #2
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	433b      	orrs	r3, r7
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	e7ce      	b.n	800a24e <__smakebuf_r+0x1a>

0800a2b0 <_fstat_r>:
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	b570      	push	{r4, r5, r6, lr}
 800a2b4:	4d06      	ldr	r5, [pc, #24]	; (800a2d0 <_fstat_r+0x20>)
 800a2b6:	0004      	movs	r4, r0
 800a2b8:	0008      	movs	r0, r1
 800a2ba:	0011      	movs	r1, r2
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	f7f8 fd3f 	bl	8002d40 <_fstat>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	d103      	bne.n	800a2ce <_fstat_r+0x1e>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d000      	beq.n	800a2ce <_fstat_r+0x1e>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd70      	pop	{r4, r5, r6, pc}
 800a2d0:	20000410 	.word	0x20000410

0800a2d4 <_isatty_r>:
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	b570      	push	{r4, r5, r6, lr}
 800a2d8:	4d06      	ldr	r5, [pc, #24]	; (800a2f4 <_isatty_r+0x20>)
 800a2da:	0004      	movs	r4, r0
 800a2dc:	0008      	movs	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f8 fd3c 	bl	8002d5c <_isatty>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d103      	bne.n	800a2f0 <_isatty_r+0x1c>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d000      	beq.n	800a2f0 <_isatty_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	46c0      	nop			; (mov r8, r8)
 800a2f4:	20000410 	.word	0x20000410

0800a2f8 <abort>:
 800a2f8:	2006      	movs	r0, #6
 800a2fa:	b510      	push	{r4, lr}
 800a2fc:	f000 f836 	bl	800a36c <raise>
 800a300:	2001      	movs	r0, #1
 800a302:	f7f8 fcce 	bl	8002ca2 <_exit>

0800a306 <_malloc_usable_size_r>:
 800a306:	1f0b      	subs	r3, r1, #4
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	1f18      	subs	r0, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da01      	bge.n	800a314 <_malloc_usable_size_r+0xe>
 800a310:	580b      	ldr	r3, [r1, r0]
 800a312:	18c0      	adds	r0, r0, r3
 800a314:	4770      	bx	lr

0800a316 <_raise_r>:
 800a316:	b570      	push	{r4, r5, r6, lr}
 800a318:	0004      	movs	r4, r0
 800a31a:	000d      	movs	r5, r1
 800a31c:	291f      	cmp	r1, #31
 800a31e:	d904      	bls.n	800a32a <_raise_r+0x14>
 800a320:	2316      	movs	r3, #22
 800a322:	6003      	str	r3, [r0, #0]
 800a324:	2001      	movs	r0, #1
 800a326:	4240      	negs	r0, r0
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <_raise_r+0x24>
 800a330:	008a      	lsls	r2, r1, #2
 800a332:	189b      	adds	r3, r3, r2
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	2a00      	cmp	r2, #0
 800a338:	d108      	bne.n	800a34c <_raise_r+0x36>
 800a33a:	0020      	movs	r0, r4
 800a33c:	f000 f832 	bl	800a3a4 <_getpid_r>
 800a340:	002a      	movs	r2, r5
 800a342:	0001      	movs	r1, r0
 800a344:	0020      	movs	r0, r4
 800a346:	f000 f81b 	bl	800a380 <_kill_r>
 800a34a:	e7ed      	b.n	800a328 <_raise_r+0x12>
 800a34c:	2000      	movs	r0, #0
 800a34e:	2a01      	cmp	r2, #1
 800a350:	d0ea      	beq.n	800a328 <_raise_r+0x12>
 800a352:	1c51      	adds	r1, r2, #1
 800a354:	d103      	bne.n	800a35e <_raise_r+0x48>
 800a356:	2316      	movs	r3, #22
 800a358:	3001      	adds	r0, #1
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	e7e4      	b.n	800a328 <_raise_r+0x12>
 800a35e:	2400      	movs	r4, #0
 800a360:	0028      	movs	r0, r5
 800a362:	601c      	str	r4, [r3, #0]
 800a364:	4790      	blx	r2
 800a366:	0020      	movs	r0, r4
 800a368:	e7de      	b.n	800a328 <_raise_r+0x12>
	...

0800a36c <raise>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <raise+0x10>)
 800a370:	0001      	movs	r1, r0
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	f7ff ffcf 	bl	800a316 <_raise_r>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20000064 	.word	0x20000064

0800a380 <_kill_r>:
 800a380:	2300      	movs	r3, #0
 800a382:	b570      	push	{r4, r5, r6, lr}
 800a384:	4d06      	ldr	r5, [pc, #24]	; (800a3a0 <_kill_r+0x20>)
 800a386:	0004      	movs	r4, r0
 800a388:	0008      	movs	r0, r1
 800a38a:	0011      	movs	r1, r2
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	f7f8 fc78 	bl	8002c82 <_kill>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d103      	bne.n	800a39e <_kill_r+0x1e>
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d000      	beq.n	800a39e <_kill_r+0x1e>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	20000410 	.word	0x20000410

0800a3a4 <_getpid_r>:
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	f7f8 fc66 	bl	8002c76 <_getpid>
 800a3aa:	bd10      	pop	{r4, pc}

0800a3ac <_init>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b2:	bc08      	pop	{r3}
 800a3b4:	469e      	mov	lr, r3
 800a3b6:	4770      	bx	lr

0800a3b8 <_fini>:
 800a3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3be:	bc08      	pop	{r3}
 800a3c0:	469e      	mov	lr, r3
 800a3c2:	4770      	bx	lr
