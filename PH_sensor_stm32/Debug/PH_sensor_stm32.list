
PH_sensor_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a608  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800a6c8  0800a6c8  0000b6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac00  0800ac00  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac00  0800ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac08  0800ac08  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac0c  0800ac0c  0000bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ac10  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  0800ade4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800ade4  0000c484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a9  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e02  00000000  00000000  000174a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  000192a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00019c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015925  00000000  00000000  0001a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c152  00000000  00000000  0002fd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f11  00000000  00000000  0003be61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bed72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  000bedb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c2528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a6b0 	.word	0x0800a6b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a6b0 	.word	0x0800a6b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa71 	bl	8001924 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b1 	bl	80017b4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa63 	bl	8001924 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa59 	bl	8001924 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9db 	bl	800183c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9d1 	bl	800183c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a2 	bl	8000620 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f8db 	bl	8002714 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fd16 	bl	8001f98 <__aeabi_dsub>
 800056c:	f002 f8d2 	bl	8002714 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0004      	movs	r4, r0
 8000588:	000d      	movs	r5, r1
 800058a:	f7ff ff65 	bl	8000458 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x24>
 8000592:	0020      	movs	r0, r4
 8000594:	0029      	movs	r1, r5
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e9      	adds	r1, r5, r3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x1e>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 fa21 	bl	8001a08 <__aeabi_dmul>
 80005c6:	f7ff ffbd 	bl	8000544 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f002 f90c 	bl	80027e8 <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 fa18 	bl	8001a08 <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fcda 	bl	8001f98 <__aeabi_dsub>
 80005e4:	f7ff ffae 	bl	8000544 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f002 f8c7 	bl	800278c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 fa01 	bl	8001a08 <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f002 f8ec 	bl	80027e8 <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 fa50 	bl	8000ab8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f002 f9e0 	bl	8002a04 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f002 f9db 	bl	8002a04 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_fmul>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	0045      	lsls	r5, r0, #1
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	4699      	mov	r9, r3
 80007ca:	1c0f      	adds	r7, r1, #0
 80007cc:	0e2d      	lsrs	r5, r5, #24
 80007ce:	0fc6      	lsrs	r6, r0, #31
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fmul+0x1e>
 80007d4:	e088      	b.n	80008e8 <__aeabi_fmul+0x130>
 80007d6:	2dff      	cmp	r5, #255	@ 0xff
 80007d8:	d100      	bne.n	80007dc <__aeabi_fmul+0x24>
 80007da:	e08d      	b.n	80008f8 <__aeabi_fmul+0x140>
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	04d2      	lsls	r2, r2, #19
 80007e2:	431a      	orrs	r2, r3
 80007e4:	2300      	movs	r3, #0
 80007e6:	4691      	mov	r9, r2
 80007e8:	4698      	mov	r8, r3
 80007ea:	469a      	mov	sl, r3
 80007ec:	3d7f      	subs	r5, #127	@ 0x7f
 80007ee:	027c      	lsls	r4, r7, #9
 80007f0:	007b      	lsls	r3, r7, #1
 80007f2:	0a64      	lsrs	r4, r4, #9
 80007f4:	0e1b      	lsrs	r3, r3, #24
 80007f6:	0fff      	lsrs	r7, r7, #31
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d068      	beq.n	80008ce <__aeabi_fmul+0x116>
 80007fc:	2bff      	cmp	r3, #255	@ 0xff
 80007fe:	d021      	beq.n	8000844 <__aeabi_fmul+0x8c>
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	00e4      	lsls	r4, r4, #3
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4314      	orrs	r4, r2
 8000808:	4642      	mov	r2, r8
 800080a:	3b7f      	subs	r3, #127	@ 0x7f
 800080c:	195b      	adds	r3, r3, r5
 800080e:	2100      	movs	r1, #0
 8000810:	1c5d      	adds	r5, r3, #1
 8000812:	2a0a      	cmp	r2, #10
 8000814:	dc2e      	bgt.n	8000874 <__aeabi_fmul+0xbc>
 8000816:	407e      	eors	r6, r7
 8000818:	4642      	mov	r2, r8
 800081a:	2a02      	cmp	r2, #2
 800081c:	dc23      	bgt.n	8000866 <__aeabi_fmul+0xae>
 800081e:	3a01      	subs	r2, #1
 8000820:	2a01      	cmp	r2, #1
 8000822:	d900      	bls.n	8000826 <__aeabi_fmul+0x6e>
 8000824:	e0bd      	b.n	80009a2 <__aeabi_fmul+0x1ea>
 8000826:	2902      	cmp	r1, #2
 8000828:	d06e      	beq.n	8000908 <__aeabi_fmul+0x150>
 800082a:	2901      	cmp	r1, #1
 800082c:	d12c      	bne.n	8000888 <__aeabi_fmul+0xd0>
 800082e:	2000      	movs	r0, #0
 8000830:	2200      	movs	r2, #0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	07f6      	lsls	r6, r6, #31
 8000836:	4310      	orrs	r0, r2
 8000838:	4330      	orrs	r0, r6
 800083a:	bce0      	pop	{r5, r6, r7}
 800083c:	46ba      	mov	sl, r7
 800083e:	46b1      	mov	r9, r6
 8000840:	46a8      	mov	r8, r5
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000844:	002b      	movs	r3, r5
 8000846:	33ff      	adds	r3, #255	@ 0xff
 8000848:	2c00      	cmp	r4, #0
 800084a:	d065      	beq.n	8000918 <__aeabi_fmul+0x160>
 800084c:	2203      	movs	r2, #3
 800084e:	4641      	mov	r1, r8
 8000850:	4311      	orrs	r1, r2
 8000852:	0032      	movs	r2, r6
 8000854:	3501      	adds	r5, #1
 8000856:	4688      	mov	r8, r1
 8000858:	407a      	eors	r2, r7
 800085a:	35ff      	adds	r5, #255	@ 0xff
 800085c:	290a      	cmp	r1, #10
 800085e:	dd00      	ble.n	8000862 <__aeabi_fmul+0xaa>
 8000860:	e0d8      	b.n	8000a14 <__aeabi_fmul+0x25c>
 8000862:	0016      	movs	r6, r2
 8000864:	2103      	movs	r1, #3
 8000866:	4640      	mov	r0, r8
 8000868:	2201      	movs	r2, #1
 800086a:	4082      	lsls	r2, r0
 800086c:	20a6      	movs	r0, #166	@ 0xa6
 800086e:	00c0      	lsls	r0, r0, #3
 8000870:	4202      	tst	r2, r0
 8000872:	d020      	beq.n	80008b6 <__aeabi_fmul+0xfe>
 8000874:	4653      	mov	r3, sl
 8000876:	2b02      	cmp	r3, #2
 8000878:	d046      	beq.n	8000908 <__aeabi_fmul+0x150>
 800087a:	2b03      	cmp	r3, #3
 800087c:	d100      	bne.n	8000880 <__aeabi_fmul+0xc8>
 800087e:	e0bb      	b.n	80009f8 <__aeabi_fmul+0x240>
 8000880:	4651      	mov	r1, sl
 8000882:	464c      	mov	r4, r9
 8000884:	2901      	cmp	r1, #1
 8000886:	d0d2      	beq.n	800082e <__aeabi_fmul+0x76>
 8000888:	002b      	movs	r3, r5
 800088a:	337f      	adds	r3, #127	@ 0x7f
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd70      	ble.n	8000972 <__aeabi_fmul+0x1ba>
 8000890:	0762      	lsls	r2, r4, #29
 8000892:	d004      	beq.n	800089e <__aeabi_fmul+0xe6>
 8000894:	220f      	movs	r2, #15
 8000896:	4022      	ands	r2, r4
 8000898:	2a04      	cmp	r2, #4
 800089a:	d000      	beq.n	800089e <__aeabi_fmul+0xe6>
 800089c:	3404      	adds	r4, #4
 800089e:	0122      	lsls	r2, r4, #4
 80008a0:	d503      	bpl.n	80008aa <__aeabi_fmul+0xf2>
 80008a2:	4b63      	ldr	r3, [pc, #396]	@ (8000a30 <__aeabi_fmul+0x278>)
 80008a4:	401c      	ands	r4, r3
 80008a6:	002b      	movs	r3, r5
 80008a8:	3380      	adds	r3, #128	@ 0x80
 80008aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80008ac:	dc2c      	bgt.n	8000908 <__aeabi_fmul+0x150>
 80008ae:	01a2      	lsls	r2, r4, #6
 80008b0:	0a52      	lsrs	r2, r2, #9
 80008b2:	b2d8      	uxtb	r0, r3
 80008b4:	e7bd      	b.n	8000832 <__aeabi_fmul+0x7a>
 80008b6:	2090      	movs	r0, #144	@ 0x90
 80008b8:	0080      	lsls	r0, r0, #2
 80008ba:	4202      	tst	r2, r0
 80008bc:	d127      	bne.n	800090e <__aeabi_fmul+0x156>
 80008be:	38b9      	subs	r0, #185	@ 0xb9
 80008c0:	38ff      	subs	r0, #255	@ 0xff
 80008c2:	4210      	tst	r0, r2
 80008c4:	d06d      	beq.n	80009a2 <__aeabi_fmul+0x1ea>
 80008c6:	003e      	movs	r6, r7
 80008c8:	46a1      	mov	r9, r4
 80008ca:	468a      	mov	sl, r1
 80008cc:	e7d2      	b.n	8000874 <__aeabi_fmul+0xbc>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d141      	bne.n	8000956 <__aeabi_fmul+0x19e>
 80008d2:	2301      	movs	r3, #1
 80008d4:	4642      	mov	r2, r8
 80008d6:	431a      	orrs	r2, r3
 80008d8:	4690      	mov	r8, r2
 80008da:	002b      	movs	r3, r5
 80008dc:	4642      	mov	r2, r8
 80008de:	2101      	movs	r1, #1
 80008e0:	1c5d      	adds	r5, r3, #1
 80008e2:	2a0a      	cmp	r2, #10
 80008e4:	dd97      	ble.n	8000816 <__aeabi_fmul+0x5e>
 80008e6:	e7c5      	b.n	8000874 <__aeabi_fmul+0xbc>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d126      	bne.n	800093a <__aeabi_fmul+0x182>
 80008ec:	2304      	movs	r3, #4
 80008ee:	4698      	mov	r8, r3
 80008f0:	3b03      	subs	r3, #3
 80008f2:	2500      	movs	r5, #0
 80008f4:	469a      	mov	sl, r3
 80008f6:	e77a      	b.n	80007ee <__aeabi_fmul+0x36>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d118      	bne.n	800092e <__aeabi_fmul+0x176>
 80008fc:	2308      	movs	r3, #8
 80008fe:	4698      	mov	r8, r3
 8000900:	3b06      	subs	r3, #6
 8000902:	25ff      	movs	r5, #255	@ 0xff
 8000904:	469a      	mov	sl, r3
 8000906:	e772      	b.n	80007ee <__aeabi_fmul+0x36>
 8000908:	20ff      	movs	r0, #255	@ 0xff
 800090a:	2200      	movs	r2, #0
 800090c:	e791      	b.n	8000832 <__aeabi_fmul+0x7a>
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	2600      	movs	r6, #0
 8000912:	20ff      	movs	r0, #255	@ 0xff
 8000914:	03d2      	lsls	r2, r2, #15
 8000916:	e78c      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000918:	4641      	mov	r1, r8
 800091a:	2202      	movs	r2, #2
 800091c:	3501      	adds	r5, #1
 800091e:	4311      	orrs	r1, r2
 8000920:	4688      	mov	r8, r1
 8000922:	35ff      	adds	r5, #255	@ 0xff
 8000924:	290a      	cmp	r1, #10
 8000926:	dca5      	bgt.n	8000874 <__aeabi_fmul+0xbc>
 8000928:	2102      	movs	r1, #2
 800092a:	407e      	eors	r6, r7
 800092c:	e774      	b.n	8000818 <__aeabi_fmul+0x60>
 800092e:	230c      	movs	r3, #12
 8000930:	4698      	mov	r8, r3
 8000932:	3b09      	subs	r3, #9
 8000934:	25ff      	movs	r5, #255	@ 0xff
 8000936:	469a      	mov	sl, r3
 8000938:	e759      	b.n	80007ee <__aeabi_fmul+0x36>
 800093a:	0018      	movs	r0, r3
 800093c:	f002 f844 	bl	80029c8 <__clzsi2>
 8000940:	464a      	mov	r2, r9
 8000942:	1f43      	subs	r3, r0, #5
 8000944:	2576      	movs	r5, #118	@ 0x76
 8000946:	409a      	lsls	r2, r3
 8000948:	2300      	movs	r3, #0
 800094a:	426d      	negs	r5, r5
 800094c:	4691      	mov	r9, r2
 800094e:	4698      	mov	r8, r3
 8000950:	469a      	mov	sl, r3
 8000952:	1a2d      	subs	r5, r5, r0
 8000954:	e74b      	b.n	80007ee <__aeabi_fmul+0x36>
 8000956:	0020      	movs	r0, r4
 8000958:	f002 f836 	bl	80029c8 <__clzsi2>
 800095c:	4642      	mov	r2, r8
 800095e:	1f43      	subs	r3, r0, #5
 8000960:	409c      	lsls	r4, r3
 8000962:	1a2b      	subs	r3, r5, r0
 8000964:	3b76      	subs	r3, #118	@ 0x76
 8000966:	2100      	movs	r1, #0
 8000968:	1c5d      	adds	r5, r3, #1
 800096a:	2a0a      	cmp	r2, #10
 800096c:	dc00      	bgt.n	8000970 <__aeabi_fmul+0x1b8>
 800096e:	e752      	b.n	8000816 <__aeabi_fmul+0x5e>
 8000970:	e780      	b.n	8000874 <__aeabi_fmul+0xbc>
 8000972:	2201      	movs	r2, #1
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b1b      	cmp	r3, #27
 8000978:	dd00      	ble.n	800097c <__aeabi_fmul+0x1c4>
 800097a:	e758      	b.n	800082e <__aeabi_fmul+0x76>
 800097c:	359e      	adds	r5, #158	@ 0x9e
 800097e:	0022      	movs	r2, r4
 8000980:	40ac      	lsls	r4, r5
 8000982:	40da      	lsrs	r2, r3
 8000984:	1e63      	subs	r3, r4, #1
 8000986:	419c      	sbcs	r4, r3
 8000988:	4322      	orrs	r2, r4
 800098a:	0753      	lsls	r3, r2, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fmul+0x1e0>
 800098e:	230f      	movs	r3, #15
 8000990:	4013      	ands	r3, r2
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fmul+0x1e0>
 8000996:	3204      	adds	r2, #4
 8000998:	0153      	lsls	r3, r2, #5
 800099a:	d537      	bpl.n	8000a0c <__aeabi_fmul+0x254>
 800099c:	2001      	movs	r0, #1
 800099e:	2200      	movs	r2, #0
 80009a0:	e747      	b.n	8000832 <__aeabi_fmul+0x7a>
 80009a2:	0c21      	lsrs	r1, r4, #16
 80009a4:	464a      	mov	r2, r9
 80009a6:	0424      	lsls	r4, r4, #16
 80009a8:	0c24      	lsrs	r4, r4, #16
 80009aa:	0027      	movs	r7, r4
 80009ac:	0c10      	lsrs	r0, r2, #16
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	0c12      	lsrs	r2, r2, #16
 80009b2:	4344      	muls	r4, r0
 80009b4:	4357      	muls	r7, r2
 80009b6:	4348      	muls	r0, r1
 80009b8:	4351      	muls	r1, r2
 80009ba:	0c3a      	lsrs	r2, r7, #16
 80009bc:	1909      	adds	r1, r1, r4
 80009be:	1852      	adds	r2, r2, r1
 80009c0:	4294      	cmp	r4, r2
 80009c2:	d903      	bls.n	80009cc <__aeabi_fmul+0x214>
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0249      	lsls	r1, r1, #9
 80009c8:	468c      	mov	ip, r1
 80009ca:	4460      	add	r0, ip
 80009cc:	043f      	lsls	r7, r7, #16
 80009ce:	0411      	lsls	r1, r2, #16
 80009d0:	0c3f      	lsrs	r7, r7, #16
 80009d2:	19c9      	adds	r1, r1, r7
 80009d4:	018c      	lsls	r4, r1, #6
 80009d6:	1e67      	subs	r7, r4, #1
 80009d8:	41bc      	sbcs	r4, r7
 80009da:	0c12      	lsrs	r2, r2, #16
 80009dc:	0e89      	lsrs	r1, r1, #26
 80009de:	1812      	adds	r2, r2, r0
 80009e0:	430c      	orrs	r4, r1
 80009e2:	0192      	lsls	r2, r2, #6
 80009e4:	4314      	orrs	r4, r2
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	d50e      	bpl.n	8000a08 <__aeabi_fmul+0x250>
 80009ea:	2301      	movs	r3, #1
 80009ec:	0862      	lsrs	r2, r4, #1
 80009ee:	401c      	ands	r4, r3
 80009f0:	4314      	orrs	r4, r2
 80009f2:	e749      	b.n	8000888 <__aeabi_fmul+0xd0>
 80009f4:	003e      	movs	r6, r7
 80009f6:	46a1      	mov	r9, r4
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	464b      	mov	r3, r9
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	431a      	orrs	r2, r3
 8000a00:	0252      	lsls	r2, r2, #9
 8000a02:	20ff      	movs	r0, #255	@ 0xff
 8000a04:	0a52      	lsrs	r2, r2, #9
 8000a06:	e714      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a08:	001d      	movs	r5, r3
 8000a0a:	e73d      	b.n	8000888 <__aeabi_fmul+0xd0>
 8000a0c:	0192      	lsls	r2, r2, #6
 8000a0e:	2000      	movs	r0, #0
 8000a10:	0a52      	lsrs	r2, r2, #9
 8000a12:	e70e      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a14:	290f      	cmp	r1, #15
 8000a16:	d1ed      	bne.n	80009f4 <__aeabi_fmul+0x23c>
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	03d2      	lsls	r2, r2, #15
 8000a1e:	4213      	tst	r3, r2
 8000a20:	d0ea      	beq.n	80009f8 <__aeabi_fmul+0x240>
 8000a22:	4214      	tst	r4, r2
 8000a24:	d1e8      	bne.n	80009f8 <__aeabi_fmul+0x240>
 8000a26:	003e      	movs	r6, r7
 8000a28:	20ff      	movs	r0, #255	@ 0xff
 8000a2a:	4322      	orrs	r2, r4
 8000a2c:	e701      	b.n	8000832 <__aeabi_fmul+0x7a>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	f7ffffff 	.word	0xf7ffffff

08000a34 <__aeabi_ui2f>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	1e04      	subs	r4, r0, #0
 8000a38:	d00e      	beq.n	8000a58 <__aeabi_ui2f+0x24>
 8000a3a:	f001 ffc5 	bl	80029c8 <__clzsi2>
 8000a3e:	239e      	movs	r3, #158	@ 0x9e
 8000a40:	0001      	movs	r1, r0
 8000a42:	1a1b      	subs	r3, r3, r0
 8000a44:	2b96      	cmp	r3, #150	@ 0x96
 8000a46:	dc0c      	bgt.n	8000a62 <__aeabi_ui2f+0x2e>
 8000a48:	2808      	cmp	r0, #8
 8000a4a:	d02f      	beq.n	8000aac <__aeabi_ui2f+0x78>
 8000a4c:	3908      	subs	r1, #8
 8000a4e:	408c      	lsls	r4, r1
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	0a64      	lsrs	r4, r4, #9
 8000a54:	b2d8      	uxtb	r0, r3
 8000a56:	e001      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	05c0      	lsls	r0, r0, #23
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	2b99      	cmp	r3, #153	@ 0x99
 8000a64:	dc16      	bgt.n	8000a94 <__aeabi_ui2f+0x60>
 8000a66:	1f42      	subs	r2, r0, #5
 8000a68:	2805      	cmp	r0, #5
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_ui2f+0x3a>
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	0022      	movs	r2, r4
 8000a70:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <__aeabi_ui2f+0x80>)
 8000a72:	4002      	ands	r2, r0
 8000a74:	0765      	lsls	r5, r4, #29
 8000a76:	d009      	beq.n	8000a8c <__aeabi_ui2f+0x58>
 8000a78:	250f      	movs	r5, #15
 8000a7a:	402c      	ands	r4, r5
 8000a7c:	2c04      	cmp	r4, #4
 8000a7e:	d005      	beq.n	8000a8c <__aeabi_ui2f+0x58>
 8000a80:	3204      	adds	r2, #4
 8000a82:	0154      	lsls	r4, r2, #5
 8000a84:	d502      	bpl.n	8000a8c <__aeabi_ui2f+0x58>
 8000a86:	239f      	movs	r3, #159	@ 0x9f
 8000a88:	4002      	ands	r2, r0
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	0192      	lsls	r2, r2, #6
 8000a8e:	0a54      	lsrs	r4, r2, #9
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	e7e3      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000a94:	0002      	movs	r2, r0
 8000a96:	0020      	movs	r0, r4
 8000a98:	321b      	adds	r2, #27
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	1e50      	subs	r0, r2, #1
 8000aa0:	4182      	sbcs	r2, r0
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	1a40      	subs	r0, r0, r1
 8000aa6:	40c4      	lsrs	r4, r0
 8000aa8:	4314      	orrs	r4, r2
 8000aaa:	e7e0      	b.n	8000a6e <__aeabi_ui2f+0x3a>
 8000aac:	0264      	lsls	r4, r4, #9
 8000aae:	2096      	movs	r0, #150	@ 0x96
 8000ab0:	0a64      	lsrs	r4, r4, #9
 8000ab2:	e7d3      	b.n	8000a5c <__aeabi_ui2f+0x28>
 8000ab4:	fbffffff 	.word	0xfbffffff

08000ab8 <__aeabi_dadd>:
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	4657      	mov	r7, sl
 8000abc:	464e      	mov	r6, r9
 8000abe:	4645      	mov	r5, r8
 8000ac0:	46de      	mov	lr, fp
 8000ac2:	b5e0      	push	{r5, r6, r7, lr}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	9000      	str	r0, [sp, #0]
 8000ac8:	9101      	str	r1, [sp, #4]
 8000aca:	030c      	lsls	r4, r1, #12
 8000acc:	004f      	lsls	r7, r1, #1
 8000ace:	0fce      	lsrs	r6, r1, #31
 8000ad0:	0a61      	lsrs	r1, r4, #9
 8000ad2:	9c00      	ldr	r4, [sp, #0]
 8000ad4:	031d      	lsls	r5, r3, #12
 8000ad6:	0f64      	lsrs	r4, r4, #29
 8000ad8:	430c      	orrs	r4, r1
 8000ada:	9900      	ldr	r1, [sp, #0]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	00c8      	lsls	r0, r1, #3
 8000ae2:	0059      	lsls	r1, r3, #1
 8000ae4:	0d4b      	lsrs	r3, r1, #21
 8000ae6:	4699      	mov	r9, r3
 8000ae8:	9a00      	ldr	r2, [sp, #0]
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0fd9      	lsrs	r1, r3, #31
 8000af0:	0f53      	lsrs	r3, r2, #29
 8000af2:	432b      	orrs	r3, r5
 8000af4:	469a      	mov	sl, r3
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	0d7f      	lsrs	r7, r7, #21
 8000afa:	00da      	lsls	r2, r3, #3
 8000afc:	4694      	mov	ip, r2
 8000afe:	464a      	mov	r2, r9
 8000b00:	46b0      	mov	r8, r6
 8000b02:	1aba      	subs	r2, r7, r2
 8000b04:	428e      	cmp	r6, r1
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x52>
 8000b08:	e0b0      	b.n	8000c6c <__aeabi_dadd+0x1b4>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	dc00      	bgt.n	8000b10 <__aeabi_dadd+0x58>
 8000b0e:	e078      	b.n	8000c02 <__aeabi_dadd+0x14a>
 8000b10:	4649      	mov	r1, r9
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x60>
 8000b16:	e0e9      	b.n	8000cec <__aeabi_dadd+0x234>
 8000b18:	49c9      	ldr	r1, [pc, #804]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000b1a:	428f      	cmp	r7, r1
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x68>
 8000b1e:	e195      	b.n	8000e4c <__aeabi_dadd+0x394>
 8000b20:	2501      	movs	r5, #1
 8000b22:	2a38      	cmp	r2, #56	@ 0x38
 8000b24:	dc16      	bgt.n	8000b54 <__aeabi_dadd+0x9c>
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	4653      	mov	r3, sl
 8000b2a:	0409      	lsls	r1, r1, #16
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	469a      	mov	sl, r3
 8000b30:	2a1f      	cmp	r2, #31
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_dadd+0x7e>
 8000b34:	e1e7      	b.n	8000f06 <__aeabi_dadd+0x44e>
 8000b36:	2120      	movs	r1, #32
 8000b38:	4655      	mov	r5, sl
 8000b3a:	1a8b      	subs	r3, r1, r2
 8000b3c:	4661      	mov	r1, ip
 8000b3e:	409d      	lsls	r5, r3
 8000b40:	40d1      	lsrs	r1, r2
 8000b42:	430d      	orrs	r5, r1
 8000b44:	4661      	mov	r1, ip
 8000b46:	4099      	lsls	r1, r3
 8000b48:	1e4b      	subs	r3, r1, #1
 8000b4a:	4199      	sbcs	r1, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	40d3      	lsrs	r3, r2
 8000b50:	430d      	orrs	r5, r1
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	1b45      	subs	r5, r0, r5
 8000b56:	42a8      	cmp	r0, r5
 8000b58:	4180      	sbcs	r0, r0
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	1a24      	subs	r4, r4, r0
 8000b5e:	0223      	lsls	r3, r4, #8
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_dadd+0xac>
 8000b62:	e10f      	b.n	8000d84 <__aeabi_dadd+0x2cc>
 8000b64:	0264      	lsls	r4, r4, #9
 8000b66:	0a64      	lsrs	r4, r4, #9
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0xb6>
 8000b6c:	e139      	b.n	8000de2 <__aeabi_dadd+0x32a>
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f001 ff2a 	bl	80029c8 <__clzsi2>
 8000b74:	0003      	movs	r3, r0
 8000b76:	3b08      	subs	r3, #8
 8000b78:	2120      	movs	r1, #32
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	40d0      	lsrs	r0, r2
 8000b80:	409c      	lsls	r4, r3
 8000b82:	0002      	movs	r2, r0
 8000b84:	409d      	lsls	r5, r3
 8000b86:	4322      	orrs	r2, r4
 8000b88:	429f      	cmp	r7, r3
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0xd6>
 8000b8c:	e173      	b.n	8000e76 <__aeabi_dadd+0x3be>
 8000b8e:	1bd8      	subs	r0, r3, r7
 8000b90:	3001      	adds	r0, #1
 8000b92:	1a09      	subs	r1, r1, r0
 8000b94:	002c      	movs	r4, r5
 8000b96:	408d      	lsls	r5, r1
 8000b98:	40c4      	lsrs	r4, r0
 8000b9a:	1e6b      	subs	r3, r5, #1
 8000b9c:	419d      	sbcs	r5, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	40c2      	lsrs	r2, r0
 8000ba2:	408b      	lsls	r3, r1
 8000ba4:	4325      	orrs	r5, r4
 8000ba6:	2700      	movs	r7, #0
 8000ba8:	0014      	movs	r4, r2
 8000baa:	431d      	orrs	r5, r3
 8000bac:	076b      	lsls	r3, r5, #29
 8000bae:	d009      	beq.n	8000bc4 <__aeabi_dadd+0x10c>
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	402b      	ands	r3, r5
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d005      	beq.n	8000bc4 <__aeabi_dadd+0x10c>
 8000bb8:	1d2b      	adds	r3, r5, #4
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	41ad      	sbcs	r5, r5
 8000bbe:	426d      	negs	r5, r5
 8000bc0:	1964      	adds	r4, r4, r5
 8000bc2:	001d      	movs	r5, r3
 8000bc4:	0223      	lsls	r3, r4, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x112>
 8000bc8:	e12d      	b.n	8000e26 <__aeabi_dadd+0x36e>
 8000bca:	4a9d      	ldr	r2, [pc, #628]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000bcc:	3701      	adds	r7, #1
 8000bce:	4297      	cmp	r7, r2
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dadd+0x11c>
 8000bd2:	e0d3      	b.n	8000d7c <__aeabi_dadd+0x2c4>
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	499b      	ldr	r1, [pc, #620]	@ (8000e44 <__aeabi_dadd+0x38c>)
 8000bd8:	08ed      	lsrs	r5, r5, #3
 8000bda:	4021      	ands	r1, r4
 8000bdc:	074a      	lsls	r2, r1, #29
 8000bde:	432a      	orrs	r2, r5
 8000be0:	057c      	lsls	r4, r7, #21
 8000be2:	024d      	lsls	r5, r1, #9
 8000be4:	0b2d      	lsrs	r5, r5, #12
 8000be6:	0d64      	lsrs	r4, r4, #21
 8000be8:	0524      	lsls	r4, r4, #20
 8000bea:	432c      	orrs	r4, r5
 8000bec:	07f6      	lsls	r6, r6, #31
 8000bee:	4334      	orrs	r4, r6
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	b003      	add	sp, #12
 8000bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf8:	46bb      	mov	fp, r7
 8000bfa:	46b2      	mov	sl, r6
 8000bfc:	46a9      	mov	r9, r5
 8000bfe:	46a0      	mov	r8, r4
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x150>
 8000c06:	e084      	b.n	8000d12 <__aeabi_dadd+0x25a>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	1bd2      	subs	r2, r2, r7
 8000c0c:	2f00      	cmp	r7, #0
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_dadd+0x15a>
 8000c10:	e16d      	b.n	8000eee <__aeabi_dadd+0x436>
 8000c12:	0025      	movs	r5, r4
 8000c14:	4305      	orrs	r5, r0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x162>
 8000c18:	e127      	b.n	8000e6a <__aeabi_dadd+0x3b2>
 8000c1a:	1e56      	subs	r6, r2, #1
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x16a>
 8000c20:	e23b      	b.n	800109a <__aeabi_dadd+0x5e2>
 8000c22:	4d87      	ldr	r5, [pc, #540]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000c24:	42aa      	cmp	r2, r5
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x172>
 8000c28:	e26a      	b.n	8001100 <__aeabi_dadd+0x648>
 8000c2a:	2501      	movs	r5, #1
 8000c2c:	2e38      	cmp	r6, #56	@ 0x38
 8000c2e:	dc12      	bgt.n	8000c56 <__aeabi_dadd+0x19e>
 8000c30:	0032      	movs	r2, r6
 8000c32:	2a1f      	cmp	r2, #31
 8000c34:	dd00      	ble.n	8000c38 <__aeabi_dadd+0x180>
 8000c36:	e1f8      	b.n	800102a <__aeabi_dadd+0x572>
 8000c38:	2620      	movs	r6, #32
 8000c3a:	0025      	movs	r5, r4
 8000c3c:	1ab6      	subs	r6, r6, r2
 8000c3e:	0007      	movs	r7, r0
 8000c40:	4653      	mov	r3, sl
 8000c42:	40b0      	lsls	r0, r6
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	40b5      	lsls	r5, r6
 8000c48:	40d7      	lsrs	r7, r2
 8000c4a:	1e46      	subs	r6, r0, #1
 8000c4c:	41b0      	sbcs	r0, r6
 8000c4e:	1b1b      	subs	r3, r3, r4
 8000c50:	469a      	mov	sl, r3
 8000c52:	433d      	orrs	r5, r7
 8000c54:	4305      	orrs	r5, r0
 8000c56:	4662      	mov	r2, ip
 8000c58:	1b55      	subs	r5, r2, r5
 8000c5a:	45ac      	cmp	ip, r5
 8000c5c:	4192      	sbcs	r2, r2
 8000c5e:	4653      	mov	r3, sl
 8000c60:	4252      	negs	r2, r2
 8000c62:	000e      	movs	r6, r1
 8000c64:	464f      	mov	r7, r9
 8000c66:	4688      	mov	r8, r1
 8000c68:	1a9c      	subs	r4, r3, r2
 8000c6a:	e778      	b.n	8000b5e <__aeabi_dadd+0xa6>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	dc00      	bgt.n	8000c72 <__aeabi_dadd+0x1ba>
 8000c70:	e08e      	b.n	8000d90 <__aeabi_dadd+0x2d8>
 8000c72:	4649      	mov	r1, r9
 8000c74:	2900      	cmp	r1, #0
 8000c76:	d175      	bne.n	8000d64 <__aeabi_dadd+0x2ac>
 8000c78:	4661      	mov	r1, ip
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x1ca>
 8000c80:	e0f6      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000c82:	1e51      	subs	r1, r2, #1
 8000c84:	2a01      	cmp	r2, #1
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dadd+0x1d2>
 8000c88:	e191      	b.n	8000fae <__aeabi_dadd+0x4f6>
 8000c8a:	4d6d      	ldr	r5, [pc, #436]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000c8c:	42aa      	cmp	r2, r5
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dadd+0x1da>
 8000c90:	e0dc      	b.n	8000e4c <__aeabi_dadd+0x394>
 8000c92:	2501      	movs	r5, #1
 8000c94:	2938      	cmp	r1, #56	@ 0x38
 8000c96:	dc14      	bgt.n	8000cc2 <__aeabi_dadd+0x20a>
 8000c98:	000a      	movs	r2, r1
 8000c9a:	2a1f      	cmp	r2, #31
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_dadd+0x1e8>
 8000c9e:	e1a2      	b.n	8000fe6 <__aeabi_dadd+0x52e>
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4653      	mov	r3, sl
 8000ca4:	1a89      	subs	r1, r1, r2
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	001d      	movs	r5, r3
 8000caa:	4663      	mov	r3, ip
 8000cac:	40d3      	lsrs	r3, r2
 8000cae:	431d      	orrs	r5, r3
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	408b      	lsls	r3, r1
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	1e4b      	subs	r3, r1, #1
 8000cb8:	4199      	sbcs	r1, r3
 8000cba:	4653      	mov	r3, sl
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	430d      	orrs	r5, r1
 8000cc0:	18e4      	adds	r4, r4, r3
 8000cc2:	182d      	adds	r5, r5, r0
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	4180      	sbcs	r0, r0
 8000cc8:	4240      	negs	r0, r0
 8000cca:	1824      	adds	r4, r4, r0
 8000ccc:	0223      	lsls	r3, r4, #8
 8000cce:	d559      	bpl.n	8000d84 <__aeabi_dadd+0x2cc>
 8000cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000cd2:	3701      	adds	r7, #1
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	d051      	beq.n	8000d7c <__aeabi_dadd+0x2c4>
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4b5a      	ldr	r3, [pc, #360]	@ (8000e44 <__aeabi_dadd+0x38c>)
 8000cdc:	086a      	lsrs	r2, r5, #1
 8000cde:	401c      	ands	r4, r3
 8000ce0:	4029      	ands	r1, r5
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	07e5      	lsls	r5, r4, #31
 8000ce6:	4315      	orrs	r5, r2
 8000ce8:	0864      	lsrs	r4, r4, #1
 8000cea:	e75f      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000cec:	4661      	mov	r1, ip
 8000cee:	4653      	mov	r3, sl
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_dadd+0x23e>
 8000cf4:	e0bc      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000cf6:	1e51      	subs	r1, r2, #1
 8000cf8:	2a01      	cmp	r2, #1
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dadd+0x246>
 8000cfc:	e164      	b.n	8000fc8 <__aeabi_dadd+0x510>
 8000cfe:	4d50      	ldr	r5, [pc, #320]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000d00:	42aa      	cmp	r2, r5
 8000d02:	d100      	bne.n	8000d06 <__aeabi_dadd+0x24e>
 8000d04:	e16a      	b.n	8000fdc <__aeabi_dadd+0x524>
 8000d06:	2501      	movs	r5, #1
 8000d08:	2938      	cmp	r1, #56	@ 0x38
 8000d0a:	dd00      	ble.n	8000d0e <__aeabi_dadd+0x256>
 8000d0c:	e722      	b.n	8000b54 <__aeabi_dadd+0x9c>
 8000d0e:	000a      	movs	r2, r1
 8000d10:	e70e      	b.n	8000b30 <__aeabi_dadd+0x78>
 8000d12:	4a4d      	ldr	r2, [pc, #308]	@ (8000e48 <__aeabi_dadd+0x390>)
 8000d14:	1c7d      	adds	r5, r7, #1
 8000d16:	4215      	tst	r5, r2
 8000d18:	d000      	beq.n	8000d1c <__aeabi_dadd+0x264>
 8000d1a:	e0d0      	b.n	8000ebe <__aeabi_dadd+0x406>
 8000d1c:	0025      	movs	r5, r4
 8000d1e:	4662      	mov	r2, ip
 8000d20:	4653      	mov	r3, sl
 8000d22:	4305      	orrs	r5, r0
 8000d24:	431a      	orrs	r2, r3
 8000d26:	2f00      	cmp	r7, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_dadd+0x274>
 8000d2a:	e137      	b.n	8000f9c <__aeabi_dadd+0x4e4>
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x27a>
 8000d30:	e1a8      	b.n	8001084 <__aeabi_dadd+0x5cc>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x280>
 8000d36:	e16a      	b.n	800100e <__aeabi_dadd+0x556>
 8000d38:	4663      	mov	r3, ip
 8000d3a:	1ac5      	subs	r5, r0, r3
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	1ae2      	subs	r2, r4, r3
 8000d40:	42a8      	cmp	r0, r5
 8000d42:	419b      	sbcs	r3, r3
 8000d44:	425b      	negs	r3, r3
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	021a      	lsls	r2, r3, #8
 8000d4a:	d400      	bmi.n	8000d4e <__aeabi_dadd+0x296>
 8000d4c:	e203      	b.n	8001156 <__aeabi_dadd+0x69e>
 8000d4e:	4663      	mov	r3, ip
 8000d50:	1a1d      	subs	r5, r3, r0
 8000d52:	45ac      	cmp	ip, r5
 8000d54:	4192      	sbcs	r2, r2
 8000d56:	4653      	mov	r3, sl
 8000d58:	4252      	negs	r2, r2
 8000d5a:	1b1c      	subs	r4, r3, r4
 8000d5c:	000e      	movs	r6, r1
 8000d5e:	4688      	mov	r8, r1
 8000d60:	1aa4      	subs	r4, r4, r2
 8000d62:	e723      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000d64:	4936      	ldr	r1, [pc, #216]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000d66:	428f      	cmp	r7, r1
 8000d68:	d070      	beq.n	8000e4c <__aeabi_dadd+0x394>
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	2a38      	cmp	r2, #56	@ 0x38
 8000d6e:	dca8      	bgt.n	8000cc2 <__aeabi_dadd+0x20a>
 8000d70:	2180      	movs	r1, #128	@ 0x80
 8000d72:	4653      	mov	r3, sl
 8000d74:	0409      	lsls	r1, r1, #16
 8000d76:	430b      	orrs	r3, r1
 8000d78:	469a      	mov	sl, r3
 8000d7a:	e78e      	b.n	8000c9a <__aeabi_dadd+0x1e2>
 8000d7c:	003c      	movs	r4, r7
 8000d7e:	2500      	movs	r5, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	e731      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000d84:	2307      	movs	r3, #7
 8000d86:	402b      	ands	r3, r5
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x2d6>
 8000d8c:	e710      	b.n	8000bb0 <__aeabi_dadd+0xf8>
 8000d8e:	e093      	b.n	8000eb8 <__aeabi_dadd+0x400>
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d074      	beq.n	8000e7e <__aeabi_dadd+0x3c6>
 8000d94:	464a      	mov	r2, r9
 8000d96:	1bd2      	subs	r2, r2, r7
 8000d98:	2f00      	cmp	r7, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x2e6>
 8000d9c:	e0c7      	b.n	8000f2e <__aeabi_dadd+0x476>
 8000d9e:	4928      	ldr	r1, [pc, #160]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000da0:	4589      	cmp	r9, r1
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x2ee>
 8000da4:	e185      	b.n	80010b2 <__aeabi_dadd+0x5fa>
 8000da6:	2501      	movs	r5, #1
 8000da8:	2a38      	cmp	r2, #56	@ 0x38
 8000daa:	dc12      	bgt.n	8000dd2 <__aeabi_dadd+0x31a>
 8000dac:	2180      	movs	r1, #128	@ 0x80
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	430c      	orrs	r4, r1
 8000db2:	2a1f      	cmp	r2, #31
 8000db4:	dd00      	ble.n	8000db8 <__aeabi_dadd+0x300>
 8000db6:	e1ab      	b.n	8001110 <__aeabi_dadd+0x658>
 8000db8:	2120      	movs	r1, #32
 8000dba:	0025      	movs	r5, r4
 8000dbc:	1a89      	subs	r1, r1, r2
 8000dbe:	0007      	movs	r7, r0
 8000dc0:	4088      	lsls	r0, r1
 8000dc2:	408d      	lsls	r5, r1
 8000dc4:	40d7      	lsrs	r7, r2
 8000dc6:	1e41      	subs	r1, r0, #1
 8000dc8:	4188      	sbcs	r0, r1
 8000dca:	40d4      	lsrs	r4, r2
 8000dcc:	433d      	orrs	r5, r7
 8000dce:	4305      	orrs	r5, r0
 8000dd0:	44a2      	add	sl, r4
 8000dd2:	4465      	add	r5, ip
 8000dd4:	4565      	cmp	r5, ip
 8000dd6:	4192      	sbcs	r2, r2
 8000dd8:	4252      	negs	r2, r2
 8000dda:	4452      	add	r2, sl
 8000ddc:	0014      	movs	r4, r2
 8000dde:	464f      	mov	r7, r9
 8000de0:	e774      	b.n	8000ccc <__aeabi_dadd+0x214>
 8000de2:	0028      	movs	r0, r5
 8000de4:	f001 fdf0 	bl	80029c8 <__clzsi2>
 8000de8:	0003      	movs	r3, r0
 8000dea:	3318      	adds	r3, #24
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_dadd+0x33a>
 8000df0:	e6c2      	b.n	8000b78 <__aeabi_dadd+0xc0>
 8000df2:	002a      	movs	r2, r5
 8000df4:	3808      	subs	r0, #8
 8000df6:	4082      	lsls	r2, r0
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x346>
 8000dfc:	e0a9      	b.n	8000f52 <__aeabi_dadd+0x49a>
 8000dfe:	1bdb      	subs	r3, r3, r7
 8000e00:	1c58      	adds	r0, r3, #1
 8000e02:	281f      	cmp	r0, #31
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_dadd+0x350>
 8000e06:	e1ac      	b.n	8001162 <__aeabi_dadd+0x6aa>
 8000e08:	0015      	movs	r5, r2
 8000e0a:	3b1f      	subs	r3, #31
 8000e0c:	40dd      	lsrs	r5, r3
 8000e0e:	2820      	cmp	r0, #32
 8000e10:	d005      	beq.n	8000e1e <__aeabi_dadd+0x366>
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	1a1b      	subs	r3, r3, r0
 8000e16:	409a      	lsls	r2, r3
 8000e18:	1e53      	subs	r3, r2, #1
 8000e1a:	419a      	sbcs	r2, r3
 8000e1c:	4315      	orrs	r5, r2
 8000e1e:	2307      	movs	r3, #7
 8000e20:	2700      	movs	r7, #0
 8000e22:	402b      	ands	r3, r5
 8000e24:	e7b0      	b.n	8000d88 <__aeabi_dadd+0x2d0>
 8000e26:	08ed      	lsrs	r5, r5, #3
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <__aeabi_dadd+0x388>)
 8000e2a:	0762      	lsls	r2, r4, #29
 8000e2c:	432a      	orrs	r2, r5
 8000e2e:	08e4      	lsrs	r4, r4, #3
 8000e30:	429f      	cmp	r7, r3
 8000e32:	d00f      	beq.n	8000e54 <__aeabi_dadd+0x39c>
 8000e34:	0324      	lsls	r4, r4, #12
 8000e36:	0b25      	lsrs	r5, r4, #12
 8000e38:	057c      	lsls	r4, r7, #21
 8000e3a:	0d64      	lsrs	r4, r4, #21
 8000e3c:	e6d4      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	000007ff 	.word	0x000007ff
 8000e44:	ff7fffff 	.word	0xff7fffff
 8000e48:	000007fe 	.word	0x000007fe
 8000e4c:	08c0      	lsrs	r0, r0, #3
 8000e4e:	0762      	lsls	r2, r4, #29
 8000e50:	4302      	orrs	r2, r0
 8000e52:	08e4      	lsrs	r4, r4, #3
 8000e54:	0013      	movs	r3, r2
 8000e56:	4323      	orrs	r3, r4
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dadd+0x3a4>
 8000e5a:	e186      	b.n	800116a <__aeabi_dadd+0x6b2>
 8000e5c:	2580      	movs	r5, #128	@ 0x80
 8000e5e:	032d      	lsls	r5, r5, #12
 8000e60:	4325      	orrs	r5, r4
 8000e62:	032d      	lsls	r5, r5, #12
 8000e64:	4cc3      	ldr	r4, [pc, #780]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000e66:	0b2d      	lsrs	r5, r5, #12
 8000e68:	e6be      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000e6a:	4660      	mov	r0, ip
 8000e6c:	4654      	mov	r4, sl
 8000e6e:	000e      	movs	r6, r1
 8000e70:	0017      	movs	r7, r2
 8000e72:	08c5      	lsrs	r5, r0, #3
 8000e74:	e7d8      	b.n	8000e28 <__aeabi_dadd+0x370>
 8000e76:	4cc0      	ldr	r4, [pc, #768]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000e78:	1aff      	subs	r7, r7, r3
 8000e7a:	4014      	ands	r4, r2
 8000e7c:	e696      	b.n	8000bac <__aeabi_dadd+0xf4>
 8000e7e:	4abf      	ldr	r2, [pc, #764]	@ (800117c <__aeabi_dadd+0x6c4>)
 8000e80:	1c79      	adds	r1, r7, #1
 8000e82:	4211      	tst	r1, r2
 8000e84:	d16b      	bne.n	8000f5e <__aeabi_dadd+0x4a6>
 8000e86:	0022      	movs	r2, r4
 8000e88:	4302      	orrs	r2, r0
 8000e8a:	2f00      	cmp	r7, #0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_dadd+0x3d8>
 8000e8e:	e0db      	b.n	8001048 <__aeabi_dadd+0x590>
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dadd+0x3de>
 8000e94:	e12d      	b.n	80010f2 <__aeabi_dadd+0x63a>
 8000e96:	4662      	mov	r2, ip
 8000e98:	4653      	mov	r3, sl
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dadd+0x3e8>
 8000e9e:	e0b6      	b.n	800100e <__aeabi_dadd+0x556>
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	18c5      	adds	r5, r0, r3
 8000ea4:	4285      	cmp	r5, r0
 8000ea6:	4180      	sbcs	r0, r0
 8000ea8:	4454      	add	r4, sl
 8000eaa:	4240      	negs	r0, r0
 8000eac:	1824      	adds	r4, r4, r0
 8000eae:	0223      	lsls	r3, r4, #8
 8000eb0:	d502      	bpl.n	8000eb8 <__aeabi_dadd+0x400>
 8000eb2:	000f      	movs	r7, r1
 8000eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000eb6:	401c      	ands	r4, r3
 8000eb8:	003a      	movs	r2, r7
 8000eba:	0028      	movs	r0, r5
 8000ebc:	e7d8      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 8000ebe:	4662      	mov	r2, ip
 8000ec0:	1a85      	subs	r5, r0, r2
 8000ec2:	42a8      	cmp	r0, r5
 8000ec4:	4192      	sbcs	r2, r2
 8000ec6:	4653      	mov	r3, sl
 8000ec8:	4252      	negs	r2, r2
 8000eca:	4691      	mov	r9, r2
 8000ecc:	1ae3      	subs	r3, r4, r3
 8000ece:	001a      	movs	r2, r3
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	021a      	lsls	r2, r3, #8
 8000eda:	d454      	bmi.n	8000f86 <__aeabi_dadd+0x4ce>
 8000edc:	464a      	mov	r2, r9
 8000ede:	464c      	mov	r4, r9
 8000ee0:	432a      	orrs	r2, r5
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_dadd+0x42e>
 8000ee4:	e640      	b.n	8000b68 <__aeabi_dadd+0xb0>
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	2400      	movs	r4, #0
 8000eea:	2500      	movs	r5, #0
 8000eec:	e67c      	b.n	8000be8 <__aeabi_dadd+0x130>
 8000eee:	4da1      	ldr	r5, [pc, #644]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000ef0:	45a9      	cmp	r9, r5
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dadd+0x43e>
 8000ef4:	e090      	b.n	8001018 <__aeabi_dadd+0x560>
 8000ef6:	2501      	movs	r5, #1
 8000ef8:	2a38      	cmp	r2, #56	@ 0x38
 8000efa:	dd00      	ble.n	8000efe <__aeabi_dadd+0x446>
 8000efc:	e6ab      	b.n	8000c56 <__aeabi_dadd+0x19e>
 8000efe:	2580      	movs	r5, #128	@ 0x80
 8000f00:	042d      	lsls	r5, r5, #16
 8000f02:	432c      	orrs	r4, r5
 8000f04:	e695      	b.n	8000c32 <__aeabi_dadd+0x17a>
 8000f06:	0011      	movs	r1, r2
 8000f08:	4655      	mov	r5, sl
 8000f0a:	3920      	subs	r1, #32
 8000f0c:	40cd      	lsrs	r5, r1
 8000f0e:	46a9      	mov	r9, r5
 8000f10:	2a20      	cmp	r2, #32
 8000f12:	d006      	beq.n	8000f22 <__aeabi_dadd+0x46a>
 8000f14:	2140      	movs	r1, #64	@ 0x40
 8000f16:	4653      	mov	r3, sl
 8000f18:	1a8a      	subs	r2, r1, r2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	4694      	mov	ip, r2
 8000f22:	4665      	mov	r5, ip
 8000f24:	1e6b      	subs	r3, r5, #1
 8000f26:	419d      	sbcs	r5, r3
 8000f28:	464b      	mov	r3, r9
 8000f2a:	431d      	orrs	r5, r3
 8000f2c:	e612      	b.n	8000b54 <__aeabi_dadd+0x9c>
 8000f2e:	0021      	movs	r1, r4
 8000f30:	4301      	orrs	r1, r0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x47e>
 8000f34:	e0c4      	b.n	80010c0 <__aeabi_dadd+0x608>
 8000f36:	1e51      	subs	r1, r2, #1
 8000f38:	2a01      	cmp	r2, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x486>
 8000f3c:	e0fb      	b.n	8001136 <__aeabi_dadd+0x67e>
 8000f3e:	4d8d      	ldr	r5, [pc, #564]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000f40:	42aa      	cmp	r2, r5
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0x48e>
 8000f44:	e0b5      	b.n	80010b2 <__aeabi_dadd+0x5fa>
 8000f46:	2501      	movs	r5, #1
 8000f48:	2938      	cmp	r1, #56	@ 0x38
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_dadd+0x496>
 8000f4c:	e741      	b.n	8000dd2 <__aeabi_dadd+0x31a>
 8000f4e:	000a      	movs	r2, r1
 8000f50:	e72f      	b.n	8000db2 <__aeabi_dadd+0x2fa>
 8000f52:	4c89      	ldr	r4, [pc, #548]	@ (8001178 <__aeabi_dadd+0x6c0>)
 8000f54:	1aff      	subs	r7, r7, r3
 8000f56:	4014      	ands	r4, r2
 8000f58:	0762      	lsls	r2, r4, #29
 8000f5a:	08e4      	lsrs	r4, r4, #3
 8000f5c:	e76a      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8000f5e:	4a85      	ldr	r2, [pc, #532]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8000f60:	4291      	cmp	r1, r2
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x4ae>
 8000f64:	e0e3      	b.n	800112e <__aeabi_dadd+0x676>
 8000f66:	4663      	mov	r3, ip
 8000f68:	18c2      	adds	r2, r0, r3
 8000f6a:	4282      	cmp	r2, r0
 8000f6c:	4180      	sbcs	r0, r0
 8000f6e:	0023      	movs	r3, r4
 8000f70:	4240      	negs	r0, r0
 8000f72:	4453      	add	r3, sl
 8000f74:	181b      	adds	r3, r3, r0
 8000f76:	07dd      	lsls	r5, r3, #31
 8000f78:	085c      	lsrs	r4, r3, #1
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	0852      	lsrs	r2, r2, #1
 8000f7e:	4315      	orrs	r5, r2
 8000f80:	000f      	movs	r7, r1
 8000f82:	402b      	ands	r3, r5
 8000f84:	e700      	b.n	8000d88 <__aeabi_dadd+0x2d0>
 8000f86:	4663      	mov	r3, ip
 8000f88:	1a1d      	subs	r5, r3, r0
 8000f8a:	45ac      	cmp	ip, r5
 8000f8c:	4192      	sbcs	r2, r2
 8000f8e:	4653      	mov	r3, sl
 8000f90:	4252      	negs	r2, r2
 8000f92:	1b1c      	subs	r4, r3, r4
 8000f94:	000e      	movs	r6, r1
 8000f96:	4688      	mov	r8, r1
 8000f98:	1aa4      	subs	r4, r4, r2
 8000f9a:	e5e5      	b.n	8000b68 <__aeabi_dadd+0xb0>
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_dadd+0x4ea>
 8000fa0:	e091      	b.n	80010c6 <__aeabi_dadd+0x60e>
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d138      	bne.n	8001018 <__aeabi_dadd+0x560>
 8000fa6:	2480      	movs	r4, #128	@ 0x80
 8000fa8:	2600      	movs	r6, #0
 8000faa:	0324      	lsls	r4, r4, #12
 8000fac:	e756      	b.n	8000e5c <__aeabi_dadd+0x3a4>
 8000fae:	4663      	mov	r3, ip
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	4285      	cmp	r5, r0
 8000fb4:	4180      	sbcs	r0, r0
 8000fb6:	4454      	add	r4, sl
 8000fb8:	4240      	negs	r0, r0
 8000fba:	1824      	adds	r4, r4, r0
 8000fbc:	2701      	movs	r7, #1
 8000fbe:	0223      	lsls	r3, r4, #8
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_dadd+0x50c>
 8000fc2:	e6df      	b.n	8000d84 <__aeabi_dadd+0x2cc>
 8000fc4:	2702      	movs	r7, #2
 8000fc6:	e687      	b.n	8000cd8 <__aeabi_dadd+0x220>
 8000fc8:	4663      	mov	r3, ip
 8000fca:	1ac5      	subs	r5, r0, r3
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	4180      	sbcs	r0, r0
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	1ae4      	subs	r4, r4, r3
 8000fd6:	2701      	movs	r7, #1
 8000fd8:	1a24      	subs	r4, r4, r0
 8000fda:	e5c0      	b.n	8000b5e <__aeabi_dadd+0xa6>
 8000fdc:	0762      	lsls	r2, r4, #29
 8000fde:	08c0      	lsrs	r0, r0, #3
 8000fe0:	4302      	orrs	r2, r0
 8000fe2:	08e4      	lsrs	r4, r4, #3
 8000fe4:	e736      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	4653      	mov	r3, sl
 8000fea:	3920      	subs	r1, #32
 8000fec:	40cb      	lsrs	r3, r1
 8000fee:	4699      	mov	r9, r3
 8000ff0:	2a20      	cmp	r2, #32
 8000ff2:	d006      	beq.n	8001002 <__aeabi_dadd+0x54a>
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	4653      	mov	r3, sl
 8000ff8:	1a8a      	subs	r2, r1, r2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4694      	mov	ip, r2
 8001002:	4665      	mov	r5, ip
 8001004:	1e6b      	subs	r3, r5, #1
 8001006:	419d      	sbcs	r5, r3
 8001008:	464b      	mov	r3, r9
 800100a:	431d      	orrs	r5, r3
 800100c:	e659      	b.n	8000cc2 <__aeabi_dadd+0x20a>
 800100e:	0762      	lsls	r2, r4, #29
 8001010:	08c0      	lsrs	r0, r0, #3
 8001012:	4302      	orrs	r2, r0
 8001014:	08e4      	lsrs	r4, r4, #3
 8001016:	e70d      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8001018:	4653      	mov	r3, sl
 800101a:	075a      	lsls	r2, r3, #29
 800101c:	4663      	mov	r3, ip
 800101e:	08d8      	lsrs	r0, r3, #3
 8001020:	4653      	mov	r3, sl
 8001022:	000e      	movs	r6, r1
 8001024:	4302      	orrs	r2, r0
 8001026:	08dc      	lsrs	r4, r3, #3
 8001028:	e714      	b.n	8000e54 <__aeabi_dadd+0x39c>
 800102a:	0015      	movs	r5, r2
 800102c:	0026      	movs	r6, r4
 800102e:	3d20      	subs	r5, #32
 8001030:	40ee      	lsrs	r6, r5
 8001032:	2a20      	cmp	r2, #32
 8001034:	d003      	beq.n	800103e <__aeabi_dadd+0x586>
 8001036:	2540      	movs	r5, #64	@ 0x40
 8001038:	1aaa      	subs	r2, r5, r2
 800103a:	4094      	lsls	r4, r2
 800103c:	4320      	orrs	r0, r4
 800103e:	1e42      	subs	r2, r0, #1
 8001040:	4190      	sbcs	r0, r2
 8001042:	0005      	movs	r5, r0
 8001044:	4335      	orrs	r5, r6
 8001046:	e606      	b.n	8000c56 <__aeabi_dadd+0x19e>
 8001048:	2a00      	cmp	r2, #0
 800104a:	d07c      	beq.n	8001146 <__aeabi_dadd+0x68e>
 800104c:	4662      	mov	r2, ip
 800104e:	4653      	mov	r3, sl
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	431a      	orrs	r2, r3
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x5a0>
 8001056:	e6fa      	b.n	8000e4e <__aeabi_dadd+0x396>
 8001058:	0762      	lsls	r2, r4, #29
 800105a:	4310      	orrs	r0, r2
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	08e4      	lsrs	r4, r4, #3
 8001060:	0312      	lsls	r2, r2, #12
 8001062:	4214      	tst	r4, r2
 8001064:	d008      	beq.n	8001078 <__aeabi_dadd+0x5c0>
 8001066:	08d9      	lsrs	r1, r3, #3
 8001068:	4211      	tst	r1, r2
 800106a:	d105      	bne.n	8001078 <__aeabi_dadd+0x5c0>
 800106c:	4663      	mov	r3, ip
 800106e:	08d8      	lsrs	r0, r3, #3
 8001070:	4653      	mov	r3, sl
 8001072:	000c      	movs	r4, r1
 8001074:	075b      	lsls	r3, r3, #29
 8001076:	4318      	orrs	r0, r3
 8001078:	0f42      	lsrs	r2, r0, #29
 800107a:	00c0      	lsls	r0, r0, #3
 800107c:	08c0      	lsrs	r0, r0, #3
 800107e:	0752      	lsls	r2, r2, #29
 8001080:	4302      	orrs	r2, r0
 8001082:	e6e7      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001084:	2a00      	cmp	r2, #0
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0x5d2>
 8001088:	e72d      	b.n	8000ee6 <__aeabi_dadd+0x42e>
 800108a:	4663      	mov	r3, ip
 800108c:	08d8      	lsrs	r0, r3, #3
 800108e:	4653      	mov	r3, sl
 8001090:	075a      	lsls	r2, r3, #29
 8001092:	000e      	movs	r6, r1
 8001094:	4302      	orrs	r2, r0
 8001096:	08dc      	lsrs	r4, r3, #3
 8001098:	e6cc      	b.n	8000e34 <__aeabi_dadd+0x37c>
 800109a:	4663      	mov	r3, ip
 800109c:	1a1d      	subs	r5, r3, r0
 800109e:	45ac      	cmp	ip, r5
 80010a0:	4192      	sbcs	r2, r2
 80010a2:	4653      	mov	r3, sl
 80010a4:	4252      	negs	r2, r2
 80010a6:	1b1c      	subs	r4, r3, r4
 80010a8:	000e      	movs	r6, r1
 80010aa:	4688      	mov	r8, r1
 80010ac:	1aa4      	subs	r4, r4, r2
 80010ae:	3701      	adds	r7, #1
 80010b0:	e555      	b.n	8000b5e <__aeabi_dadd+0xa6>
 80010b2:	4663      	mov	r3, ip
 80010b4:	08d9      	lsrs	r1, r3, #3
 80010b6:	4653      	mov	r3, sl
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	430a      	orrs	r2, r1
 80010bc:	08dc      	lsrs	r4, r3, #3
 80010be:	e6c9      	b.n	8000e54 <__aeabi_dadd+0x39c>
 80010c0:	4660      	mov	r0, ip
 80010c2:	4654      	mov	r4, sl
 80010c4:	e6d4      	b.n	8000e70 <__aeabi_dadd+0x3b8>
 80010c6:	08c0      	lsrs	r0, r0, #3
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x616>
 80010cc:	e6bf      	b.n	8000e4e <__aeabi_dadd+0x396>
 80010ce:	0762      	lsls	r2, r4, #29
 80010d0:	4310      	orrs	r0, r2
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	08e4      	lsrs	r4, r4, #3
 80010d6:	0312      	lsls	r2, r2, #12
 80010d8:	4214      	tst	r4, r2
 80010da:	d0cd      	beq.n	8001078 <__aeabi_dadd+0x5c0>
 80010dc:	08dd      	lsrs	r5, r3, #3
 80010de:	4215      	tst	r5, r2
 80010e0:	d1ca      	bne.n	8001078 <__aeabi_dadd+0x5c0>
 80010e2:	4663      	mov	r3, ip
 80010e4:	08d8      	lsrs	r0, r3, #3
 80010e6:	4653      	mov	r3, sl
 80010e8:	075b      	lsls	r3, r3, #29
 80010ea:	000e      	movs	r6, r1
 80010ec:	002c      	movs	r4, r5
 80010ee:	4318      	orrs	r0, r3
 80010f0:	e7c2      	b.n	8001078 <__aeabi_dadd+0x5c0>
 80010f2:	4663      	mov	r3, ip
 80010f4:	08d9      	lsrs	r1, r3, #3
 80010f6:	4653      	mov	r3, sl
 80010f8:	075a      	lsls	r2, r3, #29
 80010fa:	430a      	orrs	r2, r1
 80010fc:	08dc      	lsrs	r4, r3, #3
 80010fe:	e699      	b.n	8000e34 <__aeabi_dadd+0x37c>
 8001100:	4663      	mov	r3, ip
 8001102:	08d8      	lsrs	r0, r3, #3
 8001104:	4653      	mov	r3, sl
 8001106:	075a      	lsls	r2, r3, #29
 8001108:	000e      	movs	r6, r1
 800110a:	4302      	orrs	r2, r0
 800110c:	08dc      	lsrs	r4, r3, #3
 800110e:	e6a1      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001110:	0011      	movs	r1, r2
 8001112:	0027      	movs	r7, r4
 8001114:	3920      	subs	r1, #32
 8001116:	40cf      	lsrs	r7, r1
 8001118:	2a20      	cmp	r2, #32
 800111a:	d003      	beq.n	8001124 <__aeabi_dadd+0x66c>
 800111c:	2140      	movs	r1, #64	@ 0x40
 800111e:	1a8a      	subs	r2, r1, r2
 8001120:	4094      	lsls	r4, r2
 8001122:	4320      	orrs	r0, r4
 8001124:	1e42      	subs	r2, r0, #1
 8001126:	4190      	sbcs	r0, r2
 8001128:	0005      	movs	r5, r0
 800112a:	433d      	orrs	r5, r7
 800112c:	e651      	b.n	8000dd2 <__aeabi_dadd+0x31a>
 800112e:	000c      	movs	r4, r1
 8001130:	2500      	movs	r5, #0
 8001132:	2200      	movs	r2, #0
 8001134:	e558      	b.n	8000be8 <__aeabi_dadd+0x130>
 8001136:	4460      	add	r0, ip
 8001138:	4560      	cmp	r0, ip
 800113a:	4192      	sbcs	r2, r2
 800113c:	4454      	add	r4, sl
 800113e:	4252      	negs	r2, r2
 8001140:	0005      	movs	r5, r0
 8001142:	18a4      	adds	r4, r4, r2
 8001144:	e73a      	b.n	8000fbc <__aeabi_dadd+0x504>
 8001146:	4653      	mov	r3, sl
 8001148:	075a      	lsls	r2, r3, #29
 800114a:	4663      	mov	r3, ip
 800114c:	08d9      	lsrs	r1, r3, #3
 800114e:	4653      	mov	r3, sl
 8001150:	430a      	orrs	r2, r1
 8001152:	08dc      	lsrs	r4, r3, #3
 8001154:	e67e      	b.n	8000e54 <__aeabi_dadd+0x39c>
 8001156:	001a      	movs	r2, r3
 8001158:	001c      	movs	r4, r3
 800115a:	432a      	orrs	r2, r5
 800115c:	d000      	beq.n	8001160 <__aeabi_dadd+0x6a8>
 800115e:	e6ab      	b.n	8000eb8 <__aeabi_dadd+0x400>
 8001160:	e6c1      	b.n	8000ee6 <__aeabi_dadd+0x42e>
 8001162:	2120      	movs	r1, #32
 8001164:	2500      	movs	r5, #0
 8001166:	1a09      	subs	r1, r1, r0
 8001168:	e519      	b.n	8000b9e <__aeabi_dadd+0xe6>
 800116a:	2200      	movs	r2, #0
 800116c:	2500      	movs	r5, #0
 800116e:	4c01      	ldr	r4, [pc, #4]	@ (8001174 <__aeabi_dadd+0x6bc>)
 8001170:	e53a      	b.n	8000be8 <__aeabi_dadd+0x130>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	000007fe 	.word	0x000007fe

08001180 <__aeabi_ddiv>:
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	46de      	mov	lr, fp
 8001184:	4645      	mov	r5, r8
 8001186:	4657      	mov	r7, sl
 8001188:	464e      	mov	r6, r9
 800118a:	b5e0      	push	{r5, r6, r7, lr}
 800118c:	b087      	sub	sp, #28
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	030b      	lsls	r3, r1, #12
 8001194:	0b1b      	lsrs	r3, r3, #12
 8001196:	469b      	mov	fp, r3
 8001198:	0fca      	lsrs	r2, r1, #31
 800119a:	004b      	lsls	r3, r1, #1
 800119c:	0004      	movs	r4, r0
 800119e:	4680      	mov	r8, r0
 80011a0:	0d5b      	lsrs	r3, r3, #21
 80011a2:	9202      	str	r2, [sp, #8]
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x28>
 80011a6:	e16a      	b.n	800147e <__aeabi_ddiv+0x2fe>
 80011a8:	4ad4      	ldr	r2, [pc, #848]	@ (80014fc <__aeabi_ddiv+0x37c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d100      	bne.n	80011b0 <__aeabi_ddiv+0x30>
 80011ae:	e18c      	b.n	80014ca <__aeabi_ddiv+0x34a>
 80011b0:	4659      	mov	r1, fp
 80011b2:	0f42      	lsrs	r2, r0, #29
 80011b4:	00c9      	lsls	r1, r1, #3
 80011b6:	430a      	orrs	r2, r1
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	4311      	orrs	r1, r2
 80011be:	00c2      	lsls	r2, r0, #3
 80011c0:	4690      	mov	r8, r2
 80011c2:	4acf      	ldr	r2, [pc, #828]	@ (8001500 <__aeabi_ddiv+0x380>)
 80011c4:	4689      	mov	r9, r1
 80011c6:	4692      	mov	sl, r2
 80011c8:	449a      	add	sl, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	2400      	movs	r4, #0
 80011ce:	9303      	str	r3, [sp, #12]
 80011d0:	9e00      	ldr	r6, [sp, #0]
 80011d2:	9f01      	ldr	r7, [sp, #4]
 80011d4:	033b      	lsls	r3, r7, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	469b      	mov	fp, r3
 80011da:	007b      	lsls	r3, r7, #1
 80011dc:	0030      	movs	r0, r6
 80011de:	0d5b      	lsrs	r3, r3, #21
 80011e0:	0ffd      	lsrs	r5, r7, #31
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x68>
 80011e6:	e128      	b.n	800143a <__aeabi_ddiv+0x2ba>
 80011e8:	4ac4      	ldr	r2, [pc, #784]	@ (80014fc <__aeabi_ddiv+0x37c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x70>
 80011ee:	e177      	b.n	80014e0 <__aeabi_ddiv+0x360>
 80011f0:	4659      	mov	r1, fp
 80011f2:	0f72      	lsrs	r2, r6, #29
 80011f4:	00c9      	lsls	r1, r1, #3
 80011f6:	430a      	orrs	r2, r1
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	0409      	lsls	r1, r1, #16
 80011fc:	4311      	orrs	r1, r2
 80011fe:	468b      	mov	fp, r1
 8001200:	49bf      	ldr	r1, [pc, #764]	@ (8001500 <__aeabi_ddiv+0x380>)
 8001202:	00f2      	lsls	r2, r6, #3
 8001204:	468c      	mov	ip, r1
 8001206:	4651      	mov	r1, sl
 8001208:	4463      	add	r3, ip
 800120a:	1acb      	subs	r3, r1, r3
 800120c:	469a      	mov	sl, r3
 800120e:	2300      	movs	r3, #0
 8001210:	9e02      	ldr	r6, [sp, #8]
 8001212:	406e      	eors	r6, r5
 8001214:	2c0f      	cmp	r4, #15
 8001216:	d827      	bhi.n	8001268 <__aeabi_ddiv+0xe8>
 8001218:	49ba      	ldr	r1, [pc, #744]	@ (8001504 <__aeabi_ddiv+0x384>)
 800121a:	00a4      	lsls	r4, r4, #2
 800121c:	5909      	ldr	r1, [r1, r4]
 800121e:	468f      	mov	pc, r1
 8001220:	46cb      	mov	fp, r9
 8001222:	4642      	mov	r2, r8
 8001224:	9e02      	ldr	r6, [sp, #8]
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d016      	beq.n	800125a <__aeabi_ddiv+0xda>
 800122c:	2b03      	cmp	r3, #3
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0xb2>
 8001230:	e2a6      	b.n	8001780 <__aeabi_ddiv+0x600>
 8001232:	2b01      	cmp	r3, #1
 8001234:	d000      	beq.n	8001238 <__aeabi_ddiv+0xb8>
 8001236:	e0df      	b.n	80013f8 <__aeabi_ddiv+0x278>
 8001238:	2200      	movs	r2, #0
 800123a:	2300      	movs	r3, #0
 800123c:	2400      	movs	r4, #0
 800123e:	4690      	mov	r8, r2
 8001240:	051b      	lsls	r3, r3, #20
 8001242:	4323      	orrs	r3, r4
 8001244:	07f6      	lsls	r6, r6, #31
 8001246:	4333      	orrs	r3, r6
 8001248:	4640      	mov	r0, r8
 800124a:	0019      	movs	r1, r3
 800124c:	b007      	add	sp, #28
 800124e:	bcf0      	pop	{r4, r5, r6, r7}
 8001250:	46bb      	mov	fp, r7
 8001252:	46b2      	mov	sl, r6
 8001254:	46a9      	mov	r9, r5
 8001256:	46a0      	mov	r8, r4
 8001258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125a:	2200      	movs	r2, #0
 800125c:	2400      	movs	r4, #0
 800125e:	4690      	mov	r8, r2
 8001260:	4ba6      	ldr	r3, [pc, #664]	@ (80014fc <__aeabi_ddiv+0x37c>)
 8001262:	e7ed      	b.n	8001240 <__aeabi_ddiv+0xc0>
 8001264:	002e      	movs	r6, r5
 8001266:	e7df      	b.n	8001228 <__aeabi_ddiv+0xa8>
 8001268:	45cb      	cmp	fp, r9
 800126a:	d200      	bcs.n	800126e <__aeabi_ddiv+0xee>
 800126c:	e1d4      	b.n	8001618 <__aeabi_ddiv+0x498>
 800126e:	d100      	bne.n	8001272 <__aeabi_ddiv+0xf2>
 8001270:	e1cf      	b.n	8001612 <__aeabi_ddiv+0x492>
 8001272:	2301      	movs	r3, #1
 8001274:	425b      	negs	r3, r3
 8001276:	469c      	mov	ip, r3
 8001278:	4644      	mov	r4, r8
 800127a:	4648      	mov	r0, r9
 800127c:	2700      	movs	r7, #0
 800127e:	44e2      	add	sl, ip
 8001280:	465b      	mov	r3, fp
 8001282:	0e15      	lsrs	r5, r2, #24
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	431d      	orrs	r5, r3
 8001288:	0c19      	lsrs	r1, r3, #16
 800128a:	042b      	lsls	r3, r5, #16
 800128c:	0212      	lsls	r2, r2, #8
 800128e:	9500      	str	r5, [sp, #0]
 8001290:	0c1d      	lsrs	r5, r3, #16
 8001292:	4691      	mov	r9, r2
 8001294:	9102      	str	r1, [sp, #8]
 8001296:	9503      	str	r5, [sp, #12]
 8001298:	f7fe ffd8 	bl	800024c <__aeabi_uidivmod>
 800129c:	0002      	movs	r2, r0
 800129e:	436a      	muls	r2, r5
 80012a0:	040b      	lsls	r3, r1, #16
 80012a2:	0c21      	lsrs	r1, r4, #16
 80012a4:	4680      	mov	r8, r0
 80012a6:	4319      	orrs	r1, r3
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d909      	bls.n	80012c0 <__aeabi_ddiv+0x140>
 80012ac:	9d00      	ldr	r5, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	46ac      	mov	ip, r5
 80012b2:	425b      	negs	r3, r3
 80012b4:	4461      	add	r1, ip
 80012b6:	469c      	mov	ip, r3
 80012b8:	44e0      	add	r8, ip
 80012ba:	428d      	cmp	r5, r1
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x140>
 80012be:	e1fb      	b.n	80016b8 <__aeabi_ddiv+0x538>
 80012c0:	1a88      	subs	r0, r1, r2
 80012c2:	9902      	ldr	r1, [sp, #8]
 80012c4:	f7fe ffc2 	bl	800024c <__aeabi_uidivmod>
 80012c8:	9a03      	ldr	r2, [sp, #12]
 80012ca:	0424      	lsls	r4, r4, #16
 80012cc:	4342      	muls	r2, r0
 80012ce:	0409      	lsls	r1, r1, #16
 80012d0:	0c24      	lsrs	r4, r4, #16
 80012d2:	0003      	movs	r3, r0
 80012d4:	430c      	orrs	r4, r1
 80012d6:	42a2      	cmp	r2, r4
 80012d8:	d906      	bls.n	80012e8 <__aeabi_ddiv+0x168>
 80012da:	9900      	ldr	r1, [sp, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	468c      	mov	ip, r1
 80012e0:	4464      	add	r4, ip
 80012e2:	42a1      	cmp	r1, r4
 80012e4:	d800      	bhi.n	80012e8 <__aeabi_ddiv+0x168>
 80012e6:	e1e1      	b.n	80016ac <__aeabi_ddiv+0x52c>
 80012e8:	1aa0      	subs	r0, r4, r2
 80012ea:	4642      	mov	r2, r8
 80012ec:	0412      	lsls	r2, r2, #16
 80012ee:	431a      	orrs	r2, r3
 80012f0:	4693      	mov	fp, r2
 80012f2:	464b      	mov	r3, r9
 80012f4:	4659      	mov	r1, fp
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	001d      	movs	r5, r3
 80012fa:	9304      	str	r3, [sp, #16]
 80012fc:	040b      	lsls	r3, r1, #16
 80012fe:	4649      	mov	r1, r9
 8001300:	0409      	lsls	r1, r1, #16
 8001302:	0c09      	lsrs	r1, r1, #16
 8001304:	000c      	movs	r4, r1
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	435c      	muls	r4, r3
 800130a:	0c12      	lsrs	r2, r2, #16
 800130c:	436b      	muls	r3, r5
 800130e:	4688      	mov	r8, r1
 8001310:	4351      	muls	r1, r2
 8001312:	436a      	muls	r2, r5
 8001314:	0c25      	lsrs	r5, r4, #16
 8001316:	46ac      	mov	ip, r5
 8001318:	185b      	adds	r3, r3, r1
 800131a:	4463      	add	r3, ip
 800131c:	4299      	cmp	r1, r3
 800131e:	d903      	bls.n	8001328 <__aeabi_ddiv+0x1a8>
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	0249      	lsls	r1, r1, #9
 8001324:	468c      	mov	ip, r1
 8001326:	4462      	add	r2, ip
 8001328:	0c19      	lsrs	r1, r3, #16
 800132a:	0424      	lsls	r4, r4, #16
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	0c24      	lsrs	r4, r4, #16
 8001330:	188a      	adds	r2, r1, r2
 8001332:	191c      	adds	r4, r3, r4
 8001334:	4290      	cmp	r0, r2
 8001336:	d302      	bcc.n	800133e <__aeabi_ddiv+0x1be>
 8001338:	d116      	bne.n	8001368 <__aeabi_ddiv+0x1e8>
 800133a:	42a7      	cmp	r7, r4
 800133c:	d214      	bcs.n	8001368 <__aeabi_ddiv+0x1e8>
 800133e:	465b      	mov	r3, fp
 8001340:	9d00      	ldr	r5, [sp, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	444f      	add	r7, r9
 8001346:	9305      	str	r3, [sp, #20]
 8001348:	454f      	cmp	r7, r9
 800134a:	419b      	sbcs	r3, r3
 800134c:	46ac      	mov	ip, r5
 800134e:	425b      	negs	r3, r3
 8001350:	4463      	add	r3, ip
 8001352:	18c0      	adds	r0, r0, r3
 8001354:	4285      	cmp	r5, r0
 8001356:	d300      	bcc.n	800135a <__aeabi_ddiv+0x1da>
 8001358:	e1a1      	b.n	800169e <__aeabi_ddiv+0x51e>
 800135a:	4282      	cmp	r2, r0
 800135c:	d900      	bls.n	8001360 <__aeabi_ddiv+0x1e0>
 800135e:	e1f6      	b.n	800174e <__aeabi_ddiv+0x5ce>
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x1e4>
 8001362:	e1f1      	b.n	8001748 <__aeabi_ddiv+0x5c8>
 8001364:	9b05      	ldr	r3, [sp, #20]
 8001366:	469b      	mov	fp, r3
 8001368:	1b3c      	subs	r4, r7, r4
 800136a:	42a7      	cmp	r7, r4
 800136c:	41bf      	sbcs	r7, r7
 800136e:	9d00      	ldr	r5, [sp, #0]
 8001370:	1a80      	subs	r0, r0, r2
 8001372:	427f      	negs	r7, r7
 8001374:	1bc0      	subs	r0, r0, r7
 8001376:	4285      	cmp	r5, r0
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x1fc>
 800137a:	e1d0      	b.n	800171e <__aeabi_ddiv+0x59e>
 800137c:	9902      	ldr	r1, [sp, #8]
 800137e:	f7fe ff65 	bl	800024c <__aeabi_uidivmod>
 8001382:	9a03      	ldr	r2, [sp, #12]
 8001384:	040b      	lsls	r3, r1, #16
 8001386:	4342      	muls	r2, r0
 8001388:	0c21      	lsrs	r1, r4, #16
 800138a:	0007      	movs	r7, r0
 800138c:	4319      	orrs	r1, r3
 800138e:	428a      	cmp	r2, r1
 8001390:	d900      	bls.n	8001394 <__aeabi_ddiv+0x214>
 8001392:	e178      	b.n	8001686 <__aeabi_ddiv+0x506>
 8001394:	1a88      	subs	r0, r1, r2
 8001396:	9902      	ldr	r1, [sp, #8]
 8001398:	f7fe ff58 	bl	800024c <__aeabi_uidivmod>
 800139c:	9a03      	ldr	r2, [sp, #12]
 800139e:	0424      	lsls	r4, r4, #16
 80013a0:	4342      	muls	r2, r0
 80013a2:	0409      	lsls	r1, r1, #16
 80013a4:	0c24      	lsrs	r4, r4, #16
 80013a6:	0003      	movs	r3, r0
 80013a8:	430c      	orrs	r4, r1
 80013aa:	42a2      	cmp	r2, r4
 80013ac:	d900      	bls.n	80013b0 <__aeabi_ddiv+0x230>
 80013ae:	e15d      	b.n	800166c <__aeabi_ddiv+0x4ec>
 80013b0:	4641      	mov	r1, r8
 80013b2:	1aa4      	subs	r4, r4, r2
 80013b4:	043a      	lsls	r2, r7, #16
 80013b6:	431a      	orrs	r2, r3
 80013b8:	9d04      	ldr	r5, [sp, #16]
 80013ba:	0413      	lsls	r3, r2, #16
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	4359      	muls	r1, r3
 80013c0:	4647      	mov	r7, r8
 80013c2:	436b      	muls	r3, r5
 80013c4:	469c      	mov	ip, r3
 80013c6:	0c10      	lsrs	r0, r2, #16
 80013c8:	4347      	muls	r7, r0
 80013ca:	0c0b      	lsrs	r3, r1, #16
 80013cc:	44bc      	add	ip, r7
 80013ce:	4463      	add	r3, ip
 80013d0:	4368      	muls	r0, r5
 80013d2:	429f      	cmp	r7, r3
 80013d4:	d903      	bls.n	80013de <__aeabi_ddiv+0x25e>
 80013d6:	2580      	movs	r5, #128	@ 0x80
 80013d8:	026d      	lsls	r5, r5, #9
 80013da:	46ac      	mov	ip, r5
 80013dc:	4460      	add	r0, ip
 80013de:	0c1f      	lsrs	r7, r3, #16
 80013e0:	0409      	lsls	r1, r1, #16
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	0c09      	lsrs	r1, r1, #16
 80013e6:	183f      	adds	r7, r7, r0
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	42bc      	cmp	r4, r7
 80013ec:	d200      	bcs.n	80013f0 <__aeabi_ddiv+0x270>
 80013ee:	e102      	b.n	80015f6 <__aeabi_ddiv+0x476>
 80013f0:	d100      	bne.n	80013f4 <__aeabi_ddiv+0x274>
 80013f2:	e0fd      	b.n	80015f0 <__aeabi_ddiv+0x470>
 80013f4:	2301      	movs	r3, #1
 80013f6:	431a      	orrs	r2, r3
 80013f8:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <__aeabi_ddiv+0x388>)
 80013fa:	4453      	add	r3, sl
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_ddiv+0x282>
 8001400:	e0ae      	b.n	8001560 <__aeabi_ddiv+0x3e0>
 8001402:	0751      	lsls	r1, r2, #29
 8001404:	d000      	beq.n	8001408 <__aeabi_ddiv+0x288>
 8001406:	e198      	b.n	800173a <__aeabi_ddiv+0x5ba>
 8001408:	4659      	mov	r1, fp
 800140a:	01c9      	lsls	r1, r1, #7
 800140c:	d506      	bpl.n	800141c <__aeabi_ddiv+0x29c>
 800140e:	4659      	mov	r1, fp
 8001410:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <__aeabi_ddiv+0x38c>)
 8001412:	4019      	ands	r1, r3
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	468b      	mov	fp, r1
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4453      	add	r3, sl
 800141c:	493c      	ldr	r1, [pc, #240]	@ (8001510 <__aeabi_ddiv+0x390>)
 800141e:	428b      	cmp	r3, r1
 8001420:	dd00      	ble.n	8001424 <__aeabi_ddiv+0x2a4>
 8001422:	e71a      	b.n	800125a <__aeabi_ddiv+0xda>
 8001424:	4659      	mov	r1, fp
 8001426:	08d2      	lsrs	r2, r2, #3
 8001428:	0749      	lsls	r1, r1, #29
 800142a:	4311      	orrs	r1, r2
 800142c:	465a      	mov	r2, fp
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	0254      	lsls	r4, r2, #9
 8001432:	4688      	mov	r8, r1
 8001434:	0b24      	lsrs	r4, r4, #12
 8001436:	0d5b      	lsrs	r3, r3, #21
 8001438:	e702      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800143a:	465a      	mov	r2, fp
 800143c:	9b00      	ldr	r3, [sp, #0]
 800143e:	431a      	orrs	r2, r3
 8001440:	d100      	bne.n	8001444 <__aeabi_ddiv+0x2c4>
 8001442:	e07e      	b.n	8001542 <__aeabi_ddiv+0x3c2>
 8001444:	465b      	mov	r3, fp
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0x2cc>
 800144a:	e100      	b.n	800164e <__aeabi_ddiv+0x4ce>
 800144c:	4658      	mov	r0, fp
 800144e:	f001 fabb 	bl	80029c8 <__clzsi2>
 8001452:	0002      	movs	r2, r0
 8001454:	0003      	movs	r3, r0
 8001456:	3a0b      	subs	r2, #11
 8001458:	271d      	movs	r7, #29
 800145a:	9e00      	ldr	r6, [sp, #0]
 800145c:	1aba      	subs	r2, r7, r2
 800145e:	0019      	movs	r1, r3
 8001460:	4658      	mov	r0, fp
 8001462:	40d6      	lsrs	r6, r2
 8001464:	3908      	subs	r1, #8
 8001466:	4088      	lsls	r0, r1
 8001468:	0032      	movs	r2, r6
 800146a:	4302      	orrs	r2, r0
 800146c:	4693      	mov	fp, r2
 800146e:	9a00      	ldr	r2, [sp, #0]
 8001470:	408a      	lsls	r2, r1
 8001472:	4928      	ldr	r1, [pc, #160]	@ (8001514 <__aeabi_ddiv+0x394>)
 8001474:	4453      	add	r3, sl
 8001476:	468a      	mov	sl, r1
 8001478:	449a      	add	sl, r3
 800147a:	2300      	movs	r3, #0
 800147c:	e6c8      	b.n	8001210 <__aeabi_ddiv+0x90>
 800147e:	465b      	mov	r3, fp
 8001480:	4303      	orrs	r3, r0
 8001482:	4699      	mov	r9, r3
 8001484:	d056      	beq.n	8001534 <__aeabi_ddiv+0x3b4>
 8001486:	465b      	mov	r3, fp
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x30e>
 800148c:	e0cd      	b.n	800162a <__aeabi_ddiv+0x4aa>
 800148e:	4658      	mov	r0, fp
 8001490:	f001 fa9a 	bl	80029c8 <__clzsi2>
 8001494:	230b      	movs	r3, #11
 8001496:	425b      	negs	r3, r3
 8001498:	469c      	mov	ip, r3
 800149a:	0002      	movs	r2, r0
 800149c:	4484      	add	ip, r0
 800149e:	4666      	mov	r6, ip
 80014a0:	231d      	movs	r3, #29
 80014a2:	1b9b      	subs	r3, r3, r6
 80014a4:	0026      	movs	r6, r4
 80014a6:	0011      	movs	r1, r2
 80014a8:	4658      	mov	r0, fp
 80014aa:	40de      	lsrs	r6, r3
 80014ac:	3908      	subs	r1, #8
 80014ae:	4088      	lsls	r0, r1
 80014b0:	0033      	movs	r3, r6
 80014b2:	4303      	orrs	r3, r0
 80014b4:	4699      	mov	r9, r3
 80014b6:	0023      	movs	r3, r4
 80014b8:	408b      	lsls	r3, r1
 80014ba:	4698      	mov	r8, r3
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <__aeabi_ddiv+0x398>)
 80014be:	2400      	movs	r4, #0
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	469a      	mov	sl, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	e682      	b.n	80011d0 <__aeabi_ddiv+0x50>
 80014ca:	465a      	mov	r2, fp
 80014cc:	4302      	orrs	r2, r0
 80014ce:	4691      	mov	r9, r2
 80014d0:	d12a      	bne.n	8001528 <__aeabi_ddiv+0x3a8>
 80014d2:	2200      	movs	r2, #0
 80014d4:	469a      	mov	sl, r3
 80014d6:	2302      	movs	r3, #2
 80014d8:	4690      	mov	r8, r2
 80014da:	2408      	movs	r4, #8
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	e677      	b.n	80011d0 <__aeabi_ddiv+0x50>
 80014e0:	465a      	mov	r2, fp
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <__aeabi_ddiv+0x39c>)
 80014e8:	469c      	mov	ip, r3
 80014ea:	44e2      	add	sl, ip
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d117      	bne.n	8001520 <__aeabi_ddiv+0x3a0>
 80014f0:	2302      	movs	r3, #2
 80014f2:	431c      	orrs	r4, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	469b      	mov	fp, r3
 80014f8:	3302      	adds	r3, #2
 80014fa:	e689      	b.n	8001210 <__aeabi_ddiv+0x90>
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	fffffc01 	.word	0xfffffc01
 8001504:	0800a724 	.word	0x0800a724
 8001508:	000003ff 	.word	0x000003ff
 800150c:	feffffff 	.word	0xfeffffff
 8001510:	000007fe 	.word	0x000007fe
 8001514:	000003f3 	.word	0x000003f3
 8001518:	fffffc0d 	.word	0xfffffc0d
 800151c:	fffff801 	.word	0xfffff801
 8001520:	2303      	movs	r3, #3
 8001522:	0032      	movs	r2, r6
 8001524:	431c      	orrs	r4, r3
 8001526:	e673      	b.n	8001210 <__aeabi_ddiv+0x90>
 8001528:	469a      	mov	sl, r3
 800152a:	2303      	movs	r3, #3
 800152c:	46d9      	mov	r9, fp
 800152e:	240c      	movs	r4, #12
 8001530:	9303      	str	r3, [sp, #12]
 8001532:	e64d      	b.n	80011d0 <__aeabi_ddiv+0x50>
 8001534:	2300      	movs	r3, #0
 8001536:	4698      	mov	r8, r3
 8001538:	469a      	mov	sl, r3
 800153a:	3301      	adds	r3, #1
 800153c:	2404      	movs	r4, #4
 800153e:	9303      	str	r3, [sp, #12]
 8001540:	e646      	b.n	80011d0 <__aeabi_ddiv+0x50>
 8001542:	2301      	movs	r3, #1
 8001544:	431c      	orrs	r4, r3
 8001546:	2300      	movs	r3, #0
 8001548:	469b      	mov	fp, r3
 800154a:	3301      	adds	r3, #1
 800154c:	e660      	b.n	8001210 <__aeabi_ddiv+0x90>
 800154e:	2300      	movs	r3, #0
 8001550:	2480      	movs	r4, #128	@ 0x80
 8001552:	4698      	mov	r8, r3
 8001554:	2600      	movs	r6, #0
 8001556:	4b92      	ldr	r3, [pc, #584]	@ (80017a0 <__aeabi_ddiv+0x620>)
 8001558:	0324      	lsls	r4, r4, #12
 800155a:	e671      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800155c:	2201      	movs	r2, #1
 800155e:	4252      	negs	r2, r2
 8001560:	2101      	movs	r1, #1
 8001562:	1ac9      	subs	r1, r1, r3
 8001564:	2938      	cmp	r1, #56	@ 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_ddiv+0x3ea>
 8001568:	e666      	b.n	8001238 <__aeabi_ddiv+0xb8>
 800156a:	291f      	cmp	r1, #31
 800156c:	dc00      	bgt.n	8001570 <__aeabi_ddiv+0x3f0>
 800156e:	e0ab      	b.n	80016c8 <__aeabi_ddiv+0x548>
 8001570:	201f      	movs	r0, #31
 8001572:	4240      	negs	r0, r0
 8001574:	1ac3      	subs	r3, r0, r3
 8001576:	4658      	mov	r0, fp
 8001578:	40d8      	lsrs	r0, r3
 800157a:	0003      	movs	r3, r0
 800157c:	2920      	cmp	r1, #32
 800157e:	d004      	beq.n	800158a <__aeabi_ddiv+0x40a>
 8001580:	4658      	mov	r0, fp
 8001582:	4988      	ldr	r1, [pc, #544]	@ (80017a4 <__aeabi_ddiv+0x624>)
 8001584:	4451      	add	r1, sl
 8001586:	4088      	lsls	r0, r1
 8001588:	4302      	orrs	r2, r0
 800158a:	1e51      	subs	r1, r2, #1
 800158c:	418a      	sbcs	r2, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	2307      	movs	r3, #7
 8001592:	0019      	movs	r1, r3
 8001594:	2400      	movs	r4, #0
 8001596:	4011      	ands	r1, r2
 8001598:	4213      	tst	r3, r2
 800159a:	d00c      	beq.n	80015b6 <__aeabi_ddiv+0x436>
 800159c:	230f      	movs	r3, #15
 800159e:	4013      	ands	r3, r2
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x426>
 80015a4:	e0f9      	b.n	800179a <__aeabi_ddiv+0x61a>
 80015a6:	1d11      	adds	r1, r2, #4
 80015a8:	4291      	cmp	r1, r2
 80015aa:	419b      	sbcs	r3, r3
 80015ac:	000a      	movs	r2, r1
 80015ae:	425b      	negs	r3, r3
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	0b1c      	lsrs	r4, r3, #12
 80015b6:	08d2      	lsrs	r2, r2, #3
 80015b8:	430a      	orrs	r2, r1
 80015ba:	4690      	mov	r8, r2
 80015bc:	2300      	movs	r3, #0
 80015be:	e63f      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015c0:	2480      	movs	r4, #128	@ 0x80
 80015c2:	464b      	mov	r3, r9
 80015c4:	0324      	lsls	r4, r4, #12
 80015c6:	4223      	tst	r3, r4
 80015c8:	d009      	beq.n	80015de <__aeabi_ddiv+0x45e>
 80015ca:	465b      	mov	r3, fp
 80015cc:	4223      	tst	r3, r4
 80015ce:	d106      	bne.n	80015de <__aeabi_ddiv+0x45e>
 80015d0:	431c      	orrs	r4, r3
 80015d2:	0324      	lsls	r4, r4, #12
 80015d4:	002e      	movs	r6, r5
 80015d6:	4690      	mov	r8, r2
 80015d8:	4b71      	ldr	r3, [pc, #452]	@ (80017a0 <__aeabi_ddiv+0x620>)
 80015da:	0b24      	lsrs	r4, r4, #12
 80015dc:	e630      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015de:	2480      	movs	r4, #128	@ 0x80
 80015e0:	464b      	mov	r3, r9
 80015e2:	0324      	lsls	r4, r4, #12
 80015e4:	431c      	orrs	r4, r3
 80015e6:	0324      	lsls	r4, r4, #12
 80015e8:	9e02      	ldr	r6, [sp, #8]
 80015ea:	4b6d      	ldr	r3, [pc, #436]	@ (80017a0 <__aeabi_ddiv+0x620>)
 80015ec:	0b24      	lsrs	r4, r4, #12
 80015ee:	e627      	b.n	8001240 <__aeabi_ddiv+0xc0>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_ddiv+0x476>
 80015f4:	e700      	b.n	80013f8 <__aeabi_ddiv+0x278>
 80015f6:	9800      	ldr	r0, [sp, #0]
 80015f8:	1e51      	subs	r1, r2, #1
 80015fa:	4684      	mov	ip, r0
 80015fc:	4464      	add	r4, ip
 80015fe:	4284      	cmp	r4, r0
 8001600:	d200      	bcs.n	8001604 <__aeabi_ddiv+0x484>
 8001602:	e084      	b.n	800170e <__aeabi_ddiv+0x58e>
 8001604:	42bc      	cmp	r4, r7
 8001606:	d200      	bcs.n	800160a <__aeabi_ddiv+0x48a>
 8001608:	e0ae      	b.n	8001768 <__aeabi_ddiv+0x5e8>
 800160a:	d100      	bne.n	800160e <__aeabi_ddiv+0x48e>
 800160c:	e0c1      	b.n	8001792 <__aeabi_ddiv+0x612>
 800160e:	000a      	movs	r2, r1
 8001610:	e6f0      	b.n	80013f4 <__aeabi_ddiv+0x274>
 8001612:	4542      	cmp	r2, r8
 8001614:	d900      	bls.n	8001618 <__aeabi_ddiv+0x498>
 8001616:	e62c      	b.n	8001272 <__aeabi_ddiv+0xf2>
 8001618:	464b      	mov	r3, r9
 800161a:	07dc      	lsls	r4, r3, #31
 800161c:	0858      	lsrs	r0, r3, #1
 800161e:	4643      	mov	r3, r8
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	431c      	orrs	r4, r3
 8001624:	4643      	mov	r3, r8
 8001626:	07df      	lsls	r7, r3, #31
 8001628:	e62a      	b.n	8001280 <__aeabi_ddiv+0x100>
 800162a:	f001 f9cd 	bl	80029c8 <__clzsi2>
 800162e:	2315      	movs	r3, #21
 8001630:	469c      	mov	ip, r3
 8001632:	4484      	add	ip, r0
 8001634:	0002      	movs	r2, r0
 8001636:	4663      	mov	r3, ip
 8001638:	3220      	adds	r2, #32
 800163a:	2b1c      	cmp	r3, #28
 800163c:	dc00      	bgt.n	8001640 <__aeabi_ddiv+0x4c0>
 800163e:	e72e      	b.n	800149e <__aeabi_ddiv+0x31e>
 8001640:	0023      	movs	r3, r4
 8001642:	3808      	subs	r0, #8
 8001644:	4083      	lsls	r3, r0
 8001646:	4699      	mov	r9, r3
 8001648:	2300      	movs	r3, #0
 800164a:	4698      	mov	r8, r3
 800164c:	e736      	b.n	80014bc <__aeabi_ddiv+0x33c>
 800164e:	f001 f9bb 	bl	80029c8 <__clzsi2>
 8001652:	0002      	movs	r2, r0
 8001654:	0003      	movs	r3, r0
 8001656:	3215      	adds	r2, #21
 8001658:	3320      	adds	r3, #32
 800165a:	2a1c      	cmp	r2, #28
 800165c:	dc00      	bgt.n	8001660 <__aeabi_ddiv+0x4e0>
 800165e:	e6fb      	b.n	8001458 <__aeabi_ddiv+0x2d8>
 8001660:	9900      	ldr	r1, [sp, #0]
 8001662:	3808      	subs	r0, #8
 8001664:	4081      	lsls	r1, r0
 8001666:	2200      	movs	r2, #0
 8001668:	468b      	mov	fp, r1
 800166a:	e702      	b.n	8001472 <__aeabi_ddiv+0x2f2>
 800166c:	9900      	ldr	r1, [sp, #0]
 800166e:	3b01      	subs	r3, #1
 8001670:	468c      	mov	ip, r1
 8001672:	4464      	add	r4, ip
 8001674:	42a1      	cmp	r1, r4
 8001676:	d900      	bls.n	800167a <__aeabi_ddiv+0x4fa>
 8001678:	e69a      	b.n	80013b0 <__aeabi_ddiv+0x230>
 800167a:	42a2      	cmp	r2, r4
 800167c:	d800      	bhi.n	8001680 <__aeabi_ddiv+0x500>
 800167e:	e697      	b.n	80013b0 <__aeabi_ddiv+0x230>
 8001680:	1e83      	subs	r3, r0, #2
 8001682:	4464      	add	r4, ip
 8001684:	e694      	b.n	80013b0 <__aeabi_ddiv+0x230>
 8001686:	46ac      	mov	ip, r5
 8001688:	4461      	add	r1, ip
 800168a:	3f01      	subs	r7, #1
 800168c:	428d      	cmp	r5, r1
 800168e:	d900      	bls.n	8001692 <__aeabi_ddiv+0x512>
 8001690:	e680      	b.n	8001394 <__aeabi_ddiv+0x214>
 8001692:	428a      	cmp	r2, r1
 8001694:	d800      	bhi.n	8001698 <__aeabi_ddiv+0x518>
 8001696:	e67d      	b.n	8001394 <__aeabi_ddiv+0x214>
 8001698:	1e87      	subs	r7, r0, #2
 800169a:	4461      	add	r1, ip
 800169c:	e67a      	b.n	8001394 <__aeabi_ddiv+0x214>
 800169e:	4285      	cmp	r5, r0
 80016a0:	d000      	beq.n	80016a4 <__aeabi_ddiv+0x524>
 80016a2:	e65f      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 80016a4:	45b9      	cmp	r9, r7
 80016a6:	d900      	bls.n	80016aa <__aeabi_ddiv+0x52a>
 80016a8:	e65c      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 80016aa:	e656      	b.n	800135a <__aeabi_ddiv+0x1da>
 80016ac:	42a2      	cmp	r2, r4
 80016ae:	d800      	bhi.n	80016b2 <__aeabi_ddiv+0x532>
 80016b0:	e61a      	b.n	80012e8 <__aeabi_ddiv+0x168>
 80016b2:	1e83      	subs	r3, r0, #2
 80016b4:	4464      	add	r4, ip
 80016b6:	e617      	b.n	80012e8 <__aeabi_ddiv+0x168>
 80016b8:	428a      	cmp	r2, r1
 80016ba:	d800      	bhi.n	80016be <__aeabi_ddiv+0x53e>
 80016bc:	e600      	b.n	80012c0 <__aeabi_ddiv+0x140>
 80016be:	46ac      	mov	ip, r5
 80016c0:	1e83      	subs	r3, r0, #2
 80016c2:	4698      	mov	r8, r3
 80016c4:	4461      	add	r1, ip
 80016c6:	e5fb      	b.n	80012c0 <__aeabi_ddiv+0x140>
 80016c8:	4837      	ldr	r0, [pc, #220]	@ (80017a8 <__aeabi_ddiv+0x628>)
 80016ca:	0014      	movs	r4, r2
 80016cc:	4450      	add	r0, sl
 80016ce:	4082      	lsls	r2, r0
 80016d0:	465b      	mov	r3, fp
 80016d2:	0017      	movs	r7, r2
 80016d4:	4083      	lsls	r3, r0
 80016d6:	40cc      	lsrs	r4, r1
 80016d8:	1e7a      	subs	r2, r7, #1
 80016da:	4197      	sbcs	r7, r2
 80016dc:	4323      	orrs	r3, r4
 80016de:	433b      	orrs	r3, r7
 80016e0:	001a      	movs	r2, r3
 80016e2:	465b      	mov	r3, fp
 80016e4:	40cb      	lsrs	r3, r1
 80016e6:	0751      	lsls	r1, r2, #29
 80016e8:	d009      	beq.n	80016fe <__aeabi_ddiv+0x57e>
 80016ea:	210f      	movs	r1, #15
 80016ec:	4011      	ands	r1, r2
 80016ee:	2904      	cmp	r1, #4
 80016f0:	d005      	beq.n	80016fe <__aeabi_ddiv+0x57e>
 80016f2:	1d11      	adds	r1, r2, #4
 80016f4:	4291      	cmp	r1, r2
 80016f6:	4192      	sbcs	r2, r2
 80016f8:	4252      	negs	r2, r2
 80016fa:	189b      	adds	r3, r3, r2
 80016fc:	000a      	movs	r2, r1
 80016fe:	0219      	lsls	r1, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_ddiv+0x584>
 8001702:	e755      	b.n	80015b0 <__aeabi_ddiv+0x430>
 8001704:	2200      	movs	r2, #0
 8001706:	2301      	movs	r3, #1
 8001708:	2400      	movs	r4, #0
 800170a:	4690      	mov	r8, r2
 800170c:	e598      	b.n	8001240 <__aeabi_ddiv+0xc0>
 800170e:	000a      	movs	r2, r1
 8001710:	42bc      	cmp	r4, r7
 8001712:	d000      	beq.n	8001716 <__aeabi_ddiv+0x596>
 8001714:	e66e      	b.n	80013f4 <__aeabi_ddiv+0x274>
 8001716:	454b      	cmp	r3, r9
 8001718:	d000      	beq.n	800171c <__aeabi_ddiv+0x59c>
 800171a:	e66b      	b.n	80013f4 <__aeabi_ddiv+0x274>
 800171c:	e66c      	b.n	80013f8 <__aeabi_ddiv+0x278>
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <__aeabi_ddiv+0x62c>)
 8001720:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <__aeabi_ddiv+0x630>)
 8001722:	4453      	add	r3, sl
 8001724:	4592      	cmp	sl, r2
 8001726:	da00      	bge.n	800172a <__aeabi_ddiv+0x5aa>
 8001728:	e718      	b.n	800155c <__aeabi_ddiv+0x3dc>
 800172a:	2101      	movs	r1, #1
 800172c:	4249      	negs	r1, r1
 800172e:	1d0a      	adds	r2, r1, #4
 8001730:	428a      	cmp	r2, r1
 8001732:	4189      	sbcs	r1, r1
 8001734:	4249      	negs	r1, r1
 8001736:	448b      	add	fp, r1
 8001738:	e666      	b.n	8001408 <__aeabi_ddiv+0x288>
 800173a:	210f      	movs	r1, #15
 800173c:	4011      	ands	r1, r2
 800173e:	2904      	cmp	r1, #4
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x5c4>
 8001742:	e661      	b.n	8001408 <__aeabi_ddiv+0x288>
 8001744:	0011      	movs	r1, r2
 8001746:	e7f2      	b.n	800172e <__aeabi_ddiv+0x5ae>
 8001748:	42bc      	cmp	r4, r7
 800174a:	d800      	bhi.n	800174e <__aeabi_ddiv+0x5ce>
 800174c:	e60a      	b.n	8001364 <__aeabi_ddiv+0x1e4>
 800174e:	2302      	movs	r3, #2
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	9900      	ldr	r1, [sp, #0]
 8001756:	444f      	add	r7, r9
 8001758:	454f      	cmp	r7, r9
 800175a:	419b      	sbcs	r3, r3
 800175c:	44e3      	add	fp, ip
 800175e:	468c      	mov	ip, r1
 8001760:	425b      	negs	r3, r3
 8001762:	4463      	add	r3, ip
 8001764:	18c0      	adds	r0, r0, r3
 8001766:	e5ff      	b.n	8001368 <__aeabi_ddiv+0x1e8>
 8001768:	4649      	mov	r1, r9
 800176a:	9d00      	ldr	r5, [sp, #0]
 800176c:	0048      	lsls	r0, r1, #1
 800176e:	4548      	cmp	r0, r9
 8001770:	4189      	sbcs	r1, r1
 8001772:	46ac      	mov	ip, r5
 8001774:	4249      	negs	r1, r1
 8001776:	4461      	add	r1, ip
 8001778:	4681      	mov	r9, r0
 800177a:	3a02      	subs	r2, #2
 800177c:	1864      	adds	r4, r4, r1
 800177e:	e7c7      	b.n	8001710 <__aeabi_ddiv+0x590>
 8001780:	2480      	movs	r4, #128	@ 0x80
 8001782:	465b      	mov	r3, fp
 8001784:	0324      	lsls	r4, r4, #12
 8001786:	431c      	orrs	r4, r3
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4690      	mov	r8, r2
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__aeabi_ddiv+0x620>)
 800178e:	0b24      	lsrs	r4, r4, #12
 8001790:	e556      	b.n	8001240 <__aeabi_ddiv+0xc0>
 8001792:	4599      	cmp	r9, r3
 8001794:	d3e8      	bcc.n	8001768 <__aeabi_ddiv+0x5e8>
 8001796:	000a      	movs	r2, r1
 8001798:	e7bd      	b.n	8001716 <__aeabi_ddiv+0x596>
 800179a:	2300      	movs	r3, #0
 800179c:	e708      	b.n	80015b0 <__aeabi_ddiv+0x430>
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	0000043e 	.word	0x0000043e
 80017a8:	0000041e 	.word	0x0000041e
 80017ac:	000003ff 	.word	0x000003ff
 80017b0:	fffffc02 	.word	0xfffffc02

080017b4 <__eqdf2>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	4657      	mov	r7, sl
 80017b8:	46de      	mov	lr, fp
 80017ba:	464e      	mov	r6, r9
 80017bc:	4645      	mov	r5, r8
 80017be:	b5e0      	push	{r5, r6, r7, lr}
 80017c0:	000d      	movs	r5, r1
 80017c2:	0004      	movs	r4, r0
 80017c4:	0fe8      	lsrs	r0, r5, #31
 80017c6:	4683      	mov	fp, r0
 80017c8:	0309      	lsls	r1, r1, #12
 80017ca:	0fd8      	lsrs	r0, r3, #31
 80017cc:	0b09      	lsrs	r1, r1, #12
 80017ce:	4682      	mov	sl, r0
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <__eqdf2+0x84>)
 80017d2:	468c      	mov	ip, r1
 80017d4:	031f      	lsls	r7, r3, #12
 80017d6:	0069      	lsls	r1, r5, #1
 80017d8:	005e      	lsls	r6, r3, #1
 80017da:	0d49      	lsrs	r1, r1, #21
 80017dc:	0b3f      	lsrs	r7, r7, #12
 80017de:	0d76      	lsrs	r6, r6, #21
 80017e0:	4281      	cmp	r1, r0
 80017e2:	d018      	beq.n	8001816 <__eqdf2+0x62>
 80017e4:	4286      	cmp	r6, r0
 80017e6:	d00f      	beq.n	8001808 <__eqdf2+0x54>
 80017e8:	2001      	movs	r0, #1
 80017ea:	42b1      	cmp	r1, r6
 80017ec:	d10d      	bne.n	800180a <__eqdf2+0x56>
 80017ee:	45bc      	cmp	ip, r7
 80017f0:	d10b      	bne.n	800180a <__eqdf2+0x56>
 80017f2:	4294      	cmp	r4, r2
 80017f4:	d109      	bne.n	800180a <__eqdf2+0x56>
 80017f6:	45d3      	cmp	fp, sl
 80017f8:	d01c      	beq.n	8001834 <__eqdf2+0x80>
 80017fa:	2900      	cmp	r1, #0
 80017fc:	d105      	bne.n	800180a <__eqdf2+0x56>
 80017fe:	4660      	mov	r0, ip
 8001800:	4320      	orrs	r0, r4
 8001802:	1e43      	subs	r3, r0, #1
 8001804:	4198      	sbcs	r0, r3
 8001806:	e000      	b.n	800180a <__eqdf2+0x56>
 8001808:	2001      	movs	r0, #1
 800180a:	bcf0      	pop	{r4, r5, r6, r7}
 800180c:	46bb      	mov	fp, r7
 800180e:	46b2      	mov	sl, r6
 8001810:	46a9      	mov	r9, r5
 8001812:	46a0      	mov	r8, r4
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	2001      	movs	r0, #1
 8001818:	428e      	cmp	r6, r1
 800181a:	d1f6      	bne.n	800180a <__eqdf2+0x56>
 800181c:	4661      	mov	r1, ip
 800181e:	4339      	orrs	r1, r7
 8001820:	000f      	movs	r7, r1
 8001822:	4317      	orrs	r7, r2
 8001824:	4327      	orrs	r7, r4
 8001826:	d1f0      	bne.n	800180a <__eqdf2+0x56>
 8001828:	465b      	mov	r3, fp
 800182a:	4652      	mov	r2, sl
 800182c:	1a98      	subs	r0, r3, r2
 800182e:	1e43      	subs	r3, r0, #1
 8001830:	4198      	sbcs	r0, r3
 8001832:	e7ea      	b.n	800180a <__eqdf2+0x56>
 8001834:	2000      	movs	r0, #0
 8001836:	e7e8      	b.n	800180a <__eqdf2+0x56>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__gedf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4657      	mov	r7, sl
 8001840:	464e      	mov	r6, r9
 8001842:	4645      	mov	r5, r8
 8001844:	46de      	mov	lr, fp
 8001846:	b5e0      	push	{r5, r6, r7, lr}
 8001848:	000d      	movs	r5, r1
 800184a:	030f      	lsls	r7, r1, #12
 800184c:	0b39      	lsrs	r1, r7, #12
 800184e:	b083      	sub	sp, #12
 8001850:	0004      	movs	r4, r0
 8001852:	4680      	mov	r8, r0
 8001854:	9101      	str	r1, [sp, #4]
 8001856:	0058      	lsls	r0, r3, #1
 8001858:	0fe9      	lsrs	r1, r5, #31
 800185a:	4f31      	ldr	r7, [pc, #196]	@ (8001920 <__gedf2+0xe4>)
 800185c:	0d40      	lsrs	r0, r0, #21
 800185e:	468c      	mov	ip, r1
 8001860:	006e      	lsls	r6, r5, #1
 8001862:	0319      	lsls	r1, r3, #12
 8001864:	4682      	mov	sl, r0
 8001866:	4691      	mov	r9, r2
 8001868:	0d76      	lsrs	r6, r6, #21
 800186a:	0b09      	lsrs	r1, r1, #12
 800186c:	0fd8      	lsrs	r0, r3, #31
 800186e:	42be      	cmp	r6, r7
 8001870:	d01f      	beq.n	80018b2 <__gedf2+0x76>
 8001872:	45ba      	cmp	sl, r7
 8001874:	d00f      	beq.n	8001896 <__gedf2+0x5a>
 8001876:	2e00      	cmp	r6, #0
 8001878:	d12f      	bne.n	80018da <__gedf2+0x9e>
 800187a:	4655      	mov	r5, sl
 800187c:	9e01      	ldr	r6, [sp, #4]
 800187e:	4334      	orrs	r4, r6
 8001880:	2d00      	cmp	r5, #0
 8001882:	d127      	bne.n	80018d4 <__gedf2+0x98>
 8001884:	430a      	orrs	r2, r1
 8001886:	d03a      	beq.n	80018fe <__gedf2+0xc2>
 8001888:	2c00      	cmp	r4, #0
 800188a:	d145      	bne.n	8001918 <__gedf2+0xdc>
 800188c:	2800      	cmp	r0, #0
 800188e:	d11a      	bne.n	80018c6 <__gedf2+0x8a>
 8001890:	2001      	movs	r0, #1
 8001892:	4240      	negs	r0, r0
 8001894:	e017      	b.n	80018c6 <__gedf2+0x8a>
 8001896:	4311      	orrs	r1, r2
 8001898:	d13b      	bne.n	8001912 <__gedf2+0xd6>
 800189a:	2e00      	cmp	r6, #0
 800189c:	d102      	bne.n	80018a4 <__gedf2+0x68>
 800189e:	9f01      	ldr	r7, [sp, #4]
 80018a0:	4327      	orrs	r7, r4
 80018a2:	d0f3      	beq.n	800188c <__gedf2+0x50>
 80018a4:	4584      	cmp	ip, r0
 80018a6:	d109      	bne.n	80018bc <__gedf2+0x80>
 80018a8:	4663      	mov	r3, ip
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <__gedf2+0x54>
 80018ae:	4660      	mov	r0, ip
 80018b0:	e009      	b.n	80018c6 <__gedf2+0x8a>
 80018b2:	9f01      	ldr	r7, [sp, #4]
 80018b4:	4327      	orrs	r7, r4
 80018b6:	d12c      	bne.n	8001912 <__gedf2+0xd6>
 80018b8:	45b2      	cmp	sl, r6
 80018ba:	d024      	beq.n	8001906 <__gedf2+0xca>
 80018bc:	4663      	mov	r3, ip
 80018be:	2002      	movs	r0, #2
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4018      	ands	r0, r3
 80018c4:	3801      	subs	r0, #1
 80018c6:	b003      	add	sp, #12
 80018c8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ca:	46bb      	mov	fp, r7
 80018cc:	46b2      	mov	sl, r6
 80018ce:	46a9      	mov	r9, r5
 80018d0:	46a0      	mov	r8, r4
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d0d9      	beq.n	800188c <__gedf2+0x50>
 80018d8:	e7e4      	b.n	80018a4 <__gedf2+0x68>
 80018da:	4654      	mov	r4, sl
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d0ed      	beq.n	80018bc <__gedf2+0x80>
 80018e0:	4584      	cmp	ip, r0
 80018e2:	d1eb      	bne.n	80018bc <__gedf2+0x80>
 80018e4:	4556      	cmp	r6, sl
 80018e6:	dce9      	bgt.n	80018bc <__gedf2+0x80>
 80018e8:	dbde      	blt.n	80018a8 <__gedf2+0x6c>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d8e5      	bhi.n	80018bc <__gedf2+0x80>
 80018f0:	d1da      	bne.n	80018a8 <__gedf2+0x6c>
 80018f2:	45c8      	cmp	r8, r9
 80018f4:	d8e2      	bhi.n	80018bc <__gedf2+0x80>
 80018f6:	2000      	movs	r0, #0
 80018f8:	45c8      	cmp	r8, r9
 80018fa:	d2e4      	bcs.n	80018c6 <__gedf2+0x8a>
 80018fc:	e7d4      	b.n	80018a8 <__gedf2+0x6c>
 80018fe:	2000      	movs	r0, #0
 8001900:	2c00      	cmp	r4, #0
 8001902:	d0e0      	beq.n	80018c6 <__gedf2+0x8a>
 8001904:	e7da      	b.n	80018bc <__gedf2+0x80>
 8001906:	4311      	orrs	r1, r2
 8001908:	d103      	bne.n	8001912 <__gedf2+0xd6>
 800190a:	4584      	cmp	ip, r0
 800190c:	d1d6      	bne.n	80018bc <__gedf2+0x80>
 800190e:	2000      	movs	r0, #0
 8001910:	e7d9      	b.n	80018c6 <__gedf2+0x8a>
 8001912:	2002      	movs	r0, #2
 8001914:	4240      	negs	r0, r0
 8001916:	e7d6      	b.n	80018c6 <__gedf2+0x8a>
 8001918:	4584      	cmp	ip, r0
 800191a:	d0e6      	beq.n	80018ea <__gedf2+0xae>
 800191c:	e7ce      	b.n	80018bc <__gedf2+0x80>
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	000007ff 	.word	0x000007ff

08001924 <__ledf2>:
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	464e      	mov	r6, r9
 800192a:	4645      	mov	r5, r8
 800192c:	46de      	mov	lr, fp
 800192e:	b5e0      	push	{r5, r6, r7, lr}
 8001930:	000d      	movs	r5, r1
 8001932:	030f      	lsls	r7, r1, #12
 8001934:	0004      	movs	r4, r0
 8001936:	4680      	mov	r8, r0
 8001938:	0fe8      	lsrs	r0, r5, #31
 800193a:	0b39      	lsrs	r1, r7, #12
 800193c:	4684      	mov	ip, r0
 800193e:	b083      	sub	sp, #12
 8001940:	0058      	lsls	r0, r3, #1
 8001942:	4f30      	ldr	r7, [pc, #192]	@ (8001a04 <__ledf2+0xe0>)
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	9101      	str	r1, [sp, #4]
 8001948:	031e      	lsls	r6, r3, #12
 800194a:	0069      	lsls	r1, r5, #1
 800194c:	4682      	mov	sl, r0
 800194e:	4691      	mov	r9, r2
 8001950:	0d49      	lsrs	r1, r1, #21
 8001952:	0b36      	lsrs	r6, r6, #12
 8001954:	0fd8      	lsrs	r0, r3, #31
 8001956:	42b9      	cmp	r1, r7
 8001958:	d020      	beq.n	800199c <__ledf2+0x78>
 800195a:	45ba      	cmp	sl, r7
 800195c:	d00f      	beq.n	800197e <__ledf2+0x5a>
 800195e:	2900      	cmp	r1, #0
 8001960:	d12b      	bne.n	80019ba <__ledf2+0x96>
 8001962:	9901      	ldr	r1, [sp, #4]
 8001964:	430c      	orrs	r4, r1
 8001966:	4651      	mov	r1, sl
 8001968:	2900      	cmp	r1, #0
 800196a:	d137      	bne.n	80019dc <__ledf2+0xb8>
 800196c:	4332      	orrs	r2, r6
 800196e:	d038      	beq.n	80019e2 <__ledf2+0xbe>
 8001970:	2c00      	cmp	r4, #0
 8001972:	d144      	bne.n	80019fe <__ledf2+0xda>
 8001974:	2800      	cmp	r0, #0
 8001976:	d119      	bne.n	80019ac <__ledf2+0x88>
 8001978:	2001      	movs	r0, #1
 800197a:	4240      	negs	r0, r0
 800197c:	e016      	b.n	80019ac <__ledf2+0x88>
 800197e:	4316      	orrs	r6, r2
 8001980:	d113      	bne.n	80019aa <__ledf2+0x86>
 8001982:	2900      	cmp	r1, #0
 8001984:	d102      	bne.n	800198c <__ledf2+0x68>
 8001986:	9f01      	ldr	r7, [sp, #4]
 8001988:	4327      	orrs	r7, r4
 800198a:	d0f3      	beq.n	8001974 <__ledf2+0x50>
 800198c:	4584      	cmp	ip, r0
 800198e:	d020      	beq.n	80019d2 <__ledf2+0xae>
 8001990:	4663      	mov	r3, ip
 8001992:	2002      	movs	r0, #2
 8001994:	3b01      	subs	r3, #1
 8001996:	4018      	ands	r0, r3
 8001998:	3801      	subs	r0, #1
 800199a:	e007      	b.n	80019ac <__ledf2+0x88>
 800199c:	9f01      	ldr	r7, [sp, #4]
 800199e:	4327      	orrs	r7, r4
 80019a0:	d103      	bne.n	80019aa <__ledf2+0x86>
 80019a2:	458a      	cmp	sl, r1
 80019a4:	d1f4      	bne.n	8001990 <__ledf2+0x6c>
 80019a6:	4316      	orrs	r6, r2
 80019a8:	d01f      	beq.n	80019ea <__ledf2+0xc6>
 80019aa:	2002      	movs	r0, #2
 80019ac:	b003      	add	sp, #12
 80019ae:	bcf0      	pop	{r4, r5, r6, r7}
 80019b0:	46bb      	mov	fp, r7
 80019b2:	46b2      	mov	sl, r6
 80019b4:	46a9      	mov	r9, r5
 80019b6:	46a0      	mov	r8, r4
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	4654      	mov	r4, sl
 80019bc:	2c00      	cmp	r4, #0
 80019be:	d0e7      	beq.n	8001990 <__ledf2+0x6c>
 80019c0:	4584      	cmp	ip, r0
 80019c2:	d1e5      	bne.n	8001990 <__ledf2+0x6c>
 80019c4:	4551      	cmp	r1, sl
 80019c6:	dce3      	bgt.n	8001990 <__ledf2+0x6c>
 80019c8:	db03      	blt.n	80019d2 <__ledf2+0xae>
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	42b3      	cmp	r3, r6
 80019ce:	d8df      	bhi.n	8001990 <__ledf2+0x6c>
 80019d0:	d00f      	beq.n	80019f2 <__ledf2+0xce>
 80019d2:	4663      	mov	r3, ip
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0cf      	beq.n	8001978 <__ledf2+0x54>
 80019d8:	4660      	mov	r0, ip
 80019da:	e7e7      	b.n	80019ac <__ledf2+0x88>
 80019dc:	2c00      	cmp	r4, #0
 80019de:	d0c9      	beq.n	8001974 <__ledf2+0x50>
 80019e0:	e7d4      	b.n	800198c <__ledf2+0x68>
 80019e2:	2000      	movs	r0, #0
 80019e4:	2c00      	cmp	r4, #0
 80019e6:	d0e1      	beq.n	80019ac <__ledf2+0x88>
 80019e8:	e7d2      	b.n	8001990 <__ledf2+0x6c>
 80019ea:	4584      	cmp	ip, r0
 80019ec:	d1d0      	bne.n	8001990 <__ledf2+0x6c>
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7dc      	b.n	80019ac <__ledf2+0x88>
 80019f2:	45c8      	cmp	r8, r9
 80019f4:	d8cc      	bhi.n	8001990 <__ledf2+0x6c>
 80019f6:	2000      	movs	r0, #0
 80019f8:	45c8      	cmp	r8, r9
 80019fa:	d2d7      	bcs.n	80019ac <__ledf2+0x88>
 80019fc:	e7e9      	b.n	80019d2 <__ledf2+0xae>
 80019fe:	4584      	cmp	ip, r0
 8001a00:	d0e3      	beq.n	80019ca <__ledf2+0xa6>
 8001a02:	e7c5      	b.n	8001990 <__ledf2+0x6c>
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__aeabi_dmul>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	46de      	mov	lr, fp
 8001a0e:	464e      	mov	r6, r9
 8001a10:	4645      	mov	r5, r8
 8001a12:	b5e0      	push	{r5, r6, r7, lr}
 8001a14:	001f      	movs	r7, r3
 8001a16:	030b      	lsls	r3, r1, #12
 8001a18:	0b1b      	lsrs	r3, r3, #12
 8001a1a:	0016      	movs	r6, r2
 8001a1c:	469a      	mov	sl, r3
 8001a1e:	0fca      	lsrs	r2, r1, #31
 8001a20:	004b      	lsls	r3, r1, #1
 8001a22:	0004      	movs	r4, r0
 8001a24:	4693      	mov	fp, r2
 8001a26:	b087      	sub	sp, #28
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dmul+0x26>
 8001a2c:	e0d5      	b.n	8001bda <__aeabi_dmul+0x1d2>
 8001a2e:	4abb      	ldr	r2, [pc, #748]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dmul+0x2e>
 8001a34:	e0f8      	b.n	8001c28 <__aeabi_dmul+0x220>
 8001a36:	4651      	mov	r1, sl
 8001a38:	0f42      	lsrs	r2, r0, #29
 8001a3a:	00c9      	lsls	r1, r1, #3
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	2180      	movs	r1, #128	@ 0x80
 8001a40:	0409      	lsls	r1, r1, #16
 8001a42:	4311      	orrs	r1, r2
 8001a44:	00c2      	lsls	r2, r0, #3
 8001a46:	4691      	mov	r9, r2
 8001a48:	4ab5      	ldr	r2, [pc, #724]	@ (8001d20 <__aeabi_dmul+0x318>)
 8001a4a:	468a      	mov	sl, r1
 8001a4c:	189d      	adds	r5, r3, r2
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4698      	mov	r8, r3
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	033c      	lsls	r4, r7, #12
 8001a56:	007b      	lsls	r3, r7, #1
 8001a58:	0ffa      	lsrs	r2, r7, #31
 8001a5a:	0030      	movs	r0, r6
 8001a5c:	0b24      	lsrs	r4, r4, #12
 8001a5e:	0d5b      	lsrs	r3, r3, #21
 8001a60:	9200      	str	r2, [sp, #0]
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dmul+0x5e>
 8001a64:	e096      	b.n	8001b94 <__aeabi_dmul+0x18c>
 8001a66:	4aad      	ldr	r2, [pc, #692]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d031      	beq.n	8001ad0 <__aeabi_dmul+0xc8>
 8001a6c:	0f72      	lsrs	r2, r6, #29
 8001a6e:	00e4      	lsls	r4, r4, #3
 8001a70:	4322      	orrs	r2, r4
 8001a72:	2480      	movs	r4, #128	@ 0x80
 8001a74:	0424      	lsls	r4, r4, #16
 8001a76:	4314      	orrs	r4, r2
 8001a78:	4aa9      	ldr	r2, [pc, #676]	@ (8001d20 <__aeabi_dmul+0x318>)
 8001a7a:	00f0      	lsls	r0, r6, #3
 8001a7c:	4694      	mov	ip, r2
 8001a7e:	4463      	add	r3, ip
 8001a80:	195b      	adds	r3, r3, r5
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	9201      	str	r2, [sp, #4]
 8001a86:	4642      	mov	r2, r8
 8001a88:	2600      	movs	r6, #0
 8001a8a:	2a0a      	cmp	r2, #10
 8001a8c:	dc42      	bgt.n	8001b14 <__aeabi_dmul+0x10c>
 8001a8e:	465a      	mov	r2, fp
 8001a90:	9900      	ldr	r1, [sp, #0]
 8001a92:	404a      	eors	r2, r1
 8001a94:	4693      	mov	fp, r2
 8001a96:	4642      	mov	r2, r8
 8001a98:	2a02      	cmp	r2, #2
 8001a9a:	dc32      	bgt.n	8001b02 <__aeabi_dmul+0xfa>
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d900      	bls.n	8001aa4 <__aeabi_dmul+0x9c>
 8001aa2:	e149      	b.n	8001d38 <__aeabi_dmul+0x330>
 8001aa4:	2e02      	cmp	r6, #2
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dmul+0xa2>
 8001aa8:	e0ca      	b.n	8001c40 <__aeabi_dmul+0x238>
 8001aaa:	2e01      	cmp	r6, #1
 8001aac:	d13d      	bne.n	8001b2a <__aeabi_dmul+0x122>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	465a      	mov	r2, fp
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	4323      	orrs	r3, r4
 8001abc:	07d2      	lsls	r2, r2, #31
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	b007      	add	sp, #28
 8001ac4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac6:	46bb      	mov	fp, r7
 8001ac8:	46b2      	mov	sl, r6
 8001aca:	46a9      	mov	r9, r5
 8001acc:	46a0      	mov	r8, r4
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	4b92      	ldr	r3, [pc, #584]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001ad2:	4326      	orrs	r6, r4
 8001ad4:	18eb      	adds	r3, r5, r3
 8001ad6:	2e00      	cmp	r6, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dmul+0xd4>
 8001ada:	e0bb      	b.n	8001c54 <__aeabi_dmul+0x24c>
 8001adc:	2203      	movs	r2, #3
 8001ade:	4641      	mov	r1, r8
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	465a      	mov	r2, fp
 8001ae4:	4688      	mov	r8, r1
 8001ae6:	9900      	ldr	r1, [sp, #0]
 8001ae8:	404a      	eors	r2, r1
 8001aea:	2180      	movs	r1, #128	@ 0x80
 8001aec:	0109      	lsls	r1, r1, #4
 8001aee:	468c      	mov	ip, r1
 8001af0:	0029      	movs	r1, r5
 8001af2:	4461      	add	r1, ip
 8001af4:	9101      	str	r1, [sp, #4]
 8001af6:	4641      	mov	r1, r8
 8001af8:	290a      	cmp	r1, #10
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dmul+0xf6>
 8001afc:	e233      	b.n	8001f66 <__aeabi_dmul+0x55e>
 8001afe:	4693      	mov	fp, r2
 8001b00:	2603      	movs	r6, #3
 8001b02:	4642      	mov	r2, r8
 8001b04:	2701      	movs	r7, #1
 8001b06:	4097      	lsls	r7, r2
 8001b08:	21a6      	movs	r1, #166	@ 0xa6
 8001b0a:	003a      	movs	r2, r7
 8001b0c:	00c9      	lsls	r1, r1, #3
 8001b0e:	400a      	ands	r2, r1
 8001b10:	420f      	tst	r7, r1
 8001b12:	d031      	beq.n	8001b78 <__aeabi_dmul+0x170>
 8001b14:	9e02      	ldr	r6, [sp, #8]
 8001b16:	2e02      	cmp	r6, #2
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dmul+0x114>
 8001b1a:	e235      	b.n	8001f88 <__aeabi_dmul+0x580>
 8001b1c:	2e03      	cmp	r6, #3
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x11a>
 8001b20:	e1d2      	b.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001b22:	4654      	mov	r4, sl
 8001b24:	4648      	mov	r0, r9
 8001b26:	2e01      	cmp	r6, #1
 8001b28:	d0c1      	beq.n	8001aae <__aeabi_dmul+0xa6>
 8001b2a:	9a01      	ldr	r2, [sp, #4]
 8001b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d24 <__aeabi_dmul+0x31c>)
 8001b2e:	4694      	mov	ip, r2
 8001b30:	4463      	add	r3, ip
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dc00      	bgt.n	8001b38 <__aeabi_dmul+0x130>
 8001b36:	e0c0      	b.n	8001cba <__aeabi_dmul+0x2b2>
 8001b38:	0742      	lsls	r2, r0, #29
 8001b3a:	d009      	beq.n	8001b50 <__aeabi_dmul+0x148>
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4002      	ands	r2, r0
 8001b40:	2a04      	cmp	r2, #4
 8001b42:	d005      	beq.n	8001b50 <__aeabi_dmul+0x148>
 8001b44:	1d02      	adds	r2, r0, #4
 8001b46:	4282      	cmp	r2, r0
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	4240      	negs	r0, r0
 8001b4c:	1824      	adds	r4, r4, r0
 8001b4e:	0010      	movs	r0, r2
 8001b50:	01e2      	lsls	r2, r4, #7
 8001b52:	d506      	bpl.n	8001b62 <__aeabi_dmul+0x15a>
 8001b54:	4b74      	ldr	r3, [pc, #464]	@ (8001d28 <__aeabi_dmul+0x320>)
 8001b56:	9a01      	ldr	r2, [sp, #4]
 8001b58:	401c      	ands	r4, r3
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	4694      	mov	ip, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4463      	add	r3, ip
 8001b62:	4a72      	ldr	r2, [pc, #456]	@ (8001d2c <__aeabi_dmul+0x324>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	dc6b      	bgt.n	8001c40 <__aeabi_dmul+0x238>
 8001b68:	0762      	lsls	r2, r4, #29
 8001b6a:	08c0      	lsrs	r0, r0, #3
 8001b6c:	0264      	lsls	r4, r4, #9
 8001b6e:	055b      	lsls	r3, r3, #21
 8001b70:	4302      	orrs	r2, r0
 8001b72:	0b24      	lsrs	r4, r4, #12
 8001b74:	0d5b      	lsrs	r3, r3, #21
 8001b76:	e79d      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001b78:	2190      	movs	r1, #144	@ 0x90
 8001b7a:	0089      	lsls	r1, r1, #2
 8001b7c:	420f      	tst	r7, r1
 8001b7e:	d163      	bne.n	8001c48 <__aeabi_dmul+0x240>
 8001b80:	2288      	movs	r2, #136	@ 0x88
 8001b82:	423a      	tst	r2, r7
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dmul+0x180>
 8001b86:	e0d7      	b.n	8001d38 <__aeabi_dmul+0x330>
 8001b88:	9b00      	ldr	r3, [sp, #0]
 8001b8a:	46a2      	mov	sl, r4
 8001b8c:	469b      	mov	fp, r3
 8001b8e:	4681      	mov	r9, r0
 8001b90:	9602      	str	r6, [sp, #8]
 8001b92:	e7bf      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001b94:	0023      	movs	r3, r4
 8001b96:	4333      	orrs	r3, r6
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dmul+0x194>
 8001b9a:	e07f      	b.n	8001c9c <__aeabi_dmul+0x294>
 8001b9c:	2c00      	cmp	r4, #0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dmul+0x19a>
 8001ba0:	e1ad      	b.n	8001efe <__aeabi_dmul+0x4f6>
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	f000 ff10 	bl	80029c8 <__clzsi2>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	0003      	movs	r3, r0
 8001bac:	3a0b      	subs	r2, #11
 8001bae:	201d      	movs	r0, #29
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	1a82      	subs	r2, r0, r2
 8001bb4:	0030      	movs	r0, r6
 8001bb6:	3908      	subs	r1, #8
 8001bb8:	40d0      	lsrs	r0, r2
 8001bba:	408c      	lsls	r4, r1
 8001bbc:	4304      	orrs	r4, r0
 8001bbe:	0030      	movs	r0, r6
 8001bc0:	4088      	lsls	r0, r1
 8001bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d30 <__aeabi_dmul+0x328>)
 8001bc4:	1aeb      	subs	r3, r5, r3
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	4463      	add	r3, ip
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	4642      	mov	r2, r8
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	2a0a      	cmp	r2, #10
 8001bd4:	dc00      	bgt.n	8001bd8 <__aeabi_dmul+0x1d0>
 8001bd6:	e75a      	b.n	8001a8e <__aeabi_dmul+0x86>
 8001bd8:	e79c      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001bda:	4653      	mov	r3, sl
 8001bdc:	4303      	orrs	r3, r0
 8001bde:	4699      	mov	r9, r3
 8001be0:	d054      	beq.n	8001c8c <__aeabi_dmul+0x284>
 8001be2:	4653      	mov	r3, sl
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dmul+0x1e2>
 8001be8:	e177      	b.n	8001eda <__aeabi_dmul+0x4d2>
 8001bea:	4650      	mov	r0, sl
 8001bec:	f000 feec 	bl	80029c8 <__clzsi2>
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	4484      	add	ip, r0
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	3908      	subs	r1, #8
 8001c00:	4088      	lsls	r0, r1
 8001c02:	231d      	movs	r3, #29
 8001c04:	4680      	mov	r8, r0
 8001c06:	4660      	mov	r0, ip
 8001c08:	1a1b      	subs	r3, r3, r0
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	40d8      	lsrs	r0, r3
 8001c0e:	0003      	movs	r3, r0
 8001c10:	4640      	mov	r0, r8
 8001c12:	4303      	orrs	r3, r0
 8001c14:	469a      	mov	sl, r3
 8001c16:	0023      	movs	r3, r4
 8001c18:	408b      	lsls	r3, r1
 8001c1a:	4699      	mov	r9, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	4d44      	ldr	r5, [pc, #272]	@ (8001d30 <__aeabi_dmul+0x328>)
 8001c20:	4698      	mov	r8, r3
 8001c22:	1aad      	subs	r5, r5, r2
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	e715      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c28:	4652      	mov	r2, sl
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	4691      	mov	r9, r2
 8001c2e:	d126      	bne.n	8001c7e <__aeabi_dmul+0x276>
 8001c30:	2200      	movs	r2, #0
 8001c32:	001d      	movs	r5, r3
 8001c34:	2302      	movs	r3, #2
 8001c36:	4692      	mov	sl, r2
 8001c38:	3208      	adds	r2, #8
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	e709      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c40:	2400      	movs	r4, #0
 8001c42:	2200      	movs	r2, #0
 8001c44:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001c46:	e735      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2480      	movs	r4, #128	@ 0x80
 8001c4c:	469b      	mov	fp, r3
 8001c4e:	0324      	lsls	r4, r4, #12
 8001c50:	4b32      	ldr	r3, [pc, #200]	@ (8001d1c <__aeabi_dmul+0x314>)
 8001c52:	e72f      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001c54:	2202      	movs	r2, #2
 8001c56:	4641      	mov	r1, r8
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	4694      	mov	ip, r2
 8001c60:	002a      	movs	r2, r5
 8001c62:	4462      	add	r2, ip
 8001c64:	4688      	mov	r8, r1
 8001c66:	9201      	str	r2, [sp, #4]
 8001c68:	290a      	cmp	r1, #10
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dmul+0x266>
 8001c6c:	e752      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001c6e:	465a      	mov	r2, fp
 8001c70:	2000      	movs	r0, #0
 8001c72:	9900      	ldr	r1, [sp, #0]
 8001c74:	0004      	movs	r4, r0
 8001c76:	404a      	eors	r2, r1
 8001c78:	4693      	mov	fp, r2
 8001c7a:	2602      	movs	r6, #2
 8001c7c:	e70b      	b.n	8001a96 <__aeabi_dmul+0x8e>
 8001c7e:	220c      	movs	r2, #12
 8001c80:	001d      	movs	r5, r3
 8001c82:	2303      	movs	r3, #3
 8001c84:	4681      	mov	r9, r0
 8001c86:	4690      	mov	r8, r2
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	e6e3      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	469a      	mov	sl, r3
 8001c90:	3304      	adds	r3, #4
 8001c92:	4698      	mov	r8, r3
 8001c94:	3b03      	subs	r3, #3
 8001c96:	2500      	movs	r5, #0
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	e6db      	b.n	8001a54 <__aeabi_dmul+0x4c>
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	002b      	movs	r3, r5
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	4642      	mov	r2, r8
 8001cac:	2400      	movs	r4, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	2a0a      	cmp	r2, #10
 8001cb4:	dc00      	bgt.n	8001cb8 <__aeabi_dmul+0x2b0>
 8001cb6:	e6ea      	b.n	8001a8e <__aeabi_dmul+0x86>
 8001cb8:	e72c      	b.n	8001b14 <__aeabi_dmul+0x10c>
 8001cba:	2201      	movs	r2, #1
 8001cbc:	1ad2      	subs	r2, r2, r3
 8001cbe:	2a38      	cmp	r2, #56	@ 0x38
 8001cc0:	dd00      	ble.n	8001cc4 <__aeabi_dmul+0x2bc>
 8001cc2:	e6f4      	b.n	8001aae <__aeabi_dmul+0xa6>
 8001cc4:	2a1f      	cmp	r2, #31
 8001cc6:	dc00      	bgt.n	8001cca <__aeabi_dmul+0x2c2>
 8001cc8:	e12a      	b.n	8001f20 <__aeabi_dmul+0x518>
 8001cca:	211f      	movs	r1, #31
 8001ccc:	4249      	negs	r1, r1
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	0021      	movs	r1, r4
 8001cd2:	40d9      	lsrs	r1, r3
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	2a20      	cmp	r2, #32
 8001cd8:	d005      	beq.n	8001ce6 <__aeabi_dmul+0x2de>
 8001cda:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <__aeabi_dmul+0x32c>)
 8001cdc:	9d01      	ldr	r5, [sp, #4]
 8001cde:	4694      	mov	ip, r2
 8001ce0:	4465      	add	r5, ip
 8001ce2:	40ac      	lsls	r4, r5
 8001ce4:	4320      	orrs	r0, r4
 8001ce6:	1e42      	subs	r2, r0, #1
 8001ce8:	4190      	sbcs	r0, r2
 8001cea:	4318      	orrs	r0, r3
 8001cec:	2307      	movs	r3, #7
 8001cee:	0019      	movs	r1, r3
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	4001      	ands	r1, r0
 8001cf4:	4203      	tst	r3, r0
 8001cf6:	d00c      	beq.n	8001d12 <__aeabi_dmul+0x30a>
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	4003      	ands	r3, r0
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dmul+0x2fa>
 8001d00:	e140      	b.n	8001f84 <__aeabi_dmul+0x57c>
 8001d02:	1d03      	adds	r3, r0, #4
 8001d04:	4283      	cmp	r3, r0
 8001d06:	41a4      	sbcs	r4, r4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	4264      	negs	r4, r4
 8001d0c:	0761      	lsls	r1, r4, #29
 8001d0e:	0264      	lsls	r4, r4, #9
 8001d10:	0b24      	lsrs	r4, r4, #12
 8001d12:	08c2      	lsrs	r2, r0, #3
 8001d14:	2300      	movs	r3, #0
 8001d16:	430a      	orrs	r2, r1
 8001d18:	e6cc      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	000007ff 	.word	0x000007ff
 8001d20:	fffffc01 	.word	0xfffffc01
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	feffffff 	.word	0xfeffffff
 8001d2c:	000007fe 	.word	0x000007fe
 8001d30:	fffffc0d 	.word	0xfffffc0d
 8001d34:	0000043e 	.word	0x0000043e
 8001d38:	4649      	mov	r1, r9
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0409      	lsls	r1, r1, #16
 8001d3e:	0c09      	lsrs	r1, r1, #16
 8001d40:	000d      	movs	r5, r1
 8001d42:	0c16      	lsrs	r6, r2, #16
 8001d44:	0c02      	lsrs	r2, r0, #16
 8001d46:	0400      	lsls	r0, r0, #16
 8001d48:	0c00      	lsrs	r0, r0, #16
 8001d4a:	4345      	muls	r5, r0
 8001d4c:	46ac      	mov	ip, r5
 8001d4e:	0005      	movs	r5, r0
 8001d50:	4375      	muls	r5, r6
 8001d52:	46a8      	mov	r8, r5
 8001d54:	0015      	movs	r5, r2
 8001d56:	000f      	movs	r7, r1
 8001d58:	4375      	muls	r5, r6
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	9502      	str	r5, [sp, #8]
 8001d5e:	002a      	movs	r2, r5
 8001d60:	9d00      	ldr	r5, [sp, #0]
 8001d62:	436f      	muls	r7, r5
 8001d64:	4665      	mov	r5, ip
 8001d66:	0c2d      	lsrs	r5, r5, #16
 8001d68:	46a9      	mov	r9, r5
 8001d6a:	4447      	add	r7, r8
 8001d6c:	444f      	add	r7, r9
 8001d6e:	45b8      	cmp	r8, r7
 8001d70:	d905      	bls.n	8001d7e <__aeabi_dmul+0x376>
 8001d72:	0015      	movs	r5, r2
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	0252      	lsls	r2, r2, #9
 8001d78:	4690      	mov	r8, r2
 8001d7a:	4445      	add	r5, r8
 8001d7c:	9502      	str	r5, [sp, #8]
 8001d7e:	0c3d      	lsrs	r5, r7, #16
 8001d80:	9503      	str	r5, [sp, #12]
 8001d82:	4665      	mov	r5, ip
 8001d84:	042d      	lsls	r5, r5, #16
 8001d86:	043f      	lsls	r7, r7, #16
 8001d88:	0c2d      	lsrs	r5, r5, #16
 8001d8a:	46ac      	mov	ip, r5
 8001d8c:	003d      	movs	r5, r7
 8001d8e:	4465      	add	r5, ip
 8001d90:	9504      	str	r5, [sp, #16]
 8001d92:	0c25      	lsrs	r5, r4, #16
 8001d94:	0424      	lsls	r4, r4, #16
 8001d96:	0c24      	lsrs	r4, r4, #16
 8001d98:	46ac      	mov	ip, r5
 8001d9a:	0025      	movs	r5, r4
 8001d9c:	4375      	muls	r5, r6
 8001d9e:	46a8      	mov	r8, r5
 8001da0:	4665      	mov	r5, ip
 8001da2:	000f      	movs	r7, r1
 8001da4:	4369      	muls	r1, r5
 8001da6:	4441      	add	r1, r8
 8001da8:	4689      	mov	r9, r1
 8001daa:	4367      	muls	r7, r4
 8001dac:	0c39      	lsrs	r1, r7, #16
 8001dae:	4449      	add	r1, r9
 8001db0:	436e      	muls	r6, r5
 8001db2:	4588      	cmp	r8, r1
 8001db4:	d903      	bls.n	8001dbe <__aeabi_dmul+0x3b6>
 8001db6:	2280      	movs	r2, #128	@ 0x80
 8001db8:	0252      	lsls	r2, r2, #9
 8001dba:	4690      	mov	r8, r2
 8001dbc:	4446      	add	r6, r8
 8001dbe:	0c0d      	lsrs	r5, r1, #16
 8001dc0:	46a8      	mov	r8, r5
 8001dc2:	0035      	movs	r5, r6
 8001dc4:	4445      	add	r5, r8
 8001dc6:	9505      	str	r5, [sp, #20]
 8001dc8:	9d03      	ldr	r5, [sp, #12]
 8001dca:	043f      	lsls	r7, r7, #16
 8001dcc:	46a8      	mov	r8, r5
 8001dce:	0c3f      	lsrs	r7, r7, #16
 8001dd0:	0409      	lsls	r1, r1, #16
 8001dd2:	19c9      	adds	r1, r1, r7
 8001dd4:	4488      	add	r8, r1
 8001dd6:	4645      	mov	r5, r8
 8001dd8:	9503      	str	r5, [sp, #12]
 8001dda:	4655      	mov	r5, sl
 8001ddc:	042e      	lsls	r6, r5, #16
 8001dde:	0c36      	lsrs	r6, r6, #16
 8001de0:	0c2f      	lsrs	r7, r5, #16
 8001de2:	0035      	movs	r5, r6
 8001de4:	4345      	muls	r5, r0
 8001de6:	4378      	muls	r0, r7
 8001de8:	4681      	mov	r9, r0
 8001dea:	0038      	movs	r0, r7
 8001dec:	46a8      	mov	r8, r5
 8001dee:	0c2d      	lsrs	r5, r5, #16
 8001df0:	46aa      	mov	sl, r5
 8001df2:	9a00      	ldr	r2, [sp, #0]
 8001df4:	4350      	muls	r0, r2
 8001df6:	4372      	muls	r2, r6
 8001df8:	444a      	add	r2, r9
 8001dfa:	4452      	add	r2, sl
 8001dfc:	4591      	cmp	r9, r2
 8001dfe:	d903      	bls.n	8001e08 <__aeabi_dmul+0x400>
 8001e00:	2580      	movs	r5, #128	@ 0x80
 8001e02:	026d      	lsls	r5, r5, #9
 8001e04:	46a9      	mov	r9, r5
 8001e06:	4448      	add	r0, r9
 8001e08:	0c15      	lsrs	r5, r2, #16
 8001e0a:	46a9      	mov	r9, r5
 8001e0c:	4645      	mov	r5, r8
 8001e0e:	042d      	lsls	r5, r5, #16
 8001e10:	0c2d      	lsrs	r5, r5, #16
 8001e12:	46a8      	mov	r8, r5
 8001e14:	4665      	mov	r5, ip
 8001e16:	437d      	muls	r5, r7
 8001e18:	0412      	lsls	r2, r2, #16
 8001e1a:	4448      	add	r0, r9
 8001e1c:	4490      	add	r8, r2
 8001e1e:	46a9      	mov	r9, r5
 8001e20:	0032      	movs	r2, r6
 8001e22:	4665      	mov	r5, ip
 8001e24:	4362      	muls	r2, r4
 8001e26:	436e      	muls	r6, r5
 8001e28:	437c      	muls	r4, r7
 8001e2a:	0c17      	lsrs	r7, r2, #16
 8001e2c:	1936      	adds	r6, r6, r4
 8001e2e:	19bf      	adds	r7, r7, r6
 8001e30:	42bc      	cmp	r4, r7
 8001e32:	d903      	bls.n	8001e3c <__aeabi_dmul+0x434>
 8001e34:	2480      	movs	r4, #128	@ 0x80
 8001e36:	0264      	lsls	r4, r4, #9
 8001e38:	46a4      	mov	ip, r4
 8001e3a:	44e1      	add	r9, ip
 8001e3c:	9c02      	ldr	r4, [sp, #8]
 8001e3e:	9e03      	ldr	r6, [sp, #12]
 8001e40:	46a4      	mov	ip, r4
 8001e42:	9d05      	ldr	r5, [sp, #20]
 8001e44:	4466      	add	r6, ip
 8001e46:	428e      	cmp	r6, r1
 8001e48:	4189      	sbcs	r1, r1
 8001e4a:	46ac      	mov	ip, r5
 8001e4c:	0412      	lsls	r2, r2, #16
 8001e4e:	043c      	lsls	r4, r7, #16
 8001e50:	0c12      	lsrs	r2, r2, #16
 8001e52:	18a2      	adds	r2, r4, r2
 8001e54:	4462      	add	r2, ip
 8001e56:	4249      	negs	r1, r1
 8001e58:	1854      	adds	r4, r2, r1
 8001e5a:	4446      	add	r6, r8
 8001e5c:	46a4      	mov	ip, r4
 8001e5e:	4546      	cmp	r6, r8
 8001e60:	41a4      	sbcs	r4, r4
 8001e62:	4682      	mov	sl, r0
 8001e64:	4264      	negs	r4, r4
 8001e66:	46a0      	mov	r8, r4
 8001e68:	42aa      	cmp	r2, r5
 8001e6a:	4192      	sbcs	r2, r2
 8001e6c:	458c      	cmp	ip, r1
 8001e6e:	4189      	sbcs	r1, r1
 8001e70:	44e2      	add	sl, ip
 8001e72:	44d0      	add	r8, sl
 8001e74:	4249      	negs	r1, r1
 8001e76:	4252      	negs	r2, r2
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	45a0      	cmp	r8, r4
 8001e7c:	41a4      	sbcs	r4, r4
 8001e7e:	4582      	cmp	sl, r0
 8001e80:	4189      	sbcs	r1, r1
 8001e82:	4264      	negs	r4, r4
 8001e84:	4249      	negs	r1, r1
 8001e86:	430c      	orrs	r4, r1
 8001e88:	4641      	mov	r1, r8
 8001e8a:	0c3f      	lsrs	r7, r7, #16
 8001e8c:	19d2      	adds	r2, r2, r7
 8001e8e:	1912      	adds	r2, r2, r4
 8001e90:	0dcc      	lsrs	r4, r1, #23
 8001e92:	9904      	ldr	r1, [sp, #16]
 8001e94:	0270      	lsls	r0, r6, #9
 8001e96:	4308      	orrs	r0, r1
 8001e98:	1e41      	subs	r1, r0, #1
 8001e9a:	4188      	sbcs	r0, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	444a      	add	r2, r9
 8001ea0:	0df6      	lsrs	r6, r6, #23
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	4330      	orrs	r0, r6
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	4314      	orrs	r4, r2
 8001eaa:	4308      	orrs	r0, r1
 8001eac:	01d2      	lsls	r2, r2, #7
 8001eae:	d535      	bpl.n	8001f1c <__aeabi_dmul+0x514>
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	0843      	lsrs	r3, r0, #1
 8001eb4:	4002      	ands	r2, r0
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	07e0      	lsls	r0, r4, #31
 8001eba:	4318      	orrs	r0, r3
 8001ebc:	0864      	lsrs	r4, r4, #1
 8001ebe:	e634      	b.n	8001b2a <__aeabi_dmul+0x122>
 8001ec0:	9b00      	ldr	r3, [sp, #0]
 8001ec2:	46a2      	mov	sl, r4
 8001ec4:	469b      	mov	fp, r3
 8001ec6:	4681      	mov	r9, r0
 8001ec8:	2480      	movs	r4, #128	@ 0x80
 8001eca:	4653      	mov	r3, sl
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	431c      	orrs	r4, r3
 8001ed0:	0324      	lsls	r4, r4, #12
 8001ed2:	464a      	mov	r2, r9
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001ed6:	0b24      	lsrs	r4, r4, #12
 8001ed8:	e5ec      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001eda:	f000 fd75 	bl	80029c8 <__clzsi2>
 8001ede:	2315      	movs	r3, #21
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4484      	add	ip, r0
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	3220      	adds	r2, #32
 8001eea:	2b1c      	cmp	r3, #28
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_dmul+0x4e8>
 8001eee:	e684      	b.n	8001bfa <__aeabi_dmul+0x1f2>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	0023      	movs	r3, r4
 8001ef6:	3808      	subs	r0, #8
 8001ef8:	4083      	lsls	r3, r0
 8001efa:	469a      	mov	sl, r3
 8001efc:	e68e      	b.n	8001c1c <__aeabi_dmul+0x214>
 8001efe:	f000 fd63 	bl	80029c8 <__clzsi2>
 8001f02:	0002      	movs	r2, r0
 8001f04:	0003      	movs	r3, r0
 8001f06:	3215      	adds	r2, #21
 8001f08:	3320      	adds	r3, #32
 8001f0a:	2a1c      	cmp	r2, #28
 8001f0c:	dc00      	bgt.n	8001f10 <__aeabi_dmul+0x508>
 8001f0e:	e64e      	b.n	8001bae <__aeabi_dmul+0x1a6>
 8001f10:	0002      	movs	r2, r0
 8001f12:	0034      	movs	r4, r6
 8001f14:	3a08      	subs	r2, #8
 8001f16:	2000      	movs	r0, #0
 8001f18:	4094      	lsls	r4, r2
 8001f1a:	e652      	b.n	8001bc2 <__aeabi_dmul+0x1ba>
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	e604      	b.n	8001b2a <__aeabi_dmul+0x122>
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <__aeabi_dmul+0x58c>)
 8001f22:	0021      	movs	r1, r4
 8001f24:	469c      	mov	ip, r3
 8001f26:	0003      	movs	r3, r0
 8001f28:	9d01      	ldr	r5, [sp, #4]
 8001f2a:	40d3      	lsrs	r3, r2
 8001f2c:	4465      	add	r5, ip
 8001f2e:	40a9      	lsls	r1, r5
 8001f30:	4319      	orrs	r1, r3
 8001f32:	0003      	movs	r3, r0
 8001f34:	40ab      	lsls	r3, r5
 8001f36:	1e58      	subs	r0, r3, #1
 8001f38:	4183      	sbcs	r3, r0
 8001f3a:	4319      	orrs	r1, r3
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	40d4      	lsrs	r4, r2
 8001f40:	074b      	lsls	r3, r1, #29
 8001f42:	d009      	beq.n	8001f58 <__aeabi_dmul+0x550>
 8001f44:	230f      	movs	r3, #15
 8001f46:	400b      	ands	r3, r1
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <__aeabi_dmul+0x550>
 8001f4c:	1d0b      	adds	r3, r1, #4
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	4180      	sbcs	r0, r0
 8001f52:	4240      	negs	r0, r0
 8001f54:	1824      	adds	r4, r4, r0
 8001f56:	0018      	movs	r0, r3
 8001f58:	0223      	lsls	r3, r4, #8
 8001f5a:	d400      	bmi.n	8001f5e <__aeabi_dmul+0x556>
 8001f5c:	e6d6      	b.n	8001d0c <__aeabi_dmul+0x304>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2400      	movs	r4, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	e5a6      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f66:	290f      	cmp	r1, #15
 8001f68:	d1aa      	bne.n	8001ec0 <__aeabi_dmul+0x4b8>
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	4652      	mov	r2, sl
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	421a      	tst	r2, r3
 8001f72:	d0a9      	beq.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001f74:	421c      	tst	r4, r3
 8001f76:	d1a7      	bne.n	8001ec8 <__aeabi_dmul+0x4c0>
 8001f78:	431c      	orrs	r4, r3
 8001f7a:	9b00      	ldr	r3, [sp, #0]
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	469b      	mov	fp, r3
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001f82:	e597      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f84:	2400      	movs	r4, #0
 8001f86:	e6c1      	b.n	8001d0c <__aeabi_dmul+0x304>
 8001f88:	2400      	movs	r4, #0
 8001f8a:	4b01      	ldr	r3, [pc, #4]	@ (8001f90 <__aeabi_dmul+0x588>)
 8001f8c:	0022      	movs	r2, r4
 8001f8e:	e591      	b.n	8001ab4 <__aeabi_dmul+0xac>
 8001f90:	000007ff 	.word	0x000007ff
 8001f94:	0000041e 	.word	0x0000041e

08001f98 <__aeabi_dsub>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	464e      	mov	r6, r9
 8001f9c:	4645      	mov	r5, r8
 8001f9e:	46de      	mov	lr, fp
 8001fa0:	4657      	mov	r7, sl
 8001fa2:	b5e0      	push	{r5, r6, r7, lr}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	9000      	str	r0, [sp, #0]
 8001fa8:	9101      	str	r1, [sp, #4]
 8001faa:	030c      	lsls	r4, r1, #12
 8001fac:	004f      	lsls	r7, r1, #1
 8001fae:	0fce      	lsrs	r6, r1, #31
 8001fb0:	0a61      	lsrs	r1, r4, #9
 8001fb2:	9c00      	ldr	r4, [sp, #0]
 8001fb4:	46b0      	mov	r8, r6
 8001fb6:	0f64      	lsrs	r4, r4, #29
 8001fb8:	430c      	orrs	r4, r1
 8001fba:	9900      	ldr	r1, [sp, #0]
 8001fbc:	0d7f      	lsrs	r7, r7, #21
 8001fbe:	00c8      	lsls	r0, r1, #3
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	031b      	lsls	r3, r3, #12
 8001fc6:	469c      	mov	ip, r3
 8001fc8:	9100      	str	r1, [sp, #0]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	0051      	lsls	r1, r2, #1
 8001fce:	0d4b      	lsrs	r3, r1, #21
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	9d00      	ldr	r5, [sp, #0]
 8001fd6:	0fd9      	lsrs	r1, r3, #31
 8001fd8:	4663      	mov	r3, ip
 8001fda:	0f6a      	lsrs	r2, r5, #29
 8001fdc:	0a5b      	lsrs	r3, r3, #9
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	00ea      	lsls	r2, r5, #3
 8001fe2:	4694      	mov	ip, r2
 8001fe4:	4693      	mov	fp, r2
 8001fe6:	4ac1      	ldr	r2, [pc, #772]	@ (80022ec <__aeabi_dsub+0x354>)
 8001fe8:	9003      	str	r0, [sp, #12]
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	4591      	cmp	r9, r2
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x5a>
 8001ff0:	e0cd      	b.n	800218e <__aeabi_dsub+0x1f6>
 8001ff2:	2501      	movs	r5, #1
 8001ff4:	4069      	eors	r1, r5
 8001ff6:	464d      	mov	r5, r9
 8001ff8:	1b7d      	subs	r5, r7, r5
 8001ffa:	46aa      	mov	sl, r5
 8001ffc:	428e      	cmp	r6, r1
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x6a>
 8002000:	e080      	b.n	8002104 <__aeabi_dsub+0x16c>
 8002002:	2d00      	cmp	r5, #0
 8002004:	dc00      	bgt.n	8002008 <__aeabi_dsub+0x70>
 8002006:	e335      	b.n	8002674 <__aeabi_dsub+0x6dc>
 8002008:	4649      	mov	r1, r9
 800200a:	2900      	cmp	r1, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x78>
 800200e:	e0df      	b.n	80021d0 <__aeabi_dsub+0x238>
 8002010:	4297      	cmp	r7, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x7e>
 8002014:	e194      	b.n	8002340 <__aeabi_dsub+0x3a8>
 8002016:	4652      	mov	r2, sl
 8002018:	2501      	movs	r5, #1
 800201a:	2a38      	cmp	r2, #56	@ 0x38
 800201c:	dc19      	bgt.n	8002052 <__aeabi_dsub+0xba>
 800201e:	2280      	movs	r2, #128	@ 0x80
 8002020:	9b02      	ldr	r3, [sp, #8]
 8002022:	0412      	lsls	r2, r2, #16
 8002024:	4313      	orrs	r3, r2
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	4652      	mov	r2, sl
 800202a:	2a1f      	cmp	r2, #31
 800202c:	dd00      	ble.n	8002030 <__aeabi_dsub+0x98>
 800202e:	e1e3      	b.n	80023f8 <__aeabi_dsub+0x460>
 8002030:	4653      	mov	r3, sl
 8002032:	2220      	movs	r2, #32
 8002034:	4661      	mov	r1, ip
 8002036:	9d02      	ldr	r5, [sp, #8]
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	4095      	lsls	r5, r2
 800203c:	40d9      	lsrs	r1, r3
 800203e:	430d      	orrs	r5, r1
 8002040:	4661      	mov	r1, ip
 8002042:	4091      	lsls	r1, r2
 8002044:	000a      	movs	r2, r1
 8002046:	1e51      	subs	r1, r2, #1
 8002048:	418a      	sbcs	r2, r1
 800204a:	4315      	orrs	r5, r2
 800204c:	9a02      	ldr	r2, [sp, #8]
 800204e:	40da      	lsrs	r2, r3
 8002050:	1aa4      	subs	r4, r4, r2
 8002052:	1b45      	subs	r5, r0, r5
 8002054:	42a8      	cmp	r0, r5
 8002056:	4180      	sbcs	r0, r0
 8002058:	4240      	negs	r0, r0
 800205a:	1a24      	subs	r4, r4, r0
 800205c:	0223      	lsls	r3, r4, #8
 800205e:	d400      	bmi.n	8002062 <__aeabi_dsub+0xca>
 8002060:	e13d      	b.n	80022de <__aeabi_dsub+0x346>
 8002062:	0264      	lsls	r4, r4, #9
 8002064:	0a64      	lsrs	r4, r4, #9
 8002066:	2c00      	cmp	r4, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0xd4>
 800206a:	e147      	b.n	80022fc <__aeabi_dsub+0x364>
 800206c:	0020      	movs	r0, r4
 800206e:	f000 fcab 	bl	80029c8 <__clzsi2>
 8002072:	0003      	movs	r3, r0
 8002074:	3b08      	subs	r3, #8
 8002076:	2120      	movs	r1, #32
 8002078:	0028      	movs	r0, r5
 800207a:	1aca      	subs	r2, r1, r3
 800207c:	40d0      	lsrs	r0, r2
 800207e:	409c      	lsls	r4, r3
 8002080:	0002      	movs	r2, r0
 8002082:	409d      	lsls	r5, r3
 8002084:	4322      	orrs	r2, r4
 8002086:	429f      	cmp	r7, r3
 8002088:	dd00      	ble.n	800208c <__aeabi_dsub+0xf4>
 800208a:	e177      	b.n	800237c <__aeabi_dsub+0x3e4>
 800208c:	1bd8      	subs	r0, r3, r7
 800208e:	3001      	adds	r0, #1
 8002090:	1a09      	subs	r1, r1, r0
 8002092:	002c      	movs	r4, r5
 8002094:	408d      	lsls	r5, r1
 8002096:	40c4      	lsrs	r4, r0
 8002098:	1e6b      	subs	r3, r5, #1
 800209a:	419d      	sbcs	r5, r3
 800209c:	0013      	movs	r3, r2
 800209e:	40c2      	lsrs	r2, r0
 80020a0:	408b      	lsls	r3, r1
 80020a2:	4325      	orrs	r5, r4
 80020a4:	2700      	movs	r7, #0
 80020a6:	0014      	movs	r4, r2
 80020a8:	431d      	orrs	r5, r3
 80020aa:	076b      	lsls	r3, r5, #29
 80020ac:	d009      	beq.n	80020c2 <__aeabi_dsub+0x12a>
 80020ae:	230f      	movs	r3, #15
 80020b0:	402b      	ands	r3, r5
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d005      	beq.n	80020c2 <__aeabi_dsub+0x12a>
 80020b6:	1d2b      	adds	r3, r5, #4
 80020b8:	42ab      	cmp	r3, r5
 80020ba:	41ad      	sbcs	r5, r5
 80020bc:	426d      	negs	r5, r5
 80020be:	1964      	adds	r4, r4, r5
 80020c0:	001d      	movs	r5, r3
 80020c2:	0223      	lsls	r3, r4, #8
 80020c4:	d400      	bmi.n	80020c8 <__aeabi_dsub+0x130>
 80020c6:	e140      	b.n	800234a <__aeabi_dsub+0x3b2>
 80020c8:	4a88      	ldr	r2, [pc, #544]	@ (80022ec <__aeabi_dsub+0x354>)
 80020ca:	3701      	adds	r7, #1
 80020cc:	4297      	cmp	r7, r2
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x13a>
 80020d0:	e101      	b.n	80022d6 <__aeabi_dsub+0x33e>
 80020d2:	2601      	movs	r6, #1
 80020d4:	4643      	mov	r3, r8
 80020d6:	4986      	ldr	r1, [pc, #536]	@ (80022f0 <__aeabi_dsub+0x358>)
 80020d8:	08ed      	lsrs	r5, r5, #3
 80020da:	4021      	ands	r1, r4
 80020dc:	074a      	lsls	r2, r1, #29
 80020de:	432a      	orrs	r2, r5
 80020e0:	057c      	lsls	r4, r7, #21
 80020e2:	024d      	lsls	r5, r1, #9
 80020e4:	0b2d      	lsrs	r5, r5, #12
 80020e6:	0d64      	lsrs	r4, r4, #21
 80020e8:	401e      	ands	r6, r3
 80020ea:	0524      	lsls	r4, r4, #20
 80020ec:	432c      	orrs	r4, r5
 80020ee:	07f6      	lsls	r6, r6, #31
 80020f0:	4334      	orrs	r4, r6
 80020f2:	0010      	movs	r0, r2
 80020f4:	0021      	movs	r1, r4
 80020f6:	b005      	add	sp, #20
 80020f8:	bcf0      	pop	{r4, r5, r6, r7}
 80020fa:	46bb      	mov	fp, r7
 80020fc:	46b2      	mov	sl, r6
 80020fe:	46a9      	mov	r9, r5
 8002100:	46a0      	mov	r8, r4
 8002102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002104:	2d00      	cmp	r5, #0
 8002106:	dc00      	bgt.n	800210a <__aeabi_dsub+0x172>
 8002108:	e2d0      	b.n	80026ac <__aeabi_dsub+0x714>
 800210a:	4649      	mov	r1, r9
 800210c:	2900      	cmp	r1, #0
 800210e:	d000      	beq.n	8002112 <__aeabi_dsub+0x17a>
 8002110:	e0d4      	b.n	80022bc <__aeabi_dsub+0x324>
 8002112:	4661      	mov	r1, ip
 8002114:	9b02      	ldr	r3, [sp, #8]
 8002116:	4319      	orrs	r1, r3
 8002118:	d100      	bne.n	800211c <__aeabi_dsub+0x184>
 800211a:	e12b      	b.n	8002374 <__aeabi_dsub+0x3dc>
 800211c:	1e69      	subs	r1, r5, #1
 800211e:	2d01      	cmp	r5, #1
 8002120:	d100      	bne.n	8002124 <__aeabi_dsub+0x18c>
 8002122:	e1d9      	b.n	80024d8 <__aeabi_dsub+0x540>
 8002124:	4295      	cmp	r5, r2
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x192>
 8002128:	e10a      	b.n	8002340 <__aeabi_dsub+0x3a8>
 800212a:	2501      	movs	r5, #1
 800212c:	2938      	cmp	r1, #56	@ 0x38
 800212e:	dc17      	bgt.n	8002160 <__aeabi_dsub+0x1c8>
 8002130:	468a      	mov	sl, r1
 8002132:	4653      	mov	r3, sl
 8002134:	2b1f      	cmp	r3, #31
 8002136:	dd00      	ble.n	800213a <__aeabi_dsub+0x1a2>
 8002138:	e1e7      	b.n	800250a <__aeabi_dsub+0x572>
 800213a:	2220      	movs	r2, #32
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4661      	mov	r1, ip
 8002142:	4093      	lsls	r3, r2
 8002144:	001d      	movs	r5, r3
 8002146:	4653      	mov	r3, sl
 8002148:	40d9      	lsrs	r1, r3
 800214a:	4663      	mov	r3, ip
 800214c:	4093      	lsls	r3, r2
 800214e:	001a      	movs	r2, r3
 8002150:	430d      	orrs	r5, r1
 8002152:	1e51      	subs	r1, r2, #1
 8002154:	418a      	sbcs	r2, r1
 8002156:	4653      	mov	r3, sl
 8002158:	4315      	orrs	r5, r2
 800215a:	9a02      	ldr	r2, [sp, #8]
 800215c:	40da      	lsrs	r2, r3
 800215e:	18a4      	adds	r4, r4, r2
 8002160:	182d      	adds	r5, r5, r0
 8002162:	4285      	cmp	r5, r0
 8002164:	4180      	sbcs	r0, r0
 8002166:	4240      	negs	r0, r0
 8002168:	1824      	adds	r4, r4, r0
 800216a:	0223      	lsls	r3, r4, #8
 800216c:	d400      	bmi.n	8002170 <__aeabi_dsub+0x1d8>
 800216e:	e0b6      	b.n	80022de <__aeabi_dsub+0x346>
 8002170:	4b5e      	ldr	r3, [pc, #376]	@ (80022ec <__aeabi_dsub+0x354>)
 8002172:	3701      	adds	r7, #1
 8002174:	429f      	cmp	r7, r3
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x1e2>
 8002178:	e0ad      	b.n	80022d6 <__aeabi_dsub+0x33e>
 800217a:	2101      	movs	r1, #1
 800217c:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <__aeabi_dsub+0x358>)
 800217e:	086a      	lsrs	r2, r5, #1
 8002180:	401c      	ands	r4, r3
 8002182:	4029      	ands	r1, r5
 8002184:	430a      	orrs	r2, r1
 8002186:	07e5      	lsls	r5, r4, #31
 8002188:	4315      	orrs	r5, r2
 800218a:	0864      	lsrs	r4, r4, #1
 800218c:	e78d      	b.n	80020aa <__aeabi_dsub+0x112>
 800218e:	4a59      	ldr	r2, [pc, #356]	@ (80022f4 <__aeabi_dsub+0x35c>)
 8002190:	9b02      	ldr	r3, [sp, #8]
 8002192:	4692      	mov	sl, r2
 8002194:	4662      	mov	r2, ip
 8002196:	44ba      	add	sl, r7
 8002198:	431a      	orrs	r2, r3
 800219a:	d02c      	beq.n	80021f6 <__aeabi_dsub+0x25e>
 800219c:	428e      	cmp	r6, r1
 800219e:	d02e      	beq.n	80021fe <__aeabi_dsub+0x266>
 80021a0:	4652      	mov	r2, sl
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d060      	beq.n	8002268 <__aeabi_dsub+0x2d0>
 80021a6:	2f00      	cmp	r7, #0
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x214>
 80021aa:	e0db      	b.n	8002364 <__aeabi_dsub+0x3cc>
 80021ac:	4663      	mov	r3, ip
 80021ae:	000e      	movs	r6, r1
 80021b0:	9c02      	ldr	r4, [sp, #8]
 80021b2:	08d8      	lsrs	r0, r3, #3
 80021b4:	0762      	lsls	r2, r4, #29
 80021b6:	4302      	orrs	r2, r0
 80021b8:	08e4      	lsrs	r4, r4, #3
 80021ba:	0013      	movs	r3, r2
 80021bc:	4323      	orrs	r3, r4
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x22a>
 80021c0:	e254      	b.n	800266c <__aeabi_dsub+0x6d4>
 80021c2:	2580      	movs	r5, #128	@ 0x80
 80021c4:	032d      	lsls	r5, r5, #12
 80021c6:	4325      	orrs	r5, r4
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	4c48      	ldr	r4, [pc, #288]	@ (80022ec <__aeabi_dsub+0x354>)
 80021cc:	0b2d      	lsrs	r5, r5, #12
 80021ce:	e78c      	b.n	80020ea <__aeabi_dsub+0x152>
 80021d0:	4661      	mov	r1, ip
 80021d2:	9b02      	ldr	r3, [sp, #8]
 80021d4:	4319      	orrs	r1, r3
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x242>
 80021d8:	e0cc      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80021da:	0029      	movs	r1, r5
 80021dc:	3901      	subs	r1, #1
 80021de:	2d01      	cmp	r5, #1
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x24c>
 80021e2:	e188      	b.n	80024f6 <__aeabi_dsub+0x55e>
 80021e4:	4295      	cmp	r5, r2
 80021e6:	d100      	bne.n	80021ea <__aeabi_dsub+0x252>
 80021e8:	e0aa      	b.n	8002340 <__aeabi_dsub+0x3a8>
 80021ea:	2501      	movs	r5, #1
 80021ec:	2938      	cmp	r1, #56	@ 0x38
 80021ee:	dd00      	ble.n	80021f2 <__aeabi_dsub+0x25a>
 80021f0:	e72f      	b.n	8002052 <__aeabi_dsub+0xba>
 80021f2:	468a      	mov	sl, r1
 80021f4:	e718      	b.n	8002028 <__aeabi_dsub+0x90>
 80021f6:	2201      	movs	r2, #1
 80021f8:	4051      	eors	r1, r2
 80021fa:	428e      	cmp	r6, r1
 80021fc:	d1d0      	bne.n	80021a0 <__aeabi_dsub+0x208>
 80021fe:	4653      	mov	r3, sl
 8002200:	2b00      	cmp	r3, #0
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x26e>
 8002204:	e0be      	b.n	8002384 <__aeabi_dsub+0x3ec>
 8002206:	2f00      	cmp	r7, #0
 8002208:	d000      	beq.n	800220c <__aeabi_dsub+0x274>
 800220a:	e138      	b.n	800247e <__aeabi_dsub+0x4e6>
 800220c:	46ca      	mov	sl, r9
 800220e:	0022      	movs	r2, r4
 8002210:	4302      	orrs	r2, r0
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x27e>
 8002214:	e1e2      	b.n	80025dc <__aeabi_dsub+0x644>
 8002216:	4653      	mov	r3, sl
 8002218:	1e59      	subs	r1, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x288>
 800221e:	e20d      	b.n	800263c <__aeabi_dsub+0x6a4>
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <__aeabi_dsub+0x354>)
 8002222:	4592      	cmp	sl, r2
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x290>
 8002226:	e1d2      	b.n	80025ce <__aeabi_dsub+0x636>
 8002228:	2701      	movs	r7, #1
 800222a:	2938      	cmp	r1, #56	@ 0x38
 800222c:	dc13      	bgt.n	8002256 <__aeabi_dsub+0x2be>
 800222e:	291f      	cmp	r1, #31
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x29c>
 8002232:	e1ee      	b.n	8002612 <__aeabi_dsub+0x67a>
 8002234:	2220      	movs	r2, #32
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	1a52      	subs	r2, r2, r1
 800223a:	0025      	movs	r5, r4
 800223c:	0007      	movs	r7, r0
 800223e:	469a      	mov	sl, r3
 8002240:	40cc      	lsrs	r4, r1
 8002242:	4090      	lsls	r0, r2
 8002244:	4095      	lsls	r5, r2
 8002246:	40cf      	lsrs	r7, r1
 8002248:	44a2      	add	sl, r4
 800224a:	1e42      	subs	r2, r0, #1
 800224c:	4190      	sbcs	r0, r2
 800224e:	4653      	mov	r3, sl
 8002250:	432f      	orrs	r7, r5
 8002252:	4307      	orrs	r7, r0
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	003d      	movs	r5, r7
 8002258:	4465      	add	r5, ip
 800225a:	4565      	cmp	r5, ip
 800225c:	4192      	sbcs	r2, r2
 800225e:	9b02      	ldr	r3, [sp, #8]
 8002260:	4252      	negs	r2, r2
 8002262:	464f      	mov	r7, r9
 8002264:	18d4      	adds	r4, r2, r3
 8002266:	e780      	b.n	800216a <__aeabi_dsub+0x1d2>
 8002268:	4a23      	ldr	r2, [pc, #140]	@ (80022f8 <__aeabi_dsub+0x360>)
 800226a:	1c7d      	adds	r5, r7, #1
 800226c:	4215      	tst	r5, r2
 800226e:	d000      	beq.n	8002272 <__aeabi_dsub+0x2da>
 8002270:	e0aa      	b.n	80023c8 <__aeabi_dsub+0x430>
 8002272:	4662      	mov	r2, ip
 8002274:	0025      	movs	r5, r4
 8002276:	9b02      	ldr	r3, [sp, #8]
 8002278:	4305      	orrs	r5, r0
 800227a:	431a      	orrs	r2, r3
 800227c:	2f00      	cmp	r7, #0
 800227e:	d000      	beq.n	8002282 <__aeabi_dsub+0x2ea>
 8002280:	e0f5      	b.n	800246e <__aeabi_dsub+0x4d6>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x2f0>
 8002286:	e16b      	b.n	8002560 <__aeabi_dsub+0x5c8>
 8002288:	2a00      	cmp	r2, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x2f6>
 800228c:	e152      	b.n	8002534 <__aeabi_dsub+0x59c>
 800228e:	4663      	mov	r3, ip
 8002290:	1ac5      	subs	r5, r0, r3
 8002292:	9b02      	ldr	r3, [sp, #8]
 8002294:	1ae2      	subs	r2, r4, r3
 8002296:	42a8      	cmp	r0, r5
 8002298:	419b      	sbcs	r3, r3
 800229a:	425b      	negs	r3, r3
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	d400      	bmi.n	80022a4 <__aeabi_dsub+0x30c>
 80022a2:	e1d5      	b.n	8002650 <__aeabi_dsub+0x6b8>
 80022a4:	4663      	mov	r3, ip
 80022a6:	1a1d      	subs	r5, r3, r0
 80022a8:	45ac      	cmp	ip, r5
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	2601      	movs	r6, #1
 80022ae:	9b02      	ldr	r3, [sp, #8]
 80022b0:	4252      	negs	r2, r2
 80022b2:	1b1c      	subs	r4, r3, r4
 80022b4:	4688      	mov	r8, r1
 80022b6:	1aa4      	subs	r4, r4, r2
 80022b8:	400e      	ands	r6, r1
 80022ba:	e6f6      	b.n	80020aa <__aeabi_dsub+0x112>
 80022bc:	4297      	cmp	r7, r2
 80022be:	d03f      	beq.n	8002340 <__aeabi_dsub+0x3a8>
 80022c0:	4652      	mov	r2, sl
 80022c2:	2501      	movs	r5, #1
 80022c4:	2a38      	cmp	r2, #56	@ 0x38
 80022c6:	dd00      	ble.n	80022ca <__aeabi_dsub+0x332>
 80022c8:	e74a      	b.n	8002160 <__aeabi_dsub+0x1c8>
 80022ca:	2280      	movs	r2, #128	@ 0x80
 80022cc:	9b02      	ldr	r3, [sp, #8]
 80022ce:	0412      	lsls	r2, r2, #16
 80022d0:	4313      	orrs	r3, r2
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	e72d      	b.n	8002132 <__aeabi_dsub+0x19a>
 80022d6:	003c      	movs	r4, r7
 80022d8:	2500      	movs	r5, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	e705      	b.n	80020ea <__aeabi_dsub+0x152>
 80022de:	2307      	movs	r3, #7
 80022e0:	402b      	ands	r3, r5
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x350>
 80022e6:	e6e2      	b.n	80020ae <__aeabi_dsub+0x116>
 80022e8:	e06b      	b.n	80023c2 <__aeabi_dsub+0x42a>
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	ff7fffff 	.word	0xff7fffff
 80022f4:	fffff801 	.word	0xfffff801
 80022f8:	000007fe 	.word	0x000007fe
 80022fc:	0028      	movs	r0, r5
 80022fe:	f000 fb63 	bl	80029c8 <__clzsi2>
 8002302:	0003      	movs	r3, r0
 8002304:	3318      	adds	r3, #24
 8002306:	2b1f      	cmp	r3, #31
 8002308:	dc00      	bgt.n	800230c <__aeabi_dsub+0x374>
 800230a:	e6b4      	b.n	8002076 <__aeabi_dsub+0xde>
 800230c:	002a      	movs	r2, r5
 800230e:	3808      	subs	r0, #8
 8002310:	4082      	lsls	r2, r0
 8002312:	429f      	cmp	r7, r3
 8002314:	dd00      	ble.n	8002318 <__aeabi_dsub+0x380>
 8002316:	e0b9      	b.n	800248c <__aeabi_dsub+0x4f4>
 8002318:	1bdb      	subs	r3, r3, r7
 800231a:	1c58      	adds	r0, r3, #1
 800231c:	281f      	cmp	r0, #31
 800231e:	dc00      	bgt.n	8002322 <__aeabi_dsub+0x38a>
 8002320:	e1a0      	b.n	8002664 <__aeabi_dsub+0x6cc>
 8002322:	0015      	movs	r5, r2
 8002324:	3b1f      	subs	r3, #31
 8002326:	40dd      	lsrs	r5, r3
 8002328:	2820      	cmp	r0, #32
 800232a:	d005      	beq.n	8002338 <__aeabi_dsub+0x3a0>
 800232c:	2340      	movs	r3, #64	@ 0x40
 800232e:	1a1b      	subs	r3, r3, r0
 8002330:	409a      	lsls	r2, r3
 8002332:	1e53      	subs	r3, r2, #1
 8002334:	419a      	sbcs	r2, r3
 8002336:	4315      	orrs	r5, r2
 8002338:	2307      	movs	r3, #7
 800233a:	2700      	movs	r7, #0
 800233c:	402b      	ands	r3, r5
 800233e:	e7d0      	b.n	80022e2 <__aeabi_dsub+0x34a>
 8002340:	08c0      	lsrs	r0, r0, #3
 8002342:	0762      	lsls	r2, r4, #29
 8002344:	4302      	orrs	r2, r0
 8002346:	08e4      	lsrs	r4, r4, #3
 8002348:	e737      	b.n	80021ba <__aeabi_dsub+0x222>
 800234a:	08ea      	lsrs	r2, r5, #3
 800234c:	0763      	lsls	r3, r4, #29
 800234e:	431a      	orrs	r2, r3
 8002350:	4bd3      	ldr	r3, [pc, #844]	@ (80026a0 <__aeabi_dsub+0x708>)
 8002352:	08e4      	lsrs	r4, r4, #3
 8002354:	429f      	cmp	r7, r3
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x3c2>
 8002358:	e72f      	b.n	80021ba <__aeabi_dsub+0x222>
 800235a:	0324      	lsls	r4, r4, #12
 800235c:	0b25      	lsrs	r5, r4, #12
 800235e:	057c      	lsls	r4, r7, #21
 8002360:	0d64      	lsrs	r4, r4, #21
 8002362:	e6c2      	b.n	80020ea <__aeabi_dsub+0x152>
 8002364:	46ca      	mov	sl, r9
 8002366:	0022      	movs	r2, r4
 8002368:	4302      	orrs	r2, r0
 800236a:	d158      	bne.n	800241e <__aeabi_dsub+0x486>
 800236c:	4663      	mov	r3, ip
 800236e:	000e      	movs	r6, r1
 8002370:	9c02      	ldr	r4, [sp, #8]
 8002372:	9303      	str	r3, [sp, #12]
 8002374:	9b03      	ldr	r3, [sp, #12]
 8002376:	4657      	mov	r7, sl
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	e7e7      	b.n	800234c <__aeabi_dsub+0x3b4>
 800237c:	4cc9      	ldr	r4, [pc, #804]	@ (80026a4 <__aeabi_dsub+0x70c>)
 800237e:	1aff      	subs	r7, r7, r3
 8002380:	4014      	ands	r4, r2
 8002382:	e692      	b.n	80020aa <__aeabi_dsub+0x112>
 8002384:	4dc8      	ldr	r5, [pc, #800]	@ (80026a8 <__aeabi_dsub+0x710>)
 8002386:	1c7a      	adds	r2, r7, #1
 8002388:	422a      	tst	r2, r5
 800238a:	d000      	beq.n	800238e <__aeabi_dsub+0x3f6>
 800238c:	e084      	b.n	8002498 <__aeabi_dsub+0x500>
 800238e:	0022      	movs	r2, r4
 8002390:	4302      	orrs	r2, r0
 8002392:	2f00      	cmp	r7, #0
 8002394:	d000      	beq.n	8002398 <__aeabi_dsub+0x400>
 8002396:	e0ef      	b.n	8002578 <__aeabi_dsub+0x5e0>
 8002398:	2a00      	cmp	r2, #0
 800239a:	d100      	bne.n	800239e <__aeabi_dsub+0x406>
 800239c:	e0e5      	b.n	800256a <__aeabi_dsub+0x5d2>
 800239e:	4662      	mov	r2, ip
 80023a0:	9902      	ldr	r1, [sp, #8]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x410>
 80023a6:	e0c5      	b.n	8002534 <__aeabi_dsub+0x59c>
 80023a8:	4663      	mov	r3, ip
 80023aa:	18c5      	adds	r5, r0, r3
 80023ac:	468c      	mov	ip, r1
 80023ae:	4285      	cmp	r5, r0
 80023b0:	4180      	sbcs	r0, r0
 80023b2:	4464      	add	r4, ip
 80023b4:	4240      	negs	r0, r0
 80023b6:	1824      	adds	r4, r4, r0
 80023b8:	0223      	lsls	r3, r4, #8
 80023ba:	d502      	bpl.n	80023c2 <__aeabi_dsub+0x42a>
 80023bc:	4bb9      	ldr	r3, [pc, #740]	@ (80026a4 <__aeabi_dsub+0x70c>)
 80023be:	3701      	adds	r7, #1
 80023c0:	401c      	ands	r4, r3
 80023c2:	46ba      	mov	sl, r7
 80023c4:	9503      	str	r5, [sp, #12]
 80023c6:	e7d5      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80023c8:	4662      	mov	r2, ip
 80023ca:	1a85      	subs	r5, r0, r2
 80023cc:	42a8      	cmp	r0, r5
 80023ce:	4192      	sbcs	r2, r2
 80023d0:	4252      	negs	r2, r2
 80023d2:	4691      	mov	r9, r2
 80023d4:	9b02      	ldr	r3, [sp, #8]
 80023d6:	1ae3      	subs	r3, r4, r3
 80023d8:	001a      	movs	r2, r3
 80023da:	464b      	mov	r3, r9
 80023dc:	1ad2      	subs	r2, r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	4691      	mov	r9, r2
 80023e2:	021a      	lsls	r2, r3, #8
 80023e4:	d46c      	bmi.n	80024c0 <__aeabi_dsub+0x528>
 80023e6:	464a      	mov	r2, r9
 80023e8:	464c      	mov	r4, r9
 80023ea:	432a      	orrs	r2, r5
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dsub+0x458>
 80023ee:	e63a      	b.n	8002066 <__aeabi_dsub+0xce>
 80023f0:	2600      	movs	r6, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	2500      	movs	r5, #0
 80023f6:	e678      	b.n	80020ea <__aeabi_dsub+0x152>
 80023f8:	9902      	ldr	r1, [sp, #8]
 80023fa:	4653      	mov	r3, sl
 80023fc:	000d      	movs	r5, r1
 80023fe:	3a20      	subs	r2, #32
 8002400:	40d5      	lsrs	r5, r2
 8002402:	2b20      	cmp	r3, #32
 8002404:	d006      	beq.n	8002414 <__aeabi_dsub+0x47c>
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	1ad2      	subs	r2, r2, r3
 800240a:	000b      	movs	r3, r1
 800240c:	4093      	lsls	r3, r2
 800240e:	4662      	mov	r2, ip
 8002410:	431a      	orrs	r2, r3
 8002412:	4693      	mov	fp, r2
 8002414:	465b      	mov	r3, fp
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	4193      	sbcs	r3, r2
 800241a:	431d      	orrs	r5, r3
 800241c:	e619      	b.n	8002052 <__aeabi_dsub+0xba>
 800241e:	4653      	mov	r3, sl
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x490>
 8002426:	e0c6      	b.n	80025b6 <__aeabi_dsub+0x61e>
 8002428:	4e9d      	ldr	r6, [pc, #628]	@ (80026a0 <__aeabi_dsub+0x708>)
 800242a:	45b2      	cmp	sl, r6
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x498>
 800242e:	e6bd      	b.n	80021ac <__aeabi_dsub+0x214>
 8002430:	4688      	mov	r8, r1
 8002432:	000e      	movs	r6, r1
 8002434:	2501      	movs	r5, #1
 8002436:	2a38      	cmp	r2, #56	@ 0x38
 8002438:	dc10      	bgt.n	800245c <__aeabi_dsub+0x4c4>
 800243a:	2a1f      	cmp	r2, #31
 800243c:	dc7f      	bgt.n	800253e <__aeabi_dsub+0x5a6>
 800243e:	2120      	movs	r1, #32
 8002440:	0025      	movs	r5, r4
 8002442:	1a89      	subs	r1, r1, r2
 8002444:	0007      	movs	r7, r0
 8002446:	4088      	lsls	r0, r1
 8002448:	408d      	lsls	r5, r1
 800244a:	40d7      	lsrs	r7, r2
 800244c:	40d4      	lsrs	r4, r2
 800244e:	1e41      	subs	r1, r0, #1
 8002450:	4188      	sbcs	r0, r1
 8002452:	9b02      	ldr	r3, [sp, #8]
 8002454:	433d      	orrs	r5, r7
 8002456:	1b1b      	subs	r3, r3, r4
 8002458:	4305      	orrs	r5, r0
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	4662      	mov	r2, ip
 800245e:	1b55      	subs	r5, r2, r5
 8002460:	45ac      	cmp	ip, r5
 8002462:	4192      	sbcs	r2, r2
 8002464:	9b02      	ldr	r3, [sp, #8]
 8002466:	4252      	negs	r2, r2
 8002468:	464f      	mov	r7, r9
 800246a:	1a9c      	subs	r4, r3, r2
 800246c:	e5f6      	b.n	800205c <__aeabi_dsub+0xc4>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d000      	beq.n	8002474 <__aeabi_dsub+0x4dc>
 8002472:	e0b7      	b.n	80025e4 <__aeabi_dsub+0x64c>
 8002474:	2a00      	cmp	r2, #0
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x4e2>
 8002478:	e0f0      	b.n	800265c <__aeabi_dsub+0x6c4>
 800247a:	2601      	movs	r6, #1
 800247c:	400e      	ands	r6, r1
 800247e:	4663      	mov	r3, ip
 8002480:	9802      	ldr	r0, [sp, #8]
 8002482:	08d9      	lsrs	r1, r3, #3
 8002484:	0742      	lsls	r2, r0, #29
 8002486:	430a      	orrs	r2, r1
 8002488:	08c4      	lsrs	r4, r0, #3
 800248a:	e696      	b.n	80021ba <__aeabi_dsub+0x222>
 800248c:	4c85      	ldr	r4, [pc, #532]	@ (80026a4 <__aeabi_dsub+0x70c>)
 800248e:	1aff      	subs	r7, r7, r3
 8002490:	4014      	ands	r4, r2
 8002492:	0762      	lsls	r2, r4, #29
 8002494:	08e4      	lsrs	r4, r4, #3
 8002496:	e760      	b.n	800235a <__aeabi_dsub+0x3c2>
 8002498:	4981      	ldr	r1, [pc, #516]	@ (80026a0 <__aeabi_dsub+0x708>)
 800249a:	428a      	cmp	r2, r1
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x508>
 800249e:	e0c9      	b.n	8002634 <__aeabi_dsub+0x69c>
 80024a0:	4663      	mov	r3, ip
 80024a2:	18c1      	adds	r1, r0, r3
 80024a4:	4281      	cmp	r1, r0
 80024a6:	4180      	sbcs	r0, r0
 80024a8:	9b02      	ldr	r3, [sp, #8]
 80024aa:	4240      	negs	r0, r0
 80024ac:	18e3      	adds	r3, r4, r3
 80024ae:	181b      	adds	r3, r3, r0
 80024b0:	07dd      	lsls	r5, r3, #31
 80024b2:	085c      	lsrs	r4, r3, #1
 80024b4:	2307      	movs	r3, #7
 80024b6:	0849      	lsrs	r1, r1, #1
 80024b8:	430d      	orrs	r5, r1
 80024ba:	0017      	movs	r7, r2
 80024bc:	402b      	ands	r3, r5
 80024be:	e710      	b.n	80022e2 <__aeabi_dsub+0x34a>
 80024c0:	4663      	mov	r3, ip
 80024c2:	1a1d      	subs	r5, r3, r0
 80024c4:	45ac      	cmp	ip, r5
 80024c6:	4192      	sbcs	r2, r2
 80024c8:	2601      	movs	r6, #1
 80024ca:	9b02      	ldr	r3, [sp, #8]
 80024cc:	4252      	negs	r2, r2
 80024ce:	1b1c      	subs	r4, r3, r4
 80024d0:	4688      	mov	r8, r1
 80024d2:	1aa4      	subs	r4, r4, r2
 80024d4:	400e      	ands	r6, r1
 80024d6:	e5c6      	b.n	8002066 <__aeabi_dsub+0xce>
 80024d8:	4663      	mov	r3, ip
 80024da:	18c5      	adds	r5, r0, r3
 80024dc:	9b02      	ldr	r3, [sp, #8]
 80024de:	4285      	cmp	r5, r0
 80024e0:	4180      	sbcs	r0, r0
 80024e2:	469c      	mov	ip, r3
 80024e4:	4240      	negs	r0, r0
 80024e6:	4464      	add	r4, ip
 80024e8:	1824      	adds	r4, r4, r0
 80024ea:	2701      	movs	r7, #1
 80024ec:	0223      	lsls	r3, r4, #8
 80024ee:	d400      	bmi.n	80024f2 <__aeabi_dsub+0x55a>
 80024f0:	e6f5      	b.n	80022de <__aeabi_dsub+0x346>
 80024f2:	2702      	movs	r7, #2
 80024f4:	e641      	b.n	800217a <__aeabi_dsub+0x1e2>
 80024f6:	4663      	mov	r3, ip
 80024f8:	1ac5      	subs	r5, r0, r3
 80024fa:	42a8      	cmp	r0, r5
 80024fc:	4180      	sbcs	r0, r0
 80024fe:	9b02      	ldr	r3, [sp, #8]
 8002500:	4240      	negs	r0, r0
 8002502:	1ae4      	subs	r4, r4, r3
 8002504:	2701      	movs	r7, #1
 8002506:	1a24      	subs	r4, r4, r0
 8002508:	e5a8      	b.n	800205c <__aeabi_dsub+0xc4>
 800250a:	9d02      	ldr	r5, [sp, #8]
 800250c:	4652      	mov	r2, sl
 800250e:	002b      	movs	r3, r5
 8002510:	3a20      	subs	r2, #32
 8002512:	40d3      	lsrs	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	4653      	mov	r3, sl
 8002518:	2b20      	cmp	r3, #32
 800251a:	d006      	beq.n	800252a <__aeabi_dsub+0x592>
 800251c:	2240      	movs	r2, #64	@ 0x40
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	002b      	movs	r3, r5
 8002522:	4093      	lsls	r3, r2
 8002524:	4662      	mov	r2, ip
 8002526:	431a      	orrs	r2, r3
 8002528:	4693      	mov	fp, r2
 800252a:	465d      	mov	r5, fp
 800252c:	1e6b      	subs	r3, r5, #1
 800252e:	419d      	sbcs	r5, r3
 8002530:	430d      	orrs	r5, r1
 8002532:	e615      	b.n	8002160 <__aeabi_dsub+0x1c8>
 8002534:	0762      	lsls	r2, r4, #29
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4302      	orrs	r2, r0
 800253a:	08e4      	lsrs	r4, r4, #3
 800253c:	e70d      	b.n	800235a <__aeabi_dsub+0x3c2>
 800253e:	0011      	movs	r1, r2
 8002540:	0027      	movs	r7, r4
 8002542:	3920      	subs	r1, #32
 8002544:	40cf      	lsrs	r7, r1
 8002546:	2a20      	cmp	r2, #32
 8002548:	d005      	beq.n	8002556 <__aeabi_dsub+0x5be>
 800254a:	2140      	movs	r1, #64	@ 0x40
 800254c:	1a8a      	subs	r2, r1, r2
 800254e:	4094      	lsls	r4, r2
 8002550:	0025      	movs	r5, r4
 8002552:	4305      	orrs	r5, r0
 8002554:	9503      	str	r5, [sp, #12]
 8002556:	9d03      	ldr	r5, [sp, #12]
 8002558:	1e6a      	subs	r2, r5, #1
 800255a:	4195      	sbcs	r5, r2
 800255c:	433d      	orrs	r5, r7
 800255e:	e77d      	b.n	800245c <__aeabi_dsub+0x4c4>
 8002560:	2a00      	cmp	r2, #0
 8002562:	d100      	bne.n	8002566 <__aeabi_dsub+0x5ce>
 8002564:	e744      	b.n	80023f0 <__aeabi_dsub+0x458>
 8002566:	2601      	movs	r6, #1
 8002568:	400e      	ands	r6, r1
 800256a:	4663      	mov	r3, ip
 800256c:	08d9      	lsrs	r1, r3, #3
 800256e:	9b02      	ldr	r3, [sp, #8]
 8002570:	075a      	lsls	r2, r3, #29
 8002572:	430a      	orrs	r2, r1
 8002574:	08dc      	lsrs	r4, r3, #3
 8002576:	e6f0      	b.n	800235a <__aeabi_dsub+0x3c2>
 8002578:	2a00      	cmp	r2, #0
 800257a:	d028      	beq.n	80025ce <__aeabi_dsub+0x636>
 800257c:	4662      	mov	r2, ip
 800257e:	9f02      	ldr	r7, [sp, #8]
 8002580:	08c0      	lsrs	r0, r0, #3
 8002582:	433a      	orrs	r2, r7
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x5f0>
 8002586:	e6dc      	b.n	8002342 <__aeabi_dsub+0x3aa>
 8002588:	0762      	lsls	r2, r4, #29
 800258a:	4310      	orrs	r0, r2
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	08e4      	lsrs	r4, r4, #3
 8002590:	0312      	lsls	r2, r2, #12
 8002592:	4214      	tst	r4, r2
 8002594:	d009      	beq.n	80025aa <__aeabi_dsub+0x612>
 8002596:	08fd      	lsrs	r5, r7, #3
 8002598:	4215      	tst	r5, r2
 800259a:	d106      	bne.n	80025aa <__aeabi_dsub+0x612>
 800259c:	4663      	mov	r3, ip
 800259e:	2601      	movs	r6, #1
 80025a0:	002c      	movs	r4, r5
 80025a2:	08d8      	lsrs	r0, r3, #3
 80025a4:	077b      	lsls	r3, r7, #29
 80025a6:	4318      	orrs	r0, r3
 80025a8:	400e      	ands	r6, r1
 80025aa:	0f42      	lsrs	r2, r0, #29
 80025ac:	00c0      	lsls	r0, r0, #3
 80025ae:	08c0      	lsrs	r0, r0, #3
 80025b0:	0752      	lsls	r2, r2, #29
 80025b2:	4302      	orrs	r2, r0
 80025b4:	e601      	b.n	80021ba <__aeabi_dsub+0x222>
 80025b6:	4663      	mov	r3, ip
 80025b8:	1a1d      	subs	r5, r3, r0
 80025ba:	45ac      	cmp	ip, r5
 80025bc:	4192      	sbcs	r2, r2
 80025be:	9b02      	ldr	r3, [sp, #8]
 80025c0:	4252      	negs	r2, r2
 80025c2:	1b1c      	subs	r4, r3, r4
 80025c4:	000e      	movs	r6, r1
 80025c6:	4688      	mov	r8, r1
 80025c8:	2701      	movs	r7, #1
 80025ca:	1aa4      	subs	r4, r4, r2
 80025cc:	e546      	b.n	800205c <__aeabi_dsub+0xc4>
 80025ce:	4663      	mov	r3, ip
 80025d0:	08d9      	lsrs	r1, r3, #3
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	075a      	lsls	r2, r3, #29
 80025d6:	430a      	orrs	r2, r1
 80025d8:	08dc      	lsrs	r4, r3, #3
 80025da:	e5ee      	b.n	80021ba <__aeabi_dsub+0x222>
 80025dc:	4663      	mov	r3, ip
 80025de:	9c02      	ldr	r4, [sp, #8]
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	e6c7      	b.n	8002374 <__aeabi_dsub+0x3dc>
 80025e4:	08c0      	lsrs	r0, r0, #3
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x654>
 80025ea:	e6aa      	b.n	8002342 <__aeabi_dsub+0x3aa>
 80025ec:	0762      	lsls	r2, r4, #29
 80025ee:	4310      	orrs	r0, r2
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	08e4      	lsrs	r4, r4, #3
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d0d7      	beq.n	80025aa <__aeabi_dsub+0x612>
 80025fa:	9f02      	ldr	r7, [sp, #8]
 80025fc:	08fd      	lsrs	r5, r7, #3
 80025fe:	4215      	tst	r5, r2
 8002600:	d1d3      	bne.n	80025aa <__aeabi_dsub+0x612>
 8002602:	4663      	mov	r3, ip
 8002604:	2601      	movs	r6, #1
 8002606:	08d8      	lsrs	r0, r3, #3
 8002608:	077b      	lsls	r3, r7, #29
 800260a:	002c      	movs	r4, r5
 800260c:	4318      	orrs	r0, r3
 800260e:	400e      	ands	r6, r1
 8002610:	e7cb      	b.n	80025aa <__aeabi_dsub+0x612>
 8002612:	000a      	movs	r2, r1
 8002614:	0027      	movs	r7, r4
 8002616:	3a20      	subs	r2, #32
 8002618:	40d7      	lsrs	r7, r2
 800261a:	2920      	cmp	r1, #32
 800261c:	d005      	beq.n	800262a <__aeabi_dsub+0x692>
 800261e:	2240      	movs	r2, #64	@ 0x40
 8002620:	1a52      	subs	r2, r2, r1
 8002622:	4094      	lsls	r4, r2
 8002624:	0025      	movs	r5, r4
 8002626:	4305      	orrs	r5, r0
 8002628:	9503      	str	r5, [sp, #12]
 800262a:	9d03      	ldr	r5, [sp, #12]
 800262c:	1e6a      	subs	r2, r5, #1
 800262e:	4195      	sbcs	r5, r2
 8002630:	432f      	orrs	r7, r5
 8002632:	e610      	b.n	8002256 <__aeabi_dsub+0x2be>
 8002634:	0014      	movs	r4, r2
 8002636:	2500      	movs	r5, #0
 8002638:	2200      	movs	r2, #0
 800263a:	e556      	b.n	80020ea <__aeabi_dsub+0x152>
 800263c:	9b02      	ldr	r3, [sp, #8]
 800263e:	4460      	add	r0, ip
 8002640:	4699      	mov	r9, r3
 8002642:	4560      	cmp	r0, ip
 8002644:	4192      	sbcs	r2, r2
 8002646:	444c      	add	r4, r9
 8002648:	4252      	negs	r2, r2
 800264a:	0005      	movs	r5, r0
 800264c:	18a4      	adds	r4, r4, r2
 800264e:	e74c      	b.n	80024ea <__aeabi_dsub+0x552>
 8002650:	001a      	movs	r2, r3
 8002652:	001c      	movs	r4, r3
 8002654:	432a      	orrs	r2, r5
 8002656:	d000      	beq.n	800265a <__aeabi_dsub+0x6c2>
 8002658:	e6b3      	b.n	80023c2 <__aeabi_dsub+0x42a>
 800265a:	e6c9      	b.n	80023f0 <__aeabi_dsub+0x458>
 800265c:	2480      	movs	r4, #128	@ 0x80
 800265e:	2600      	movs	r6, #0
 8002660:	0324      	lsls	r4, r4, #12
 8002662:	e5ae      	b.n	80021c2 <__aeabi_dsub+0x22a>
 8002664:	2120      	movs	r1, #32
 8002666:	2500      	movs	r5, #0
 8002668:	1a09      	subs	r1, r1, r0
 800266a:	e517      	b.n	800209c <__aeabi_dsub+0x104>
 800266c:	2200      	movs	r2, #0
 800266e:	2500      	movs	r5, #0
 8002670:	4c0b      	ldr	r4, [pc, #44]	@ (80026a0 <__aeabi_dsub+0x708>)
 8002672:	e53a      	b.n	80020ea <__aeabi_dsub+0x152>
 8002674:	2d00      	cmp	r5, #0
 8002676:	d100      	bne.n	800267a <__aeabi_dsub+0x6e2>
 8002678:	e5f6      	b.n	8002268 <__aeabi_dsub+0x2d0>
 800267a:	464b      	mov	r3, r9
 800267c:	1bda      	subs	r2, r3, r7
 800267e:	4692      	mov	sl, r2
 8002680:	2f00      	cmp	r7, #0
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x6ee>
 8002684:	e66f      	b.n	8002366 <__aeabi_dsub+0x3ce>
 8002686:	2a38      	cmp	r2, #56	@ 0x38
 8002688:	dc05      	bgt.n	8002696 <__aeabi_dsub+0x6fe>
 800268a:	2680      	movs	r6, #128	@ 0x80
 800268c:	0436      	lsls	r6, r6, #16
 800268e:	4334      	orrs	r4, r6
 8002690:	4688      	mov	r8, r1
 8002692:	000e      	movs	r6, r1
 8002694:	e6d1      	b.n	800243a <__aeabi_dsub+0x4a2>
 8002696:	4688      	mov	r8, r1
 8002698:	000e      	movs	r6, r1
 800269a:	2501      	movs	r5, #1
 800269c:	e6de      	b.n	800245c <__aeabi_dsub+0x4c4>
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	000007ff 	.word	0x000007ff
 80026a4:	ff7fffff 	.word	0xff7fffff
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x71a>
 80026b0:	e668      	b.n	8002384 <__aeabi_dsub+0x3ec>
 80026b2:	464b      	mov	r3, r9
 80026b4:	1bd9      	subs	r1, r3, r7
 80026b6:	2f00      	cmp	r7, #0
 80026b8:	d101      	bne.n	80026be <__aeabi_dsub+0x726>
 80026ba:	468a      	mov	sl, r1
 80026bc:	e5a7      	b.n	800220e <__aeabi_dsub+0x276>
 80026be:	2701      	movs	r7, #1
 80026c0:	2938      	cmp	r1, #56	@ 0x38
 80026c2:	dd00      	ble.n	80026c6 <__aeabi_dsub+0x72e>
 80026c4:	e5c7      	b.n	8002256 <__aeabi_dsub+0x2be>
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	0412      	lsls	r2, r2, #16
 80026ca:	4314      	orrs	r4, r2
 80026cc:	e5af      	b.n	800222e <__aeabi_dsub+0x296>
 80026ce:	46c0      	nop			@ (mov r8, r8)

080026d0 <__aeabi_dcmpun>:
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	46c6      	mov	lr, r8
 80026d4:	031e      	lsls	r6, r3, #12
 80026d6:	0b36      	lsrs	r6, r6, #12
 80026d8:	46b0      	mov	r8, r6
 80026da:	4e0d      	ldr	r6, [pc, #52]	@ (8002710 <__aeabi_dcmpun+0x40>)
 80026dc:	030c      	lsls	r4, r1, #12
 80026de:	004d      	lsls	r5, r1, #1
 80026e0:	005f      	lsls	r7, r3, #1
 80026e2:	b500      	push	{lr}
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	0d6d      	lsrs	r5, r5, #21
 80026e8:	0d7f      	lsrs	r7, r7, #21
 80026ea:	42b5      	cmp	r5, r6
 80026ec:	d00b      	beq.n	8002706 <__aeabi_dcmpun+0x36>
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <__aeabi_dcmpun+0x40>)
 80026f0:	2000      	movs	r0, #0
 80026f2:	428f      	cmp	r7, r1
 80026f4:	d104      	bne.n	8002700 <__aeabi_dcmpun+0x30>
 80026f6:	4646      	mov	r6, r8
 80026f8:	4316      	orrs	r6, r2
 80026fa:	0030      	movs	r0, r6
 80026fc:	1e43      	subs	r3, r0, #1
 80026fe:	4198      	sbcs	r0, r3
 8002700:	bc80      	pop	{r7}
 8002702:	46b8      	mov	r8, r7
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002706:	4304      	orrs	r4, r0
 8002708:	2001      	movs	r0, #1
 800270a:	2c00      	cmp	r4, #0
 800270c:	d1f8      	bne.n	8002700 <__aeabi_dcmpun+0x30>
 800270e:	e7ee      	b.n	80026ee <__aeabi_dcmpun+0x1e>
 8002710:	000007ff 	.word	0x000007ff

08002714 <__aeabi_d2iz>:
 8002714:	000b      	movs	r3, r1
 8002716:	0002      	movs	r2, r0
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4d16      	ldr	r5, [pc, #88]	@ (8002774 <__aeabi_d2iz+0x60>)
 800271c:	030c      	lsls	r4, r1, #12
 800271e:	b082      	sub	sp, #8
 8002720:	0049      	lsls	r1, r1, #1
 8002722:	2000      	movs	r0, #0
 8002724:	9200      	str	r2, [sp, #0]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	0d49      	lsrs	r1, r1, #21
 800272c:	0fde      	lsrs	r6, r3, #31
 800272e:	42a9      	cmp	r1, r5
 8002730:	dd04      	ble.n	800273c <__aeabi_d2iz+0x28>
 8002732:	4811      	ldr	r0, [pc, #68]	@ (8002778 <__aeabi_d2iz+0x64>)
 8002734:	4281      	cmp	r1, r0
 8002736:	dd03      	ble.n	8002740 <__aeabi_d2iz+0x2c>
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <__aeabi_d2iz+0x68>)
 800273a:	18f0      	adds	r0, r6, r3
 800273c:	b002      	add	sp, #8
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	2080      	movs	r0, #128	@ 0x80
 8002742:	0340      	lsls	r0, r0, #13
 8002744:	4320      	orrs	r0, r4
 8002746:	4c0e      	ldr	r4, [pc, #56]	@ (8002780 <__aeabi_d2iz+0x6c>)
 8002748:	1a64      	subs	r4, r4, r1
 800274a:	2c1f      	cmp	r4, #31
 800274c:	dd08      	ble.n	8002760 <__aeabi_d2iz+0x4c>
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <__aeabi_d2iz+0x70>)
 8002750:	1a5b      	subs	r3, r3, r1
 8002752:	40d8      	lsrs	r0, r3
 8002754:	0003      	movs	r3, r0
 8002756:	4258      	negs	r0, r3
 8002758:	2e00      	cmp	r6, #0
 800275a:	d1ef      	bne.n	800273c <__aeabi_d2iz+0x28>
 800275c:	0018      	movs	r0, r3
 800275e:	e7ed      	b.n	800273c <__aeabi_d2iz+0x28>
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <__aeabi_d2iz+0x74>)
 8002762:	9a00      	ldr	r2, [sp, #0]
 8002764:	469c      	mov	ip, r3
 8002766:	0003      	movs	r3, r0
 8002768:	4461      	add	r1, ip
 800276a:	408b      	lsls	r3, r1
 800276c:	40e2      	lsrs	r2, r4
 800276e:	4313      	orrs	r3, r2
 8002770:	e7f1      	b.n	8002756 <__aeabi_d2iz+0x42>
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	000003fe 	.word	0x000003fe
 8002778:	0000041d 	.word	0x0000041d
 800277c:	7fffffff 	.word	0x7fffffff
 8002780:	00000433 	.word	0x00000433
 8002784:	00000413 	.word	0x00000413
 8002788:	fffffbed 	.word	0xfffffbed

0800278c <__aeabi_i2d>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2800      	cmp	r0, #0
 8002790:	d016      	beq.n	80027c0 <__aeabi_i2d+0x34>
 8002792:	17c3      	asrs	r3, r0, #31
 8002794:	18c5      	adds	r5, r0, r3
 8002796:	405d      	eors	r5, r3
 8002798:	0fc4      	lsrs	r4, r0, #31
 800279a:	0028      	movs	r0, r5
 800279c:	f000 f914 	bl	80029c8 <__clzsi2>
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <__aeabi_i2d+0x58>)
 80027a2:	1a1b      	subs	r3, r3, r0
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	0d5b      	lsrs	r3, r3, #21
 80027a8:	280a      	cmp	r0, #10
 80027aa:	dc14      	bgt.n	80027d6 <__aeabi_i2d+0x4a>
 80027ac:	0002      	movs	r2, r0
 80027ae:	002e      	movs	r6, r5
 80027b0:	3215      	adds	r2, #21
 80027b2:	4096      	lsls	r6, r2
 80027b4:	220b      	movs	r2, #11
 80027b6:	1a12      	subs	r2, r2, r0
 80027b8:	40d5      	lsrs	r5, r2
 80027ba:	032d      	lsls	r5, r5, #12
 80027bc:	0b2d      	lsrs	r5, r5, #12
 80027be:	e003      	b.n	80027c8 <__aeabi_i2d+0x3c>
 80027c0:	2400      	movs	r4, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	2500      	movs	r5, #0
 80027c6:	2600      	movs	r6, #0
 80027c8:	051b      	lsls	r3, r3, #20
 80027ca:	432b      	orrs	r3, r5
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4323      	orrs	r3, r4
 80027d0:	0030      	movs	r0, r6
 80027d2:	0019      	movs	r1, r3
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
 80027d6:	380b      	subs	r0, #11
 80027d8:	4085      	lsls	r5, r0
 80027da:	032d      	lsls	r5, r5, #12
 80027dc:	2600      	movs	r6, #0
 80027de:	0b2d      	lsrs	r5, r5, #12
 80027e0:	e7f2      	b.n	80027c8 <__aeabi_i2d+0x3c>
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	0000041e 	.word	0x0000041e

080027e8 <__aeabi_ui2d>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	1e04      	subs	r4, r0, #0
 80027ec:	d010      	beq.n	8002810 <__aeabi_ui2d+0x28>
 80027ee:	f000 f8eb 	bl	80029c8 <__clzsi2>
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <__aeabi_ui2d+0x44>)
 80027f4:	1a1b      	subs	r3, r3, r0
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	0d5b      	lsrs	r3, r3, #21
 80027fa:	280a      	cmp	r0, #10
 80027fc:	dc0f      	bgt.n	800281e <__aeabi_ui2d+0x36>
 80027fe:	220b      	movs	r2, #11
 8002800:	0021      	movs	r1, r4
 8002802:	1a12      	subs	r2, r2, r0
 8002804:	40d1      	lsrs	r1, r2
 8002806:	3015      	adds	r0, #21
 8002808:	030a      	lsls	r2, r1, #12
 800280a:	4084      	lsls	r4, r0
 800280c:	0b12      	lsrs	r2, r2, #12
 800280e:	e001      	b.n	8002814 <__aeabi_ui2d+0x2c>
 8002810:	2300      	movs	r3, #0
 8002812:	2200      	movs	r2, #0
 8002814:	051b      	lsls	r3, r3, #20
 8002816:	4313      	orrs	r3, r2
 8002818:	0020      	movs	r0, r4
 800281a:	0019      	movs	r1, r3
 800281c:	bd10      	pop	{r4, pc}
 800281e:	0022      	movs	r2, r4
 8002820:	380b      	subs	r0, #11
 8002822:	4082      	lsls	r2, r0
 8002824:	0312      	lsls	r2, r2, #12
 8002826:	2400      	movs	r4, #0
 8002828:	0b12      	lsrs	r2, r2, #12
 800282a:	e7f3      	b.n	8002814 <__aeabi_ui2d+0x2c>
 800282c:	0000041e 	.word	0x0000041e

08002830 <__aeabi_f2d>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	0242      	lsls	r2, r0, #9
 8002834:	0043      	lsls	r3, r0, #1
 8002836:	0fc4      	lsrs	r4, r0, #31
 8002838:	20fe      	movs	r0, #254	@ 0xfe
 800283a:	0e1b      	lsrs	r3, r3, #24
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	0a55      	lsrs	r5, r2, #9
 8002840:	4208      	tst	r0, r1
 8002842:	d00c      	beq.n	800285e <__aeabi_f2d+0x2e>
 8002844:	21e0      	movs	r1, #224	@ 0xe0
 8002846:	0089      	lsls	r1, r1, #2
 8002848:	468c      	mov	ip, r1
 800284a:	076d      	lsls	r5, r5, #29
 800284c:	0b12      	lsrs	r2, r2, #12
 800284e:	4463      	add	r3, ip
 8002850:	051b      	lsls	r3, r3, #20
 8002852:	4313      	orrs	r3, r2
 8002854:	07e4      	lsls	r4, r4, #31
 8002856:	4323      	orrs	r3, r4
 8002858:	0028      	movs	r0, r5
 800285a:	0019      	movs	r1, r3
 800285c:	bd70      	pop	{r4, r5, r6, pc}
 800285e:	2b00      	cmp	r3, #0
 8002860:	d114      	bne.n	800288c <__aeabi_f2d+0x5c>
 8002862:	2d00      	cmp	r5, #0
 8002864:	d01b      	beq.n	800289e <__aeabi_f2d+0x6e>
 8002866:	0028      	movs	r0, r5
 8002868:	f000 f8ae 	bl	80029c8 <__clzsi2>
 800286c:	280a      	cmp	r0, #10
 800286e:	dc1c      	bgt.n	80028aa <__aeabi_f2d+0x7a>
 8002870:	230b      	movs	r3, #11
 8002872:	002a      	movs	r2, r5
 8002874:	1a1b      	subs	r3, r3, r0
 8002876:	40da      	lsrs	r2, r3
 8002878:	0003      	movs	r3, r0
 800287a:	3315      	adds	r3, #21
 800287c:	409d      	lsls	r5, r3
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <__aeabi_f2d+0x88>)
 8002880:	0312      	lsls	r2, r2, #12
 8002882:	1a1b      	subs	r3, r3, r0
 8002884:	055b      	lsls	r3, r3, #21
 8002886:	0b12      	lsrs	r2, r2, #12
 8002888:	0d5b      	lsrs	r3, r3, #21
 800288a:	e7e1      	b.n	8002850 <__aeabi_f2d+0x20>
 800288c:	2d00      	cmp	r5, #0
 800288e:	d009      	beq.n	80028a4 <__aeabi_f2d+0x74>
 8002890:	0b13      	lsrs	r3, r2, #12
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	0312      	lsls	r2, r2, #12
 8002896:	431a      	orrs	r2, r3
 8002898:	076d      	lsls	r5, r5, #29
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <__aeabi_f2d+0x8c>)
 800289c:	e7d8      	b.n	8002850 <__aeabi_f2d+0x20>
 800289e:	2300      	movs	r3, #0
 80028a0:	2200      	movs	r2, #0
 80028a2:	e7d5      	b.n	8002850 <__aeabi_f2d+0x20>
 80028a4:	2200      	movs	r2, #0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <__aeabi_f2d+0x8c>)
 80028a8:	e7d2      	b.n	8002850 <__aeabi_f2d+0x20>
 80028aa:	0003      	movs	r3, r0
 80028ac:	002a      	movs	r2, r5
 80028ae:	3b0b      	subs	r3, #11
 80028b0:	409a      	lsls	r2, r3
 80028b2:	2500      	movs	r5, #0
 80028b4:	e7e3      	b.n	800287e <__aeabi_f2d+0x4e>
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	00000389 	.word	0x00000389
 80028bc:	000007ff 	.word	0x000007ff

080028c0 <__aeabi_d2f>:
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	004b      	lsls	r3, r1, #1
 80028c4:	030f      	lsls	r7, r1, #12
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	4c3b      	ldr	r4, [pc, #236]	@ (80029b8 <__aeabi_d2f+0xf8>)
 80028ca:	0f45      	lsrs	r5, r0, #29
 80028cc:	b083      	sub	sp, #12
 80028ce:	0a7f      	lsrs	r7, r7, #9
 80028d0:	1c5e      	adds	r6, r3, #1
 80028d2:	432f      	orrs	r7, r5
 80028d4:	9000      	str	r0, [sp, #0]
 80028d6:	9101      	str	r1, [sp, #4]
 80028d8:	0fca      	lsrs	r2, r1, #31
 80028da:	00c5      	lsls	r5, r0, #3
 80028dc:	4226      	tst	r6, r4
 80028de:	d00b      	beq.n	80028f8 <__aeabi_d2f+0x38>
 80028e0:	4936      	ldr	r1, [pc, #216]	@ (80029bc <__aeabi_d2f+0xfc>)
 80028e2:	185c      	adds	r4, r3, r1
 80028e4:	2cfe      	cmp	r4, #254	@ 0xfe
 80028e6:	dd13      	ble.n	8002910 <__aeabi_d2f+0x50>
 80028e8:	20ff      	movs	r0, #255	@ 0xff
 80028ea:	2300      	movs	r3, #0
 80028ec:	05c0      	lsls	r0, r0, #23
 80028ee:	4318      	orrs	r0, r3
 80028f0:	07d2      	lsls	r2, r2, #31
 80028f2:	4310      	orrs	r0, r2
 80028f4:	b003      	add	sp, #12
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <__aeabi_d2f+0x42>
 80028fc:	2000      	movs	r0, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	e7f4      	b.n	80028ec <__aeabi_d2f+0x2c>
 8002902:	433d      	orrs	r5, r7
 8002904:	d0f0      	beq.n	80028e8 <__aeabi_d2f+0x28>
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	03db      	lsls	r3, r3, #15
 800290a:	20ff      	movs	r0, #255	@ 0xff
 800290c:	433b      	orrs	r3, r7
 800290e:	e7ed      	b.n	80028ec <__aeabi_d2f+0x2c>
 8002910:	2c00      	cmp	r4, #0
 8002912:	dd14      	ble.n	800293e <__aeabi_d2f+0x7e>
 8002914:	9b00      	ldr	r3, [sp, #0]
 8002916:	00ff      	lsls	r7, r7, #3
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	4183      	sbcs	r3, r0
 800291e:	0f69      	lsrs	r1, r5, #29
 8002920:	433b      	orrs	r3, r7
 8002922:	430b      	orrs	r3, r1
 8002924:	0759      	lsls	r1, r3, #29
 8002926:	d041      	beq.n	80029ac <__aeabi_d2f+0xec>
 8002928:	210f      	movs	r1, #15
 800292a:	4019      	ands	r1, r3
 800292c:	2904      	cmp	r1, #4
 800292e:	d028      	beq.n	8002982 <__aeabi_d2f+0xc2>
 8002930:	3304      	adds	r3, #4
 8002932:	0159      	lsls	r1, r3, #5
 8002934:	d525      	bpl.n	8002982 <__aeabi_d2f+0xc2>
 8002936:	3401      	adds	r4, #1
 8002938:	2300      	movs	r3, #0
 800293a:	b2e0      	uxtb	r0, r4
 800293c:	e7d6      	b.n	80028ec <__aeabi_d2f+0x2c>
 800293e:	0021      	movs	r1, r4
 8002940:	3117      	adds	r1, #23
 8002942:	dbdb      	blt.n	80028fc <__aeabi_d2f+0x3c>
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	201e      	movs	r0, #30
 8002948:	0409      	lsls	r1, r1, #16
 800294a:	4339      	orrs	r1, r7
 800294c:	1b00      	subs	r0, r0, r4
 800294e:	281f      	cmp	r0, #31
 8002950:	dd1b      	ble.n	800298a <__aeabi_d2f+0xca>
 8002952:	2602      	movs	r6, #2
 8002954:	4276      	negs	r6, r6
 8002956:	1b34      	subs	r4, r6, r4
 8002958:	000e      	movs	r6, r1
 800295a:	40e6      	lsrs	r6, r4
 800295c:	0034      	movs	r4, r6
 800295e:	2820      	cmp	r0, #32
 8002960:	d004      	beq.n	800296c <__aeabi_d2f+0xac>
 8002962:	4817      	ldr	r0, [pc, #92]	@ (80029c0 <__aeabi_d2f+0x100>)
 8002964:	4684      	mov	ip, r0
 8002966:	4463      	add	r3, ip
 8002968:	4099      	lsls	r1, r3
 800296a:	430d      	orrs	r5, r1
 800296c:	002b      	movs	r3, r5
 800296e:	1e59      	subs	r1, r3, #1
 8002970:	418b      	sbcs	r3, r1
 8002972:	4323      	orrs	r3, r4
 8002974:	0759      	lsls	r1, r3, #29
 8002976:	d015      	beq.n	80029a4 <__aeabi_d2f+0xe4>
 8002978:	210f      	movs	r1, #15
 800297a:	2400      	movs	r4, #0
 800297c:	4019      	ands	r1, r3
 800297e:	2904      	cmp	r1, #4
 8002980:	d117      	bne.n	80029b2 <__aeabi_d2f+0xf2>
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	0a5b      	lsrs	r3, r3, #9
 8002986:	b2e0      	uxtb	r0, r4
 8002988:	e7b0      	b.n	80028ec <__aeabi_d2f+0x2c>
 800298a:	4c0e      	ldr	r4, [pc, #56]	@ (80029c4 <__aeabi_d2f+0x104>)
 800298c:	191c      	adds	r4, r3, r4
 800298e:	002b      	movs	r3, r5
 8002990:	40a5      	lsls	r5, r4
 8002992:	40c3      	lsrs	r3, r0
 8002994:	40a1      	lsls	r1, r4
 8002996:	1e68      	subs	r0, r5, #1
 8002998:	4185      	sbcs	r5, r0
 800299a:	4329      	orrs	r1, r5
 800299c:	430b      	orrs	r3, r1
 800299e:	2400      	movs	r4, #0
 80029a0:	0759      	lsls	r1, r3, #29
 80029a2:	d1c1      	bne.n	8002928 <__aeabi_d2f+0x68>
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	2000      	movs	r0, #0
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	e79f      	b.n	80028ec <__aeabi_d2f+0x2c>
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	b2e0      	uxtb	r0, r4
 80029b0:	e79c      	b.n	80028ec <__aeabi_d2f+0x2c>
 80029b2:	3304      	adds	r3, #4
 80029b4:	e7e5      	b.n	8002982 <__aeabi_d2f+0xc2>
 80029b6:	46c0      	nop			@ (mov r8, r8)
 80029b8:	000007fe 	.word	0x000007fe
 80029bc:	fffffc80 	.word	0xfffffc80
 80029c0:	fffffca2 	.word	0xfffffca2
 80029c4:	fffffc82 	.word	0xfffffc82

080029c8 <__clzsi2>:
 80029c8:	211c      	movs	r1, #28
 80029ca:	2301      	movs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	4298      	cmp	r0, r3
 80029d0:	d301      	bcc.n	80029d6 <__clzsi2+0xe>
 80029d2:	0c00      	lsrs	r0, r0, #16
 80029d4:	3910      	subs	r1, #16
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	4298      	cmp	r0, r3
 80029da:	d301      	bcc.n	80029e0 <__clzsi2+0x18>
 80029dc:	0a00      	lsrs	r0, r0, #8
 80029de:	3908      	subs	r1, #8
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	4298      	cmp	r0, r3
 80029e4:	d301      	bcc.n	80029ea <__clzsi2+0x22>
 80029e6:	0900      	lsrs	r0, r0, #4
 80029e8:	3904      	subs	r1, #4
 80029ea:	a202      	add	r2, pc, #8	@ (adr r2, 80029f4 <__clzsi2+0x2c>)
 80029ec:	5c10      	ldrb	r0, [r2, r0]
 80029ee:	1840      	adds	r0, r0, r1
 80029f0:	4770      	bx	lr
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	02020304 	.word	0x02020304
 80029f8:	01010101 	.word	0x01010101
	...

08002a04 <__clzdi2>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	2900      	cmp	r1, #0
 8002a08:	d103      	bne.n	8002a12 <__clzdi2+0xe>
 8002a0a:	f7ff ffdd 	bl	80029c8 <__clzsi2>
 8002a0e:	3020      	adds	r0, #32
 8002a10:	e002      	b.n	8002a18 <__clzdi2+0x14>
 8002a12:	0008      	movs	r0, r1
 8002a14:	f7ff ffd8 	bl	80029c8 <__clzsi2>
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1e:	b0c9      	sub	sp, #292	@ 0x124
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 uint16_t AD_RES = 0;
 8002a22:	2385      	movs	r3, #133	@ 0x85
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2c:	f000 fcde 	bl	80033ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a30:	f000 f958 	bl	8002ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a34:	f000 faa8 	bl	8002f88 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a38:	f000 fa88 	bl	8002f4c <MX_DMA_Init>
  MX_ADC_Init();
 8002a3c:	f000 f9c4 	bl	8002dc8 <MX_ADC_Init>
  MX_DAC_Init();
 8002a40:	f000 fa26 	bl	8002e90 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8002a44:	f000 fa52 	bl	8002eec <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start ADC Conversion
	  HAL_ADC_Start(&hadc);
 8002a48:	4b9d      	ldr	r3, [pc, #628]	@ (8002cc0 <main+0x2a4>)
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 fed6 	bl	80037fc <HAL_ADC_Start>
	         // Poll ADC1 Perihperal & TimeOut = 1mSec
	  HAL_ADC_PollForConversion(&hadc, 1);
 8002a50:	4b9b      	ldr	r3, [pc, #620]	@ (8002cc0 <main+0x2a4>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 ff25 	bl	80038a4 <HAL_ADC_PollForConversion>
	  AD_RES = HAL_ADC_GetValue(&hadc);
 8002a5a:	4b99      	ldr	r3, [pc, #612]	@ (8002cc0 <main+0x2a4>)
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 ffbd 	bl	80039dc <HAL_ADC_GetValue>
 8002a62:	0002      	movs	r2, r0
 8002a64:	2185      	movs	r1, #133	@ 0x85
 8002a66:	0049      	lsls	r1, r1, #1
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	801a      	strh	r2, [r3, #0]
	  TIM2->CCR1 = (AD_RES<<4);
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	@ 0x80
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 fd27 	bl	80034cc <HAL_Delay>
	  char arr[20];
	  //sprintf(arr, "AnalogRead:%u\n\r", AD_RES);
	  //HAL_UART_Transmit(&huart2,(uint8_t*)arr,strlen(arr),10);

	  char buffer[10];
	  for(int i = 0; i <= 9; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	228e      	movs	r2, #142	@ 0x8e
 8002a82:	0052      	lsls	r2, r2, #1
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e03b      	b.n	8002b02 <main+0xe6>
	  {
		  HAL_ADC_Start(&hadc);
 8002a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8002cc0 <main+0x2a4>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 feb5 	bl	80037fc <HAL_ADC_Start>
		         // Poll ADC1 Perihperal & TimeOut = 1mSec
		  HAL_ADC_PollForConversion(&hadc, 1);
 8002a92:	4b8b      	ldr	r3, [pc, #556]	@ (8002cc0 <main+0x2a4>)
 8002a94:	2101      	movs	r1, #1
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 ff04 	bl	80038a4 <HAL_ADC_PollForConversion>
		  AD_RES = HAL_ADC_GetValue(&hadc);
 8002a9c:	4b88      	ldr	r3, [pc, #544]	@ (8002cc0 <main+0x2a4>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 ff9c 	bl	80039dc <HAL_ADC_GetValue>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	2485      	movs	r4, #133	@ 0x85
 8002aa8:	0064      	lsls	r4, r4, #1
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	801a      	strh	r2, [r3, #0]
		  TIM2->CCR1 = (AD_RES<<4);
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 fd06 	bl	80034cc <HAL_Delay>
		  received_data[i] = AD_RES;
 8002ac0:	25a0      	movs	r5, #160	@ 0xa0
 8002ac2:	197b      	adds	r3, r7, r5
 8002ac4:	208e      	movs	r0, #142	@ 0x8e
 8002ac6:	0040      	lsls	r0, r0, #1
 8002ac8:	183a      	adds	r2, r7, r0
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	0052      	lsls	r2, r2, #1
 8002ace:	1939      	adds	r1, r7, r4
 8002ad0:	8809      	ldrh	r1, [r1, #0]
 8002ad2:	52d1      	strh	r1, [r2, r3]
		  sprintf(buffer, "Received data [%d] %d \r \n", i,  received_data[i]);
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	183a      	adds	r2, r7, r0
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	0052      	lsls	r2, r2, #1
 8002adc:	5ad3      	ldrh	r3, [r2, r3]
 8002ade:	0004      	movs	r4, r0
 8002ae0:	183a      	adds	r2, r7, r0
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4977      	ldr	r1, [pc, #476]	@ (8002cc4 <main+0x2a8>)
 8002ae6:	201c      	movs	r0, #28
 8002ae8:	1838      	adds	r0, r7, r0
 8002aea:	f004 f8c7 	bl	8006c7c <siprintf>
		  //HAL_UART_Transmit(&huart2, (uint16_t *)buffer, strlen(buffer), 10000);
		  HAL_Delay(1000);
 8002aee:	23fa      	movs	r3, #250	@ 0xfa
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fcea 	bl	80034cc <HAL_Delay>
	  for(int i = 0; i <= 9; i++)
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	193a      	adds	r2, r7, r4
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	238e      	movs	r3, #142	@ 0x8e
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	ddbd      	ble.n	8002a8a <main+0x6e>
	  }



	  uint16_t temp = 0;
 8002b0e:	2384      	movs	r3, #132	@ 0x84
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	801a      	strh	r2, [r3, #0]
	  char buffer_01[10];
	  for(int i=0;i<9;i++)        //sort the analog from small to large
 8002b18:	2300      	movs	r3, #0
 8002b1a:	228c      	movs	r2, #140	@ 0x8c
 8002b1c:	0052      	lsls	r2, r2, #1
 8002b1e:	18ba      	adds	r2, r7, r2
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e057      	b.n	8002bd4 <main+0x1b8>
	    {
	      for(int j=i+1;j<10;j++)
 8002b24:	238c      	movs	r3, #140	@ 0x8c
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	228a      	movs	r2, #138	@ 0x8a
 8002b30:	0052      	lsls	r2, r2, #1
 8002b32:	18ba      	adds	r2, r7, r2
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e031      	b.n	8002b9c <main+0x180>
	      {
	        if( received_data[i] > received_data[j])
 8002b38:	20a0      	movs	r0, #160	@ 0xa0
 8002b3a:	183b      	adds	r3, r7, r0
 8002b3c:	248c      	movs	r4, #140	@ 0x8c
 8002b3e:	0064      	lsls	r4, r4, #1
 8002b40:	193a      	adds	r2, r7, r4
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	0052      	lsls	r2, r2, #1
 8002b46:	5ad2      	ldrh	r2, [r2, r3]
 8002b48:	183b      	adds	r3, r7, r0
 8002b4a:	258a      	movs	r5, #138	@ 0x8a
 8002b4c:	006d      	lsls	r5, r5, #1
 8002b4e:	1979      	adds	r1, r7, r5
 8002b50:	6809      	ldr	r1, [r1, #0]
 8002b52:	0049      	lsls	r1, r1, #1
 8002b54:	5acb      	ldrh	r3, [r1, r3]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d919      	bls.n	8002b8e <main+0x172>
	        {
	          temp= received_data[i] ;
 8002b5a:	2684      	movs	r6, #132	@ 0x84
 8002b5c:	0076      	lsls	r6, r6, #1
 8002b5e:	19bb      	adds	r3, r7, r6
 8002b60:	183a      	adds	r2, r7, r0
 8002b62:	1939      	adds	r1, r7, r4
 8002b64:	6809      	ldr	r1, [r1, #0]
 8002b66:	0049      	lsls	r1, r1, #1
 8002b68:	5a8a      	ldrh	r2, [r1, r2]
 8002b6a:	801a      	strh	r2, [r3, #0]
	          received_data[i] = received_data[j];
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	197a      	adds	r2, r7, r5
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	5ad1      	ldrh	r1, [r2, r3]
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	193a      	adds	r2, r7, r4
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	0052      	lsls	r2, r2, #1
 8002b7e:	52d1      	strh	r1, [r2, r3]
	          received_data[j] = temp;
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	197a      	adds	r2, r7, r5
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	19b9      	adds	r1, r7, r6
 8002b8a:	8809      	ldrh	r1, [r1, #0]
 8002b8c:	52d1      	strh	r1, [r2, r3]
	      for(int j=i+1;j<10;j++)
 8002b8e:	228a      	movs	r2, #138	@ 0x8a
 8002b90:	0052      	lsls	r2, r2, #1
 8002b92:	18bb      	adds	r3, r7, r2
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	18ba      	adds	r2, r7, r2
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	238a      	movs	r3, #138	@ 0x8a
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	ddc7      	ble.n	8002b38 <main+0x11c>
	        }
	      }
		  sprintf(buffer, "Ascending received data [%d] %d \r \n", i,  received_data[i]);
 8002ba8:	23a0      	movs	r3, #160	@ 0xa0
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	218c      	movs	r1, #140	@ 0x8c
 8002bae:	0049      	lsls	r1, r1, #1
 8002bb0:	187a      	adds	r2, r7, r1
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	0052      	lsls	r2, r2, #1
 8002bb6:	5ad3      	ldrh	r3, [r2, r3]
 8002bb8:	000c      	movs	r4, r1
 8002bba:	187a      	adds	r2, r7, r1
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	4942      	ldr	r1, [pc, #264]	@ (8002cc8 <main+0x2ac>)
 8002bc0:	201c      	movs	r0, #28
 8002bc2:	1838      	adds	r0, r7, r0
 8002bc4:	f004 f85a 	bl	8006c7c <siprintf>
	  for(int i=0;i<9;i++)        //sort the analog from small to large
 8002bc8:	0021      	movs	r1, r4
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	187a      	adds	r2, r7, r1
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	238c      	movs	r3, #140	@ 0x8c
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	dda1      	ble.n	8002b24 <main+0x108>
		  //HAL_UART_Transmit(&huart2, (uint16_t *)buffer_01, strlen(buffer_01), 1000);
	    }


	  uint16_t avg_value = 0;
 8002be0:	2389      	movs	r3, #137	@ 0x89
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	801a      	strh	r2, [r3, #0]
	  for(int i = 2; i < 8; i++)
 8002bea:	2302      	movs	r3, #2
 8002bec:	2286      	movs	r2, #134	@ 0x86
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	18ba      	adds	r2, r7, r2
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e013      	b.n	8002c1e <main+0x202>
	  {
		  avg_value = avg_value + received_data[i];
 8002bf6:	23a0      	movs	r3, #160	@ 0xa0
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2086      	movs	r0, #134	@ 0x86
 8002bfc:	0040      	lsls	r0, r0, #1
 8002bfe:	183a      	adds	r2, r7, r0
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	0052      	lsls	r2, r2, #1
 8002c04:	5ad1      	ldrh	r1, [r2, r3]
 8002c06:	2289      	movs	r2, #137	@ 0x89
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	18bb      	adds	r3, r7, r2
 8002c0c:	18ba      	adds	r2, r7, r2
 8002c0e:	8812      	ldrh	r2, [r2, #0]
 8002c10:	188a      	adds	r2, r1, r2
 8002c12:	801a      	strh	r2, [r3, #0]
	  for(int i = 2; i < 8; i++)
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	183a      	adds	r2, r7, r0
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	2386      	movs	r3, #134	@ 0x86
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b07      	cmp	r3, #7
 8002c28:	dde5      	ble.n	8002bf6 <main+0x1da>
	  }

	  float phValue = (float)avg_value*5.0/4096/6;
 8002c2a:	2389      	movs	r3, #137	@ 0x89
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fefe 	bl	8000a34 <__aeabi_ui2f>
 8002c38:	1c03      	adds	r3, r0, #0
 8002c3a:	1c18      	adds	r0, r3, #0
 8002c3c:	f7ff fdf8 	bl	8002830 <__aeabi_f2d>
 8002c40:	2200      	movs	r2, #0
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <main+0x2b0>)
 8002c44:	f7fe fee0 	bl	8001a08 <__aeabi_dmul>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	0010      	movs	r0, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <main+0x2b4>)
 8002c54:	f7fe fa94 	bl	8001180 <__aeabi_ddiv>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	2200      	movs	r2, #0
 8002c62:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <main+0x2b8>)
 8002c64:	f7fe fa8c 	bl	8001180 <__aeabi_ddiv>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	000b      	movs	r3, r1
 8002c6c:	0010      	movs	r0, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	f7ff fe26 	bl	80028c0 <__aeabi_d2f>
 8002c74:	1c03      	adds	r3, r0, #0
 8002c76:	1d7a      	adds	r2, r7, #5
 8002c78:	32ff      	adds	r2, #255	@ 0xff
 8002c7a:	6013      	str	r3, [r2, #0]
	  phValue = 3.5 * phValue;
 8002c7c:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <main+0x2bc>)
 8002c7e:	1d7b      	adds	r3, r7, #5
 8002c80:	33ff      	adds	r3, #255	@ 0xff
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	f7fd fd98 	bl	80007b8 <__aeabi_fmul>
 8002c88:	1c03      	adds	r3, r0, #0
 8002c8a:	1d7a      	adds	r2, r7, #5
 8002c8c:	32ff      	adds	r2, #255	@ 0xff
 8002c8e:	6013      	str	r3, [r2, #0]

	  char buffer_02[10];
	  sprintf(buffer_02, "Received pH value: %f \r \n", phValue);
 8002c90:	1d7b      	adds	r3, r7, #5
 8002c92:	33ff      	adds	r3, #255	@ 0xff
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	f7ff fdcb 	bl	8002830 <__aeabi_f2d>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	490f      	ldr	r1, [pc, #60]	@ (8002cdc <main+0x2c0>)
 8002ca0:	1d38      	adds	r0, r7, #4
 8002ca2:	f003 ffeb 	bl	8006c7c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint16_t *)buffer_02, strlen(buffer_02), 1000);
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fd fa2d 	bl	8000108 <strlen>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	23fa      	movs	r3, #250	@ 0xfa
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	1d39      	adds	r1, r7, #4
 8002cb8:	4809      	ldr	r0, [pc, #36]	@ (8002ce0 <main+0x2c4>)
 8002cba:	f002 fb43 	bl	8005344 <HAL_UART_Transmit>
  {
 8002cbe:	e6c3      	b.n	8002a48 <main+0x2c>
 8002cc0:	200001f0 	.word	0x200001f0
 8002cc4:	0800a6c8 	.word	0x0800a6c8
 8002cc8:	0800a6e4 	.word	0x0800a6e4
 8002ccc:	40140000 	.word	0x40140000
 8002cd0:	40b00000 	.word	0x40b00000
 8002cd4:	40180000 	.word	0x40180000
 8002cd8:	40600000 	.word	0x40600000
 8002cdc:	0800a708 	.word	0x0800a708
 8002ce0:	200002a8 	.word	0x200002a8

08002ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b09d      	sub	sp, #116	@ 0x74
 8002ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cea:	2438      	movs	r4, #56	@ 0x38
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	0018      	movs	r0, r3
 8002cf0:	2338      	movs	r3, #56	@ 0x38
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f004 f82d 	bl	8006d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cfa:	2324      	movs	r3, #36	@ 0x24
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	2314      	movs	r3, #20
 8002d02:	001a      	movs	r2, r3
 8002d04:	2100      	movs	r1, #0
 8002d06:	f004 f825 	bl	8006d54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0a:	003b      	movs	r3, r7
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	2324      	movs	r3, #36	@ 0x24
 8002d10:	001a      	movs	r2, r3
 8002d12:	2100      	movs	r1, #0
 8002d14:	f004 f81e 	bl	8006d54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <SystemClock_Config+0xdc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <SystemClock_Config+0xe0>)
 8002d1e:	401a      	ands	r2, r3
 8002d20:	4b27      	ldr	r3, [pc, #156]	@ (8002dc0 <SystemClock_Config+0xdc>)
 8002d22:	2180      	movs	r1, #128	@ 0x80
 8002d24:	0109      	lsls	r1, r1, #4
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d2a:	0021      	movs	r1, r4
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d32:	187b      	adds	r3, r7, r1
 8002d34:	2201      	movs	r2, #1
 8002d36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	2202      	movs	r2, #2
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	2200      	movs	r2, #0
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2280      	movs	r2, #128	@ 0x80
 8002d4e:	0312      	lsls	r2, r2, #12
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	0412      	lsls	r2, r2, #16
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f001 fb49 	bl	80043f4 <HAL_RCC_OscConfig>
 8002d62:	1e03      	subs	r3, r0, #0
 8002d64:	d001      	beq.n	8002d6a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002d66:	f000 f925 	bl	8002fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d6a:	2124      	movs	r1, #36	@ 0x24
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	220f      	movs	r2, #15
 8002d70:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2203      	movs	r2, #3
 8002d76:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 ff04 	bl	8004b9c <HAL_RCC_ClockConfig>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d001      	beq.n	8002d9c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002d98:	f000 f90c 	bl	8002fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d9c:	003b      	movs	r3, r7
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002da2:	003b      	movs	r3, r7
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da8:	003b      	movs	r3, r7
 8002daa:	0018      	movs	r0, r3
 8002dac:	f002 f91a 	bl	8004fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002db4:	f000 f8fe 	bl	8002fb4 <Error_Handler>
  }
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b01d      	add	sp, #116	@ 0x74
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	ffffe7ff 	.word	0xffffe7ff

08002dc8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dce:	003b      	movs	r3, r7
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	f003 ffbc 	bl	8006d54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002dde:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <MX_ADC_Init+0xc4>)
 8002de0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002de2:	4b29      	ldr	r3, [pc, #164]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8002de8:	4b27      	ldr	r3, [pc, #156]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002dea:	2290      	movs	r2, #144	@ 0x90
 8002dec:	0392      	lsls	r2, r2, #14
 8002dee:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e08:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e12:	2221      	movs	r2, #33	@ 0x21
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e20:	22c2      	movs	r2, #194	@ 0xc2
 8002e22:	32ff      	adds	r2, #255	@ 0xff
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e28:	222c      	movs	r2, #44	@ 0x2c
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e30:	2204      	movs	r2, #4
 8002e32:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e34:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fb60 	bl	8003514 <HAL_ADC_Init>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002e58:	f000 f8ac 	bl	8002fb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e62:	003b      	movs	r3, r7
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	0152      	lsls	r2, r2, #5
 8002e68:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002e6a:	003a      	movs	r2, r7
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <MX_ADC_Init+0xc0>)
 8002e6e:	0011      	movs	r1, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 fdbf 	bl	80039f4 <HAL_ADC_ConfigChannel>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002e7a:	f000 f89b 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b002      	add	sp, #8
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	200001f0 	.word	0x200001f0
 8002e8c:	40012400 	.word	0x40012400

08002e90 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e96:	003b      	movs	r3, r7
 8002e98:	0018      	movs	r0, r3
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f003 ff58 	bl	8006d54 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <MX_DAC_Init+0x54>)
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <MX_DAC_Init+0x58>)
 8002ea8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <MX_DAC_Init+0x54>)
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 ff8d 	bl	8003dcc <HAL_DAC_Init>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8002eb6:	f000 f87d 	bl	8002fb4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002eba:	003b      	movs	r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002ec6:	0039      	movs	r1, r7
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_DAC_Init+0x54>)
 8002eca:	2210      	movs	r2, #16
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 ffa1 	bl	8003e14 <HAL_DAC_ConfigChannel>
 8002ed2:	1e03      	subs	r3, r0, #0
 8002ed4:	d001      	beq.n	8002eda <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8002ed6:	f000 f86d 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	20000294 	.word	0x20000294
 8002ee8:	40007400 	.word	0x40007400

08002eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002ef2:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <MX_USART2_UART_Init+0x5c>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002ef8:	22e1      	movs	r2, #225	@ 0xe1
 8002efa:	0252      	lsls	r2, r2, #9
 8002efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <MX_USART2_UART_Init+0x58>)
 8002f30:	0018      	movs	r0, r3
 8002f32:	f002 f9b3 	bl	800529c <HAL_UART_Init>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d001      	beq.n	8002f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f3a:	f000 f83b 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200002a8 	.word	0x200002a8
 8002f48:	40004400 	.word	0x40004400

08002f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f52:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <MX_DMA_Init+0x38>)
 8002f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <MX_DMA_Init+0x38>)
 8002f58:	2101      	movs	r1, #1
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <MX_DMA_Init+0x38>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2009      	movs	r0, #9
 8002f70:	f000 fefa 	bl	8003d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f74:	2009      	movs	r0, #9
 8002f76:	f000 ff0c 	bl	8003d92 <HAL_NVIC_EnableIRQ>

}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b002      	add	sp, #8
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	40021000 	.word	0x40021000

08002f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <MX_GPIO_Init+0x28>)
 8002f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <MX_GPIO_Init+0x28>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <MX_GPIO_Init+0x28>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fbc:	46c0      	nop			@ (mov r8, r8)
 8002fbe:	e7fd      	b.n	8002fbc <Error_Handler+0x8>

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_MspInit+0x24>)
 8002fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_MspInit+0x24>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <HAL_MspInit+0x24>)
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_MspInit+0x24>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0549      	lsls	r1, r1, #21
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	240c      	movs	r4, #12
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	2314      	movs	r3, #20
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f003 feaa 	bl	8006d54 <memset>
  if(hadc->Instance==ADC1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2a      	ldr	r2, [pc, #168]	@ (80030b0 <HAL_ADC_MspInit+0xc8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d14d      	bne.n	80030a6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_ADC_MspInit+0xcc>)
 800300c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <HAL_ADC_MspInit+0xcc>)
 8003010:	2180      	movs	r1, #128	@ 0x80
 8003012:	0089      	lsls	r1, r1, #2
 8003014:	430a      	orrs	r2, r1
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003018:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <HAL_ADC_MspInit+0xcc>)
 800301a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301c:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_ADC_MspInit+0xcc>)
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003024:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <HAL_ADC_MspInit+0xcc>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2203      	movs	r2, #3
 800303a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003042:	193a      	adds	r2, r7, r4
 8003044:	23a0      	movs	r3, #160	@ 0xa0
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	0011      	movs	r1, r2
 800304a:	0018      	movs	r0, r3
 800304c:	f001 f854 	bl	80040f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003052:	4a1a      	ldr	r2, [pc, #104]	@ (80030bc <HAL_ADC_MspInit+0xd4>)
 8003054:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8003056:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305c:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003064:	2200      	movs	r2, #0
 8003066:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003068:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	0052      	lsls	r2, r2, #1
 8003074:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	00d2      	lsls	r2, r2, #3
 800307c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 800308c:	0018      	movs	r0, r3
 800308e:	f000 ff0d 	bl	8003eac <HAL_DMA_Init>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8003096:	f7ff ff8d 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 800309e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_ADC_MspInit+0xd0>)
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b009      	add	sp, #36	@ 0x24
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	40012400 	.word	0x40012400
 80030b4:	40021000 	.word	0x40021000
 80030b8:	2000024c 	.word	0x2000024c
 80030bc:	40020008 	.word	0x40020008

080030c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	240c      	movs	r4, #12
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	0018      	movs	r0, r3
 80030ce:	2314      	movs	r3, #20
 80030d0:	001a      	movs	r2, r3
 80030d2:	2100      	movs	r1, #0
 80030d4:	f003 fe3e 	bl	8006d54 <memset>
  if(hdac->Instance==DAC)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a14      	ldr	r2, [pc, #80]	@ (8003130 <HAL_DAC_MspInit+0x70>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d122      	bne.n	8003128 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80030e2:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <HAL_DAC_MspInit+0x74>)
 80030e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030e6:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <HAL_DAC_MspInit+0x74>)
 80030e8:	2180      	movs	r1, #128	@ 0x80
 80030ea:	0589      	lsls	r1, r1, #22
 80030ec:	430a      	orrs	r2, r1
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_DAC_MspInit+0x74>)
 80030f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_DAC_MspInit+0x74>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <HAL_DAC_MspInit+0x74>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	2201      	movs	r2, #1
 8003102:	4013      	ands	r3, r2
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2220      	movs	r2, #32
 800310c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800310e:	193b      	adds	r3, r7, r4
 8003110:	2203      	movs	r2, #3
 8003112:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	193b      	adds	r3, r7, r4
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	193a      	adds	r2, r7, r4
 800311c:	23a0      	movs	r3, #160	@ 0xa0
 800311e:	05db      	lsls	r3, r3, #23
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f000 ffe8 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b009      	add	sp, #36	@ 0x24
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	40007400 	.word	0x40007400
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	240c      	movs	r4, #12
 8003142:	193b      	adds	r3, r7, r4
 8003144:	0018      	movs	r0, r3
 8003146:	2314      	movs	r3, #20
 8003148:	001a      	movs	r2, r3
 800314a:	2100      	movs	r1, #0
 800314c:	f003 fe02 	bl	8006d54 <memset>
  if(huart->Instance==USART2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <HAL_UART_MspInit+0x80>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d129      	bne.n	80031ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800315a:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <HAL_UART_MspInit+0x84>)
 800315c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_UART_MspInit+0x84>)
 8003160:	2180      	movs	r1, #128	@ 0x80
 8003162:	0289      	lsls	r1, r1, #10
 8003164:	430a      	orrs	r2, r1
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_UART_MspInit+0x84>)
 800316a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_UART_MspInit+0x84>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <HAL_UART_MspInit+0x84>)
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8003180:	0021      	movs	r1, r4
 8003182:	187b      	adds	r3, r7, r1
 8003184:	4a0e      	ldr	r2, [pc, #56]	@ (80031c0 <HAL_UART_MspInit+0x88>)
 8003186:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2202      	movs	r2, #2
 800318c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	187b      	adds	r3, r7, r1
 8003196:	2203      	movs	r2, #3
 8003198:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800319a:	187b      	adds	r3, r7, r1
 800319c:	2204      	movs	r2, #4
 800319e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	187a      	adds	r2, r7, r1
 80031a2:	23a0      	movs	r3, #160	@ 0xa0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 ffa5 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b009      	add	sp, #36	@ 0x24
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	00008004 	.word	0x00008004

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	e7fd      	b.n	80031c8 <NMI_Handler+0x4>

080031cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	e7fd      	b.n	80031d0 <HardFault_Handler+0x4>

080031d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ec:	f000 f952 	bl	8003494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031f0:	46c0      	nop			@ (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <DMA1_Channel1_IRQHandler+0x14>)
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fecc 	bl	8003f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	2000024c 	.word	0x2000024c

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_kill>:

int _kill(int pid, int sig)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003226:	f003 fdef 	bl	8006e08 <__errno>
 800322a:	0003      	movs	r3, r0
 800322c:	2216      	movs	r2, #22
 800322e:	601a      	str	r2, [r3, #0]
  return -1;
 8003230:	2301      	movs	r3, #1
 8003232:	425b      	negs	r3, r3
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <_exit>:

void _exit (int status)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003244:	2301      	movs	r3, #1
 8003246:	425a      	negs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0011      	movs	r1, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff ffe5 	bl	800321c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	e7fd      	b.n	8003252 <_exit+0x16>

08003256 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e00a      	b.n	800327e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003268:	e000      	b.n	800326c <_read+0x16>
 800326a:	bf00      	nop
 800326c:	0001      	movs	r1, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	60ba      	str	r2, [r7, #8]
 8003274:	b2ca      	uxtb	r2, r1
 8003276:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	dbf0      	blt.n	8003268 <_read+0x12>
  }

  return len;
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b006      	add	sp, #24
 800328e:	bd80      	pop	{r7, pc}

08003290 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e009      	b.n	80032b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	60ba      	str	r2, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	0018      	movs	r0, r3
 80032ac:	e000      	b.n	80032b0 <_write+0x20>
 80032ae:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3301      	adds	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	dbf1      	blt.n	80032a2 <_write+0x12>
  }
  return len;
 80032be:	687b      	ldr	r3, [r7, #4]
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b006      	add	sp, #24
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_close>:

int _close(int file)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	425b      	negs	r3, r3
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	0192      	lsls	r2, r2, #6
 80032ec:	605a      	str	r2, [r3, #4]
  return 0;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	0018      	movs	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_isatty>:

int _isatty(int file)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003300:	2301      	movs	r3, #1
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b002      	add	sp, #8
 8003308:	bd80      	pop	{r7, pc}

0800330a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}

08003320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <_sbrk+0x5c>)
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <_sbrk+0x60>)
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003334:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <_sbrk+0x64>)
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <_sbrk+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003342:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <_sbrk+0x64>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d207      	bcs.n	8003360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003350:	f003 fd5a 	bl	8006e08 <__errno>
 8003354:	0003      	movs	r3, r0
 8003356:	220c      	movs	r2, #12
 8003358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335a:	2301      	movs	r3, #1
 800335c:	425b      	negs	r3, r3
 800335e:	e009      	b.n	8003374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003360:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003366:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	18d2      	adds	r2, r2, r3
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <_sbrk+0x64>)
 8003370:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b006      	add	sp, #24
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20005000 	.word	0x20005000
 8003380:	00000400 	.word	0x00000400
 8003384:	20000330 	.word	0x20000330
 8003388:	20000488 	.word	0x20000488

0800338c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003398:	480d      	ldr	r0, [pc, #52]	@ (80033d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800339a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800339c:	f7ff fff6 	bl	800338c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a0:	480c      	ldr	r0, [pc, #48]	@ (80033d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80033a2:	490d      	ldr	r1, [pc, #52]	@ (80033d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a4:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <LoopForever+0xe>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a8:	e002      	b.n	80033b0 <LoopCopyDataInit>

080033aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ae:	3304      	adds	r3, #4

080033b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b4:	d3f9      	bcc.n	80033aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b6:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b8:	4c0a      	ldr	r4, [pc, #40]	@ (80033e4 <LoopForever+0x16>)
  movs r3, #0
 80033ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033bc:	e001      	b.n	80033c2 <LoopFillZerobss>

080033be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c0:	3204      	adds	r2, #4

080033c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c4:	d3fb      	bcc.n	80033be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033c6:	f003 fd25 	bl	8006e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ca:	f7ff fb27 	bl	8002a1c <main>

080033ce <LoopForever>:

LoopForever:
    b LoopForever
 80033ce:	e7fe      	b.n	80033ce <LoopForever>
   ldr   r0, =_estack
 80033d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80033d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80033dc:	0800ac10 	.word	0x0800ac10
  ldr r2, =_sbss
 80033e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80033e4:	20000484 	.word	0x20000484

080033e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e8:	e7fe      	b.n	80033e8 <ADC1_COMP_IRQHandler>
	...

080033ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_Init+0x3c>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_Init+0x3c>)
 80033fe:	2140      	movs	r1, #64	@ 0x40
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003404:	2000      	movs	r0, #0
 8003406:	f000 f811 	bl	800342c <HAL_InitTick>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d003      	beq.n	8003416 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e001      	b.n	800341a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003416:	f7ff fdd3 	bl	8002fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	40022000 	.word	0x40022000

0800342c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003434:	4b14      	ldr	r3, [pc, #80]	@ (8003488 <HAL_InitTick+0x5c>)
 8003436:	681c      	ldr	r4, [r3, #0]
 8003438:	4b14      	ldr	r3, [pc, #80]	@ (800348c <HAL_InitTick+0x60>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	0019      	movs	r1, r3
 800343e:	23fa      	movs	r3, #250	@ 0xfa
 8003440:	0098      	lsls	r0, r3, #2
 8003442:	f7fc fe7d 	bl	8000140 <__udivsi3>
 8003446:	0003      	movs	r3, r0
 8003448:	0019      	movs	r1, r3
 800344a:	0020      	movs	r0, r4
 800344c:	f7fc fe78 	bl	8000140 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	0018      	movs	r0, r3
 8003454:	f000 fcad 	bl	8003db2 <HAL_SYSTICK_Config>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d001      	beq.n	8003460 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e00f      	b.n	8003480 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d80b      	bhi.n	800347e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
 800346c:	2200      	movs	r2, #0
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fc7a 	bl	8003d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_InitTick+0x64>)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b003      	add	sp, #12
 8003486:	bd90      	pop	{r4, r7, pc}
 8003488:	20000000 	.word	0x20000000
 800348c:	20000008 	.word	0x20000008
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_IncTick+0x1c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	001a      	movs	r2, r3
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_IncTick+0x20>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	18d2      	adds	r2, r2, r3
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_IncTick+0x20>)
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	20000008 	.word	0x20000008
 80034b4:	20000334 	.word	0x20000334

080034b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  return uwTick;
 80034bc:	4b02      	ldr	r3, [pc, #8]	@ (80034c8 <HAL_GetTick+0x10>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	20000334 	.word	0x20000334

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	001a      	movs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	f7ff ffe0 	bl	80034b8 <HAL_GetTick>
 80034f8:	0002      	movs	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	20000008 	.word	0x20000008

08003514 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e159      	b.n	80037da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2250      	movs	r2, #80	@ 0x50
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fd52 	bl	8002fe8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	2210      	movs	r2, #16
 800354a:	4013      	ands	r3, r2
 800354c:	2b10      	cmp	r3, #16
 800354e:	d005      	beq.n	800355c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2204      	movs	r2, #4
 8003558:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800355a:	d00b      	beq.n	8003574 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	2210      	movs	r2, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2250      	movs	r2, #80	@ 0x50
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e132      	b.n	80037da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003578:	4a9a      	ldr	r2, [pc, #616]	@ (80037e4 <HAL_ADC_Init+0x2d0>)
 800357a:	4013      	ands	r3, r2
 800357c:	2202      	movs	r2, #2
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2203      	movs	r2, #3
 800358c:	4013      	ands	r3, r2
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <HAL_ADC_Init+0x90>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_Init+0x90>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_Init+0x92>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d149      	bne.n	800363e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	23c0      	movs	r3, #192	@ 0xc0
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d00b      	beq.n	80035ce <HAL_ADC_Init+0xba>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	2380      	movs	r3, #128	@ 0x80
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	429a      	cmp	r2, r3
 80035c0:	d005      	beq.n	80035ce <HAL_ADC_Init+0xba>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d111      	bne.n	80035f2 <HAL_ADC_Init+0xde>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	0892      	lsrs	r2, r2, #2
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6919      	ldr	r1, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	611a      	str	r2, [r3, #16]
 80035f0:	e014      	b.n	800361c <HAL_ADC_Init+0x108>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0092      	lsls	r2, r2, #2
 80035fe:	0892      	lsrs	r2, r2, #2
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	4b79      	ldr	r3, [pc, #484]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b78      	ldr	r3, [pc, #480]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003608:	4978      	ldr	r1, [pc, #480]	@ (80037ec <HAL_ADC_Init+0x2d8>)
 800360a:	400a      	ands	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	4b76      	ldr	r3, [pc, #472]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4b74      	ldr	r3, [pc, #464]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2118      	movs	r1, #24
 8003628:	438a      	bics	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800363e:	4b6a      	ldr	r3, [pc, #424]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4b69      	ldr	r3, [pc, #420]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003644:	496a      	ldr	r1, [pc, #424]	@ (80037f0 <HAL_ADC_Init+0x2dc>)
 8003646:	400a      	ands	r2, r1
 8003648:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800364a:	4b67      	ldr	r3, [pc, #412]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	065a      	lsls	r2, r3, #25
 8003654:	4b64      	ldr	r3, [pc, #400]	@ (80037e8 <HAL_ADC_Init+0x2d4>)
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	055b      	lsls	r3, r3, #21
 8003664:	4013      	ands	r3, r2
 8003666:	d108      	bne.n	800367a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2180      	movs	r1, #128	@ 0x80
 8003674:	0549      	lsls	r1, r1, #21
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	495b      	ldr	r1, [pc, #364]	@ (80037f4 <HAL_ADC_Init+0x2e0>)
 8003686:	400a      	ands	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68d9      	ldr	r1, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_Init+0x18c>
 800369c:	2304      	movs	r3, #4
 800369e:	e000      	b.n	80036a2 <HAL_ADC_Init+0x18e>
 80036a0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036a2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2020      	movs	r0, #32
 80036a8:	5c1b      	ldrb	r3, [r3, r0]
 80036aa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80036ac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	202c      	movs	r0, #44	@ 0x2c
 80036b2:	5c1b      	ldrb	r3, [r3, r0]
 80036b4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80036b6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80036bc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80036c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80036cc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036da:	23c2      	movs	r3, #194	@ 0xc2
 80036dc:	33ff      	adds	r3, #255	@ 0xff
 80036de:	429a      	cmp	r2, r3
 80036e0:	d00b      	beq.n	80036fa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68d9      	ldr	r1, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2221      	movs	r2, #33	@ 0x21
 80036fe:	5c9b      	ldrb	r3, [r3, r2]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d11a      	bne.n	800373a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	@ 0x80
 800371a:	0249      	lsls	r1, r1, #9
 800371c:	430a      	orrs	r2, r1
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e00b      	b.n	800373a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	2220      	movs	r2, #32
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	2201      	movs	r2, #1
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11f      	bne.n	8003782 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	492a      	ldr	r1, [pc, #168]	@ (80037f8 <HAL_ADC_Init+0x2e4>)
 800374e:	400a      	ands	r2, r1
 8003750:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6919      	ldr	r1, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003760:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003766:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2101      	movs	r1, #1
 800377c:	430a      	orrs	r2, r1
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	e00e      	b.n	80037a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2201      	movs	r2, #1
 800378a:	4013      	ands	r3, r2
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	438a      	bics	r2, r1
 800379e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2107      	movs	r1, #7
 80037ac:	438a      	bics	r2, r1
 80037ae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6959      	ldr	r1, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037cc:	2203      	movs	r2, #3
 80037ce:	4393      	bics	r3, r2
 80037d0:	2201      	movs	r2, #1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	fffffefd 	.word	0xfffffefd
 80037e8:	40012708 	.word	0x40012708
 80037ec:	ffc3ffff 	.word	0xffc3ffff
 80037f0:	fdffffff 	.word	0xfdffffff
 80037f4:	fffe0219 	.word	0xfffe0219
 80037f8:	fffffc03 	.word	0xfffffc03

080037fc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2204      	movs	r2, #4
 8003814:	4013      	ands	r3, r2
 8003816:	d138      	bne.n	800388a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2250      	movs	r2, #80	@ 0x50
 800381c:	5c9b      	ldrb	r3, [r3, r2]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Start+0x2a>
 8003822:	2302      	movs	r3, #2
 8003824:	e038      	b.n	8003898 <HAL_ADC_Start+0x9c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2250      	movs	r2, #80	@ 0x50
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d007      	beq.n	8003846 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003836:	230f      	movs	r3, #15
 8003838:	18fc      	adds	r4, r7, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f95f 	bl	8003b00 <ADC_Enable>
 8003842:	0003      	movs	r3, r0
 8003844:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003846:	230f      	movs	r3, #15
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d120      	bne.n	8003892 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <HAL_ADC_Start+0xa4>)
 8003856:	4013      	ands	r3, r2
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	0052      	lsls	r2, r2, #1
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2250      	movs	r2, #80	@ 0x50
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	221c      	movs	r2, #28
 8003876:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2104      	movs	r1, #4
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e003      	b.n	8003892 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800388a:	230f      	movs	r3, #15
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2202      	movs	r2, #2
 8003890:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003892:	230f      	movs	r3, #15
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	781b      	ldrb	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b005      	add	sp, #20
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	fffff0fe 	.word	0xfffff0fe

080038a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d102      	bne.n	80038c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80038be:	2308      	movs	r3, #8
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e014      	b.n	80038ee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10b      	bne.n	80038ea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	2220      	movs	r2, #32
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2250      	movs	r2, #80	@ 0x50
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e072      	b.n	80039d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80038ea:	230c      	movs	r3, #12
 80038ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038ee:	f7ff fde3 	bl	80034b8 <HAL_GetTick>
 80038f2:	0003      	movs	r3, r0
 80038f4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80038f6:	e01f      	b.n	8003938 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	d01c      	beq.n	8003938 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_ADC_PollForConversion+0x70>
 8003904:	f7ff fdd8 	bl	80034b8 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d211      	bcs.n	8003938 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	d10b      	bne.n	8003938 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	2204      	movs	r2, #4
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2250      	movs	r2, #80	@ 0x50
 8003930:	2100      	movs	r1, #0
 8003932:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e04b      	b.n	80039d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4013      	ands	r3, r2
 8003942:	d0d9      	beq.n	80038f8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	23c0      	movs	r3, #192	@ 0xc0
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d12e      	bne.n	80039be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d129      	bne.n	80039be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2208      	movs	r2, #8
 8003972:	4013      	ands	r3, r2
 8003974:	2b08      	cmp	r3, #8
 8003976:	d122      	bne.n	80039be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2204      	movs	r2, #4
 8003980:	4013      	ands	r3, r2
 8003982:	d110      	bne.n	80039a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	210c      	movs	r1, #12
 8003990:	438a      	bics	r2, r1
 8003992:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003998:	4a0f      	ldr	r2, [pc, #60]	@ (80039d8 <HAL_ADC_PollForConversion+0x134>)
 800399a:	4013      	ands	r3, r2
 800399c:	2201      	movs	r2, #1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80039a4:	e00b      	b.n	80039be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039aa:	2220      	movs	r2, #32
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b6:	2201      	movs	r2, #1
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	220c      	movs	r2, #12
 80039cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b004      	add	sp, #16
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	fffffefe 	.word	0xfffffefe

080039dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2250      	movs	r2, #80	@ 0x50
 8003a02:	5c9b      	ldrb	r3, [r3, r2]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e06c      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0xf2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2250      	movs	r2, #80	@ 0x50
 8003a10:	2101      	movs	r1, #1
 8003a12:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	2220      	movs	r2, #32
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2250      	movs	r2, #80	@ 0x50
 8003a30:	2100      	movs	r1, #0
 8003a32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e056      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <HAL_ADC_ConfigChannel+0xfc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d028      	beq.n	8003a94 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	035b      	lsls	r3, r3, #13
 8003a4e:	0b5a      	lsrs	r2, r3, #13
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	02db      	lsls	r3, r3, #11
 8003a60:	4013      	ands	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003a64:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b22      	ldr	r3, [pc, #136]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003a6a:	2180      	movs	r1, #128	@ 0x80
 8003a6c:	0409      	lsls	r1, r1, #16
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003a72:	200a      	movs	r0, #10
 8003a74:	f000 f8ac 	bl	8003bd0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	@ 0x80
 8003a7e:	029b      	lsls	r3, r3, #10
 8003a80:	4013      	ands	r3, r2
 8003a82:	d02b      	beq.n	8003adc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b1a      	ldr	r3, [pc, #104]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003a8a:	2180      	movs	r1, #128	@ 0x80
 8003a8c:	03c9      	lsls	r1, r1, #15
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e023      	b.n	8003adc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	035b      	lsls	r3, r3, #13
 8003aa0:	0b5b      	lsrs	r3, r3, #13
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	02db      	lsls	r3, r3, #11
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d005      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003abe:	490e      	ldr	r1, [pc, #56]	@ (8003af8 <HAL_ADC_ConfigChannel+0x104>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	4013      	ands	r3, r2
 8003ace:	d005      	beq.n	8003adc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <HAL_ADC_ConfigChannel+0x100>)
 8003ad6:	4909      	ldr	r1, [pc, #36]	@ (8003afc <HAL_ADC_ConfigChannel+0x108>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2250      	movs	r2, #80	@ 0x50
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	00001001 	.word	0x00001001
 8003af4:	40012708 	.word	0x40012708
 8003af8:	ff7fffff 	.word	0xff7fffff
 8003afc:	ffbfffff 	.word	0xffbfffff

08003b00 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2203      	movs	r2, #3
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <ADC_Enable+0x2c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <ADC_Enable+0x2c>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <ADC_Enable+0x2e>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d146      	bne.n	8003bc0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a24      	ldr	r2, [pc, #144]	@ (8003bcc <ADC_Enable+0xcc>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00d      	beq.n	8003b5a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b42:	2210      	movs	r2, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	2201      	movs	r2, #1
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e033      	b.n	8003bc2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	430a      	orrs	r2, r1
 8003b68:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 f830 	bl	8003bd0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b70:	f7ff fca2 	bl	80034b8 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b78:	e01b      	b.n	8003bb2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b7a:	f7ff fc9d 	bl	80034b8 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b0a      	cmp	r3, #10
 8003b86:	d914      	bls.n	8003bb2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d00d      	beq.n	8003bb2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d1dc      	bne.n	8003b7a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	80000017 	.word	0x80000017

08003bd0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <ADC_DelayMicroSecond+0x38>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	490b      	ldr	r1, [pc, #44]	@ (8003c0c <ADC_DelayMicroSecond+0x3c>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fc faae 	bl	8000140 <__udivsi3>
 8003be4:	0003      	movs	r3, r0
 8003be6:	001a      	movs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4353      	muls	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003bee:	e002      	b.n	8003bf6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <ADC_DelayMicroSecond+0x20>
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b004      	add	sp, #16
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	000f4240 	.word	0x000f4240

08003c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	0002      	movs	r2, r0
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c22:	d809      	bhi.n	8003c38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c24:	1dfb      	adds	r3, r7, #7
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	001a      	movs	r2, r3
 8003c2a:	231f      	movs	r3, #31
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__NVIC_EnableIRQ+0x30>)
 8003c30:	2101      	movs	r1, #1
 8003c32:	4091      	lsls	r1, r2
 8003c34:	000a      	movs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
  }
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c52:	1dfb      	adds	r3, r7, #7
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c58:	d828      	bhi.n	8003cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d18 <__NVIC_SetPriority+0xd4>)
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	33c0      	adds	r3, #192	@ 0xc0
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	589b      	ldr	r3, [r3, r2]
 8003c6a:	1dfa      	adds	r2, r7, #7
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	0011      	movs	r1, r2
 8003c70:	2203      	movs	r2, #3
 8003c72:	400a      	ands	r2, r1
 8003c74:	00d2      	lsls	r2, r2, #3
 8003c76:	21ff      	movs	r1, #255	@ 0xff
 8003c78:	4091      	lsls	r1, r2
 8003c7a:	000a      	movs	r2, r1
 8003c7c:	43d2      	mvns	r2, r2
 8003c7e:	401a      	ands	r2, r3
 8003c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	22ff      	movs	r2, #255	@ 0xff
 8003c88:	401a      	ands	r2, r3
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	2303      	movs	r3, #3
 8003c92:	4003      	ands	r3, r0
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c98:	481f      	ldr	r0, [pc, #124]	@ (8003d18 <__NVIC_SetPriority+0xd4>)
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b25b      	sxtb	r3, r3
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	33c0      	adds	r3, #192	@ 0xc0
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003caa:	e031      	b.n	8003d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cac:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <__NVIC_SetPriority+0xd8>)
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	230f      	movs	r3, #15
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	3b08      	subs	r3, #8
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	3306      	adds	r3, #6
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	1dfa      	adds	r2, r7, #7
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	0011      	movs	r1, r2
 8003ccc:	2203      	movs	r2, #3
 8003cce:	400a      	ands	r2, r1
 8003cd0:	00d2      	lsls	r2, r2, #3
 8003cd2:	21ff      	movs	r1, #255	@ 0xff
 8003cd4:	4091      	lsls	r1, r2
 8003cd6:	000a      	movs	r2, r1
 8003cd8:	43d2      	mvns	r2, r2
 8003cda:	401a      	ands	r2, r3
 8003cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	22ff      	movs	r2, #255	@ 0xff
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	0018      	movs	r0, r3
 8003cec:	2303      	movs	r3, #3
 8003cee:	4003      	ands	r3, r0
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf4:	4809      	ldr	r0, [pc, #36]	@ (8003d1c <__NVIC_SetPriority+0xd8>)
 8003cf6:	1dfb      	adds	r3, r7, #7
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	001c      	movs	r4, r3
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	4023      	ands	r3, r4
 8003d00:	3b08      	subs	r3, #8
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	430a      	orrs	r2, r1
 8003d06:	3306      	adds	r3, #6
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	18c3      	adds	r3, r0, r3
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	601a      	str	r2, [r3, #0]
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b003      	add	sp, #12
 8003d16:	bd90      	pop	{r4, r7, pc}
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	045b      	lsls	r3, r3, #17
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d301      	bcc.n	8003d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d34:	2301      	movs	r3, #1
 8003d36:	e010      	b.n	8003d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <SysTick_Config+0x44>)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d40:	2301      	movs	r3, #1
 8003d42:	425b      	negs	r3, r3
 8003d44:	2103      	movs	r1, #3
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff ff7c 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <SysTick_Config+0x44>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <SysTick_Config+0x44>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	210f      	movs	r1, #15
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	1c02      	adds	r2, r0, #0
 8003d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ff5d 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	0002      	movs	r2, r0
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b25b      	sxtb	r3, r3
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff ff33 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff ffaf 	bl	8003d20 <SysTick_Config>
 8003dc2:	0003      	movs	r3, r0
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e015      	b.n	8003e0a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	791b      	ldrb	r3, [r3, #4]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff f965 	bl	80030c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	795b      	ldrb	r3, [r3, #5]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_DAC_ConfigChannel+0x20>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e035      	b.n	8003ea0 <HAL_DAC_ConfigChannel+0x8c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003e48:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <HAL_DAC_ConfigChannel+0x94>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	0013      	movs	r3, r2
 8003e50:	43da      	mvns	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4013      	ands	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	21c0      	movs	r1, #192	@ 0xc0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4099      	lsls	r1, r3
 8003e86:	000b      	movs	r3, r1
 8003e88:	43d9      	mvns	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	400a      	ands	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	00000ffe 	.word	0x00000ffe

08003eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e061      	b.n	8003f82 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <HAL_DMA_Init+0xe0>)
 8003ec4:	4694      	mov	ip, r2
 8003ec6:	4463      	add	r3, ip
 8003ec8:	2114      	movs	r1, #20
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7fc f938 	bl	8000140 <__udivsi3>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <HAL_DMA_Init+0xe4>)
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2225      	movs	r2, #37	@ 0x25
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	@ (8003f94 <HAL_DMA_Init+0xe8>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d018      	beq.n	8003f6a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <HAL_DMA_Init+0xec>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	211c      	movs	r1, #28
 8003f42:	400b      	ands	r3, r1
 8003f44:	210f      	movs	r1, #15
 8003f46:	4099      	lsls	r1, r3
 8003f48:	000b      	movs	r3, r1
 8003f4a:	43d9      	mvns	r1, r3
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_DMA_Init+0xec>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f52:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <HAL_DMA_Init+0xec>)
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	201c      	movs	r0, #28
 8003f60:	4003      	ands	r3, r0
 8003f62:	409a      	lsls	r2, r3
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <HAL_DMA_Init+0xec>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2225      	movs	r2, #37	@ 0x25
 8003f74:	2101      	movs	r1, #1
 8003f76:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	bffdfff8 	.word	0xbffdfff8
 8003f90:	40020000 	.word	0x40020000
 8003f94:	ffff800f 	.word	0xffff800f
 8003f98:	400200a8 	.word	0x400200a8

08003f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	221c      	movs	r2, #28
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	0013      	movs	r3, r2
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d026      	beq.n	8004016 <HAL_DMA_IRQHandler+0x7a>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d107      	bne.n	8003fec <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	438a      	bics	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	221c      	movs	r2, #28
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	4091      	lsls	r1, r2
 8003ffc:	000a      	movs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d100      	bne.n	800400a <HAL_DMA_IRQHandler+0x6e>
 8004008:	e071      	b.n	80040ee <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	0010      	movs	r0, r2
 8004012:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004014:	e06b      	b.n	80040ee <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	221c      	movs	r2, #28
 800401c:	4013      	ands	r3, r2
 800401e:	2202      	movs	r2, #2
 8004020:	409a      	lsls	r2, r3
 8004022:	0013      	movs	r3, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	d02d      	beq.n	8004086 <HAL_DMA_IRQHandler+0xea>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2202      	movs	r2, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d029      	beq.n	8004086 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	d10b      	bne.n	8004056 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	210a      	movs	r1, #10
 800404a:	438a      	bics	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2225      	movs	r2, #37	@ 0x25
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	221c      	movs	r2, #28
 800405c:	401a      	ands	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	2102      	movs	r1, #2
 8004064:	4091      	lsls	r1, r2
 8004066:	000a      	movs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2224      	movs	r2, #36	@ 0x24
 800406e:	2100      	movs	r1, #0
 8004070:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d039      	beq.n	80040ee <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	0010      	movs	r0, r2
 8004082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004084:	e033      	b.n	80040ee <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	221c      	movs	r2, #28
 800408c:	4013      	ands	r3, r2
 800408e:	2208      	movs	r2, #8
 8004090:	409a      	lsls	r2, r3
 8004092:	0013      	movs	r3, r2
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4013      	ands	r3, r2
 8004098:	d02a      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x154>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2208      	movs	r2, #8
 800409e:	4013      	ands	r3, r2
 80040a0:	d026      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	210e      	movs	r1, #14
 80040ae:	438a      	bics	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	221c      	movs	r2, #28
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	2101      	movs	r1, #1
 80040c0:	4091      	lsls	r1, r2
 80040c2:	000a      	movs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2225      	movs	r2, #37	@ 0x25
 80040d0:	2101      	movs	r1, #1
 80040d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	@ 0x24
 80040d8:	2100      	movs	r1, #0
 80040da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	0010      	movs	r0, r2
 80040ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46c0      	nop			@ (mov r8, r8)
}
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800410e:	e155      	b.n	80043bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4091      	lsls	r1, r2
 800411a:	000a      	movs	r2, r1
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <HAL_GPIO_Init+0x30>
 8004126:	e146      	b.n	80043b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2203      	movs	r2, #3
 800412e:	4013      	ands	r3, r2
 8004130:	2b01      	cmp	r3, #1
 8004132:	d005      	beq.n	8004140 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800413c:	2b02      	cmp	r3, #2
 800413e:	d130      	bne.n	80041a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	409a      	lsls	r2, r3
 800414e:	0013      	movs	r3, r2
 8004150:	43da      	mvns	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	0013      	movs	r3, r2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004176:	2201      	movs	r2, #1
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	409a      	lsls	r2, r3
 800417c:	0013      	movs	r3, r2
 800417e:	43da      	mvns	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	2201      	movs	r2, #1
 800418e:	401a      	ands	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	409a      	lsls	r2, r3
 8004194:	0013      	movs	r3, r2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d017      	beq.n	80041de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	43da      	mvns	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	0013      	movs	r3, r2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d123      	bne.n	8004232 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	08da      	lsrs	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3208      	adds	r2, #8
 80041f2:	0092      	lsls	r2, r2, #2
 80041f4:	58d3      	ldr	r3, [r2, r3]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2207      	movs	r2, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	220f      	movs	r2, #15
 8004202:	409a      	lsls	r2, r3
 8004204:	0013      	movs	r3, r2
 8004206:	43da      	mvns	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2107      	movs	r1, #7
 8004216:	400b      	ands	r3, r1
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	409a      	lsls	r2, r3
 800421c:	0013      	movs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	08da      	lsrs	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3208      	adds	r2, #8
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	6939      	ldr	r1, [r7, #16]
 8004230:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	409a      	lsls	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	43da      	mvns	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	401a      	ands	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	409a      	lsls	r2, r3
 8004258:	0013      	movs	r3, r2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	23c0      	movs	r3, #192	@ 0xc0
 800426c:	029b      	lsls	r3, r3, #10
 800426e:	4013      	ands	r3, r2
 8004270:	d100      	bne.n	8004274 <HAL_GPIO_Init+0x17c>
 8004272:	e0a0      	b.n	80043b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b57      	ldr	r3, [pc, #348]	@ (80043d4 <HAL_GPIO_Init+0x2dc>)
 8004276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004278:	4b56      	ldr	r3, [pc, #344]	@ (80043d4 <HAL_GPIO_Init+0x2dc>)
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004280:	4a55      	ldr	r2, [pc, #340]	@ (80043d8 <HAL_GPIO_Init+0x2e0>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	589b      	ldr	r3, [r3, r2]
 800428c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2203      	movs	r2, #3
 8004292:	4013      	ands	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	409a      	lsls	r2, r3
 800429a:	0013      	movs	r3, r2
 800429c:	43da      	mvns	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	23a0      	movs	r3, #160	@ 0xa0
 80042a8:	05db      	lsls	r3, r3, #23
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x1f6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	@ (80043dc <HAL_GPIO_Init+0x2e4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x1f2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a49      	ldr	r2, [pc, #292]	@ (80043e0 <HAL_GPIO_Init+0x2e8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a48      	ldr	r2, [pc, #288]	@ (80043e4 <HAL_GPIO_Init+0x2ec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x1ea>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a47      	ldr	r2, [pc, #284]	@ (80043e8 <HAL_GPIO_Init+0x2f0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x1e6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a46      	ldr	r2, [pc, #280]	@ (80043ec <HAL_GPIO_Init+0x2f4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x1e2>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e00a      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042da:	2306      	movs	r3, #6
 80042dc:	e008      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042de:	2304      	movs	r3, #4
 80042e0:	e006      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042e2:	2303      	movs	r3, #3
 80042e4:	e004      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e002      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x1f8>
 80042ee:	2300      	movs	r3, #0
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	2103      	movs	r1, #3
 80042f4:	400a      	ands	r2, r1
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4093      	lsls	r3, r2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004300:	4935      	ldr	r1, [pc, #212]	@ (80043d8 <HAL_GPIO_Init+0x2e0>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	3302      	adds	r3, #2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430e:	4b38      	ldr	r3, [pc, #224]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	43da      	mvns	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	2380      	movs	r3, #128	@ 0x80
 8004324:	035b      	lsls	r3, r3, #13
 8004326:	4013      	ands	r3, r2
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004332:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004338:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43da      	mvns	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	2380      	movs	r3, #128	@ 0x80
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	4013      	ands	r3, r2
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800435c:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004362:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43da      	mvns	r2, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	2380      	movs	r3, #128	@ 0x80
 8004378:	029b      	lsls	r3, r3, #10
 800437a:	4013      	ands	r3, r2
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004386:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800438c:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43da      	mvns	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	025b      	lsls	r3, r3, #9
 80043a4:	4013      	ands	r3, r2
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043b0:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <HAL_GPIO_Init+0x2f8>)
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	40da      	lsrs	r2, r3
 80043c4:	1e13      	subs	r3, r2, #0
 80043c6:	d000      	beq.n	80043ca <HAL_GPIO_Init+0x2d2>
 80043c8:	e6a2      	b.n	8004110 <HAL_GPIO_Init+0x18>
  }
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46c0      	nop			@ (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b006      	add	sp, #24
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	50000400 	.word	0x50000400
 80043e0:	50000800 	.word	0x50000800
 80043e4:	50000c00 	.word	0x50000c00
 80043e8:	50001000 	.word	0x50001000
 80043ec:	50001c00 	.word	0x50001c00
 80043f0:	40010400 	.word	0x40010400

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b5b0      	push	{r4, r5, r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f000 fbbf 	bl	8004b86 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004408:	4bc9      	ldr	r3, [pc, #804]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	220c      	movs	r2, #12
 800440e:	4013      	ands	r3, r2
 8004410:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004412:	4bc7      	ldr	r3, [pc, #796]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	2380      	movs	r3, #128	@ 0x80
 8004418:	025b      	lsls	r3, r3, #9
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d100      	bne.n	800442a <HAL_RCC_OscConfig+0x36>
 8004428:	e07e      	b.n	8004528 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d007      	beq.n	8004440 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d112      	bne.n	800445c <HAL_RCC_OscConfig+0x68>
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	2380      	movs	r3, #128	@ 0x80
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	429a      	cmp	r2, r3
 800443e:	d10d      	bne.n	800445c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4bbb      	ldr	r3, [pc, #748]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2380      	movs	r3, #128	@ 0x80
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	4013      	ands	r3, r2
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x5a>
 800444c:	e06b      	b.n	8004526 <HAL_RCC_OscConfig+0x132>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d167      	bne.n	8004526 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f000 fb95 	bl	8004b86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	025b      	lsls	r3, r3, #9
 8004464:	429a      	cmp	r2, r3
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x84>
 8004468:	4bb1      	ldr	r3, [pc, #708]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4bb0      	ldr	r3, [pc, #704]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	0249      	lsls	r1, r1, #9
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e027      	b.n	80044c8 <HAL_RCC_OscConfig+0xd4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	23a0      	movs	r3, #160	@ 0xa0
 800447e:	02db      	lsls	r3, r3, #11
 8004480:	429a      	cmp	r2, r3
 8004482:	d10e      	bne.n	80044a2 <HAL_RCC_OscConfig+0xae>
 8004484:	4baa      	ldr	r3, [pc, #680]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4ba9      	ldr	r3, [pc, #676]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800448a:	2180      	movs	r1, #128	@ 0x80
 800448c:	02c9      	lsls	r1, r1, #11
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	4ba7      	ldr	r3, [pc, #668]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4ba6      	ldr	r3, [pc, #664]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004498:	2180      	movs	r1, #128	@ 0x80
 800449a:	0249      	lsls	r1, r1, #9
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e012      	b.n	80044c8 <HAL_RCC_OscConfig+0xd4>
 80044a2:	4ba3      	ldr	r3, [pc, #652]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4ba2      	ldr	r3, [pc, #648]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044a8:	49a2      	ldr	r1, [pc, #648]	@ (8004734 <HAL_RCC_OscConfig+0x340>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	4ba0      	ldr	r3, [pc, #640]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	2380      	movs	r3, #128	@ 0x80
 80044b4:	025b      	lsls	r3, r3, #9
 80044b6:	4013      	ands	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b9b      	ldr	r3, [pc, #620]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044c2:	499d      	ldr	r1, [pc, #628]	@ (8004738 <HAL_RCC_OscConfig+0x344>)
 80044c4:	400a      	ands	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fff2 	bl	80034b8 <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d8:	e009      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044da:	f7fe ffed 	bl	80034b8 <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	@ 0x64
 80044e6:	d902      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	f000 fb4c 	bl	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ee:	4b90      	ldr	r3, [pc, #576]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	4013      	ands	r3, r2
 80044f8:	d0ef      	beq.n	80044da <HAL_RCC_OscConfig+0xe6>
 80044fa:	e015      	b.n	8004528 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe ffdc 	bl	80034b8 <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004506:	f7fe ffd7 	bl	80034b8 <HAL_GetTick>
 800450a:	0002      	movs	r2, r0
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b64      	cmp	r3, #100	@ 0x64
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e336      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004518:	4b85      	ldr	r3, [pc, #532]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2380      	movs	r3, #128	@ 0x80
 800451e:	029b      	lsls	r3, r3, #10
 8004520:	4013      	ands	r3, r2
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x112>
 8004524:	e000      	b.n	8004528 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004526:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2202      	movs	r2, #2
 800452e:	4013      	ands	r3, r2
 8004530:	d100      	bne.n	8004534 <HAL_RCC_OscConfig+0x140>
 8004532:	e099      	b.n	8004668 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	2220      	movs	r2, #32
 800453e:	4013      	ands	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004542:	4b7b      	ldr	r3, [pc, #492]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004548:	2120      	movs	r1, #32
 800454a:	430a      	orrs	r2, r1
 800454c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2220      	movs	r2, #32
 8004552:	4393      	bics	r3, r2
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d13e      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1ec>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d13b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004568:	4b71      	ldr	r3, [pc, #452]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2204      	movs	r2, #4
 800456e:	4013      	ands	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_RCC_OscConfig+0x188>
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e304      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b6c      	ldr	r3, [pc, #432]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a6e      	ldr	r2, [pc, #440]	@ (800473c <HAL_RCC_OscConfig+0x348>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	4b68      	ldr	r3, [pc, #416]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004592:	4b67      	ldr	r3, [pc, #412]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2209      	movs	r2, #9
 8004598:	4393      	bics	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800459e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a4:	f000 fc42 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 80045a8:	0001      	movs	r1, r0
 80045aa:	4b61      	ldr	r3, [pc, #388]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	220f      	movs	r2, #15
 80045b2:	4013      	ands	r3, r2
 80045b4:	4a62      	ldr	r2, [pc, #392]	@ (8004740 <HAL_RCC_OscConfig+0x34c>)
 80045b6:	5cd3      	ldrb	r3, [r2, r3]
 80045b8:	000a      	movs	r2, r1
 80045ba:	40da      	lsrs	r2, r3
 80045bc:	4b61      	ldr	r3, [pc, #388]	@ (8004744 <HAL_RCC_OscConfig+0x350>)
 80045be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80045c0:	4b61      	ldr	r3, [pc, #388]	@ (8004748 <HAL_RCC_OscConfig+0x354>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2513      	movs	r5, #19
 80045c6:	197c      	adds	r4, r7, r5
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7fe ff2f 	bl	800342c <HAL_InitTick>
 80045ce:	0003      	movs	r3, r0
 80045d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80045d2:	197b      	adds	r3, r7, r5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d046      	beq.n	8004668 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80045da:	197b      	adds	r3, r7, r5
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	e2d2      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d027      	beq.n	8004636 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045e6:	4b52      	ldr	r3, [pc, #328]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2209      	movs	r2, #9
 80045ec:	4393      	bics	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80045f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fe ff5e 	bl	80034b8 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004602:	f7fe ff59 	bl	80034b8 <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e2b8      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004614:	4b46      	ldr	r3, [pc, #280]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2204      	movs	r2, #4
 800461a:	4013      	ands	r3, r2
 800461c:	d0f1      	beq.n	8004602 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b44      	ldr	r3, [pc, #272]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4a46      	ldr	r2, [pc, #280]	@ (800473c <HAL_RCC_OscConfig+0x348>)
 8004624:	4013      	ands	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	021a      	lsls	r2, r3, #8
 800462e:	4b40      	ldr	r3, [pc, #256]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	e018      	b.n	8004668 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004636:	4b3e      	ldr	r3, [pc, #248]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800463c:	2101      	movs	r1, #1
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe ff39 	bl	80034b8 <HAL_GetTick>
 8004646:	0003      	movs	r3, r0
 8004648:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464c:	f7fe ff34 	bl	80034b8 <HAL_GetTick>
 8004650:	0002      	movs	r2, r0
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e293      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	d1f1      	bne.n	800464c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2210      	movs	r2, #16
 800466e:	4013      	ands	r3, r2
 8004670:	d100      	bne.n	8004674 <HAL_RCC_OscConfig+0x280>
 8004672:	e0a2      	b.n	80047ba <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d140      	bne.n	80046fc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800467a:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4013      	ands	r3, r2
 8004684:	d005      	beq.n	8004692 <HAL_RCC_OscConfig+0x29e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e279      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a2d      	ldr	r2, [pc, #180]	@ (800474c <HAL_RCC_OscConfig+0x358>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a6:	4b22      	ldr	r3, [pc, #136]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	0a19      	lsrs	r1, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	061a      	lsls	r2, r3, #24
 80046b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	0b5b      	lsrs	r3, r3, #13
 80046c0:	3301      	adds	r3, #1
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	0212      	lsls	r2, r2, #8
 80046c6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046c8:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	210f      	movs	r1, #15
 80046d0:	400b      	ands	r3, r1
 80046d2:	491b      	ldr	r1, [pc, #108]	@ (8004740 <HAL_RCC_OscConfig+0x34c>)
 80046d4:	5ccb      	ldrb	r3, [r1, r3]
 80046d6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <HAL_RCC_OscConfig+0x350>)
 80046da:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80046dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004748 <HAL_RCC_OscConfig+0x354>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2513      	movs	r5, #19
 80046e2:	197c      	adds	r4, r7, r5
 80046e4:	0018      	movs	r0, r3
 80046e6:	f7fe fea1 	bl	800342c <HAL_InitTick>
 80046ea:	0003      	movs	r3, r0
 80046ec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80046ee:	197b      	adds	r3, r7, r5
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d061      	beq.n	80047ba <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80046f6:	197b      	adds	r3, r7, r5
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	e244      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d040      	beq.n	8004786 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004704:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <HAL_RCC_OscConfig+0x33c>)
 800470a:	2180      	movs	r1, #128	@ 0x80
 800470c:	0049      	lsls	r1, r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004712:	f7fe fed1 	bl	80034b8 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800471a:	e019      	b.n	8004750 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800471c:	f7fe fecc 	bl	80034b8 <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d912      	bls.n	8004750 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e22b      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	40021000 	.word	0x40021000
 8004734:	fffeffff 	.word	0xfffeffff
 8004738:	fffbffff 	.word	0xfffbffff
 800473c:	ffffe0ff 	.word	0xffffe0ff
 8004740:	0800a764 	.word	0x0800a764
 8004744:	20000000 	.word	0x20000000
 8004748:	20000004 	.word	0x20000004
 800474c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004750:	4bca      	ldr	r3, [pc, #808]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d0df      	beq.n	800471c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800475c:	4bc7      	ldr	r3, [pc, #796]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4ac7      	ldr	r2, [pc, #796]	@ (8004a80 <HAL_RCC_OscConfig+0x68c>)
 8004762:	4013      	ands	r3, r2
 8004764:	0019      	movs	r1, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800476a:	4bc4      	ldr	r3, [pc, #784]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004770:	4bc2      	ldr	r3, [pc, #776]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	0a19      	lsrs	r1, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	061a      	lsls	r2, r3, #24
 800477e:	4bbf      	ldr	r3, [pc, #764]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004780:	430a      	orrs	r2, r1
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	e019      	b.n	80047ba <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004786:	4bbd      	ldr	r3, [pc, #756]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4bbc      	ldr	r3, [pc, #752]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800478c:	49bd      	ldr	r1, [pc, #756]	@ (8004a84 <HAL_RCC_OscConfig+0x690>)
 800478e:	400a      	ands	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fe fe91 	bl	80034b8 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800479c:	f7fe fe8c 	bl	80034b8 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1eb      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ae:	4bb3      	ldr	r3, [pc, #716]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2208      	movs	r2, #8
 80047c0:	4013      	ands	r3, r2
 80047c2:	d036      	beq.n	8004832 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d019      	beq.n	8004800 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047cc:	4bab      	ldr	r3, [pc, #684]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80047ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047d0:	4baa      	ldr	r3, [pc, #680]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	430a      	orrs	r2, r1
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fe fe6e 	bl	80034b8 <HAL_GetTick>
 80047dc:	0003      	movs	r3, r0
 80047de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe fe69 	bl	80034b8 <HAL_GetTick>
 80047e6:	0002      	movs	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1c8      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047f4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80047f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f8:	2202      	movs	r2, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d0f1      	beq.n	80047e2 <HAL_RCC_OscConfig+0x3ee>
 80047fe:	e018      	b.n	8004832 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004800:	4b9e      	ldr	r3, [pc, #632]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004804:	4b9d      	ldr	r3, [pc, #628]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe fe54 	bl	80034b8 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004816:	f7fe fe4f 	bl	80034b8 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1ae      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004828:	4b94      	ldr	r3, [pc, #592]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	d1f1      	bne.n	8004816 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2204      	movs	r2, #4
 8004838:	4013      	ands	r3, r2
 800483a:	d100      	bne.n	800483e <HAL_RCC_OscConfig+0x44a>
 800483c:	e0ae      	b.n	800499c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2023      	movs	r0, #35	@ 0x23
 8004840:	183b      	adds	r3, r7, r0
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b8d      	ldr	r3, [pc, #564]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004848:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	055b      	lsls	r3, r3, #21
 800484e:	4013      	ands	r3, r2
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b8a      	ldr	r3, [pc, #552]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	4b89      	ldr	r3, [pc, #548]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004858:	2180      	movs	r1, #128	@ 0x80
 800485a:	0549      	lsls	r1, r1, #21
 800485c:	430a      	orrs	r2, r1
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004860:	183b      	adds	r3, r7, r0
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b88      	ldr	r3, [pc, #544]	@ (8004a88 <HAL_RCC_OscConfig+0x694>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4013      	ands	r3, r2
 8004870:	d11a      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b85      	ldr	r3, [pc, #532]	@ (8004a88 <HAL_RCC_OscConfig+0x694>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b84      	ldr	r3, [pc, #528]	@ (8004a88 <HAL_RCC_OscConfig+0x694>)
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	0049      	lsls	r1, r1, #1
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004880:	f7fe fe1a 	bl	80034b8 <HAL_GetTick>
 8004884:	0003      	movs	r3, r0
 8004886:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fe fe15 	bl	80034b8 <HAL_GetTick>
 800488e:	0002      	movs	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	@ 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e174      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b7a      	ldr	r3, [pc, #488]	@ (8004a88 <HAL_RCC_OscConfig+0x694>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4013      	ands	r3, r2
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	2380      	movs	r3, #128	@ 0x80
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x4d0>
 80048b4:	4b71      	ldr	r3, [pc, #452]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b8:	4b70      	ldr	r3, [pc, #448]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048ba:	2180      	movs	r1, #128	@ 0x80
 80048bc:	0049      	lsls	r1, r1, #1
 80048be:	430a      	orrs	r2, r1
 80048c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80048c2:	e031      	b.n	8004928 <HAL_RCC_OscConfig+0x534>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <HAL_RCC_OscConfig+0x4f2>
 80048cc:	4b6b      	ldr	r3, [pc, #428]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048d0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048d2:	496c      	ldr	r1, [pc, #432]	@ (8004a84 <HAL_RCC_OscConfig+0x690>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d8:	4b68      	ldr	r3, [pc, #416]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048dc:	4b67      	ldr	r3, [pc, #412]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048de:	496b      	ldr	r1, [pc, #428]	@ (8004a8c <HAL_RCC_OscConfig+0x698>)
 80048e0:	400a      	ands	r2, r1
 80048e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80048e4:	e020      	b.n	8004928 <HAL_RCC_OscConfig+0x534>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	23a0      	movs	r3, #160	@ 0xa0
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d10e      	bne.n	8004910 <HAL_RCC_OscConfig+0x51c>
 80048f2:	4b62      	ldr	r3, [pc, #392]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f6:	4b61      	ldr	r3, [pc, #388]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80048f8:	2180      	movs	r1, #128	@ 0x80
 80048fa:	00c9      	lsls	r1, r1, #3
 80048fc:	430a      	orrs	r2, r1
 80048fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004900:	4b5e      	ldr	r3, [pc, #376]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004902:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004904:	4b5d      	ldr	r3, [pc, #372]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004906:	2180      	movs	r1, #128	@ 0x80
 8004908:	0049      	lsls	r1, r1, #1
 800490a:	430a      	orrs	r2, r1
 800490c:	651a      	str	r2, [r3, #80]	@ 0x50
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0x534>
 8004910:	4b5a      	ldr	r3, [pc, #360]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004914:	4b59      	ldr	r3, [pc, #356]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004916:	495b      	ldr	r1, [pc, #364]	@ (8004a84 <HAL_RCC_OscConfig+0x690>)
 8004918:	400a      	ands	r2, r1
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50
 800491c:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800491e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004920:	4b56      	ldr	r3, [pc, #344]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004922:	495a      	ldr	r1, [pc, #360]	@ (8004a8c <HAL_RCC_OscConfig+0x698>)
 8004924:	400a      	ands	r2, r1
 8004926:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004930:	f7fe fdc2 	bl	80034b8 <HAL_GetTick>
 8004934:	0003      	movs	r3, r0
 8004936:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004938:	e009      	b.n	800494e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493a:	f7fe fdbd 	bl	80034b8 <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	4a52      	ldr	r2, [pc, #328]	@ (8004a90 <HAL_RCC_OscConfig+0x69c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e11b      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d0ef      	beq.n	800493a <HAL_RCC_OscConfig+0x546>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495c:	f7fe fdac 	bl	80034b8 <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004964:	e009      	b.n	800497a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004966:	f7fe fda7 	bl	80034b8 <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	4a47      	ldr	r2, [pc, #284]	@ (8004a90 <HAL_RCC_OscConfig+0x69c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e105      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800497a:	4b40      	ldr	r3, [pc, #256]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 800497c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497e:	2380      	movs	r3, #128	@ 0x80
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4013      	ands	r3, r2
 8004984:	d1ef      	bne.n	8004966 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004986:	2323      	movs	r3, #35	@ 0x23
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004990:	4b3a      	ldr	r3, [pc, #232]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004994:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004996:	493f      	ldr	r1, [pc, #252]	@ (8004a94 <HAL_RCC_OscConfig+0x6a0>)
 8004998:	400a      	ands	r2, r1
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2220      	movs	r2, #32
 80049a2:	4013      	ands	r3, r2
 80049a4:	d049      	beq.n	8004a3a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d026      	beq.n	80049fc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80049ae:	4b33      	ldr	r3, [pc, #204]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	4b32      	ldr	r3, [pc, #200]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049b4:	2101      	movs	r1, #1
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
 80049ba:	4b30      	ldr	r3, [pc, #192]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049be:	4b2f      	ldr	r3, [pc, #188]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049c0:	2101      	movs	r1, #1
 80049c2:	430a      	orrs	r2, r1
 80049c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049c6:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <HAL_RCC_OscConfig+0x6a4>)
 80049c8:	6a1a      	ldr	r2, [r3, #32]
 80049ca:	4b33      	ldr	r3, [pc, #204]	@ (8004a98 <HAL_RCC_OscConfig+0x6a4>)
 80049cc:	2180      	movs	r1, #128	@ 0x80
 80049ce:	0189      	lsls	r1, r1, #6
 80049d0:	430a      	orrs	r2, r1
 80049d2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe fd70 	bl	80034b8 <HAL_GetTick>
 80049d8:	0003      	movs	r3, r0
 80049da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049de:	f7fe fd6b 	bl	80034b8 <HAL_GetTick>
 80049e2:	0002      	movs	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0ca      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f0:	4b22      	ldr	r3, [pc, #136]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2202      	movs	r2, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	d0f1      	beq.n	80049de <HAL_RCC_OscConfig+0x5ea>
 80049fa:	e01e      	b.n	8004a3a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049fc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	438a      	bics	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	4b23      	ldr	r3, [pc, #140]	@ (8004a98 <HAL_RCC_OscConfig+0x6a4>)
 8004a0a:	6a1a      	ldr	r2, [r3, #32]
 8004a0c:	4b22      	ldr	r3, [pc, #136]	@ (8004a98 <HAL_RCC_OscConfig+0x6a4>)
 8004a0e:	4923      	ldr	r1, [pc, #140]	@ (8004a9c <HAL_RCC_OscConfig+0x6a8>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fe fd50 	bl	80034b8 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a1e:	f7fe fd4b 	bl	80034b8 <HAL_GetTick>
 8004a22:	0002      	movs	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e0aa      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a30:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d1f1      	bne.n	8004a1e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d100      	bne.n	8004a44 <HAL_RCC_OscConfig+0x650>
 8004a42:	e09f      	b.n	8004b84 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d100      	bne.n	8004a4c <HAL_RCC_OscConfig+0x658>
 8004a4a:	e078      	b.n	8004b3e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d159      	bne.n	8004b08 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a54:	4b09      	ldr	r3, [pc, #36]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <HAL_RCC_OscConfig+0x688>)
 8004a5a:	4911      	ldr	r1, [pc, #68]	@ (8004aa0 <HAL_RCC_OscConfig+0x6ac>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fe fd2a 	bl	80034b8 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fe fd25 	bl	80034b8 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d915      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e084      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	ffff1fff 	.word	0xffff1fff
 8004a84:	fffffeff 	.word	0xfffffeff
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	fffffbff 	.word	0xfffffbff
 8004a90:	00001388 	.word	0x00001388
 8004a94:	efffffff 	.word	0xefffffff
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	ffffdfff 	.word	0xffffdfff
 8004aa0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	@ 0x80
 8004aaa:	049b      	lsls	r3, r3, #18
 8004aac:	4013      	ands	r3, r2
 8004aae:	d1dc      	bne.n	8004a6a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab0:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4a37      	ldr	r2, [pc, #220]	@ (8004b94 <HAL_RCC_OscConfig+0x7a0>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	0449      	lsls	r1, r1, #17
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ade:	f7fe fceb 	bl	80034b8 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe fce6 	bl	80034b8 <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e045      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004afa:	4b25      	ldr	r3, [pc, #148]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	049b      	lsls	r3, r3, #18
 8004b02:	4013      	ands	r3, r2
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x6f4>
 8004b06:	e03d      	b.n	8004b84 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b21      	ldr	r3, [pc, #132]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004b0e:	4922      	ldr	r1, [pc, #136]	@ (8004b98 <HAL_RCC_OscConfig+0x7a4>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fe fcd0 	bl	80034b8 <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe fccb 	bl	80034b8 <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e02a      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004b30:	4b17      	ldr	r3, [pc, #92]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	049b      	lsls	r3, r3, #18
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x72a>
 8004b3c:	e022      	b.n	8004b84 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e01d      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b4a:	4b11      	ldr	r3, [pc, #68]	@ (8004b90 <HAL_RCC_OscConfig+0x79c>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	025b      	lsls	r3, r3, #9
 8004b56:	401a      	ands	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d10f      	bne.n	8004b80 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	23f0      	movs	r3, #240	@ 0xf0
 8004b64:	039b      	lsls	r3, r3, #14
 8004b66:	401a      	ands	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	23c0      	movs	r3, #192	@ 0xc0
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	401a      	ands	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b00a      	add	sp, #40	@ 0x28
 8004b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	40021000 	.word	0x40021000
 8004b94:	ff02ffff 	.word	0xff02ffff
 8004b98:	feffffff 	.word	0xfeffffff

08004b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e128      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b96      	ldr	r3, [pc, #600]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d91e      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b93      	ldr	r3, [pc, #588]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	4b90      	ldr	r3, [pc, #576]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bd0:	f7fe fc72 	bl	80034b8 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd8:	e009      	b.n	8004bee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bda:	f7fe fc6d 	bl	80034b8 <HAL_GetTick>
 8004bde:	0002      	movs	r2, r0
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	4a8a      	ldr	r2, [pc, #552]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e109      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b87      	ldr	r3, [pc, #540]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d1ee      	bne.n	8004bda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2202      	movs	r2, #2
 8004c02:	4013      	ands	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c06:	4b83      	ldr	r3, [pc, #524]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	22f0      	movs	r2, #240	@ 0xf0
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b7f      	ldr	r3, [pc, #508]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c16:	430a      	orrs	r2, r1
 8004c18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4013      	ands	r3, r2
 8004c22:	d100      	bne.n	8004c26 <HAL_RCC_ClockConfig+0x8a>
 8004c24:	e089      	b.n	8004d3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c2e:	4b79      	ldr	r3, [pc, #484]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	4013      	ands	r3, r2
 8004c38:	d120      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0e1      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c46:	4b73      	ldr	r3, [pc, #460]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	049b      	lsls	r3, r3, #18
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d114      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e0d5      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2204      	movs	r2, #4
 8004c64:	4013      	ands	r3, r2
 8004c66:	d109      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0ca      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c6c:	4b69      	ldr	r3, [pc, #420]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	@ 0x80
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0c2      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7c:	4b65      	ldr	r3, [pc, #404]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2203      	movs	r2, #3
 8004c82:	4393      	bics	r3, r2
 8004c84:	0019      	movs	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4b62      	ldr	r3, [pc, #392]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fe fc12 	bl	80034b8 <HAL_GetTick>
 8004c94:	0003      	movs	r3, r0
 8004c96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d111      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca0:	e009      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca2:	f7fe fc09 	bl	80034b8 <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	4a58      	ldr	r2, [pc, #352]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0a5      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb6:	4b57      	ldr	r3, [pc, #348]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	220c      	movs	r2, #12
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d1ef      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0x106>
 8004cc2:	e03a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d111      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ccc:	e009      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cce:	f7fe fbf3 	bl	80034b8 <HAL_GetTick>
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	4a4d      	ldr	r2, [pc, #308]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e08f      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	4013      	ands	r3, r2
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d1ef      	bne.n	8004cce <HAL_RCC_ClockConfig+0x132>
 8004cee:	e024      	b.n	8004d3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d11b      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cf8:	e009      	b.n	8004d0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfa:	f7fe fbdd 	bl	80034b8 <HAL_GetTick>
 8004cfe:	0002      	movs	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	4a42      	ldr	r2, [pc, #264]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e079      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	220c      	movs	r2, #12
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d1ef      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x15e>
 8004d1a:	e00e      	b.n	8004d3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fe fbcc 	bl	80034b8 <HAL_GetTick>
 8004d20:	0002      	movs	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a3a      	ldr	r2, [pc, #232]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e068      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d30:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	220c      	movs	r2, #12
 8004d36:	4013      	ands	r3, r2
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3a:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4013      	ands	r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d21e      	bcs.n	8004d86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d48:	4b30      	ldr	r3, [pc, #192]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4393      	bics	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	4b2e      	ldr	r3, [pc, #184]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d5a:	f7fe fbad 	bl	80034b8 <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	e009      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fe fba8 	bl	80034b8 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	4a28      	ldr	r2, [pc, #160]	@ (8004e10 <HAL_RCC_ClockConfig+0x274>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e044      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d78:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCC_ClockConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	4013      	ands	r3, r2
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d1ee      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b20      	ldr	r3, [pc, #128]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a20      	ldr	r2, [pc, #128]	@ (8004e18 <HAL_RCC_ClockConfig+0x27c>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2208      	movs	r2, #8
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dae:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <HAL_RCC_ClockConfig+0x280>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	00da      	lsls	r2, r3, #3
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dc4:	f000 f832 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dc8:	0001      	movs	r1, r0
 8004dca:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCC_ClockConfig+0x278>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	4a12      	ldr	r2, [pc, #72]	@ (8004e20 <HAL_RCC_ClockConfig+0x284>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	000a      	movs	r2, r1
 8004dda:	40da      	lsrs	r2, r3
 8004ddc:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCC_ClockConfig+0x288>)
 8004dde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <HAL_RCC_ClockConfig+0x28c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	250b      	movs	r5, #11
 8004de6:	197c      	adds	r4, r7, r5
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fe fb1f 	bl	800342c <HAL_InitTick>
 8004dee:	0003      	movs	r3, r0
 8004df0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004df2:	197b      	adds	r3, r7, r5
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004dfa:	197b      	adds	r3, r7, r5
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bdb0      	pop	{r4, r5, r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	40022000 	.word	0x40022000
 8004e10:	00001388 	.word	0x00001388
 8004e14:	40021000 	.word	0x40021000
 8004e18:	fffff8ff 	.word	0xfffff8ff
 8004e1c:	ffffc7ff 	.word	0xffffc7ff
 8004e20:	0800a764 	.word	0x0800a764
 8004e24:	20000000 	.word	0x20000000
 8004e28:	20000004 	.word	0x20000004

08004e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b08e      	sub	sp, #56	@ 0x38
 8004e30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004e32:	4b4c      	ldr	r3, [pc, #304]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d014      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x40>
 8004e42:	d900      	bls.n	8004e46 <HAL_RCC_GetSysClockFreq+0x1a>
 8004e44:	e07b      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x112>
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x24>
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e4e:	e076      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e50:	4b44      	ldr	r3, [pc, #272]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2210      	movs	r2, #16
 8004e56:	4013      	ands	r3, r2
 8004e58:	d002      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004e5a:	4b43      	ldr	r3, [pc, #268]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004e5c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004e5e:	e07c      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004e60:	4b42      	ldr	r3, [pc, #264]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x140>)
 8004e62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004e64:	e079      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e66:	4b42      	ldr	r3, [pc, #264]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e68:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004e6a:	e076      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6e:	0c9a      	lsrs	r2, r3, #18
 8004e70:	230f      	movs	r3, #15
 8004e72:	401a      	ands	r2, r3
 8004e74:	4b3f      	ldr	r3, [pc, #252]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x148>)
 8004e76:	5c9b      	ldrb	r3, [r3, r2]
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	0d9a      	lsrs	r2, r3, #22
 8004e7e:	2303      	movs	r3, #3
 8004e80:	4013      	ands	r3, r2
 8004e82:	3301      	adds	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e86:	4b37      	ldr	r3, [pc, #220]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x138>)
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	025b      	lsls	r3, r3, #9
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d01a      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	4a35      	ldr	r2, [pc, #212]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x144>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	f7fb fb21 	bl	80004e8 <__aeabi_lmul>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	000b      	movs	r3, r1
 8004eaa:	0010      	movs	r0, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f7fb faf5 	bl	80004a8 <__aeabi_uldivmod>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	000b      	movs	r3, r1
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec6:	e037      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ec8:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x138>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d01a      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	4a23      	ldr	r2, [pc, #140]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	68b8      	ldr	r0, [r7, #8]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	f7fb fb01 	bl	80004e8 <__aeabi_lmul>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	000b      	movs	r3, r1
 8004eea:	0010      	movs	r0, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f7fb fad5 	bl	80004a8 <__aeabi_uldivmod>
 8004efe:	0002      	movs	r2, r0
 8004f00:	000b      	movs	r3, r1
 8004f02:	0013      	movs	r3, r2
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f06:	e017      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	0019      	movs	r1, r3
 8004f10:	4a16      	ldr	r2, [pc, #88]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x140>)
 8004f12:	2300      	movs	r3, #0
 8004f14:	f7fb fae8 	bl	80004e8 <__aeabi_lmul>
 8004f18:	0002      	movs	r2, r0
 8004f1a:	000b      	movs	r3, r1
 8004f1c:	0010      	movs	r0, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	001c      	movs	r4, r3
 8004f24:	2300      	movs	r3, #0
 8004f26:	001d      	movs	r5, r3
 8004f28:	0022      	movs	r2, r4
 8004f2a:	002b      	movs	r3, r5
 8004f2c:	f7fb fabc 	bl	80004a8 <__aeabi_uldivmod>
 8004f30:	0002      	movs	r2, r0
 8004f32:	000b      	movs	r3, r1
 8004f34:	0013      	movs	r3, r2
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004f3c:	e00d      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004f3e:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	0b5b      	lsrs	r3, r3, #13
 8004f44:	2207      	movs	r2, #7
 8004f46:	4013      	ands	r3, r2
 8004f48:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	0212      	lsls	r2, r2, #8
 8004f52:	409a      	lsls	r2, r3
 8004f54:	0013      	movs	r3, r2
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004f58:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b00e      	add	sp, #56	@ 0x38
 8004f62:	bdb0      	pop	{r4, r5, r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	003d0900 	.word	0x003d0900
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	007a1200 	.word	0x007a1200
 8004f74:	0800a77c 	.word	0x0800a77c

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	20000000 	.word	0x20000000

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f90:	f7ff fff2 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f94:	0001      	movs	r1, r0
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	4a04      	ldr	r2, [pc, #16]	@ (8004fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fa2:	5cd3      	ldrb	r3, [r2, r3]
 8004fa4:	40d9      	lsrs	r1, r3
 8004fa6:	000b      	movs	r3, r1
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	0800a774 	.word	0x0800a774

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fbc:	f7ff ffdc 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004fc0:	0001      	movs	r1, r0
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	0adb      	lsrs	r3, r3, #11
 8004fc8:	2207      	movs	r2, #7
 8004fca:	4013      	ands	r3, r2
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fce:	5cd3      	ldrb	r3, [r2, r3]
 8004fd0:	40d9      	lsrs	r1, r3
 8004fd2:	000b      	movs	r3, r1
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	0800a774 	.word	0x0800a774

08004fe4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004fec:	2017      	movs	r0, #23
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d100      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004ffe:	e0c7      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005000:	4b9b      	ldr	r3, [pc, #620]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	055b      	lsls	r3, r3, #21
 8005008:	4013      	ands	r3, r2
 800500a:	d109      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500c:	4b98      	ldr	r3, [pc, #608]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800500e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005010:	4b97      	ldr	r3, [pc, #604]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005012:	2180      	movs	r1, #128	@ 0x80
 8005014:	0549      	lsls	r1, r1, #21
 8005016:	430a      	orrs	r2, r1
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800501a:	183b      	adds	r3, r7, r0
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005020:	4b94      	ldr	r3, [pc, #592]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	2380      	movs	r3, #128	@ 0x80
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4013      	ands	r3, r2
 800502a:	d11a      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800502c:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b90      	ldr	r3, [pc, #576]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	0049      	lsls	r1, r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503a:	f7fe fa3d 	bl	80034b8 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	e008      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005044:	f7fe fa38 	bl	80034b8 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e107      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b87      	ldr	r3, [pc, #540]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4013      	ands	r3, r2
 8005060:	d0f0      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005062:	4b83      	ldr	r3, [pc, #524]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	23c0      	movs	r3, #192	@ 0xc0
 8005068:	039b      	lsls	r3, r3, #14
 800506a:	4013      	ands	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	23c0      	movs	r3, #192	@ 0xc0
 8005074:	039b      	lsls	r3, r3, #14
 8005076:	4013      	ands	r3, r2
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	429a      	cmp	r2, r3
 800507c:	d013      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	23c0      	movs	r3, #192	@ 0xc0
 8005084:	029b      	lsls	r3, r3, #10
 8005086:	401a      	ands	r2, r3
 8005088:	23c0      	movs	r3, #192	@ 0xc0
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	429a      	cmp	r2, r3
 800508e:	d10a      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005090:	4b77      	ldr	r3, [pc, #476]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	401a      	ands	r2, r3
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	029b      	lsls	r3, r3, #10
 800509e:	429a      	cmp	r2, r3
 80050a0:	d101      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0df      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80050a6:	4b72      	ldr	r3, [pc, #456]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050aa:	23c0      	movs	r3, #192	@ 0xc0
 80050ac:	029b      	lsls	r3, r3, #10
 80050ae:	4013      	ands	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d03b      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	23c0      	movs	r3, #192	@ 0xc0
 80050be:	029b      	lsls	r3, r3, #10
 80050c0:	4013      	ands	r3, r2
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d033      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2220      	movs	r2, #32
 80050ce:	4013      	ands	r3, r2
 80050d0:	d02e      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80050d2:	4b67      	ldr	r3, [pc, #412]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d6:	4a68      	ldr	r2, [pc, #416]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050dc:	4b64      	ldr	r3, [pc, #400]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050e0:	4b63      	ldr	r3, [pc, #396]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050e2:	2180      	movs	r1, #128	@ 0x80
 80050e4:	0309      	lsls	r1, r1, #12
 80050e6:	430a      	orrs	r2, r1
 80050e8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ea:	4b61      	ldr	r3, [pc, #388]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050ee:	4b60      	ldr	r3, [pc, #384]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050f0:	4962      	ldr	r1, [pc, #392]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80050f2:	400a      	ands	r2, r1
 80050f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80050f6:	4b5e      	ldr	r3, [pc, #376]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4013      	ands	r3, r2
 8005104:	d014      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005106:	f7fe f9d7 	bl	80034b8 <HAL_GetTick>
 800510a:	0003      	movs	r3, r0
 800510c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800510e:	e009      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fe f9d2 	bl	80034b8 <HAL_GetTick>
 8005114:	0002      	movs	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4a59      	ldr	r2, [pc, #356]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0a0      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005124:	4b52      	ldr	r3, [pc, #328]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4013      	ands	r3, r2
 800512e:	d0ef      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2220      	movs	r2, #32
 8005136:	4013      	ands	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	23c0      	movs	r3, #192	@ 0xc0
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	401a      	ands	r2, r3
 8005144:	23c0      	movs	r3, #192	@ 0xc0
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	429a      	cmp	r2, r3
 800514a:	d10c      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800514c:	4b48      	ldr	r3, [pc, #288]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4c      	ldr	r2, [pc, #304]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005152:	4013      	ands	r3, r2
 8005154:	0019      	movs	r1, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	23c0      	movs	r3, #192	@ 0xc0
 800515c:	039b      	lsls	r3, r3, #14
 800515e:	401a      	ands	r2, r3
 8005160:	4b43      	ldr	r3, [pc, #268]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005162:	430a      	orrs	r2, r1
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	4b42      	ldr	r3, [pc, #264]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005168:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	23c0      	movs	r3, #192	@ 0xc0
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	401a      	ands	r2, r3
 8005174:	4b3e      	ldr	r3, [pc, #248]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005176:	430a      	orrs	r2, r1
 8005178:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800517a:	2317      	movs	r3, #23
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b3a      	ldr	r3, [pc, #232]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005188:	4b39      	ldr	r3, [pc, #228]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800518a:	493f      	ldr	r1, [pc, #252]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800518c:	400a      	ands	r2, r1
 800518e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	4013      	ands	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800519a:	4b35      	ldr	r3, [pc, #212]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800519c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519e:	2203      	movs	r2, #3
 80051a0:	4393      	bics	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	4b31      	ldr	r3, [pc, #196]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051aa:	430a      	orrs	r2, r1
 80051ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2202      	movs	r2, #2
 80051b4:	4013      	ands	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051bc:	220c      	movs	r2, #12
 80051be:	4393      	bics	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051c8:	430a      	orrs	r2, r1
 80051ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2204      	movs	r2, #4
 80051d2:	4013      	ands	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051d6:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051da:	4a2c      	ldr	r2, [pc, #176]	@ (800528c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80051dc:	4013      	ands	r3, r2
 80051de:	0019      	movs	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	4b22      	ldr	r3, [pc, #136]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2208      	movs	r2, #8
 80051f0:	4013      	ands	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80051f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f8:	4a25      	ldr	r2, [pc, #148]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005204:	430a      	orrs	r2, r1
 8005206:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005218:	4a17      	ldr	r2, [pc, #92]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800521a:	4013      	ands	r3, r2
 800521c:	0019      	movs	r1, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	4b13      	ldr	r3, [pc, #76]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005224:	430a      	orrs	r2, r1
 8005226:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2240      	movs	r2, #64	@ 0x40
 800522e:	4013      	ands	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005232:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005238:	4013      	ands	r3, r2
 800523a:	0019      	movs	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005242:	430a      	orrs	r2, r1
 8005244:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2280      	movs	r2, #128	@ 0x80
 800524c:	4013      	ands	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005254:	4a10      	ldr	r2, [pc, #64]	@ (8005298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005256:	4013      	ands	r3, r2
 8005258:	0019      	movs	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005260:	430a      	orrs	r2, r1
 8005262:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b006      	add	sp, #24
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
 8005278:	fffcffff 	.word	0xfffcffff
 800527c:	fff7ffff 	.word	0xfff7ffff
 8005280:	00001388 	.word	0x00001388
 8005284:	ffcfffff 	.word	0xffcfffff
 8005288:	efffffff 	.word	0xefffffff
 800528c:	fffff3ff 	.word	0xfffff3ff
 8005290:	ffffcfff 	.word	0xffffcfff
 8005294:	fbffffff 	.word	0xfbffffff
 8005298:	fff3ffff 	.word	0xfff3ffff

0800529c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e044      	b.n	8005338 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2278      	movs	r2, #120	@ 0x78
 80052ba:	2100      	movs	r1, #0
 80052bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fd ff39 	bl	8003138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2224      	movs	r2, #36	@ 0x24
 80052ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2101      	movs	r1, #1
 80052d8:	438a      	bics	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 f8d0 	bl	8005484 <UART_SetConfig>
 80052e4:	0003      	movs	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e024      	b.n	8005338 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 fb61 	bl	80059c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	490d      	ldr	r1, [pc, #52]	@ (8005340 <HAL_UART_Init+0xa4>)
 800530a:	400a      	ands	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	212a      	movs	r1, #42	@ 0x2a
 800531a:	438a      	bics	r2, r1
 800531c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2101      	movs	r1, #1
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	f000 fbf9 	bl	8005b28 <UART_CheckIdleState>
 8005336:	0003      	movs	r3, r0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}
 8005340:	ffffb7ff 	.word	0xffffb7ff

08005344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	@ 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	1dbb      	adds	r3, r7, #6
 8005352:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005358:	2b20      	cmp	r3, #32
 800535a:	d000      	beq.n	800535e <HAL_UART_Transmit+0x1a>
 800535c:	e08c      	b.n	8005478 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_UART_Transmit+0x28>
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e084      	b.n	800547a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	2380      	movs	r3, #128	@ 0x80
 8005376:	015b      	lsls	r3, r3, #5
 8005378:	429a      	cmp	r2, r3
 800537a:	d109      	bne.n	8005390 <HAL_UART_Transmit+0x4c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2201      	movs	r2, #1
 8005388:	4013      	ands	r3, r2
 800538a:	d001      	beq.n	8005390 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e074      	b.n	800547a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2284      	movs	r2, #132	@ 0x84
 8005394:	2100      	movs	r1, #0
 8005396:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2221      	movs	r2, #33	@ 0x21
 800539c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539e:	f7fe f88b 	bl	80034b8 <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1dba      	adds	r2, r7, #6
 80053aa:	2150      	movs	r1, #80	@ 0x50
 80053ac:	8812      	ldrh	r2, [r2, #0]
 80053ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1dba      	adds	r2, r7, #6
 80053b4:	2152      	movs	r1, #82	@ 0x52
 80053b6:	8812      	ldrh	r2, [r2, #0]
 80053b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d108      	bne.n	80053d8 <HAL_UART_Transmit+0x94>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e003      	b.n	80053e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053e0:	e02f      	b.n	8005442 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	0013      	movs	r3, r2
 80053ec:	2200      	movs	r2, #0
 80053ee:	2180      	movs	r1, #128	@ 0x80
 80053f0:	f000 fc42 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d004      	beq.n	8005402 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e03b      	b.n	800547a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	001a      	movs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	05d2      	lsls	r2, r2, #23
 8005414:	0dd2      	lsrs	r2, r2, #23
 8005416:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	3302      	adds	r3, #2
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e007      	b.n	8005430 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2252      	movs	r2, #82	@ 0x52
 8005434:	5a9b      	ldrh	r3, [r3, r2]
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b299      	uxth	r1, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2252      	movs	r2, #82	@ 0x52
 8005440:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2252      	movs	r2, #82	@ 0x52
 8005446:	5a9b      	ldrh	r3, [r3, r2]
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1c9      	bne.n	80053e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	0013      	movs	r3, r2
 8005458:	2200      	movs	r2, #0
 800545a:	2140      	movs	r1, #64	@ 0x40
 800545c:	f000 fc0c 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d004      	beq.n	800546e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e005      	b.n	800547a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	e000      	b.n	800547a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005478:	2302      	movs	r3, #2
  }
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b008      	add	sp, #32
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b08e      	sub	sp, #56	@ 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548c:	231a      	movs	r3, #26
 800548e:	2218      	movs	r2, #24
 8005490:	189b      	adds	r3, r3, r2
 8005492:	19db      	adds	r3, r3, r7
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4ac3      	ldr	r2, [pc, #780]	@ (80057c4 <UART_SetConfig+0x340>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	0019      	movs	r1, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c2:	430a      	orrs	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4abe      	ldr	r2, [pc, #760]	@ (80057c8 <UART_SetConfig+0x344>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4ab8      	ldr	r2, [pc, #736]	@ (80057cc <UART_SetConfig+0x348>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f4:	4313      	orrs	r3, r2
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	4ab4      	ldr	r2, [pc, #720]	@ (80057d0 <UART_SetConfig+0x34c>)
 8005500:	4013      	ands	r3, r2
 8005502:	0019      	movs	r1, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4ab0      	ldr	r2, [pc, #704]	@ (80057d4 <UART_SetConfig+0x350>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d131      	bne.n	800557c <UART_SetConfig+0xf8>
 8005518:	4baf      	ldr	r3, [pc, #700]	@ (80057d8 <UART_SetConfig+0x354>)
 800551a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551c:	2203      	movs	r2, #3
 800551e:	4013      	ands	r3, r2
 8005520:	2b03      	cmp	r3, #3
 8005522:	d01d      	beq.n	8005560 <UART_SetConfig+0xdc>
 8005524:	d823      	bhi.n	800556e <UART_SetConfig+0xea>
 8005526:	2b02      	cmp	r3, #2
 8005528:	d00c      	beq.n	8005544 <UART_SetConfig+0xc0>
 800552a:	d820      	bhi.n	800556e <UART_SetConfig+0xea>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <UART_SetConfig+0xb2>
 8005530:	2b01      	cmp	r3, #1
 8005532:	d00e      	beq.n	8005552 <UART_SetConfig+0xce>
 8005534:	e01b      	b.n	800556e <UART_SetConfig+0xea>
 8005536:	231b      	movs	r3, #27
 8005538:	2218      	movs	r2, #24
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e0b4      	b.n	80056ae <UART_SetConfig+0x22a>
 8005544:	231b      	movs	r3, #27
 8005546:	2218      	movs	r2, #24
 8005548:	189b      	adds	r3, r3, r2
 800554a:	19db      	adds	r3, r3, r7
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e0ad      	b.n	80056ae <UART_SetConfig+0x22a>
 8005552:	231b      	movs	r3, #27
 8005554:	2218      	movs	r2, #24
 8005556:	189b      	adds	r3, r3, r2
 8005558:	19db      	adds	r3, r3, r7
 800555a:	2204      	movs	r2, #4
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e0a6      	b.n	80056ae <UART_SetConfig+0x22a>
 8005560:	231b      	movs	r3, #27
 8005562:	2218      	movs	r2, #24
 8005564:	189b      	adds	r3, r3, r2
 8005566:	19db      	adds	r3, r3, r7
 8005568:	2208      	movs	r2, #8
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e09f      	b.n	80056ae <UART_SetConfig+0x22a>
 800556e:	231b      	movs	r3, #27
 8005570:	2218      	movs	r2, #24
 8005572:	189b      	adds	r3, r3, r2
 8005574:	19db      	adds	r3, r3, r7
 8005576:	2210      	movs	r2, #16
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e098      	b.n	80056ae <UART_SetConfig+0x22a>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a96      	ldr	r2, [pc, #600]	@ (80057dc <UART_SetConfig+0x358>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d131      	bne.n	80055ea <UART_SetConfig+0x166>
 8005586:	4b94      	ldr	r3, [pc, #592]	@ (80057d8 <UART_SetConfig+0x354>)
 8005588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558a:	220c      	movs	r2, #12
 800558c:	4013      	ands	r3, r2
 800558e:	2b0c      	cmp	r3, #12
 8005590:	d01d      	beq.n	80055ce <UART_SetConfig+0x14a>
 8005592:	d823      	bhi.n	80055dc <UART_SetConfig+0x158>
 8005594:	2b08      	cmp	r3, #8
 8005596:	d00c      	beq.n	80055b2 <UART_SetConfig+0x12e>
 8005598:	d820      	bhi.n	80055dc <UART_SetConfig+0x158>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <UART_SetConfig+0x120>
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00e      	beq.n	80055c0 <UART_SetConfig+0x13c>
 80055a2:	e01b      	b.n	80055dc <UART_SetConfig+0x158>
 80055a4:	231b      	movs	r3, #27
 80055a6:	2218      	movs	r2, #24
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e07d      	b.n	80056ae <UART_SetConfig+0x22a>
 80055b2:	231b      	movs	r3, #27
 80055b4:	2218      	movs	r2, #24
 80055b6:	189b      	adds	r3, r3, r2
 80055b8:	19db      	adds	r3, r3, r7
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e076      	b.n	80056ae <UART_SetConfig+0x22a>
 80055c0:	231b      	movs	r3, #27
 80055c2:	2218      	movs	r2, #24
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	19db      	adds	r3, r3, r7
 80055c8:	2204      	movs	r2, #4
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e06f      	b.n	80056ae <UART_SetConfig+0x22a>
 80055ce:	231b      	movs	r3, #27
 80055d0:	2218      	movs	r2, #24
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	19db      	adds	r3, r3, r7
 80055d6:	2208      	movs	r2, #8
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e068      	b.n	80056ae <UART_SetConfig+0x22a>
 80055dc:	231b      	movs	r3, #27
 80055de:	2218      	movs	r2, #24
 80055e0:	189b      	adds	r3, r3, r2
 80055e2:	19db      	adds	r3, r3, r7
 80055e4:	2210      	movs	r2, #16
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e061      	b.n	80056ae <UART_SetConfig+0x22a>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a7c      	ldr	r2, [pc, #496]	@ (80057e0 <UART_SetConfig+0x35c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d106      	bne.n	8005602 <UART_SetConfig+0x17e>
 80055f4:	231b      	movs	r3, #27
 80055f6:	2218      	movs	r2, #24
 80055f8:	189b      	adds	r3, r3, r2
 80055fa:	19db      	adds	r3, r3, r7
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e055      	b.n	80056ae <UART_SetConfig+0x22a>
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a77      	ldr	r2, [pc, #476]	@ (80057e4 <UART_SetConfig+0x360>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d106      	bne.n	800561a <UART_SetConfig+0x196>
 800560c:	231b      	movs	r3, #27
 800560e:	2218      	movs	r2, #24
 8005610:	189b      	adds	r3, r3, r2
 8005612:	19db      	adds	r3, r3, r7
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e049      	b.n	80056ae <UART_SetConfig+0x22a>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6b      	ldr	r2, [pc, #428]	@ (80057cc <UART_SetConfig+0x348>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d13e      	bne.n	80056a2 <UART_SetConfig+0x21e>
 8005624:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <UART_SetConfig+0x354>)
 8005626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005628:	23c0      	movs	r3, #192	@ 0xc0
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	4013      	ands	r3, r2
 800562e:	22c0      	movs	r2, #192	@ 0xc0
 8005630:	0112      	lsls	r2, r2, #4
 8005632:	4293      	cmp	r3, r2
 8005634:	d027      	beq.n	8005686 <UART_SetConfig+0x202>
 8005636:	22c0      	movs	r2, #192	@ 0xc0
 8005638:	0112      	lsls	r2, r2, #4
 800563a:	4293      	cmp	r3, r2
 800563c:	d82a      	bhi.n	8005694 <UART_SetConfig+0x210>
 800563e:	2280      	movs	r2, #128	@ 0x80
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	4293      	cmp	r3, r2
 8005644:	d011      	beq.n	800566a <UART_SetConfig+0x1e6>
 8005646:	2280      	movs	r2, #128	@ 0x80
 8005648:	0112      	lsls	r2, r2, #4
 800564a:	4293      	cmp	r3, r2
 800564c:	d822      	bhi.n	8005694 <UART_SetConfig+0x210>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <UART_SetConfig+0x1d8>
 8005652:	2280      	movs	r2, #128	@ 0x80
 8005654:	00d2      	lsls	r2, r2, #3
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <UART_SetConfig+0x1f4>
 800565a:	e01b      	b.n	8005694 <UART_SetConfig+0x210>
 800565c:	231b      	movs	r3, #27
 800565e:	2218      	movs	r2, #24
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e021      	b.n	80056ae <UART_SetConfig+0x22a>
 800566a:	231b      	movs	r3, #27
 800566c:	2218      	movs	r2, #24
 800566e:	189b      	adds	r3, r3, r2
 8005670:	19db      	adds	r3, r3, r7
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e01a      	b.n	80056ae <UART_SetConfig+0x22a>
 8005678:	231b      	movs	r3, #27
 800567a:	2218      	movs	r2, #24
 800567c:	189b      	adds	r3, r3, r2
 800567e:	19db      	adds	r3, r3, r7
 8005680:	2204      	movs	r2, #4
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e013      	b.n	80056ae <UART_SetConfig+0x22a>
 8005686:	231b      	movs	r3, #27
 8005688:	2218      	movs	r2, #24
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e00c      	b.n	80056ae <UART_SetConfig+0x22a>
 8005694:	231b      	movs	r3, #27
 8005696:	2218      	movs	r2, #24
 8005698:	189b      	adds	r3, r3, r2
 800569a:	19db      	adds	r3, r3, r7
 800569c:	2210      	movs	r2, #16
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e005      	b.n	80056ae <UART_SetConfig+0x22a>
 80056a2:	231b      	movs	r3, #27
 80056a4:	2218      	movs	r2, #24
 80056a6:	189b      	adds	r3, r3, r2
 80056a8:	19db      	adds	r3, r3, r7
 80056aa:	2210      	movs	r2, #16
 80056ac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a46      	ldr	r2, [pc, #280]	@ (80057cc <UART_SetConfig+0x348>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d000      	beq.n	80056ba <UART_SetConfig+0x236>
 80056b8:	e09a      	b.n	80057f0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ba:	231b      	movs	r3, #27
 80056bc:	2218      	movs	r2, #24
 80056be:	189b      	adds	r3, r3, r2
 80056c0:	19db      	adds	r3, r3, r7
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d01d      	beq.n	8005704 <UART_SetConfig+0x280>
 80056c8:	dc20      	bgt.n	800570c <UART_SetConfig+0x288>
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d015      	beq.n	80056fa <UART_SetConfig+0x276>
 80056ce:	dc1d      	bgt.n	800570c <UART_SetConfig+0x288>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <UART_SetConfig+0x256>
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d005      	beq.n	80056e4 <UART_SetConfig+0x260>
 80056d8:	e018      	b.n	800570c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056da:	f7ff fc57 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 80056de:	0003      	movs	r3, r0
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056e2:	e01c      	b.n	800571e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e4:	4b3c      	ldr	r3, [pc, #240]	@ (80057d8 <UART_SetConfig+0x354>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2210      	movs	r2, #16
 80056ea:	4013      	ands	r3, r2
 80056ec:	d002      	beq.n	80056f4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056ee:	4b3e      	ldr	r3, [pc, #248]	@ (80057e8 <UART_SetConfig+0x364>)
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f2:	e014      	b.n	800571e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b3d      	ldr	r3, [pc, #244]	@ (80057ec <UART_SetConfig+0x368>)
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056f8:	e011      	b.n	800571e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7ff fb97 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 80056fe:	0003      	movs	r3, r0
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005702:	e00c      	b.n	800571e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800570a:	e008      	b.n	800571e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005710:	231a      	movs	r3, #26
 8005712:	2218      	movs	r2, #24
 8005714:	189b      	adds	r3, r3, r2
 8005716:	19db      	adds	r3, r3, r7
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
        break;
 800571c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d100      	bne.n	8005726 <UART_SetConfig+0x2a2>
 8005724:	e133      	b.n	800598e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	0013      	movs	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	189b      	adds	r3, r3, r2
 8005730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005732:	429a      	cmp	r2, r3
 8005734:	d305      	bcc.n	8005742 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800573c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800573e:	429a      	cmp	r2, r3
 8005740:	d906      	bls.n	8005750 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005742:	231a      	movs	r3, #26
 8005744:	2218      	movs	r2, #24
 8005746:	189b      	adds	r3, r3, r2
 8005748:	19db      	adds	r3, r3, r7
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e11e      	b.n	800598e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	6939      	ldr	r1, [r7, #16]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	000b      	movs	r3, r1
 800575e:	0e1b      	lsrs	r3, r3, #24
 8005760:	0010      	movs	r0, r2
 8005762:	0205      	lsls	r5, r0, #8
 8005764:	431d      	orrs	r5, r3
 8005766:	000b      	movs	r3, r1
 8005768:	021c      	lsls	r4, r3, #8
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	1900      	adds	r0, r0, r4
 800577c:	4169      	adcs	r1, r5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	2300      	movs	r3, #0
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f7fa fe8c 	bl	80004a8 <__aeabi_uldivmod>
 8005790:	0002      	movs	r2, r0
 8005792:	000b      	movs	r3, r1
 8005794:	0013      	movs	r3, r2
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800579a:	23c0      	movs	r3, #192	@ 0xc0
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	429a      	cmp	r2, r3
 80057a0:	d309      	bcc.n	80057b6 <UART_SetConfig+0x332>
 80057a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	035b      	lsls	r3, r3, #13
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d204      	bcs.n	80057b6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	e0eb      	b.n	800598e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80057b6:	231a      	movs	r3, #26
 80057b8:	2218      	movs	r2, #24
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	19db      	adds	r3, r3, r7
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e0e4      	b.n	800598e <UART_SetConfig+0x50a>
 80057c4:	efff69f3 	.word	0xefff69f3
 80057c8:	ffffcfff 	.word	0xffffcfff
 80057cc:	40004800 	.word	0x40004800
 80057d0:	fffff4ff 	.word	0xfffff4ff
 80057d4:	40013800 	.word	0x40013800
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40004400 	.word	0x40004400
 80057e0:	40004c00 	.word	0x40004c00
 80057e4:	40005000 	.word	0x40005000
 80057e8:	003d0900 	.word	0x003d0900
 80057ec:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d000      	beq.n	80057fe <UART_SetConfig+0x37a>
 80057fc:	e070      	b.n	80058e0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80057fe:	231b      	movs	r3, #27
 8005800:	2218      	movs	r2, #24
 8005802:	189b      	adds	r3, r3, r2
 8005804:	19db      	adds	r3, r3, r7
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d822      	bhi.n	8005852 <UART_SetConfig+0x3ce>
 800580c:	009a      	lsls	r2, r3, #2
 800580e:	4b67      	ldr	r3, [pc, #412]	@ (80059ac <UART_SetConfig+0x528>)
 8005810:	18d3      	adds	r3, r2, r3
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005816:	f7ff fbb9 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 800581a:	0003      	movs	r3, r0
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581e:	e021      	b.n	8005864 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7ff fbca 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8005824:	0003      	movs	r3, r0
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005828:	e01c      	b.n	8005864 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582a:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <UART_SetConfig+0x52c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2210      	movs	r2, #16
 8005830:	4013      	ands	r3, r2
 8005832:	d002      	beq.n	800583a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005834:	4b5f      	ldr	r3, [pc, #380]	@ (80059b4 <UART_SetConfig+0x530>)
 8005836:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005838:	e014      	b.n	8005864 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800583a:	4b5f      	ldr	r3, [pc, #380]	@ (80059b8 <UART_SetConfig+0x534>)
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800583e:	e011      	b.n	8005864 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005840:	f7ff faf4 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8005844:	0003      	movs	r3, r0
 8005846:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005848:	e00c      	b.n	8005864 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005850:	e008      	b.n	8005864 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005856:	231a      	movs	r3, #26
 8005858:	2218      	movs	r2, #24
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2201      	movs	r2, #1
 8005860:	701a      	strb	r2, [r3, #0]
        break;
 8005862:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d100      	bne.n	800586c <UART_SetConfig+0x3e8>
 800586a:	e090      	b.n	800598e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	005a      	lsls	r2, r3, #1
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	18d2      	adds	r2, r2, r3
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	0019      	movs	r1, r3
 800587e:	0010      	movs	r0, r2
 8005880:	f7fa fc5e 	bl	8000140 <__udivsi3>
 8005884:	0003      	movs	r3, r0
 8005886:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d921      	bls.n	80058d2 <UART_SetConfig+0x44e>
 800588e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	025b      	lsls	r3, r3, #9
 8005894:	429a      	cmp	r2, r3
 8005896:	d21c      	bcs.n	80058d2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589a:	b29a      	uxth	r2, r3
 800589c:	200e      	movs	r0, #14
 800589e:	2418      	movs	r4, #24
 80058a0:	1903      	adds	r3, r0, r4
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	210f      	movs	r1, #15
 80058a6:	438a      	bics	r2, r1
 80058a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2207      	movs	r2, #7
 80058b2:	4013      	ands	r3, r2
 80058b4:	b299      	uxth	r1, r3
 80058b6:	1903      	adds	r3, r0, r4
 80058b8:	19db      	adds	r3, r3, r7
 80058ba:	1902      	adds	r2, r0, r4
 80058bc:	19d2      	adds	r2, r2, r7
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	1902      	adds	r2, r0, r4
 80058ca:	19d2      	adds	r2, r2, r7
 80058cc:	8812      	ldrh	r2, [r2, #0]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e05d      	b.n	800598e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80058d2:	231a      	movs	r3, #26
 80058d4:	2218      	movs	r2, #24
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	19db      	adds	r3, r3, r7
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e056      	b.n	800598e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e0:	231b      	movs	r3, #27
 80058e2:	2218      	movs	r2, #24
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d822      	bhi.n	8005934 <UART_SetConfig+0x4b0>
 80058ee:	009a      	lsls	r2, r3, #2
 80058f0:	4b32      	ldr	r3, [pc, #200]	@ (80059bc <UART_SetConfig+0x538>)
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7ff fb48 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 80058fc:	0003      	movs	r3, r0
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005900:	e021      	b.n	8005946 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005902:	f7ff fb59 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 8005906:	0003      	movs	r3, r0
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800590a:	e01c      	b.n	8005946 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590c:	4b28      	ldr	r3, [pc, #160]	@ (80059b0 <UART_SetConfig+0x52c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2210      	movs	r2, #16
 8005912:	4013      	ands	r3, r2
 8005914:	d002      	beq.n	800591c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005916:	4b27      	ldr	r3, [pc, #156]	@ (80059b4 <UART_SetConfig+0x530>)
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800591a:	e014      	b.n	8005946 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800591c:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <UART_SetConfig+0x534>)
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005920:	e011      	b.n	8005946 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7ff fa83 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8005926:	0003      	movs	r3, r0
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800592a:	e00c      	b.n	8005946 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005932:	e008      	b.n	8005946 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005938:	231a      	movs	r3, #26
 800593a:	2218      	movs	r2, #24
 800593c:	189b      	adds	r3, r3, r2
 800593e:	19db      	adds	r3, r3, r7
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
        break;
 8005944:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	085a      	lsrs	r2, r3, #1
 8005952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005954:	18d2      	adds	r2, r2, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	0019      	movs	r1, r3
 800595c:	0010      	movs	r0, r2
 800595e:	f7fa fbef 	bl	8000140 <__udivsi3>
 8005962:	0003      	movs	r3, r0
 8005964:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d90a      	bls.n	8005982 <UART_SetConfig+0x4fe>
 800596c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	025b      	lsls	r3, r3, #9
 8005972:	429a      	cmp	r2, r3
 8005974:	d205      	bcs.n	8005982 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	b29a      	uxth	r2, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60da      	str	r2, [r3, #12]
 8005980:	e005      	b.n	800598e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005982:	231a      	movs	r3, #26
 8005984:	2218      	movs	r2, #24
 8005986:	189b      	adds	r3, r3, r2
 8005988:	19db      	adds	r3, r3, r7
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2200      	movs	r2, #0
 8005992:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	2200      	movs	r2, #0
 8005998:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800599a:	231a      	movs	r3, #26
 800599c:	2218      	movs	r2, #24
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	19db      	adds	r3, r3, r7
 80059a2:	781b      	ldrb	r3, [r3, #0]
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b00e      	add	sp, #56	@ 0x38
 80059aa:	bdb0      	pop	{r4, r5, r7, pc}
 80059ac:	0800a788 	.word	0x0800a788
 80059b0:	40021000 	.word	0x40021000
 80059b4:	003d0900 	.word	0x003d0900
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	0800a7ac 	.word	0x0800a7ac

080059c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	2201      	movs	r2, #1
 80059ce:	4013      	ands	r3, r2
 80059d0:	d00b      	beq.n	80059ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005b04 <UART_AdvFeatureConfig+0x144>)
 80059da:	4013      	ands	r3, r2
 80059dc:	0019      	movs	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	2202      	movs	r2, #2
 80059f0:	4013      	ands	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a43      	ldr	r2, [pc, #268]	@ (8005b08 <UART_AdvFeatureConfig+0x148>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	2204      	movs	r2, #4
 8005a12:	4013      	ands	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b0c <UART_AdvFeatureConfig+0x14c>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	0019      	movs	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	2208      	movs	r2, #8
 8005a34:	4013      	ands	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4a34      	ldr	r2, [pc, #208]	@ (8005b10 <UART_AdvFeatureConfig+0x150>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	2210      	movs	r2, #16
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <UART_AdvFeatureConfig+0x154>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	0019      	movs	r1, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a76:	2220      	movs	r2, #32
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4a25      	ldr	r2, [pc, #148]	@ (8005b18 <UART_AdvFeatureConfig+0x158>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	2240      	movs	r2, #64	@ 0x40
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d01d      	beq.n	8005ada <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <UART_AdvFeatureConfig+0x15c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aba:	2380      	movs	r3, #128	@ 0x80
 8005abc:	035b      	lsls	r3, r3, #13
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10b      	bne.n	8005ada <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <UART_AdvFeatureConfig+0x160>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	2280      	movs	r2, #128	@ 0x80
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	4a0e      	ldr	r2, [pc, #56]	@ (8005b24 <UART_AdvFeatureConfig+0x164>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	0019      	movs	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }
}
 8005afc:	46c0      	nop			@ (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b002      	add	sp, #8
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	fffdffff 	.word	0xfffdffff
 8005b08:	fffeffff 	.word	0xfffeffff
 8005b0c:	fffbffff 	.word	0xfffbffff
 8005b10:	ffff7fff 	.word	0xffff7fff
 8005b14:	ffffefff 	.word	0xffffefff
 8005b18:	ffffdfff 	.word	0xffffdfff
 8005b1c:	ffefffff 	.word	0xffefffff
 8005b20:	ff9fffff 	.word	0xff9fffff
 8005b24:	fff7ffff 	.word	0xfff7ffff

08005b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	@ 0x48
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2284      	movs	r2, #132	@ 0x84
 8005b34:	2100      	movs	r1, #0
 8005b36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b38:	f7fd fcbe 	bl	80034b8 <HAL_GetTick>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2208      	movs	r2, #8
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d12c      	bne.n	8005ba8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b50:	2280      	movs	r2, #128	@ 0x80
 8005b52:	0391      	lsls	r1, r2, #14
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4a46      	ldr	r2, [pc, #280]	@ (8005c70 <UART_CheckIdleState+0x148>)
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f000 f88c 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005b60:	1e03      	subs	r3, r0, #0
 8005b62:	d021      	beq.n	8005ba8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b64:	f3ef 8310 	mrs	r3, PRIMASK
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b6e:	2301      	movs	r3, #1
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	46c0      	nop			@ (mov r8, r8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2180      	movs	r1, #128	@ 0x80
 8005b86:	438a      	bics	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	f383 8810 	msr	PRIMASK, r3
}
 8005b94:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2278      	movs	r2, #120	@ 0x78
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e05f      	b.n	8005c68 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d146      	bne.n	8005c44 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb8:	2280      	movs	r2, #128	@ 0x80
 8005bba:	03d1      	lsls	r1, r2, #15
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <UART_CheckIdleState+0x148>)
 8005bc0:	9200      	str	r2, [sp, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f858 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d03b      	beq.n	8005c44 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			@ (mov r8, r8)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4921      	ldr	r1, [pc, #132]	@ (8005c74 <UART_CheckIdleState+0x14c>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f383 8810 	msr	PRIMASK, r3
}
 8005bfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c04:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c08:	2301      	movs	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	438a      	bics	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2280      	movs	r2, #128	@ 0x80
 8005c34:	2120      	movs	r1, #32
 8005c36:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2278      	movs	r2, #120	@ 0x78
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e011      	b.n	8005c68 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2280      	movs	r2, #128	@ 0x80
 8005c4e:	2120      	movs	r1, #32
 8005c50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2278      	movs	r2, #120	@ 0x78
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b010      	add	sp, #64	@ 0x40
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	01ffffff 	.word	0x01ffffff
 8005c74:	fffffedf 	.word	0xfffffedf

08005c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	e04b      	b.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	d048      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c90:	f7fd fc12 	bl	80034b8 <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d302      	bcc.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e04b      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d035      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d111      	bne.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f83c 	bl	8005d4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2284      	movs	r2, #132	@ 0x84
 8005cd8:	2108      	movs	r1, #8
 8005cda:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2278      	movs	r2, #120	@ 0x78
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e02c      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	2380      	movs	r3, #128	@ 0x80
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d112      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2280      	movs	r2, #128	@ 0x80
 8005d02:	0112      	lsls	r2, r2, #4
 8005d04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f81f 	bl	8005d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2284      	movs	r2, #132	@ 0x84
 8005d12:	2120      	movs	r1, #32
 8005d14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2278      	movs	r2, #120	@ 0x78
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e00f      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	425a      	negs	r2, r3
 8005d32:	4153      	adcs	r3, r2
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	001a      	movs	r2, r3
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d0a4      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b004      	add	sp, #16
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08e      	sub	sp, #56	@ 0x38
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d54:	f3ef 8310 	mrs	r3, PRIMASK
 8005d58:	617b      	str	r3, [r7, #20]
  return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f383 8810 	msr	PRIMASK, r3
}
 8005d68:	46c0      	nop			@ (mov r8, r8)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4926      	ldr	r1, [pc, #152]	@ (8005e10 <UART_EndRxTransfer+0xc4>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d86:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d90:	2301      	movs	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	f383 8810 	msr	PRIMASK, r3
}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2101      	movs	r1, #1
 8005da8:	438a      	bics	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	f383 8810 	msr	PRIMASK, r3
}
 8005db6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d118      	bne.n	8005df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dca:	2301      	movs	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f383 8810 	msr	PRIMASK, r3
}
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2110      	movs	r1, #16
 8005de2:	438a      	bics	r2, r1
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2280      	movs	r2, #128	@ 0x80
 8005df6:	2120      	movs	r1, #32
 8005df8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b00e      	add	sp, #56	@ 0x38
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			@ (mov r8, r8)
 8005e10:	fffffedf 	.word	0xfffffedf

08005e14 <__cvt>:
 8005e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e16:	001f      	movs	r7, r3
 8005e18:	2300      	movs	r3, #0
 8005e1a:	0016      	movs	r6, r2
 8005e1c:	b08b      	sub	sp, #44	@ 0x2c
 8005e1e:	429f      	cmp	r7, r3
 8005e20:	da04      	bge.n	8005e2c <__cvt+0x18>
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	0609      	lsls	r1, r1, #24
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	001f      	movs	r7, r3
 8005e2a:	232d      	movs	r3, #45	@ 0x2d
 8005e2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e2e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005e30:	7013      	strb	r3, [r2, #0]
 8005e32:	2320      	movs	r3, #32
 8005e34:	2203      	movs	r2, #3
 8005e36:	439d      	bics	r5, r3
 8005e38:	2d46      	cmp	r5, #70	@ 0x46
 8005e3a:	d007      	beq.n	8005e4c <__cvt+0x38>
 8005e3c:	002b      	movs	r3, r5
 8005e3e:	3b45      	subs	r3, #69	@ 0x45
 8005e40:	4259      	negs	r1, r3
 8005e42:	414b      	adcs	r3, r1
 8005e44:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005e46:	3a01      	subs	r2, #1
 8005e48:	18cb      	adds	r3, r1, r3
 8005e4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e4c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	ab08      	add	r3, sp, #32
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e56:	9200      	str	r2, [sp, #0]
 8005e58:	9302      	str	r3, [sp, #8]
 8005e5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e5c:	0032      	movs	r2, r6
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	003b      	movs	r3, r7
 8005e62:	f001 f89b 	bl	8006f9c <_dtoa_r>
 8005e66:	0004      	movs	r4, r0
 8005e68:	2d47      	cmp	r5, #71	@ 0x47
 8005e6a:	d11b      	bne.n	8005ea4 <__cvt+0x90>
 8005e6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e6e:	07db      	lsls	r3, r3, #31
 8005e70:	d511      	bpl.n	8005e96 <__cvt+0x82>
 8005e72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e74:	18c3      	adds	r3, r0, r3
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	0030      	movs	r0, r6
 8005e7e:	0039      	movs	r1, r7
 8005e80:	f7fa fae4 	bl	800044c <__aeabi_dcmpeq>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d001      	beq.n	8005e8c <__cvt+0x78>
 8005e88:	9b07      	ldr	r3, [sp, #28]
 8005e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8c:	2230      	movs	r2, #48	@ 0x30
 8005e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e90:	9907      	ldr	r1, [sp, #28]
 8005e92:	428b      	cmp	r3, r1
 8005e94:	d320      	bcc.n	8005ed8 <__cvt+0xc4>
 8005e96:	0020      	movs	r0, r4
 8005e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005e9c:	1b1b      	subs	r3, r3, r4
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	b00b      	add	sp, #44	@ 0x2c
 8005ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ea6:	18c3      	adds	r3, r0, r3
 8005ea8:	9307      	str	r3, [sp, #28]
 8005eaa:	2d46      	cmp	r5, #70	@ 0x46
 8005eac:	d1e4      	bne.n	8005e78 <__cvt+0x64>
 8005eae:	7803      	ldrb	r3, [r0, #0]
 8005eb0:	2b30      	cmp	r3, #48	@ 0x30
 8005eb2:	d10c      	bne.n	8005ece <__cvt+0xba>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	0030      	movs	r0, r6
 8005eba:	0039      	movs	r1, r7
 8005ebc:	f7fa fac6 	bl	800044c <__aeabi_dcmpeq>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d104      	bne.n	8005ece <__cvt+0xba>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ed0:	9a07      	ldr	r2, [sp, #28]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	18d3      	adds	r3, r2, r3
 8005ed6:	e7ce      	b.n	8005e76 <__cvt+0x62>
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	9109      	str	r1, [sp, #36]	@ 0x24
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e7d6      	b.n	8005e8e <__cvt+0x7a>

08005ee0 <__exponent>:
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	232b      	movs	r3, #43	@ 0x2b
 8005ee4:	0005      	movs	r5, r0
 8005ee6:	000c      	movs	r4, r1
 8005ee8:	b085      	sub	sp, #20
 8005eea:	7002      	strb	r2, [r0, #0]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	da01      	bge.n	8005ef4 <__exponent+0x14>
 8005ef0:	424c      	negs	r4, r1
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	706b      	strb	r3, [r5, #1]
 8005ef6:	2c09      	cmp	r4, #9
 8005ef8:	dd2c      	ble.n	8005f54 <__exponent+0x74>
 8005efa:	ab02      	add	r3, sp, #8
 8005efc:	1dde      	adds	r6, r3, #7
 8005efe:	0020      	movs	r0, r4
 8005f00:	210a      	movs	r1, #10
 8005f02:	f7fa fa8d 	bl	8000420 <__aeabi_idivmod>
 8005f06:	0037      	movs	r7, r6
 8005f08:	3130      	adds	r1, #48	@ 0x30
 8005f0a:	3e01      	subs	r6, #1
 8005f0c:	0020      	movs	r0, r4
 8005f0e:	7031      	strb	r1, [r6, #0]
 8005f10:	210a      	movs	r1, #10
 8005f12:	9401      	str	r4, [sp, #4]
 8005f14:	f7fa f99e 	bl	8000254 <__divsi3>
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	0004      	movs	r4, r0
 8005f1c:	2b63      	cmp	r3, #99	@ 0x63
 8005f1e:	dcee      	bgt.n	8005efe <__exponent+0x1e>
 8005f20:	1eba      	subs	r2, r7, #2
 8005f22:	1ca8      	adds	r0, r5, #2
 8005f24:	0001      	movs	r1, r0
 8005f26:	0013      	movs	r3, r2
 8005f28:	3430      	adds	r4, #48	@ 0x30
 8005f2a:	7014      	strb	r4, [r2, #0]
 8005f2c:	ac02      	add	r4, sp, #8
 8005f2e:	3407      	adds	r4, #7
 8005f30:	429c      	cmp	r4, r3
 8005f32:	d80a      	bhi.n	8005f4a <__exponent+0x6a>
 8005f34:	2300      	movs	r3, #0
 8005f36:	42a2      	cmp	r2, r4
 8005f38:	d803      	bhi.n	8005f42 <__exponent+0x62>
 8005f3a:	3309      	adds	r3, #9
 8005f3c:	aa02      	add	r2, sp, #8
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	1bdb      	subs	r3, r3, r7
 8005f42:	18c0      	adds	r0, r0, r3
 8005f44:	1b40      	subs	r0, r0, r5
 8005f46:	b005      	add	sp, #20
 8005f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f4a:	781c      	ldrb	r4, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	700c      	strb	r4, [r1, #0]
 8005f50:	3101      	adds	r1, #1
 8005f52:	e7eb      	b.n	8005f2c <__exponent+0x4c>
 8005f54:	2330      	movs	r3, #48	@ 0x30
 8005f56:	18e4      	adds	r4, r4, r3
 8005f58:	70ab      	strb	r3, [r5, #2]
 8005f5a:	1d28      	adds	r0, r5, #4
 8005f5c:	70ec      	strb	r4, [r5, #3]
 8005f5e:	e7f1      	b.n	8005f44 <__exponent+0x64>

08005f60 <_printf_float>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b097      	sub	sp, #92	@ 0x5c
 8005f64:	000d      	movs	r5, r1
 8005f66:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f68:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8005f6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f6e:	f000 fef9 	bl	8006d64 <_localeconv_r>
 8005f72:	6803      	ldr	r3, [r0, #0]
 8005f74:	0018      	movs	r0, r3
 8005f76:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f78:	f7fa f8c6 	bl	8000108 <strlen>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f80:	9314      	str	r3, [sp, #80]	@ 0x50
 8005f82:	7e2b      	ldrb	r3, [r5, #24]
 8005f84:	2207      	movs	r2, #7
 8005f86:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f8c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	05c9      	lsls	r1, r1, #23
 8005f92:	d545      	bpl.n	8006020 <_printf_float+0xc0>
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	4393      	bics	r3, r2
 8005f98:	001a      	movs	r2, r3
 8005f9a:	3208      	adds	r2, #8
 8005f9c:	6022      	str	r2, [r4, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	681e      	ldr	r6, [r3, #0]
 8005fa2:	685f      	ldr	r7, [r3, #4]
 8005fa4:	007b      	lsls	r3, r7, #1
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005faa:	9610      	str	r6, [sp, #64]	@ 0x40
 8005fac:	64ae      	str	r6, [r5, #72]	@ 0x48
 8005fae:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005fb0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005fb2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005fb4:	4ba7      	ldr	r3, [pc, #668]	@ (8006254 <_printf_float+0x2f4>)
 8005fb6:	4252      	negs	r2, r2
 8005fb8:	f7fc fb8a 	bl	80026d0 <__aeabi_dcmpun>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d131      	bne.n	8006024 <_printf_float+0xc4>
 8005fc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005fc2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4ba3      	ldr	r3, [pc, #652]	@ (8006254 <_printf_float+0x2f4>)
 8005fc8:	4252      	negs	r2, r2
 8005fca:	f7fa fa4f 	bl	800046c <__aeabi_dcmple>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d128      	bne.n	8006024 <_printf_float+0xc4>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	0030      	movs	r0, r6
 8005fd8:	0039      	movs	r1, r7
 8005fda:	f7fa fa3d 	bl	8000458 <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d003      	beq.n	8005fea <_printf_float+0x8a>
 8005fe2:	002b      	movs	r3, r5
 8005fe4:	222d      	movs	r2, #45	@ 0x2d
 8005fe6:	3343      	adds	r3, #67	@ 0x43
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005fec:	4f9a      	ldr	r7, [pc, #616]	@ (8006258 <_printf_float+0x2f8>)
 8005fee:	2b47      	cmp	r3, #71	@ 0x47
 8005ff0:	d900      	bls.n	8005ff4 <_printf_float+0x94>
 8005ff2:	4f9a      	ldr	r7, [pc, #616]	@ (800625c <_printf_float+0x2fc>)
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	2400      	movs	r4, #0
 8005ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ffa:	612b      	str	r3, [r5, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	439a      	bics	r2, r3
 8006000:	602a      	str	r2, [r5, #0]
 8006002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006004:	0029      	movs	r1, r5
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800600a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800600c:	aa15      	add	r2, sp, #84	@ 0x54
 800600e:	f000 f9e5 	bl	80063dc <_printf_common>
 8006012:	3001      	adds	r0, #1
 8006014:	d000      	beq.n	8006018 <_printf_float+0xb8>
 8006016:	e09f      	b.n	8006158 <_printf_float+0x1f8>
 8006018:	2001      	movs	r0, #1
 800601a:	4240      	negs	r0, r0
 800601c:	b017      	add	sp, #92	@ 0x5c
 800601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006020:	3307      	adds	r3, #7
 8006022:	e7b8      	b.n	8005f96 <_printf_float+0x36>
 8006024:	0032      	movs	r2, r6
 8006026:	003b      	movs	r3, r7
 8006028:	0030      	movs	r0, r6
 800602a:	0039      	movs	r1, r7
 800602c:	f7fc fb50 	bl	80026d0 <__aeabi_dcmpun>
 8006030:	2800      	cmp	r0, #0
 8006032:	d00b      	beq.n	800604c <_printf_float+0xec>
 8006034:	2f00      	cmp	r7, #0
 8006036:	da03      	bge.n	8006040 <_printf_float+0xe0>
 8006038:	002b      	movs	r3, r5
 800603a:	222d      	movs	r2, #45	@ 0x2d
 800603c:	3343      	adds	r3, #67	@ 0x43
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006042:	4f87      	ldr	r7, [pc, #540]	@ (8006260 <_printf_float+0x300>)
 8006044:	2b47      	cmp	r3, #71	@ 0x47
 8006046:	d9d5      	bls.n	8005ff4 <_printf_float+0x94>
 8006048:	4f86      	ldr	r7, [pc, #536]	@ (8006264 <_printf_float+0x304>)
 800604a:	e7d3      	b.n	8005ff4 <_printf_float+0x94>
 800604c:	2220      	movs	r2, #32
 800604e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006050:	686b      	ldr	r3, [r5, #4]
 8006052:	4394      	bics	r4, r2
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	d146      	bne.n	80060e6 <_printf_float+0x186>
 8006058:	3307      	adds	r3, #7
 800605a:	606b      	str	r3, [r5, #4]
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	4313      	orrs	r3, r2
 8006064:	2200      	movs	r2, #0
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	9206      	str	r2, [sp, #24]
 800606a:	aa14      	add	r2, sp, #80	@ 0x50
 800606c:	9205      	str	r2, [sp, #20]
 800606e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006070:	a90a      	add	r1, sp, #40	@ 0x28
 8006072:	9204      	str	r2, [sp, #16]
 8006074:	aa13      	add	r2, sp, #76	@ 0x4c
 8006076:	9203      	str	r2, [sp, #12]
 8006078:	2223      	movs	r2, #35	@ 0x23
 800607a:	1852      	adds	r2, r2, r1
 800607c:	9202      	str	r2, [sp, #8]
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	686b      	ldr	r3, [r5, #4]
 8006082:	0032      	movs	r2, r6
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006088:	003b      	movs	r3, r7
 800608a:	f7ff fec3 	bl	8005e14 <__cvt>
 800608e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006090:	0007      	movs	r7, r0
 8006092:	2c47      	cmp	r4, #71	@ 0x47
 8006094:	d12d      	bne.n	80060f2 <_printf_float+0x192>
 8006096:	1cd3      	adds	r3, r2, #3
 8006098:	db02      	blt.n	80060a0 <_printf_float+0x140>
 800609a:	686b      	ldr	r3, [r5, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	dd48      	ble.n	8006132 <_printf_float+0x1d2>
 80060a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80060a4:	3b02      	subs	r3, #2
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80060aa:	0028      	movs	r0, r5
 80060ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060ae:	3901      	subs	r1, #1
 80060b0:	3050      	adds	r0, #80	@ 0x50
 80060b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80060b4:	f7ff ff14 	bl	8005ee0 <__exponent>
 80060b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80060ba:	0004      	movs	r4, r0
 80060bc:	1813      	adds	r3, r2, r0
 80060be:	612b      	str	r3, [r5, #16]
 80060c0:	2a01      	cmp	r2, #1
 80060c2:	dc02      	bgt.n	80060ca <_printf_float+0x16a>
 80060c4:	682a      	ldr	r2, [r5, #0]
 80060c6:	07d2      	lsls	r2, r2, #31
 80060c8:	d501      	bpl.n	80060ce <_printf_float+0x16e>
 80060ca:	3301      	adds	r3, #1
 80060cc:	612b      	str	r3, [r5, #16]
 80060ce:	2323      	movs	r3, #35	@ 0x23
 80060d0:	aa0a      	add	r2, sp, #40	@ 0x28
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d100      	bne.n	80060dc <_printf_float+0x17c>
 80060da:	e792      	b.n	8006002 <_printf_float+0xa2>
 80060dc:	002b      	movs	r3, r5
 80060de:	222d      	movs	r2, #45	@ 0x2d
 80060e0:	3343      	adds	r3, #67	@ 0x43
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e78d      	b.n	8006002 <_printf_float+0xa2>
 80060e6:	2c47      	cmp	r4, #71	@ 0x47
 80060e8:	d1b8      	bne.n	800605c <_printf_float+0xfc>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1b6      	bne.n	800605c <_printf_float+0xfc>
 80060ee:	3301      	adds	r3, #1
 80060f0:	e7b3      	b.n	800605a <_printf_float+0xfa>
 80060f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060f4:	0011      	movs	r1, r2
 80060f6:	2b65      	cmp	r3, #101	@ 0x65
 80060f8:	d9d7      	bls.n	80060aa <_printf_float+0x14a>
 80060fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060fc:	2b66      	cmp	r3, #102	@ 0x66
 80060fe:	d11a      	bne.n	8006136 <_printf_float+0x1d6>
 8006100:	686b      	ldr	r3, [r5, #4]
 8006102:	2a00      	cmp	r2, #0
 8006104:	dd09      	ble.n	800611a <_printf_float+0x1ba>
 8006106:	612a      	str	r2, [r5, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <_printf_float+0x1b2>
 800610c:	6829      	ldr	r1, [r5, #0]
 800610e:	07c9      	lsls	r1, r1, #31
 8006110:	d50b      	bpl.n	800612a <_printf_float+0x1ca>
 8006112:	3301      	adds	r3, #1
 8006114:	189b      	adds	r3, r3, r2
 8006116:	612b      	str	r3, [r5, #16]
 8006118:	e007      	b.n	800612a <_printf_float+0x1ca>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <_printf_float+0x1c6>
 800611e:	2201      	movs	r2, #1
 8006120:	6829      	ldr	r1, [r5, #0]
 8006122:	4211      	tst	r1, r2
 8006124:	d000      	beq.n	8006128 <_printf_float+0x1c8>
 8006126:	1c9a      	adds	r2, r3, #2
 8006128:	612a      	str	r2, [r5, #16]
 800612a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800612c:	2400      	movs	r4, #0
 800612e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006130:	e7cd      	b.n	80060ce <_printf_float+0x16e>
 8006132:	2367      	movs	r3, #103	@ 0x67
 8006134:	930c      	str	r3, [sp, #48]	@ 0x30
 8006136:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006138:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800613a:	4299      	cmp	r1, r3
 800613c:	db06      	blt.n	800614c <_printf_float+0x1ec>
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	6129      	str	r1, [r5, #16]
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d5f1      	bpl.n	800612a <_printf_float+0x1ca>
 8006146:	3101      	adds	r1, #1
 8006148:	6129      	str	r1, [r5, #16]
 800614a:	e7ee      	b.n	800612a <_printf_float+0x1ca>
 800614c:	2201      	movs	r2, #1
 800614e:	2900      	cmp	r1, #0
 8006150:	dce0      	bgt.n	8006114 <_printf_float+0x1b4>
 8006152:	1892      	adds	r2, r2, r2
 8006154:	1a52      	subs	r2, r2, r1
 8006156:	e7dd      	b.n	8006114 <_printf_float+0x1b4>
 8006158:	682a      	ldr	r2, [r5, #0]
 800615a:	0553      	lsls	r3, r2, #21
 800615c:	d408      	bmi.n	8006170 <_printf_float+0x210>
 800615e:	692b      	ldr	r3, [r5, #16]
 8006160:	003a      	movs	r2, r7
 8006162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006164:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006166:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006168:	47a0      	blx	r4
 800616a:	3001      	adds	r0, #1
 800616c:	d129      	bne.n	80061c2 <_printf_float+0x262>
 800616e:	e753      	b.n	8006018 <_printf_float+0xb8>
 8006170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006172:	2b65      	cmp	r3, #101	@ 0x65
 8006174:	d800      	bhi.n	8006178 <_printf_float+0x218>
 8006176:	e0da      	b.n	800632e <_printf_float+0x3ce>
 8006178:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800617a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	f7fa f964 	bl	800044c <__aeabi_dcmpeq>
 8006184:	2800      	cmp	r0, #0
 8006186:	d033      	beq.n	80061f0 <_printf_float+0x290>
 8006188:	2301      	movs	r3, #1
 800618a:	4a37      	ldr	r2, [pc, #220]	@ (8006268 <_printf_float+0x308>)
 800618c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800618e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006190:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006192:	47a0      	blx	r4
 8006194:	3001      	adds	r0, #1
 8006196:	d100      	bne.n	800619a <_printf_float+0x23a>
 8006198:	e73e      	b.n	8006018 <_printf_float+0xb8>
 800619a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800619c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800619e:	42b3      	cmp	r3, r6
 80061a0:	db02      	blt.n	80061a8 <_printf_float+0x248>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	07db      	lsls	r3, r3, #31
 80061a6:	d50c      	bpl.n	80061c2 <_printf_float+0x262>
 80061a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80061aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b2:	47a0      	blx	r4
 80061b4:	2400      	movs	r4, #0
 80061b6:	3001      	adds	r0, #1
 80061b8:	d100      	bne.n	80061bc <_printf_float+0x25c>
 80061ba:	e72d      	b.n	8006018 <_printf_float+0xb8>
 80061bc:	1e73      	subs	r3, r6, #1
 80061be:	42a3      	cmp	r3, r4
 80061c0:	dc0a      	bgt.n	80061d8 <_printf_float+0x278>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	079b      	lsls	r3, r3, #30
 80061c6:	d500      	bpl.n	80061ca <_printf_float+0x26a>
 80061c8:	e105      	b.n	80063d6 <_printf_float+0x476>
 80061ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061cc:	68e8      	ldr	r0, [r5, #12]
 80061ce:	4298      	cmp	r0, r3
 80061d0:	db00      	blt.n	80061d4 <_printf_float+0x274>
 80061d2:	e723      	b.n	800601c <_printf_float+0xbc>
 80061d4:	0018      	movs	r0, r3
 80061d6:	e721      	b.n	800601c <_printf_float+0xbc>
 80061d8:	002a      	movs	r2, r5
 80061da:	2301      	movs	r3, #1
 80061dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80061e2:	321a      	adds	r2, #26
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	d100      	bne.n	80061ec <_printf_float+0x28c>
 80061ea:	e715      	b.n	8006018 <_printf_float+0xb8>
 80061ec:	3401      	adds	r4, #1
 80061ee:	e7e5      	b.n	80061bc <_printf_float+0x25c>
 80061f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	dc3a      	bgt.n	800626c <_printf_float+0x30c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006268 <_printf_float+0x308>)
 80061fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006200:	47a0      	blx	r4
 8006202:	3001      	adds	r0, #1
 8006204:	d100      	bne.n	8006208 <_printf_float+0x2a8>
 8006206:	e707      	b.n	8006018 <_printf_float+0xb8>
 8006208:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800620a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800620c:	4333      	orrs	r3, r6
 800620e:	d102      	bne.n	8006216 <_printf_float+0x2b6>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	07db      	lsls	r3, r3, #31
 8006214:	d5d5      	bpl.n	80061c2 <_printf_float+0x262>
 8006216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800621a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800621c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800621e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006220:	47a0      	blx	r4
 8006222:	2300      	movs	r3, #0
 8006224:	3001      	adds	r0, #1
 8006226:	d100      	bne.n	800622a <_printf_float+0x2ca>
 8006228:	e6f6      	b.n	8006018 <_printf_float+0xb8>
 800622a:	930c      	str	r3, [sp, #48]	@ 0x30
 800622c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800622e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006230:	425b      	negs	r3, r3
 8006232:	4293      	cmp	r3, r2
 8006234:	dc01      	bgt.n	800623a <_printf_float+0x2da>
 8006236:	0033      	movs	r3, r6
 8006238:	e792      	b.n	8006160 <_printf_float+0x200>
 800623a:	002a      	movs	r2, r5
 800623c:	2301      	movs	r3, #1
 800623e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006240:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006242:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006244:	321a      	adds	r2, #26
 8006246:	47a0      	blx	r4
 8006248:	3001      	adds	r0, #1
 800624a:	d100      	bne.n	800624e <_printf_float+0x2ee>
 800624c:	e6e4      	b.n	8006018 <_printf_float+0xb8>
 800624e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006250:	3301      	adds	r3, #1
 8006252:	e7ea      	b.n	800622a <_printf_float+0x2ca>
 8006254:	7fefffff 	.word	0x7fefffff
 8006258:	0800a7d0 	.word	0x0800a7d0
 800625c:	0800a7d4 	.word	0x0800a7d4
 8006260:	0800a7d8 	.word	0x0800a7d8
 8006264:	0800a7dc 	.word	0x0800a7dc
 8006268:	0800a7e0 	.word	0x0800a7e0
 800626c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800626e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006270:	930c      	str	r3, [sp, #48]	@ 0x30
 8006272:	429e      	cmp	r6, r3
 8006274:	dd00      	ble.n	8006278 <_printf_float+0x318>
 8006276:	001e      	movs	r6, r3
 8006278:	2e00      	cmp	r6, #0
 800627a:	dc31      	bgt.n	80062e0 <_printf_float+0x380>
 800627c:	43f3      	mvns	r3, r6
 800627e:	2400      	movs	r4, #0
 8006280:	17db      	asrs	r3, r3, #31
 8006282:	4033      	ands	r3, r6
 8006284:	930e      	str	r3, [sp, #56]	@ 0x38
 8006286:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800628a:	1af3      	subs	r3, r6, r3
 800628c:	42a3      	cmp	r3, r4
 800628e:	dc30      	bgt.n	80062f2 <_printf_float+0x392>
 8006290:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006292:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006294:	429a      	cmp	r2, r3
 8006296:	dc38      	bgt.n	800630a <_printf_float+0x3aa>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d435      	bmi.n	800630a <_printf_float+0x3aa>
 800629e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80062a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062a4:	1b9b      	subs	r3, r3, r6
 80062a6:	1b14      	subs	r4, r2, r4
 80062a8:	429c      	cmp	r4, r3
 80062aa:	dd00      	ble.n	80062ae <_printf_float+0x34e>
 80062ac:	001c      	movs	r4, r3
 80062ae:	2c00      	cmp	r4, #0
 80062b0:	dc34      	bgt.n	800631c <_printf_float+0x3bc>
 80062b2:	43e3      	mvns	r3, r4
 80062b4:	2600      	movs	r6, #0
 80062b6:	17db      	asrs	r3, r3, #31
 80062b8:	401c      	ands	r4, r3
 80062ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	1b1b      	subs	r3, r3, r4
 80062c2:	42b3      	cmp	r3, r6
 80062c4:	dc00      	bgt.n	80062c8 <_printf_float+0x368>
 80062c6:	e77c      	b.n	80061c2 <_printf_float+0x262>
 80062c8:	002a      	movs	r2, r5
 80062ca:	2301      	movs	r3, #1
 80062cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80062d2:	321a      	adds	r2, #26
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	d100      	bne.n	80062dc <_printf_float+0x37c>
 80062da:	e69d      	b.n	8006018 <_printf_float+0xb8>
 80062dc:	3601      	adds	r6, #1
 80062de:	e7ec      	b.n	80062ba <_printf_float+0x35a>
 80062e0:	0033      	movs	r3, r6
 80062e2:	003a      	movs	r2, r7
 80062e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062ea:	47a0      	blx	r4
 80062ec:	3001      	adds	r0, #1
 80062ee:	d1c5      	bne.n	800627c <_printf_float+0x31c>
 80062f0:	e692      	b.n	8006018 <_printf_float+0xb8>
 80062f2:	002a      	movs	r2, r5
 80062f4:	2301      	movs	r3, #1
 80062f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80062fc:	321a      	adds	r2, #26
 80062fe:	47b0      	blx	r6
 8006300:	3001      	adds	r0, #1
 8006302:	d100      	bne.n	8006306 <_printf_float+0x3a6>
 8006304:	e688      	b.n	8006018 <_printf_float+0xb8>
 8006306:	3401      	adds	r4, #1
 8006308:	e7bd      	b.n	8006286 <_printf_float+0x326>
 800630a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800630c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800630e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006310:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006312:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006314:	47a0      	blx	r4
 8006316:	3001      	adds	r0, #1
 8006318:	d1c1      	bne.n	800629e <_printf_float+0x33e>
 800631a:	e67d      	b.n	8006018 <_printf_float+0xb8>
 800631c:	19ba      	adds	r2, r7, r6
 800631e:	0023      	movs	r3, r4
 8006320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006324:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006326:	47b0      	blx	r6
 8006328:	3001      	adds	r0, #1
 800632a:	d1c2      	bne.n	80062b2 <_printf_float+0x352>
 800632c:	e674      	b.n	8006018 <_printf_float+0xb8>
 800632e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006330:	930c      	str	r3, [sp, #48]	@ 0x30
 8006332:	2b01      	cmp	r3, #1
 8006334:	dc02      	bgt.n	800633c <_printf_float+0x3dc>
 8006336:	2301      	movs	r3, #1
 8006338:	421a      	tst	r2, r3
 800633a:	d039      	beq.n	80063b0 <_printf_float+0x450>
 800633c:	2301      	movs	r3, #1
 800633e:	003a      	movs	r2, r7
 8006340:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006344:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006346:	47b0      	blx	r6
 8006348:	3001      	adds	r0, #1
 800634a:	d100      	bne.n	800634e <_printf_float+0x3ee>
 800634c:	e664      	b.n	8006018 <_printf_float+0xb8>
 800634e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006354:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006356:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006358:	47b0      	blx	r6
 800635a:	3001      	adds	r0, #1
 800635c:	d100      	bne.n	8006360 <_printf_float+0x400>
 800635e:	e65b      	b.n	8006018 <_printf_float+0xb8>
 8006360:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006362:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	3b01      	subs	r3, #1
 800636a:	930c      	str	r3, [sp, #48]	@ 0x30
 800636c:	2300      	movs	r3, #0
 800636e:	f7fa f86d 	bl	800044c <__aeabi_dcmpeq>
 8006372:	2800      	cmp	r0, #0
 8006374:	d11a      	bne.n	80063ac <_printf_float+0x44c>
 8006376:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006378:	1c7a      	adds	r2, r7, #1
 800637a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800637c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800637e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006380:	47b0      	blx	r6
 8006382:	3001      	adds	r0, #1
 8006384:	d10e      	bne.n	80063a4 <_printf_float+0x444>
 8006386:	e647      	b.n	8006018 <_printf_float+0xb8>
 8006388:	002a      	movs	r2, r5
 800638a:	2301      	movs	r3, #1
 800638c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800638e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006390:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006392:	321a      	adds	r2, #26
 8006394:	47b8      	blx	r7
 8006396:	3001      	adds	r0, #1
 8006398:	d100      	bne.n	800639c <_printf_float+0x43c>
 800639a:	e63d      	b.n	8006018 <_printf_float+0xb8>
 800639c:	3601      	adds	r6, #1
 800639e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063a0:	429e      	cmp	r6, r3
 80063a2:	dbf1      	blt.n	8006388 <_printf_float+0x428>
 80063a4:	002a      	movs	r2, r5
 80063a6:	0023      	movs	r3, r4
 80063a8:	3250      	adds	r2, #80	@ 0x50
 80063aa:	e6da      	b.n	8006162 <_printf_float+0x202>
 80063ac:	2600      	movs	r6, #0
 80063ae:	e7f6      	b.n	800639e <_printf_float+0x43e>
 80063b0:	003a      	movs	r2, r7
 80063b2:	e7e2      	b.n	800637a <_printf_float+0x41a>
 80063b4:	002a      	movs	r2, r5
 80063b6:	2301      	movs	r3, #1
 80063b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80063be:	3219      	adds	r2, #25
 80063c0:	47b0      	blx	r6
 80063c2:	3001      	adds	r0, #1
 80063c4:	d100      	bne.n	80063c8 <_printf_float+0x468>
 80063c6:	e627      	b.n	8006018 <_printf_float+0xb8>
 80063c8:	3401      	adds	r4, #1
 80063ca:	68eb      	ldr	r3, [r5, #12]
 80063cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	dcef      	bgt.n	80063b4 <_printf_float+0x454>
 80063d4:	e6f9      	b.n	80061ca <_printf_float+0x26a>
 80063d6:	2400      	movs	r4, #0
 80063d8:	e7f7      	b.n	80063ca <_printf_float+0x46a>
 80063da:	46c0      	nop			@ (mov r8, r8)

080063dc <_printf_common>:
 80063dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063de:	0016      	movs	r6, r2
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	688a      	ldr	r2, [r1, #8]
 80063e4:	690b      	ldr	r3, [r1, #16]
 80063e6:	000c      	movs	r4, r1
 80063e8:	9000      	str	r0, [sp, #0]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	da00      	bge.n	80063f0 <_printf_common+0x14>
 80063ee:	0013      	movs	r3, r2
 80063f0:	0022      	movs	r2, r4
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	3243      	adds	r2, #67	@ 0x43
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d001      	beq.n	8006400 <_printf_common+0x24>
 80063fc:	3301      	adds	r3, #1
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	069b      	lsls	r3, r3, #26
 8006404:	d502      	bpl.n	800640c <_printf_common+0x30>
 8006406:	6833      	ldr	r3, [r6, #0]
 8006408:	3302      	adds	r3, #2
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	2306      	movs	r3, #6
 8006410:	0015      	movs	r5, r2
 8006412:	401d      	ands	r5, r3
 8006414:	421a      	tst	r2, r3
 8006416:	d027      	beq.n	8006468 <_printf_common+0x8c>
 8006418:	0023      	movs	r3, r4
 800641a:	3343      	adds	r3, #67	@ 0x43
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	4193      	sbcs	r3, r2
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	0692      	lsls	r2, r2, #26
 8006426:	d430      	bmi.n	800648a <_printf_common+0xae>
 8006428:	0022      	movs	r2, r4
 800642a:	9901      	ldr	r1, [sp, #4]
 800642c:	9800      	ldr	r0, [sp, #0]
 800642e:	9d08      	ldr	r5, [sp, #32]
 8006430:	3243      	adds	r2, #67	@ 0x43
 8006432:	47a8      	blx	r5
 8006434:	3001      	adds	r0, #1
 8006436:	d025      	beq.n	8006484 <_printf_common+0xa8>
 8006438:	2206      	movs	r2, #6
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	2500      	movs	r5, #0
 800643e:	4013      	ands	r3, r2
 8006440:	2b04      	cmp	r3, #4
 8006442:	d105      	bne.n	8006450 <_printf_common+0x74>
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	68e5      	ldr	r5, [r4, #12]
 8006448:	1aed      	subs	r5, r5, r3
 800644a:	43eb      	mvns	r3, r5
 800644c:	17db      	asrs	r3, r3, #31
 800644e:	401d      	ands	r5, r3
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	6922      	ldr	r2, [r4, #16]
 8006454:	4293      	cmp	r3, r2
 8006456:	dd01      	ble.n	800645c <_printf_common+0x80>
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	18ed      	adds	r5, r5, r3
 800645c:	2600      	movs	r6, #0
 800645e:	42b5      	cmp	r5, r6
 8006460:	d120      	bne.n	80064a4 <_printf_common+0xc8>
 8006462:	2000      	movs	r0, #0
 8006464:	e010      	b.n	8006488 <_printf_common+0xac>
 8006466:	3501      	adds	r5, #1
 8006468:	68e3      	ldr	r3, [r4, #12]
 800646a:	6832      	ldr	r2, [r6, #0]
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	42ab      	cmp	r3, r5
 8006470:	ddd2      	ble.n	8006418 <_printf_common+0x3c>
 8006472:	0022      	movs	r2, r4
 8006474:	2301      	movs	r3, #1
 8006476:	9901      	ldr	r1, [sp, #4]
 8006478:	9800      	ldr	r0, [sp, #0]
 800647a:	9f08      	ldr	r7, [sp, #32]
 800647c:	3219      	adds	r2, #25
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	d1f0      	bne.n	8006466 <_printf_common+0x8a>
 8006484:	2001      	movs	r0, #1
 8006486:	4240      	negs	r0, r0
 8006488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800648a:	2030      	movs	r0, #48	@ 0x30
 800648c:	18e1      	adds	r1, r4, r3
 800648e:	3143      	adds	r1, #67	@ 0x43
 8006490:	7008      	strb	r0, [r1, #0]
 8006492:	0021      	movs	r1, r4
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	3145      	adds	r1, #69	@ 0x45
 8006498:	7809      	ldrb	r1, [r1, #0]
 800649a:	18a2      	adds	r2, r4, r2
 800649c:	3243      	adds	r2, #67	@ 0x43
 800649e:	3302      	adds	r3, #2
 80064a0:	7011      	strb	r1, [r2, #0]
 80064a2:	e7c1      	b.n	8006428 <_printf_common+0x4c>
 80064a4:	0022      	movs	r2, r4
 80064a6:	2301      	movs	r3, #1
 80064a8:	9901      	ldr	r1, [sp, #4]
 80064aa:	9800      	ldr	r0, [sp, #0]
 80064ac:	9f08      	ldr	r7, [sp, #32]
 80064ae:	321a      	adds	r2, #26
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0e6      	beq.n	8006484 <_printf_common+0xa8>
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7d1      	b.n	800645e <_printf_common+0x82>
	...

080064bc <_printf_i>:
 80064bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064be:	b08b      	sub	sp, #44	@ 0x2c
 80064c0:	9206      	str	r2, [sp, #24]
 80064c2:	000a      	movs	r2, r1
 80064c4:	3243      	adds	r2, #67	@ 0x43
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	9005      	str	r0, [sp, #20]
 80064ca:	9203      	str	r2, [sp, #12]
 80064cc:	7e0a      	ldrb	r2, [r1, #24]
 80064ce:	000c      	movs	r4, r1
 80064d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064d2:	2a78      	cmp	r2, #120	@ 0x78
 80064d4:	d809      	bhi.n	80064ea <_printf_i+0x2e>
 80064d6:	2a62      	cmp	r2, #98	@ 0x62
 80064d8:	d80b      	bhi.n	80064f2 <_printf_i+0x36>
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d100      	bne.n	80064e0 <_printf_i+0x24>
 80064de:	e0bc      	b.n	800665a <_printf_i+0x19e>
 80064e0:	497b      	ldr	r1, [pc, #492]	@ (80066d0 <_printf_i+0x214>)
 80064e2:	9104      	str	r1, [sp, #16]
 80064e4:	2a58      	cmp	r2, #88	@ 0x58
 80064e6:	d100      	bne.n	80064ea <_printf_i+0x2e>
 80064e8:	e090      	b.n	800660c <_printf_i+0x150>
 80064ea:	0025      	movs	r5, r4
 80064ec:	3542      	adds	r5, #66	@ 0x42
 80064ee:	702a      	strb	r2, [r5, #0]
 80064f0:	e022      	b.n	8006538 <_printf_i+0x7c>
 80064f2:	0010      	movs	r0, r2
 80064f4:	3863      	subs	r0, #99	@ 0x63
 80064f6:	2815      	cmp	r0, #21
 80064f8:	d8f7      	bhi.n	80064ea <_printf_i+0x2e>
 80064fa:	f7f9 fe17 	bl	800012c <__gnu_thumb1_case_shi>
 80064fe:	0016      	.short	0x0016
 8006500:	fff6001f 	.word	0xfff6001f
 8006504:	fff6fff6 	.word	0xfff6fff6
 8006508:	001ffff6 	.word	0x001ffff6
 800650c:	fff6fff6 	.word	0xfff6fff6
 8006510:	fff6fff6 	.word	0xfff6fff6
 8006514:	003600a1 	.word	0x003600a1
 8006518:	fff60080 	.word	0xfff60080
 800651c:	00b2fff6 	.word	0x00b2fff6
 8006520:	0036fff6 	.word	0x0036fff6
 8006524:	fff6fff6 	.word	0xfff6fff6
 8006528:	0084      	.short	0x0084
 800652a:	0025      	movs	r5, r4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	3542      	adds	r5, #66	@ 0x42
 8006530:	1d11      	adds	r1, r2, #4
 8006532:	6019      	str	r1, [r3, #0]
 8006534:	6813      	ldr	r3, [r2, #0]
 8006536:	702b      	strb	r3, [r5, #0]
 8006538:	2301      	movs	r3, #1
 800653a:	e0a0      	b.n	800667e <_printf_i+0x1c2>
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	6809      	ldr	r1, [r1, #0]
 8006540:	1d02      	adds	r2, r0, #4
 8006542:	060d      	lsls	r5, r1, #24
 8006544:	d50b      	bpl.n	800655e <_printf_i+0xa2>
 8006546:	6806      	ldr	r6, [r0, #0]
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	2e00      	cmp	r6, #0
 800654c:	da03      	bge.n	8006556 <_printf_i+0x9a>
 800654e:	232d      	movs	r3, #45	@ 0x2d
 8006550:	9a03      	ldr	r2, [sp, #12]
 8006552:	4276      	negs	r6, r6
 8006554:	7013      	strb	r3, [r2, #0]
 8006556:	4b5e      	ldr	r3, [pc, #376]	@ (80066d0 <_printf_i+0x214>)
 8006558:	270a      	movs	r7, #10
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	e018      	b.n	8006590 <_printf_i+0xd4>
 800655e:	6806      	ldr	r6, [r0, #0]
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	0649      	lsls	r1, r1, #25
 8006564:	d5f1      	bpl.n	800654a <_printf_i+0x8e>
 8006566:	b236      	sxth	r6, r6
 8006568:	e7ef      	b.n	800654a <_printf_i+0x8e>
 800656a:	6808      	ldr	r0, [r1, #0]
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	c940      	ldmia	r1!, {r6}
 8006570:	0605      	lsls	r5, r0, #24
 8006572:	d402      	bmi.n	800657a <_printf_i+0xbe>
 8006574:	0640      	lsls	r0, r0, #25
 8006576:	d500      	bpl.n	800657a <_printf_i+0xbe>
 8006578:	b2b6      	uxth	r6, r6
 800657a:	6019      	str	r1, [r3, #0]
 800657c:	4b54      	ldr	r3, [pc, #336]	@ (80066d0 <_printf_i+0x214>)
 800657e:	270a      	movs	r7, #10
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	2a6f      	cmp	r2, #111	@ 0x6f
 8006584:	d100      	bne.n	8006588 <_printf_i+0xcc>
 8006586:	3f02      	subs	r7, #2
 8006588:	0023      	movs	r3, r4
 800658a:	2200      	movs	r2, #0
 800658c:	3343      	adds	r3, #67	@ 0x43
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	db03      	blt.n	80065a0 <_printf_i+0xe4>
 8006598:	2104      	movs	r1, #4
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	438a      	bics	r2, r1
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	2e00      	cmp	r6, #0
 80065a2:	d102      	bne.n	80065aa <_printf_i+0xee>
 80065a4:	9d03      	ldr	r5, [sp, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00c      	beq.n	80065c4 <_printf_i+0x108>
 80065aa:	9d03      	ldr	r5, [sp, #12]
 80065ac:	0030      	movs	r0, r6
 80065ae:	0039      	movs	r1, r7
 80065b0:	f7f9 fe4c 	bl	800024c <__aeabi_uidivmod>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	3d01      	subs	r5, #1
 80065b8:	5c5b      	ldrb	r3, [r3, r1]
 80065ba:	702b      	strb	r3, [r5, #0]
 80065bc:	0033      	movs	r3, r6
 80065be:	0006      	movs	r6, r0
 80065c0:	429f      	cmp	r7, r3
 80065c2:	d9f3      	bls.n	80065ac <_printf_i+0xf0>
 80065c4:	2f08      	cmp	r7, #8
 80065c6:	d109      	bne.n	80065dc <_printf_i+0x120>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07db      	lsls	r3, r3, #31
 80065cc:	d506      	bpl.n	80065dc <_printf_i+0x120>
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	dc02      	bgt.n	80065dc <_printf_i+0x120>
 80065d6:	2330      	movs	r3, #48	@ 0x30
 80065d8:	3d01      	subs	r5, #1
 80065da:	702b      	strb	r3, [r5, #0]
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	1b5b      	subs	r3, r3, r5
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	9b07      	ldr	r3, [sp, #28]
 80065e4:	0021      	movs	r1, r4
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	9805      	ldr	r0, [sp, #20]
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	aa09      	add	r2, sp, #36	@ 0x24
 80065ee:	f7ff fef5 	bl	80063dc <_printf_common>
 80065f2:	3001      	adds	r0, #1
 80065f4:	d148      	bne.n	8006688 <_printf_i+0x1cc>
 80065f6:	2001      	movs	r0, #1
 80065f8:	4240      	negs	r0, r0
 80065fa:	b00b      	add	sp, #44	@ 0x2c
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fe:	2220      	movs	r2, #32
 8006600:	6809      	ldr	r1, [r1, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	6022      	str	r2, [r4, #0]
 8006606:	2278      	movs	r2, #120	@ 0x78
 8006608:	4932      	ldr	r1, [pc, #200]	@ (80066d4 <_printf_i+0x218>)
 800660a:	9104      	str	r1, [sp, #16]
 800660c:	0021      	movs	r1, r4
 800660e:	3145      	adds	r1, #69	@ 0x45
 8006610:	700a      	strb	r2, [r1, #0]
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	c940      	ldmia	r1!, {r6}
 8006618:	0610      	lsls	r0, r2, #24
 800661a:	d402      	bmi.n	8006622 <_printf_i+0x166>
 800661c:	0650      	lsls	r0, r2, #25
 800661e:	d500      	bpl.n	8006622 <_printf_i+0x166>
 8006620:	b2b6      	uxth	r6, r6
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	07d3      	lsls	r3, r2, #31
 8006626:	d502      	bpl.n	800662e <_printf_i+0x172>
 8006628:	2320      	movs	r3, #32
 800662a:	4313      	orrs	r3, r2
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	2e00      	cmp	r6, #0
 8006630:	d001      	beq.n	8006636 <_printf_i+0x17a>
 8006632:	2710      	movs	r7, #16
 8006634:	e7a8      	b.n	8006588 <_printf_i+0xcc>
 8006636:	2220      	movs	r2, #32
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	4393      	bics	r3, r2
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	e7f8      	b.n	8006632 <_printf_i+0x176>
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	680d      	ldr	r5, [r1, #0]
 8006644:	1d10      	adds	r0, r2, #4
 8006646:	6949      	ldr	r1, [r1, #20]
 8006648:	6018      	str	r0, [r3, #0]
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	062e      	lsls	r6, r5, #24
 800664e:	d501      	bpl.n	8006654 <_printf_i+0x198>
 8006650:	6019      	str	r1, [r3, #0]
 8006652:	e002      	b.n	800665a <_printf_i+0x19e>
 8006654:	066d      	lsls	r5, r5, #25
 8006656:	d5fb      	bpl.n	8006650 <_printf_i+0x194>
 8006658:	8019      	strh	r1, [r3, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	9d03      	ldr	r5, [sp, #12]
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	e7bf      	b.n	80065e2 <_printf_i+0x126>
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	1d11      	adds	r1, r2, #4
 8006666:	6019      	str	r1, [r3, #0]
 8006668:	6815      	ldr	r5, [r2, #0]
 800666a:	2100      	movs	r1, #0
 800666c:	0028      	movs	r0, r5
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	f000 fbf7 	bl	8006e62 <memchr>
 8006674:	2800      	cmp	r0, #0
 8006676:	d001      	beq.n	800667c <_printf_i+0x1c0>
 8006678:	1b40      	subs	r0, r0, r5
 800667a:	6060      	str	r0, [r4, #4]
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	2300      	movs	r3, #0
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	7013      	strb	r3, [r2, #0]
 8006686:	e7ac      	b.n	80065e2 <_printf_i+0x126>
 8006688:	002a      	movs	r2, r5
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	9906      	ldr	r1, [sp, #24]
 800668e:	9805      	ldr	r0, [sp, #20]
 8006690:	9d07      	ldr	r5, [sp, #28]
 8006692:	47a8      	blx	r5
 8006694:	3001      	adds	r0, #1
 8006696:	d0ae      	beq.n	80065f6 <_printf_i+0x13a>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	079b      	lsls	r3, r3, #30
 800669c:	d415      	bmi.n	80066ca <_printf_i+0x20e>
 800669e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a0:	68e0      	ldr	r0, [r4, #12]
 80066a2:	4298      	cmp	r0, r3
 80066a4:	daa9      	bge.n	80065fa <_printf_i+0x13e>
 80066a6:	0018      	movs	r0, r3
 80066a8:	e7a7      	b.n	80065fa <_printf_i+0x13e>
 80066aa:	0022      	movs	r2, r4
 80066ac:	2301      	movs	r3, #1
 80066ae:	9906      	ldr	r1, [sp, #24]
 80066b0:	9805      	ldr	r0, [sp, #20]
 80066b2:	9e07      	ldr	r6, [sp, #28]
 80066b4:	3219      	adds	r2, #25
 80066b6:	47b0      	blx	r6
 80066b8:	3001      	adds	r0, #1
 80066ba:	d09c      	beq.n	80065f6 <_printf_i+0x13a>
 80066bc:	3501      	adds	r5, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dcf0      	bgt.n	80066aa <_printf_i+0x1ee>
 80066c8:	e7e9      	b.n	800669e <_printf_i+0x1e2>
 80066ca:	2500      	movs	r5, #0
 80066cc:	e7f7      	b.n	80066be <_printf_i+0x202>
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	0800a7e2 	.word	0x0800a7e2
 80066d4:	0800a7f3 	.word	0x0800a7f3

080066d8 <_scanf_float>:
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	b08b      	sub	sp, #44	@ 0x2c
 80066dc:	0016      	movs	r6, r2
 80066de:	9003      	str	r0, [sp, #12]
 80066e0:	22ae      	movs	r2, #174	@ 0xae
 80066e2:	2000      	movs	r0, #0
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	688b      	ldr	r3, [r1, #8]
 80066e8:	000c      	movs	r4, r1
 80066ea:	1e59      	subs	r1, r3, #1
 80066ec:	0052      	lsls	r2, r2, #1
 80066ee:	9006      	str	r0, [sp, #24]
 80066f0:	4291      	cmp	r1, r2
 80066f2:	d905      	bls.n	8006700 <_scanf_float+0x28>
 80066f4:	3b5e      	subs	r3, #94	@ 0x5e
 80066f6:	3bff      	subs	r3, #255	@ 0xff
 80066f8:	9306      	str	r3, [sp, #24]
 80066fa:	235e      	movs	r3, #94	@ 0x5e
 80066fc:	33ff      	adds	r3, #255	@ 0xff
 80066fe:	60a3      	str	r3, [r4, #8]
 8006700:	23f0      	movs	r3, #240	@ 0xf0
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4313      	orrs	r3, r2
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	0023      	movs	r3, r4
 800670c:	2500      	movs	r5, #0
 800670e:	331c      	adds	r3, #28
 8006710:	001f      	movs	r7, r3
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	9502      	str	r5, [sp, #8]
 8006716:	9509      	str	r5, [sp, #36]	@ 0x24
 8006718:	9508      	str	r5, [sp, #32]
 800671a:	9501      	str	r5, [sp, #4]
 800671c:	9505      	str	r5, [sp, #20]
 800671e:	68a2      	ldr	r2, [r4, #8]
 8006720:	2a00      	cmp	r2, #0
 8006722:	d00a      	beq.n	800673a <_scanf_float+0x62>
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b4e      	cmp	r3, #78	@ 0x4e
 800672a:	d844      	bhi.n	80067b6 <_scanf_float+0xde>
 800672c:	0018      	movs	r0, r3
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d82c      	bhi.n	800678c <_scanf_float+0xb4>
 8006732:	382b      	subs	r0, #43	@ 0x2b
 8006734:	b2c1      	uxtb	r1, r0
 8006736:	290e      	cmp	r1, #14
 8006738:	d92a      	bls.n	8006790 <_scanf_float+0xb8>
 800673a:	9b01      	ldr	r3, [sp, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <_scanf_float+0x70>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	4aa6      	ldr	r2, [pc, #664]	@ (80069dc <_scanf_float+0x304>)
 8006744:	4013      	ands	r3, r2
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	3b01      	subs	r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d900      	bls.n	8006752 <_scanf_float+0x7a>
 8006750:	e0fe      	b.n	8006950 <_scanf_float+0x278>
 8006752:	25be      	movs	r5, #190	@ 0xbe
 8006754:	006d      	lsls	r5, r5, #1
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	429f      	cmp	r7, r3
 800675a:	d900      	bls.n	800675e <_scanf_float+0x86>
 800675c:	e0ee      	b.n	800693c <_scanf_float+0x264>
 800675e:	2001      	movs	r0, #1
 8006760:	b00b      	add	sp, #44	@ 0x2c
 8006762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006764:	0018      	movs	r0, r3
 8006766:	3861      	subs	r0, #97	@ 0x61
 8006768:	280d      	cmp	r0, #13
 800676a:	d8e6      	bhi.n	800673a <_scanf_float+0x62>
 800676c:	f7f9 fcde 	bl	800012c <__gnu_thumb1_case_shi>
 8006770:	ffe50089 	.word	0xffe50089
 8006774:	ffe5ffe5 	.word	0xffe5ffe5
 8006778:	00a700bb 	.word	0x00a700bb
 800677c:	ffe5ffe5 	.word	0xffe5ffe5
 8006780:	ffe5008f 	.word	0xffe5008f
 8006784:	ffe5ffe5 	.word	0xffe5ffe5
 8006788:	006bffe5 	.word	0x006bffe5
 800678c:	3841      	subs	r0, #65	@ 0x41
 800678e:	e7eb      	b.n	8006768 <_scanf_float+0x90>
 8006790:	280e      	cmp	r0, #14
 8006792:	d8d2      	bhi.n	800673a <_scanf_float+0x62>
 8006794:	f7f9 fcca 	bl	800012c <__gnu_thumb1_case_shi>
 8006798:	ffd1004f 	.word	0xffd1004f
 800679c:	009d004f 	.word	0x009d004f
 80067a0:	0021ffd1 	.word	0x0021ffd1
 80067a4:	00410041 	.word	0x00410041
 80067a8:	00410041 	.word	0x00410041
 80067ac:	00410041 	.word	0x00410041
 80067b0:	00410041 	.word	0x00410041
 80067b4:	0041      	.short	0x0041
 80067b6:	2b6e      	cmp	r3, #110	@ 0x6e
 80067b8:	d80a      	bhi.n	80067d0 <_scanf_float+0xf8>
 80067ba:	2b60      	cmp	r3, #96	@ 0x60
 80067bc:	d8d2      	bhi.n	8006764 <_scanf_float+0x8c>
 80067be:	2b54      	cmp	r3, #84	@ 0x54
 80067c0:	d100      	bne.n	80067c4 <_scanf_float+0xec>
 80067c2:	e081      	b.n	80068c8 <_scanf_float+0x1f0>
 80067c4:	2b59      	cmp	r3, #89	@ 0x59
 80067c6:	d1b8      	bne.n	800673a <_scanf_float+0x62>
 80067c8:	2d07      	cmp	r5, #7
 80067ca:	d1b6      	bne.n	800673a <_scanf_float+0x62>
 80067cc:	2508      	movs	r5, #8
 80067ce:	e02f      	b.n	8006830 <_scanf_float+0x158>
 80067d0:	2b74      	cmp	r3, #116	@ 0x74
 80067d2:	d079      	beq.n	80068c8 <_scanf_float+0x1f0>
 80067d4:	2b79      	cmp	r3, #121	@ 0x79
 80067d6:	d0f7      	beq.n	80067c8 <_scanf_float+0xf0>
 80067d8:	e7af      	b.n	800673a <_scanf_float+0x62>
 80067da:	6821      	ldr	r1, [r4, #0]
 80067dc:	05c8      	lsls	r0, r1, #23
 80067de:	d51c      	bpl.n	800681a <_scanf_float+0x142>
 80067e0:	2380      	movs	r3, #128	@ 0x80
 80067e2:	4399      	bics	r1, r3
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	6021      	str	r1, [r4, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9b06      	ldr	r3, [sp, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <_scanf_float+0x122>
 80067f2:	3b01      	subs	r3, #1
 80067f4:	3201      	adds	r2, #1
 80067f6:	9306      	str	r3, [sp, #24]
 80067f8:	60a2      	str	r2, [r4, #8]
 80067fa:	68a3      	ldr	r3, [r4, #8]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	60a3      	str	r3, [r4, #8]
 8006800:	6923      	ldr	r3, [r4, #16]
 8006802:	3301      	adds	r3, #1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	6873      	ldr	r3, [r6, #4]
 8006808:	3b01      	subs	r3, #1
 800680a:	6073      	str	r3, [r6, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc00      	bgt.n	8006812 <_scanf_float+0x13a>
 8006810:	e08a      	b.n	8006928 <_scanf_float+0x250>
 8006812:	6833      	ldr	r3, [r6, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	e781      	b.n	800671e <_scanf_float+0x46>
 800681a:	9a02      	ldr	r2, [sp, #8]
 800681c:	1951      	adds	r1, r2, r5
 800681e:	2900      	cmp	r1, #0
 8006820:	d000      	beq.n	8006824 <_scanf_float+0x14c>
 8006822:	e78a      	b.n	800673a <_scanf_float+0x62>
 8006824:	000d      	movs	r5, r1
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	486d      	ldr	r0, [pc, #436]	@ (80069e0 <_scanf_float+0x308>)
 800682a:	9102      	str	r1, [sp, #8]
 800682c:	4002      	ands	r2, r0
 800682e:	6022      	str	r2, [r4, #0]
 8006830:	703b      	strb	r3, [r7, #0]
 8006832:	3701      	adds	r7, #1
 8006834:	e7e1      	b.n	80067fa <_scanf_float+0x122>
 8006836:	2180      	movs	r1, #128	@ 0x80
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	420a      	tst	r2, r1
 800683c:	d100      	bne.n	8006840 <_scanf_float+0x168>
 800683e:	e77c      	b.n	800673a <_scanf_float+0x62>
 8006840:	438a      	bics	r2, r1
 8006842:	6022      	str	r2, [r4, #0]
 8006844:	e7f4      	b.n	8006830 <_scanf_float+0x158>
 8006846:	9a02      	ldr	r2, [sp, #8]
 8006848:	2a00      	cmp	r2, #0
 800684a:	d10f      	bne.n	800686c <_scanf_float+0x194>
 800684c:	9a01      	ldr	r2, [sp, #4]
 800684e:	2a00      	cmp	r2, #0
 8006850:	d10f      	bne.n	8006872 <_scanf_float+0x19a>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	21e0      	movs	r1, #224	@ 0xe0
 8006856:	0010      	movs	r0, r2
 8006858:	00c9      	lsls	r1, r1, #3
 800685a:	4008      	ands	r0, r1
 800685c:	4288      	cmp	r0, r1
 800685e:	d108      	bne.n	8006872 <_scanf_float+0x19a>
 8006860:	4960      	ldr	r1, [pc, #384]	@ (80069e4 <_scanf_float+0x30c>)
 8006862:	400a      	ands	r2, r1
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	9202      	str	r2, [sp, #8]
 800686a:	e7e1      	b.n	8006830 <_scanf_float+0x158>
 800686c:	9a02      	ldr	r2, [sp, #8]
 800686e:	2a02      	cmp	r2, #2
 8006870:	d058      	beq.n	8006924 <_scanf_float+0x24c>
 8006872:	2d01      	cmp	r5, #1
 8006874:	d002      	beq.n	800687c <_scanf_float+0x1a4>
 8006876:	2d04      	cmp	r5, #4
 8006878:	d000      	beq.n	800687c <_scanf_float+0x1a4>
 800687a:	e75e      	b.n	800673a <_scanf_float+0x62>
 800687c:	3501      	adds	r5, #1
 800687e:	b2ed      	uxtb	r5, r5
 8006880:	e7d6      	b.n	8006830 <_scanf_float+0x158>
 8006882:	9a02      	ldr	r2, [sp, #8]
 8006884:	2a01      	cmp	r2, #1
 8006886:	d000      	beq.n	800688a <_scanf_float+0x1b2>
 8006888:	e757      	b.n	800673a <_scanf_float+0x62>
 800688a:	2202      	movs	r2, #2
 800688c:	e7ec      	b.n	8006868 <_scanf_float+0x190>
 800688e:	2d00      	cmp	r5, #0
 8006890:	d110      	bne.n	80068b4 <_scanf_float+0x1dc>
 8006892:	9a01      	ldr	r2, [sp, #4]
 8006894:	2a00      	cmp	r2, #0
 8006896:	d000      	beq.n	800689a <_scanf_float+0x1c2>
 8006898:	e752      	b.n	8006740 <_scanf_float+0x68>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	21e0      	movs	r1, #224	@ 0xe0
 800689e:	0010      	movs	r0, r2
 80068a0:	00c9      	lsls	r1, r1, #3
 80068a2:	4008      	ands	r0, r1
 80068a4:	4288      	cmp	r0, r1
 80068a6:	d000      	beq.n	80068aa <_scanf_float+0x1d2>
 80068a8:	e11d      	b.n	8006ae6 <_scanf_float+0x40e>
 80068aa:	494e      	ldr	r1, [pc, #312]	@ (80069e4 <_scanf_float+0x30c>)
 80068ac:	3501      	adds	r5, #1
 80068ae:	400a      	ands	r2, r1
 80068b0:	6022      	str	r2, [r4, #0]
 80068b2:	e7bd      	b.n	8006830 <_scanf_float+0x158>
 80068b4:	21fd      	movs	r1, #253	@ 0xfd
 80068b6:	1eea      	subs	r2, r5, #3
 80068b8:	420a      	tst	r2, r1
 80068ba:	d0df      	beq.n	800687c <_scanf_float+0x1a4>
 80068bc:	e73d      	b.n	800673a <_scanf_float+0x62>
 80068be:	2d02      	cmp	r5, #2
 80068c0:	d000      	beq.n	80068c4 <_scanf_float+0x1ec>
 80068c2:	e73a      	b.n	800673a <_scanf_float+0x62>
 80068c4:	2503      	movs	r5, #3
 80068c6:	e7b3      	b.n	8006830 <_scanf_float+0x158>
 80068c8:	2d06      	cmp	r5, #6
 80068ca:	d000      	beq.n	80068ce <_scanf_float+0x1f6>
 80068cc:	e735      	b.n	800673a <_scanf_float+0x62>
 80068ce:	2507      	movs	r5, #7
 80068d0:	e7ae      	b.n	8006830 <_scanf_float+0x158>
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	0591      	lsls	r1, r2, #22
 80068d6:	d400      	bmi.n	80068da <_scanf_float+0x202>
 80068d8:	e72f      	b.n	800673a <_scanf_float+0x62>
 80068da:	4943      	ldr	r1, [pc, #268]	@ (80069e8 <_scanf_float+0x310>)
 80068dc:	400a      	ands	r2, r1
 80068de:	6022      	str	r2, [r4, #0]
 80068e0:	9a01      	ldr	r2, [sp, #4]
 80068e2:	9205      	str	r2, [sp, #20]
 80068e4:	e7a4      	b.n	8006830 <_scanf_float+0x158>
 80068e6:	21a0      	movs	r1, #160	@ 0xa0
 80068e8:	2080      	movs	r0, #128	@ 0x80
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	00c9      	lsls	r1, r1, #3
 80068ee:	4011      	ands	r1, r2
 80068f0:	00c0      	lsls	r0, r0, #3
 80068f2:	4281      	cmp	r1, r0
 80068f4:	d006      	beq.n	8006904 <_scanf_float+0x22c>
 80068f6:	4202      	tst	r2, r0
 80068f8:	d100      	bne.n	80068fc <_scanf_float+0x224>
 80068fa:	e71e      	b.n	800673a <_scanf_float+0x62>
 80068fc:	9901      	ldr	r1, [sp, #4]
 80068fe:	2900      	cmp	r1, #0
 8006900:	d100      	bne.n	8006904 <_scanf_float+0x22c>
 8006902:	e0f0      	b.n	8006ae6 <_scanf_float+0x40e>
 8006904:	0591      	lsls	r1, r2, #22
 8006906:	d404      	bmi.n	8006912 <_scanf_float+0x23a>
 8006908:	9901      	ldr	r1, [sp, #4]
 800690a:	9805      	ldr	r0, [sp, #20]
 800690c:	9709      	str	r7, [sp, #36]	@ 0x24
 800690e:	1a09      	subs	r1, r1, r0
 8006910:	9108      	str	r1, [sp, #32]
 8006912:	4934      	ldr	r1, [pc, #208]	@ (80069e4 <_scanf_float+0x30c>)
 8006914:	400a      	ands	r2, r1
 8006916:	21c0      	movs	r1, #192	@ 0xc0
 8006918:	0049      	lsls	r1, r1, #1
 800691a:	430a      	orrs	r2, r1
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	2200      	movs	r2, #0
 8006920:	9201      	str	r2, [sp, #4]
 8006922:	e785      	b.n	8006830 <_scanf_float+0x158>
 8006924:	2203      	movs	r2, #3
 8006926:	e79f      	b.n	8006868 <_scanf_float+0x190>
 8006928:	23c0      	movs	r3, #192	@ 0xc0
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	0031      	movs	r1, r6
 800692e:	58e3      	ldr	r3, [r4, r3]
 8006930:	9803      	ldr	r0, [sp, #12]
 8006932:	4798      	blx	r3
 8006934:	2800      	cmp	r0, #0
 8006936:	d100      	bne.n	800693a <_scanf_float+0x262>
 8006938:	e6f1      	b.n	800671e <_scanf_float+0x46>
 800693a:	e6fe      	b.n	800673a <_scanf_float+0x62>
 800693c:	3f01      	subs	r7, #1
 800693e:	5963      	ldr	r3, [r4, r5]
 8006940:	0032      	movs	r2, r6
 8006942:	7839      	ldrb	r1, [r7, #0]
 8006944:	9803      	ldr	r0, [sp, #12]
 8006946:	4798      	blx	r3
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	3b01      	subs	r3, #1
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	e702      	b.n	8006756 <_scanf_float+0x7e>
 8006950:	1e6b      	subs	r3, r5, #1
 8006952:	2b06      	cmp	r3, #6
 8006954:	d80e      	bhi.n	8006974 <_scanf_float+0x29c>
 8006956:	9702      	str	r7, [sp, #8]
 8006958:	2d02      	cmp	r5, #2
 800695a:	d920      	bls.n	800699e <_scanf_float+0x2c6>
 800695c:	1beb      	subs	r3, r5, r7
 800695e:	b2db      	uxtb	r3, r3
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	9b02      	ldr	r3, [sp, #8]
 8006964:	9a06      	ldr	r2, [sp, #24]
 8006966:	189b      	adds	r3, r3, r2
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d127      	bne.n	80069be <_scanf_float+0x2e6>
 800696e:	3d03      	subs	r5, #3
 8006970:	b2ed      	uxtb	r5, r5
 8006972:	1b7f      	subs	r7, r7, r5
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	05da      	lsls	r2, r3, #23
 8006978:	d553      	bpl.n	8006a22 <_scanf_float+0x34a>
 800697a:	055b      	lsls	r3, r3, #21
 800697c:	d536      	bpl.n	80069ec <_scanf_float+0x314>
 800697e:	25be      	movs	r5, #190	@ 0xbe
 8006980:	006d      	lsls	r5, r5, #1
 8006982:	9b04      	ldr	r3, [sp, #16]
 8006984:	429f      	cmp	r7, r3
 8006986:	d800      	bhi.n	800698a <_scanf_float+0x2b2>
 8006988:	e6e9      	b.n	800675e <_scanf_float+0x86>
 800698a:	3f01      	subs	r7, #1
 800698c:	5963      	ldr	r3, [r4, r5]
 800698e:	0032      	movs	r2, r6
 8006990:	7839      	ldrb	r1, [r7, #0]
 8006992:	9803      	ldr	r0, [sp, #12]
 8006994:	4798      	blx	r3
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	3b01      	subs	r3, #1
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	e7f1      	b.n	8006982 <_scanf_float+0x2aa>
 800699e:	25be      	movs	r5, #190	@ 0xbe
 80069a0:	006d      	lsls	r5, r5, #1
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	429f      	cmp	r7, r3
 80069a6:	d800      	bhi.n	80069aa <_scanf_float+0x2d2>
 80069a8:	e6d9      	b.n	800675e <_scanf_float+0x86>
 80069aa:	3f01      	subs	r7, #1
 80069ac:	5963      	ldr	r3, [r4, r5]
 80069ae:	0032      	movs	r2, r6
 80069b0:	7839      	ldrb	r1, [r7, #0]
 80069b2:	9803      	ldr	r0, [sp, #12]
 80069b4:	4798      	blx	r3
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	e7f1      	b.n	80069a2 <_scanf_float+0x2ca>
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	0032      	movs	r2, r6
 80069c2:	3b01      	subs	r3, #1
 80069c4:	7819      	ldrb	r1, [r3, #0]
 80069c6:	9302      	str	r3, [sp, #8]
 80069c8:	23be      	movs	r3, #190	@ 0xbe
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	58e3      	ldr	r3, [r4, r3]
 80069ce:	9803      	ldr	r0, [sp, #12]
 80069d0:	4798      	blx	r3
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	e7c3      	b.n	8006962 <_scanf_float+0x28a>
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	fffffeff 	.word	0xfffffeff
 80069e0:	fffffe7f 	.word	0xfffffe7f
 80069e4:	fffff87f 	.word	0xfffff87f
 80069e8:	fffffd7f 	.word	0xfffffd7f
 80069ec:	6923      	ldr	r3, [r4, #16]
 80069ee:	1e7d      	subs	r5, r7, #1
 80069f0:	7829      	ldrb	r1, [r5, #0]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	2965      	cmp	r1, #101	@ 0x65
 80069f8:	d00c      	beq.n	8006a14 <_scanf_float+0x33c>
 80069fa:	2945      	cmp	r1, #69	@ 0x45
 80069fc:	d00a      	beq.n	8006a14 <_scanf_float+0x33c>
 80069fe:	23be      	movs	r3, #190	@ 0xbe
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	58e3      	ldr	r3, [r4, r3]
 8006a04:	0032      	movs	r2, r6
 8006a06:	9803      	ldr	r0, [sp, #12]
 8006a08:	4798      	blx	r3
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	1ebd      	subs	r5, r7, #2
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	7829      	ldrb	r1, [r5, #0]
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	23be      	movs	r3, #190	@ 0xbe
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	0032      	movs	r2, r6
 8006a1a:	58e3      	ldr	r3, [r4, r3]
 8006a1c:	9803      	ldr	r0, [sp, #12]
 8006a1e:	4798      	blx	r3
 8006a20:	002f      	movs	r7, r5
 8006a22:	6821      	ldr	r1, [r4, #0]
 8006a24:	2310      	movs	r3, #16
 8006a26:	000a      	movs	r2, r1
 8006a28:	401a      	ands	r2, r3
 8006a2a:	4219      	tst	r1, r3
 8006a2c:	d001      	beq.n	8006a32 <_scanf_float+0x35a>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e696      	b.n	8006760 <_scanf_float+0x88>
 8006a32:	21c0      	movs	r1, #192	@ 0xc0
 8006a34:	703a      	strb	r2, [r7, #0]
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	00c9      	lsls	r1, r1, #3
 8006a3a:	400b      	ands	r3, r1
 8006a3c:	2180      	movs	r1, #128	@ 0x80
 8006a3e:	00c9      	lsls	r1, r1, #3
 8006a40:	428b      	cmp	r3, r1
 8006a42:	d11c      	bne.n	8006a7e <_scanf_float+0x3a6>
 8006a44:	9b05      	ldr	r3, [sp, #20]
 8006a46:	9a01      	ldr	r2, [sp, #4]
 8006a48:	9905      	ldr	r1, [sp, #20]
 8006a4a:	1a9a      	subs	r2, r3, r2
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	428b      	cmp	r3, r1
 8006a50:	d121      	bne.n	8006a96 <_scanf_float+0x3be>
 8006a52:	2200      	movs	r2, #0
 8006a54:	9904      	ldr	r1, [sp, #16]
 8006a56:	9803      	ldr	r0, [sp, #12]
 8006a58:	f002 fc6e 	bl	8009338 <_strtod_r>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	0006      	movs	r6, r0
 8006a62:	000f      	movs	r7, r1
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	0791      	lsls	r1, r2, #30
 8006a68:	d522      	bpl.n	8006ab0 <_scanf_float+0x3d8>
 8006a6a:	9907      	ldr	r1, [sp, #28]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	600a      	str	r2, [r1, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	601e      	str	r6, [r3, #0]
 8006a74:	605f      	str	r7, [r3, #4]
 8006a76:	68e3      	ldr	r3, [r4, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60e3      	str	r3, [r4, #12]
 8006a7c:	e7d7      	b.n	8006a2e <_scanf_float+0x356>
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0e6      	beq.n	8006a52 <_scanf_float+0x37a>
 8006a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a86:	9803      	ldr	r0, [sp, #12]
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	230a      	movs	r3, #10
 8006a8c:	f002 fce6 	bl	800945c <_strtol_r>
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006a94:	1ac2      	subs	r2, r0, r3
 8006a96:	0023      	movs	r3, r4
 8006a98:	3370      	adds	r3, #112	@ 0x70
 8006a9a:	33ff      	adds	r3, #255	@ 0xff
 8006a9c:	429f      	cmp	r7, r3
 8006a9e:	d302      	bcc.n	8006aa6 <_scanf_float+0x3ce>
 8006aa0:	0027      	movs	r7, r4
 8006aa2:	376f      	adds	r7, #111	@ 0x6f
 8006aa4:	37ff      	adds	r7, #255	@ 0xff
 8006aa6:	0038      	movs	r0, r7
 8006aa8:	4910      	ldr	r1, [pc, #64]	@ (8006aec <_scanf_float+0x414>)
 8006aaa:	f000 f8e7 	bl	8006c7c <siprintf>
 8006aae:	e7d0      	b.n	8006a52 <_scanf_float+0x37a>
 8006ab0:	1d19      	adds	r1, r3, #4
 8006ab2:	0752      	lsls	r2, r2, #29
 8006ab4:	d502      	bpl.n	8006abc <_scanf_float+0x3e4>
 8006ab6:	9a07      	ldr	r2, [sp, #28]
 8006ab8:	6011      	str	r1, [r2, #0]
 8006aba:	e7d9      	b.n	8006a70 <_scanf_float+0x398>
 8006abc:	9a07      	ldr	r2, [sp, #28]
 8006abe:	0030      	movs	r0, r6
 8006ac0:	6011      	str	r1, [r2, #0]
 8006ac2:	681d      	ldr	r5, [r3, #0]
 8006ac4:	0032      	movs	r2, r6
 8006ac6:	003b      	movs	r3, r7
 8006ac8:	0039      	movs	r1, r7
 8006aca:	f7fb fe01 	bl	80026d0 <__aeabi_dcmpun>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d004      	beq.n	8006adc <_scanf_float+0x404>
 8006ad2:	4807      	ldr	r0, [pc, #28]	@ (8006af0 <_scanf_float+0x418>)
 8006ad4:	f000 f9d0 	bl	8006e78 <nanf>
 8006ad8:	6028      	str	r0, [r5, #0]
 8006ada:	e7cc      	b.n	8006a76 <_scanf_float+0x39e>
 8006adc:	0030      	movs	r0, r6
 8006ade:	0039      	movs	r1, r7
 8006ae0:	f7fb feee 	bl	80028c0 <__aeabi_d2f>
 8006ae4:	e7f8      	b.n	8006ad8 <_scanf_float+0x400>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	e62d      	b.n	8006748 <_scanf_float+0x70>
 8006aec:	0800a804 	.word	0x0800a804
 8006af0:	0800ab9d 	.word	0x0800ab9d

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	0004      	movs	r4, r0
 8006afa:	6003      	str	r3, [r0, #0]
 8006afc:	6043      	str	r3, [r0, #4]
 8006afe:	6083      	str	r3, [r0, #8]
 8006b00:	8181      	strh	r1, [r0, #12]
 8006b02:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b04:	81c2      	strh	r2, [r0, #14]
 8006b06:	6103      	str	r3, [r0, #16]
 8006b08:	6143      	str	r3, [r0, #20]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	@ 0x5c
 8006b12:	f000 f91f 	bl	8006d54 <memset>
 8006b16:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <std+0x50>)
 8006b18:	6224      	str	r4, [r4, #32]
 8006b1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <std+0x54>)
 8006b1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b20:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <std+0x58>)
 8006b22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b24:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <std+0x5c>)
 8006b26:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <std+0x60>)
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d005      	beq.n	8006b3a <std+0x46>
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <std+0x64>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	d002      	beq.n	8006b3a <std+0x46>
 8006b34:	4b09      	ldr	r3, [pc, #36]	@ (8006b5c <std+0x68>)
 8006b36:	429c      	cmp	r4, r3
 8006b38:	d103      	bne.n	8006b42 <std+0x4e>
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	3058      	adds	r0, #88	@ 0x58
 8006b3e:	f000 f98d 	bl	8006e5c <__retarget_lock_init_recursive>
 8006b42:	bd10      	pop	{r4, pc}
 8006b44:	08006cbd 	.word	0x08006cbd
 8006b48:	08006ce5 	.word	0x08006ce5
 8006b4c:	08006d1d 	.word	0x08006d1d
 8006b50:	08006d49 	.word	0x08006d49
 8006b54:	20000338 	.word	0x20000338
 8006b58:	200003a0 	.word	0x200003a0
 8006b5c:	20000408 	.word	0x20000408

08006b60 <stdio_exit_handler>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	4a03      	ldr	r2, [pc, #12]	@ (8006b70 <stdio_exit_handler+0x10>)
 8006b64:	4903      	ldr	r1, [pc, #12]	@ (8006b74 <stdio_exit_handler+0x14>)
 8006b66:	4804      	ldr	r0, [pc, #16]	@ (8006b78 <stdio_exit_handler+0x18>)
 8006b68:	f000 f86c 	bl	8006c44 <_fwalk_sglue>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	0800982d 	.word	0x0800982d
 8006b78:	2000001c 	.word	0x2000001c

08006b7c <cleanup_stdio>:
 8006b7c:	6841      	ldr	r1, [r0, #4]
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <cleanup_stdio+0x30>)
 8006b80:	b510      	push	{r4, lr}
 8006b82:	0004      	movs	r4, r0
 8006b84:	4299      	cmp	r1, r3
 8006b86:	d001      	beq.n	8006b8c <cleanup_stdio+0x10>
 8006b88:	f002 fe50 	bl	800982c <_fflush_r>
 8006b8c:	68a1      	ldr	r1, [r4, #8]
 8006b8e:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <cleanup_stdio+0x34>)
 8006b90:	4299      	cmp	r1, r3
 8006b92:	d002      	beq.n	8006b9a <cleanup_stdio+0x1e>
 8006b94:	0020      	movs	r0, r4
 8006b96:	f002 fe49 	bl	800982c <_fflush_r>
 8006b9a:	68e1      	ldr	r1, [r4, #12]
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <cleanup_stdio+0x38>)
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	d002      	beq.n	8006ba8 <cleanup_stdio+0x2c>
 8006ba2:	0020      	movs	r0, r4
 8006ba4:	f002 fe42 	bl	800982c <_fflush_r>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	20000338 	.word	0x20000338
 8006bb0:	200003a0 	.word	0x200003a0
 8006bb4:	20000408 	.word	0x20000408

08006bb8 <global_stdio_init.part.0>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4b09      	ldr	r3, [pc, #36]	@ (8006be0 <global_stdio_init.part.0+0x28>)
 8006bbc:	4a09      	ldr	r2, [pc, #36]	@ (8006be4 <global_stdio_init.part.0+0x2c>)
 8006bbe:	2104      	movs	r1, #4
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	4809      	ldr	r0, [pc, #36]	@ (8006be8 <global_stdio_init.part.0+0x30>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f7ff ff95 	bl	8006af4 <std>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2109      	movs	r1, #9
 8006bce:	4807      	ldr	r0, [pc, #28]	@ (8006bec <global_stdio_init.part.0+0x34>)
 8006bd0:	f7ff ff90 	bl	8006af4 <std>
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	2112      	movs	r1, #18
 8006bd8:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <global_stdio_init.part.0+0x38>)
 8006bda:	f7ff ff8b 	bl	8006af4 <std>
 8006bde:	bd10      	pop	{r4, pc}
 8006be0:	20000470 	.word	0x20000470
 8006be4:	08006b61 	.word	0x08006b61
 8006be8:	20000338 	.word	0x20000338
 8006bec:	200003a0 	.word	0x200003a0
 8006bf0:	20000408 	.word	0x20000408

08006bf4 <__sfp_lock_acquire>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4802      	ldr	r0, [pc, #8]	@ (8006c00 <__sfp_lock_acquire+0xc>)
 8006bf8:	f000 f931 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	20000479 	.word	0x20000479

08006c04 <__sfp_lock_release>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4802      	ldr	r0, [pc, #8]	@ (8006c10 <__sfp_lock_release+0xc>)
 8006c08:	f000 f92a 	bl	8006e60 <__retarget_lock_release_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	20000479 	.word	0x20000479

08006c14 <__sinit>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	0004      	movs	r4, r0
 8006c18:	f7ff ffec 	bl	8006bf4 <__sfp_lock_acquire>
 8006c1c:	6a23      	ldr	r3, [r4, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <__sinit+0x14>
 8006c22:	f7ff ffef 	bl	8006c04 <__sfp_lock_release>
 8006c26:	bd10      	pop	{r4, pc}
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <__sinit+0x28>)
 8006c2a:	6223      	str	r3, [r4, #32]
 8006c2c:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <__sinit+0x2c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f6      	bne.n	8006c22 <__sinit+0xe>
 8006c34:	f7ff ffc0 	bl	8006bb8 <global_stdio_init.part.0>
 8006c38:	e7f3      	b.n	8006c22 <__sinit+0xe>
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	08006b7d 	.word	0x08006b7d
 8006c40:	20000470 	.word	0x20000470

08006c44 <_fwalk_sglue>:
 8006c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c46:	0014      	movs	r4, r2
 8006c48:	2600      	movs	r6, #0
 8006c4a:	9000      	str	r0, [sp, #0]
 8006c4c:	9101      	str	r1, [sp, #4]
 8006c4e:	68a5      	ldr	r5, [r4, #8]
 8006c50:	6867      	ldr	r7, [r4, #4]
 8006c52:	3f01      	subs	r7, #1
 8006c54:	d504      	bpl.n	8006c60 <_fwalk_sglue+0x1c>
 8006c56:	6824      	ldr	r4, [r4, #0]
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	d1f8      	bne.n	8006c4e <_fwalk_sglue+0xa>
 8006c5c:	0030      	movs	r0, r6
 8006c5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c60:	89ab      	ldrh	r3, [r5, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d908      	bls.n	8006c78 <_fwalk_sglue+0x34>
 8006c66:	220e      	movs	r2, #14
 8006c68:	5eab      	ldrsh	r3, [r5, r2]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	d004      	beq.n	8006c78 <_fwalk_sglue+0x34>
 8006c6e:	0029      	movs	r1, r5
 8006c70:	9800      	ldr	r0, [sp, #0]
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4306      	orrs	r6, r0
 8006c78:	3568      	adds	r5, #104	@ 0x68
 8006c7a:	e7ea      	b.n	8006c52 <_fwalk_sglue+0xe>

08006c7c <siprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	b500      	push	{lr}
 8006c80:	490b      	ldr	r1, [pc, #44]	@ (8006cb0 <siprintf+0x34>)
 8006c82:	b09c      	sub	sp, #112	@ 0x70
 8006c84:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c86:	9002      	str	r0, [sp, #8]
 8006c88:	9006      	str	r0, [sp, #24]
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	9104      	str	r1, [sp, #16]
 8006c8e:	4809      	ldr	r0, [pc, #36]	@ (8006cb4 <siprintf+0x38>)
 8006c90:	4909      	ldr	r1, [pc, #36]	@ (8006cb8 <siprintf+0x3c>)
 8006c92:	cb04      	ldmia	r3!, {r2}
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	a902      	add	r1, sp, #8
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f002 fc42 	bl	8009524 <_svfiprintf_r>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	b01c      	add	sp, #112	@ 0x70
 8006ca8:	bc08      	pop	{r3}
 8006caa:	b003      	add	sp, #12
 8006cac:	4718      	bx	r3
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	7fffffff 	.word	0x7fffffff
 8006cb4:	20000018 	.word	0x20000018
 8006cb8:	ffff0208 	.word	0xffff0208

08006cbc <__sread>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	000c      	movs	r4, r1
 8006cc0:	250e      	movs	r5, #14
 8006cc2:	5f49      	ldrsh	r1, [r1, r5]
 8006cc4:	f000 f878 	bl	8006db8 <_read_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	db03      	blt.n	8006cd4 <__sread+0x18>
 8006ccc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006cce:	181b      	adds	r3, r3, r0
 8006cd0:	6563      	str	r3, [r4, #84]	@ 0x54
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	4a02      	ldr	r2, [pc, #8]	@ (8006ce0 <__sread+0x24>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	e7f9      	b.n	8006cd2 <__sread+0x16>
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	ffffefff 	.word	0xffffefff

08006ce4 <__swrite>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	001f      	movs	r7, r3
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	0005      	movs	r5, r0
 8006cec:	000c      	movs	r4, r1
 8006cee:	0016      	movs	r6, r2
 8006cf0:	05db      	lsls	r3, r3, #23
 8006cf2:	d505      	bpl.n	8006d00 <__swrite+0x1c>
 8006cf4:	230e      	movs	r3, #14
 8006cf6:	5ec9      	ldrsh	r1, [r1, r3]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	f000 f848 	bl	8006d90 <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	4a05      	ldr	r2, [pc, #20]	@ (8006d18 <__swrite+0x34>)
 8006d04:	0028      	movs	r0, r5
 8006d06:	4013      	ands	r3, r2
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	0032      	movs	r2, r6
 8006d0c:	230e      	movs	r3, #14
 8006d0e:	5ee1      	ldrsh	r1, [r4, r3]
 8006d10:	003b      	movs	r3, r7
 8006d12:	f000 f865 	bl	8006de0 <_write_r>
 8006d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d18:	ffffefff 	.word	0xffffefff

08006d1c <__sseek>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	000c      	movs	r4, r1
 8006d20:	250e      	movs	r5, #14
 8006d22:	5f49      	ldrsh	r1, [r1, r5]
 8006d24:	f000 f834 	bl	8006d90 <_lseek_r>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	1c42      	adds	r2, r0, #1
 8006d2c:	d103      	bne.n	8006d36 <__sseek+0x1a>
 8006d2e:	4a05      	ldr	r2, [pc, #20]	@ (8006d44 <__sseek+0x28>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	0152      	lsls	r2, r2, #5
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d40:	e7f8      	b.n	8006d34 <__sseek+0x18>
 8006d42:	46c0      	nop			@ (mov r8, r8)
 8006d44:	ffffefff 	.word	0xffffefff

08006d48 <__sclose>:
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	230e      	movs	r3, #14
 8006d4c:	5ec9      	ldrsh	r1, [r1, r3]
 8006d4e:	f000 f80d 	bl	8006d6c <_close_r>
 8006d52:	bd10      	pop	{r4, pc}

08006d54 <memset>:
 8006d54:	0003      	movs	r3, r0
 8006d56:	1882      	adds	r2, r0, r2
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <memset+0xa>
 8006d5c:	4770      	bx	lr
 8006d5e:	7019      	strb	r1, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	e7f9      	b.n	8006d58 <memset+0x4>

08006d64 <_localeconv_r>:
 8006d64:	4800      	ldr	r0, [pc, #0]	@ (8006d68 <_localeconv_r+0x4>)
 8006d66:	4770      	bx	lr
 8006d68:	20000158 	.word	0x20000158

08006d6c <_close_r>:
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	b570      	push	{r4, r5, r6, lr}
 8006d70:	4d06      	ldr	r5, [pc, #24]	@ (8006d8c <_close_r+0x20>)
 8006d72:	0004      	movs	r4, r0
 8006d74:	0008      	movs	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fc faa6 	bl	80032c8 <_close>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d103      	bne.n	8006d88 <_close_r+0x1c>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d000      	beq.n	8006d88 <_close_r+0x1c>
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	20000474 	.word	0x20000474

08006d90 <_lseek_r>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	0004      	movs	r4, r0
 8006d94:	0008      	movs	r0, r1
 8006d96:	0011      	movs	r1, r2
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4d05      	ldr	r5, [pc, #20]	@ (8006db4 <_lseek_r+0x24>)
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fc fab3 	bl	800330a <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d103      	bne.n	8006db0 <_lseek_r+0x20>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d000      	beq.n	8006db0 <_lseek_r+0x20>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	20000474 	.word	0x20000474

08006db8 <_read_r>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	0004      	movs	r4, r0
 8006dbc:	0008      	movs	r0, r1
 8006dbe:	0011      	movs	r1, r2
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4d05      	ldr	r5, [pc, #20]	@ (8006ddc <_read_r+0x24>)
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fc fa45 	bl	8003256 <_read>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_read_r+0x20>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d000      	beq.n	8006dd8 <_read_r+0x20>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	46c0      	nop			@ (mov r8, r8)
 8006ddc:	20000474 	.word	0x20000474

08006de0 <_write_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	0004      	movs	r4, r0
 8006de4:	0008      	movs	r0, r1
 8006de6:	0011      	movs	r1, r2
 8006de8:	001a      	movs	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	4d05      	ldr	r5, [pc, #20]	@ (8006e04 <_write_r+0x24>)
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fc fa4e 	bl	8003290 <_write>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d103      	bne.n	8006e00 <_write_r+0x20>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d000      	beq.n	8006e00 <_write_r+0x20>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	46c0      	nop			@ (mov r8, r8)
 8006e04:	20000474 	.word	0x20000474

08006e08 <__errno>:
 8006e08:	4b01      	ldr	r3, [pc, #4]	@ (8006e10 <__errno+0x8>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	4770      	bx	lr
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	20000018 	.word	0x20000018

08006e14 <__libc_init_array>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	2600      	movs	r6, #0
 8006e18:	4c0c      	ldr	r4, [pc, #48]	@ (8006e4c <__libc_init_array+0x38>)
 8006e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e50 <__libc_init_array+0x3c>)
 8006e1c:	1b64      	subs	r4, r4, r5
 8006e1e:	10a4      	asrs	r4, r4, #2
 8006e20:	42a6      	cmp	r6, r4
 8006e22:	d109      	bne.n	8006e38 <__libc_init_array+0x24>
 8006e24:	2600      	movs	r6, #0
 8006e26:	f003 fc43 	bl	800a6b0 <_init>
 8006e2a:	4c0a      	ldr	r4, [pc, #40]	@ (8006e54 <__libc_init_array+0x40>)
 8006e2c:	4d0a      	ldr	r5, [pc, #40]	@ (8006e58 <__libc_init_array+0x44>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	42a6      	cmp	r6, r4
 8006e34:	d105      	bne.n	8006e42 <__libc_init_array+0x2e>
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	00b3      	lsls	r3, r6, #2
 8006e3a:	58eb      	ldr	r3, [r5, r3]
 8006e3c:	4798      	blx	r3
 8006e3e:	3601      	adds	r6, #1
 8006e40:	e7ee      	b.n	8006e20 <__libc_init_array+0xc>
 8006e42:	00b3      	lsls	r3, r6, #2
 8006e44:	58eb      	ldr	r3, [r5, r3]
 8006e46:	4798      	blx	r3
 8006e48:	3601      	adds	r6, #1
 8006e4a:	e7f2      	b.n	8006e32 <__libc_init_array+0x1e>
 8006e4c:	0800ac08 	.word	0x0800ac08
 8006e50:	0800ac08 	.word	0x0800ac08
 8006e54:	0800ac0c 	.word	0x0800ac0c
 8006e58:	0800ac08 	.word	0x0800ac08

08006e5c <__retarget_lock_init_recursive>:
 8006e5c:	4770      	bx	lr

08006e5e <__retarget_lock_acquire_recursive>:
 8006e5e:	4770      	bx	lr

08006e60 <__retarget_lock_release_recursive>:
 8006e60:	4770      	bx	lr

08006e62 <memchr>:
 8006e62:	b2c9      	uxtb	r1, r1
 8006e64:	1882      	adds	r2, r0, r2
 8006e66:	4290      	cmp	r0, r2
 8006e68:	d101      	bne.n	8006e6e <memchr+0xc>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	4770      	bx	lr
 8006e6e:	7803      	ldrb	r3, [r0, #0]
 8006e70:	428b      	cmp	r3, r1
 8006e72:	d0fb      	beq.n	8006e6c <memchr+0xa>
 8006e74:	3001      	adds	r0, #1
 8006e76:	e7f6      	b.n	8006e66 <memchr+0x4>

08006e78 <nanf>:
 8006e78:	4800      	ldr	r0, [pc, #0]	@ (8006e7c <nanf+0x4>)
 8006e7a:	4770      	bx	lr
 8006e7c:	7fc00000 	.word	0x7fc00000

08006e80 <quorem>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	6902      	ldr	r2, [r0, #16]
 8006e84:	690f      	ldr	r7, [r1, #16]
 8006e86:	b087      	sub	sp, #28
 8006e88:	0006      	movs	r6, r0
 8006e8a:	000b      	movs	r3, r1
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	9102      	str	r1, [sp, #8]
 8006e90:	42ba      	cmp	r2, r7
 8006e92:	db6d      	blt.n	8006f70 <quorem+0xf0>
 8006e94:	3f01      	subs	r7, #1
 8006e96:	00bc      	lsls	r4, r7, #2
 8006e98:	3314      	adds	r3, #20
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	191b      	adds	r3, r3, r4
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	0033      	movs	r3, r6
 8006ea2:	3314      	adds	r3, #20
 8006ea4:	191c      	adds	r4, r3, r4
 8006ea6:	9301      	str	r3, [sp, #4]
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	9804      	ldr	r0, [sp, #16]
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	0029      	movs	r1, r5
 8006eb6:	f7f9 f943 	bl	8000140 <__udivsi3>
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	9000      	str	r0, [sp, #0]
 8006ebe:	42ab      	cmp	r3, r5
 8006ec0:	d32b      	bcc.n	8006f1a <quorem+0x9a>
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	9d01      	ldr	r5, [sp, #4]
 8006ec6:	469c      	mov	ip, r3
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	4662      	mov	r2, ip
 8006ed0:	ca08      	ldmia	r2!, {r3}
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	4694      	mov	ip, r2
 8006ed6:	9a00      	ldr	r2, [sp, #0]
 8006ed8:	b299      	uxth	r1, r3
 8006eda:	4351      	muls	r1, r2
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	1889      	adds	r1, r1, r2
 8006ee2:	9a00      	ldr	r2, [sp, #0]
 8006ee4:	4353      	muls	r3, r2
 8006ee6:	0c0a      	lsrs	r2, r1, #16
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	0c1a      	lsrs	r2, r3, #16
 8006eec:	b289      	uxth	r1, r1
 8006eee:	9205      	str	r2, [sp, #20]
 8006ef0:	b282      	uxth	r2, r0
 8006ef2:	1a52      	subs	r2, r2, r1
 8006ef4:	9904      	ldr	r1, [sp, #16]
 8006ef6:	0c00      	lsrs	r0, r0, #16
 8006ef8:	1852      	adds	r2, r2, r1
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	1411      	asrs	r1, r2, #16
 8006efe:	1ac3      	subs	r3, r0, r3
 8006f00:	185b      	adds	r3, r3, r1
 8006f02:	1419      	asrs	r1, r3, #16
 8006f04:	b292      	uxth	r2, r2
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	9104      	str	r1, [sp, #16]
 8006f0e:	c504      	stmia	r5!, {r2}
 8006f10:	4563      	cmp	r3, ip
 8006f12:	d2dc      	bcs.n	8006ece <quorem+0x4e>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d030      	beq.n	8006f7c <quorem+0xfc>
 8006f1a:	0030      	movs	r0, r6
 8006f1c:	9902      	ldr	r1, [sp, #8]
 8006f1e:	f001 fa11 	bl	8008344 <__mcmp>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	db23      	blt.n	8006f6e <quorem+0xee>
 8006f26:	0034      	movs	r4, r6
 8006f28:	2500      	movs	r5, #0
 8006f2a:	9902      	ldr	r1, [sp, #8]
 8006f2c:	3414      	adds	r4, #20
 8006f2e:	3114      	adds	r1, #20
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	c901      	ldmia	r1!, {r0}
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	466b      	mov	r3, sp
 8006f38:	891b      	ldrh	r3, [r3, #8]
 8006f3a:	b282      	uxth	r2, r0
 8006f3c:	1a9a      	subs	r2, r3, r2
 8006f3e:	9b02      	ldr	r3, [sp, #8]
 8006f40:	1952      	adds	r2, r2, r5
 8006f42:	0c00      	lsrs	r0, r0, #16
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	1a1b      	subs	r3, r3, r0
 8006f48:	1410      	asrs	r0, r2, #16
 8006f4a:	181b      	adds	r3, r3, r0
 8006f4c:	141d      	asrs	r5, r3, #16
 8006f4e:	b292      	uxth	r2, r2
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	431a      	orrs	r2, r3
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	c404      	stmia	r4!, {r2}
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	d2e9      	bcs.n	8006f30 <quorem+0xb0>
 8006f5c:	9a01      	ldr	r2, [sp, #4]
 8006f5e:	00bb      	lsls	r3, r7, #2
 8006f60:	18d3      	adds	r3, r2, r3
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d013      	beq.n	8006f90 <quorem+0x110>
 8006f68:	9b00      	ldr	r3, [sp, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	9800      	ldr	r0, [sp, #0]
 8006f70:	b007      	add	sp, #28
 8006f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d104      	bne.n	8006f84 <quorem+0x104>
 8006f7a:	3f01      	subs	r7, #1
 8006f7c:	9b01      	ldr	r3, [sp, #4]
 8006f7e:	3c04      	subs	r4, #4
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d3f7      	bcc.n	8006f74 <quorem+0xf4>
 8006f84:	6137      	str	r7, [r6, #16]
 8006f86:	e7c8      	b.n	8006f1a <quorem+0x9a>
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d104      	bne.n	8006f98 <quorem+0x118>
 8006f8e:	3f01      	subs	r7, #1
 8006f90:	9a01      	ldr	r2, [sp, #4]
 8006f92:	3b04      	subs	r3, #4
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3f7      	bcc.n	8006f88 <quorem+0x108>
 8006f98:	6137      	str	r7, [r6, #16]
 8006f9a:	e7e5      	b.n	8006f68 <quorem+0xe8>

08006f9c <_dtoa_r>:
 8006f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9e:	0014      	movs	r4, r2
 8006fa0:	001d      	movs	r5, r3
 8006fa2:	69c6      	ldr	r6, [r0, #28]
 8006fa4:	b09d      	sub	sp, #116	@ 0x74
 8006fa6:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fa8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006faa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006fac:	9003      	str	r0, [sp, #12]
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	d10f      	bne.n	8006fd2 <_dtoa_r+0x36>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f000 fe30 	bl	8007c18 <malloc>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1e02      	subs	r2, r0, #0
 8006fbc:	61d8      	str	r0, [r3, #28]
 8006fbe:	d104      	bne.n	8006fca <_dtoa_r+0x2e>
 8006fc0:	21ef      	movs	r1, #239	@ 0xef
 8006fc2:	4bc7      	ldr	r3, [pc, #796]	@ (80072e0 <_dtoa_r+0x344>)
 8006fc4:	48c7      	ldr	r0, [pc, #796]	@ (80072e4 <_dtoa_r+0x348>)
 8006fc6:	f002 fca3 	bl	8009910 <__assert_func>
 8006fca:	6046      	str	r6, [r0, #4]
 8006fcc:	6086      	str	r6, [r0, #8]
 8006fce:	6006      	str	r6, [r0, #0]
 8006fd0:	60c6      	str	r6, [r0, #12]
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	6819      	ldr	r1, [r3, #0]
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	d00b      	beq.n	8006ff4 <_dtoa_r+0x58>
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4093      	lsls	r3, r2
 8006fe2:	604a      	str	r2, [r1, #4]
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	9803      	ldr	r0, [sp, #12]
 8006fe8:	f000 ff16 	bl	8007e18 <_Bfree>
 8006fec:	2200      	movs	r2, #0
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	da1e      	bge.n	8007036 <_dtoa_r+0x9a>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	006b      	lsls	r3, r5, #1
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007002:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007004:	4bb8      	ldr	r3, [pc, #736]	@ (80072e8 <_dtoa_r+0x34c>)
 8007006:	4ab8      	ldr	r2, [pc, #736]	@ (80072e8 <_dtoa_r+0x34c>)
 8007008:	403b      	ands	r3, r7
 800700a:	4293      	cmp	r3, r2
 800700c:	d116      	bne.n	800703c <_dtoa_r+0xa0>
 800700e:	4bb7      	ldr	r3, [pc, #732]	@ (80072ec <_dtoa_r+0x350>)
 8007010:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007012:	6013      	str	r3, [r2, #0]
 8007014:	033b      	lsls	r3, r7, #12
 8007016:	0b1b      	lsrs	r3, r3, #12
 8007018:	4323      	orrs	r3, r4
 800701a:	d101      	bne.n	8007020 <_dtoa_r+0x84>
 800701c:	f000 fd83 	bl	8007b26 <_dtoa_r+0xb8a>
 8007020:	4bb3      	ldr	r3, [pc, #716]	@ (80072f0 <_dtoa_r+0x354>)
 8007022:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007024:	9308      	str	r3, [sp, #32]
 8007026:	2a00      	cmp	r2, #0
 8007028:	d002      	beq.n	8007030 <_dtoa_r+0x94>
 800702a:	4bb2      	ldr	r3, [pc, #712]	@ (80072f4 <_dtoa_r+0x358>)
 800702c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	9808      	ldr	r0, [sp, #32]
 8007032:	b01d      	add	sp, #116	@ 0x74
 8007034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007036:	2300      	movs	r3, #0
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	e7e2      	b.n	8007002 <_dtoa_r+0x66>
 800703c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800703e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007040:	9212      	str	r2, [sp, #72]	@ 0x48
 8007042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007044:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007046:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007048:	2200      	movs	r2, #0
 800704a:	2300      	movs	r3, #0
 800704c:	f7f9 f9fe 	bl	800044c <__aeabi_dcmpeq>
 8007050:	1e06      	subs	r6, r0, #0
 8007052:	d00b      	beq.n	800706c <_dtoa_r+0xd0>
 8007054:	2301      	movs	r3, #1
 8007056:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <_dtoa_r+0xca>
 8007060:	4ba5      	ldr	r3, [pc, #660]	@ (80072f8 <_dtoa_r+0x35c>)
 8007062:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4ba5      	ldr	r3, [pc, #660]	@ (80072fc <_dtoa_r+0x360>)
 8007068:	9308      	str	r3, [sp, #32]
 800706a:	e7e1      	b.n	8007030 <_dtoa_r+0x94>
 800706c:	ab1a      	add	r3, sp, #104	@ 0x68
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	9803      	ldr	r0, [sp, #12]
 8007076:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007078:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800707a:	f001 fa85 	bl	8008588 <__d2b>
 800707e:	007a      	lsls	r2, r7, #1
 8007080:	9005      	str	r0, [sp, #20]
 8007082:	0d52      	lsrs	r2, r2, #21
 8007084:	d100      	bne.n	8007088 <_dtoa_r+0xec>
 8007086:	e07b      	b.n	8007180 <_dtoa_r+0x1e4>
 8007088:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800708a:	9618      	str	r6, [sp, #96]	@ 0x60
 800708c:	0319      	lsls	r1, r3, #12
 800708e:	4b9c      	ldr	r3, [pc, #624]	@ (8007300 <_dtoa_r+0x364>)
 8007090:	0b09      	lsrs	r1, r1, #12
 8007092:	430b      	orrs	r3, r1
 8007094:	499b      	ldr	r1, [pc, #620]	@ (8007304 <_dtoa_r+0x368>)
 8007096:	1857      	adds	r7, r2, r1
 8007098:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800709a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800709c:	0019      	movs	r1, r3
 800709e:	2200      	movs	r2, #0
 80070a0:	4b99      	ldr	r3, [pc, #612]	@ (8007308 <_dtoa_r+0x36c>)
 80070a2:	f7fa ff79 	bl	8001f98 <__aeabi_dsub>
 80070a6:	4a99      	ldr	r2, [pc, #612]	@ (800730c <_dtoa_r+0x370>)
 80070a8:	4b99      	ldr	r3, [pc, #612]	@ (8007310 <_dtoa_r+0x374>)
 80070aa:	f7fa fcad 	bl	8001a08 <__aeabi_dmul>
 80070ae:	4a99      	ldr	r2, [pc, #612]	@ (8007314 <_dtoa_r+0x378>)
 80070b0:	4b99      	ldr	r3, [pc, #612]	@ (8007318 <_dtoa_r+0x37c>)
 80070b2:	f7f9 fd01 	bl	8000ab8 <__aeabi_dadd>
 80070b6:	0004      	movs	r4, r0
 80070b8:	0038      	movs	r0, r7
 80070ba:	000d      	movs	r5, r1
 80070bc:	f7fb fb66 	bl	800278c <__aeabi_i2d>
 80070c0:	4a96      	ldr	r2, [pc, #600]	@ (800731c <_dtoa_r+0x380>)
 80070c2:	4b97      	ldr	r3, [pc, #604]	@ (8007320 <_dtoa_r+0x384>)
 80070c4:	f7fa fca0 	bl	8001a08 <__aeabi_dmul>
 80070c8:	0002      	movs	r2, r0
 80070ca:	000b      	movs	r3, r1
 80070cc:	0020      	movs	r0, r4
 80070ce:	0029      	movs	r1, r5
 80070d0:	f7f9 fcf2 	bl	8000ab8 <__aeabi_dadd>
 80070d4:	0004      	movs	r4, r0
 80070d6:	000d      	movs	r5, r1
 80070d8:	f7fb fb1c 	bl	8002714 <__aeabi_d2iz>
 80070dc:	2200      	movs	r2, #0
 80070de:	9004      	str	r0, [sp, #16]
 80070e0:	2300      	movs	r3, #0
 80070e2:	0020      	movs	r0, r4
 80070e4:	0029      	movs	r1, r5
 80070e6:	f7f9 f9b7 	bl	8000458 <__aeabi_dcmplt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d00b      	beq.n	8007106 <_dtoa_r+0x16a>
 80070ee:	9804      	ldr	r0, [sp, #16]
 80070f0:	f7fb fb4c 	bl	800278c <__aeabi_i2d>
 80070f4:	002b      	movs	r3, r5
 80070f6:	0022      	movs	r2, r4
 80070f8:	f7f9 f9a8 	bl	800044c <__aeabi_dcmpeq>
 80070fc:	4243      	negs	r3, r0
 80070fe:	4158      	adcs	r0, r3
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	1a1b      	subs	r3, r3, r0
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	2301      	movs	r3, #1
 8007108:	9315      	str	r3, [sp, #84]	@ 0x54
 800710a:	9b04      	ldr	r3, [sp, #16]
 800710c:	2b16      	cmp	r3, #22
 800710e:	d810      	bhi.n	8007132 <_dtoa_r+0x196>
 8007110:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007112:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007114:	9a04      	ldr	r2, [sp, #16]
 8007116:	4b83      	ldr	r3, [pc, #524]	@ (8007324 <_dtoa_r+0x388>)
 8007118:	00d2      	lsls	r2, r2, #3
 800711a:	189b      	adds	r3, r3, r2
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f7f9 f99a 	bl	8000458 <__aeabi_dcmplt>
 8007124:	2800      	cmp	r0, #0
 8007126:	d047      	beq.n	80071b8 <_dtoa_r+0x21c>
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	3b01      	subs	r3, #1
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	2300      	movs	r3, #0
 8007130:	9315      	str	r3, [sp, #84]	@ 0x54
 8007132:	2200      	movs	r2, #0
 8007134:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007136:	9206      	str	r2, [sp, #24]
 8007138:	1bdb      	subs	r3, r3, r7
 800713a:	1e5a      	subs	r2, r3, #1
 800713c:	d53e      	bpl.n	80071bc <_dtoa_r+0x220>
 800713e:	2201      	movs	r2, #1
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	9306      	str	r3, [sp, #24]
 8007144:	2300      	movs	r3, #0
 8007146:	930d      	str	r3, [sp, #52]	@ 0x34
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	db38      	blt.n	80071c0 <_dtoa_r+0x224>
 800714e:	9a04      	ldr	r2, [sp, #16]
 8007150:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007152:	4694      	mov	ip, r2
 8007154:	4463      	add	r3, ip
 8007156:	930d      	str	r3, [sp, #52]	@ 0x34
 8007158:	2300      	movs	r3, #0
 800715a:	9214      	str	r2, [sp, #80]	@ 0x50
 800715c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800715e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007160:	2401      	movs	r4, #1
 8007162:	2b09      	cmp	r3, #9
 8007164:	d867      	bhi.n	8007236 <_dtoa_r+0x29a>
 8007166:	2b05      	cmp	r3, #5
 8007168:	dd02      	ble.n	8007170 <_dtoa_r+0x1d4>
 800716a:	2400      	movs	r4, #0
 800716c:	3b04      	subs	r3, #4
 800716e:	9322      	str	r3, [sp, #136]	@ 0x88
 8007170:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007172:	1e98      	subs	r0, r3, #2
 8007174:	2803      	cmp	r0, #3
 8007176:	d867      	bhi.n	8007248 <_dtoa_r+0x2ac>
 8007178:	f7f8 ffce 	bl	8000118 <__gnu_thumb1_case_uqi>
 800717c:	5b383a2b 	.word	0x5b383a2b
 8007180:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007182:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007184:	18f6      	adds	r6, r6, r3
 8007186:	4b68      	ldr	r3, [pc, #416]	@ (8007328 <_dtoa_r+0x38c>)
 8007188:	18f2      	adds	r2, r6, r3
 800718a:	2a20      	cmp	r2, #32
 800718c:	dd0f      	ble.n	80071ae <_dtoa_r+0x212>
 800718e:	2340      	movs	r3, #64	@ 0x40
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	409f      	lsls	r7, r3
 8007194:	4b65      	ldr	r3, [pc, #404]	@ (800732c <_dtoa_r+0x390>)
 8007196:	0038      	movs	r0, r7
 8007198:	18f3      	adds	r3, r6, r3
 800719a:	40dc      	lsrs	r4, r3
 800719c:	4320      	orrs	r0, r4
 800719e:	f7fb fb23 	bl	80027e8 <__aeabi_ui2d>
 80071a2:	2201      	movs	r2, #1
 80071a4:	4b62      	ldr	r3, [pc, #392]	@ (8007330 <_dtoa_r+0x394>)
 80071a6:	1e77      	subs	r7, r6, #1
 80071a8:	18cb      	adds	r3, r1, r3
 80071aa:	9218      	str	r2, [sp, #96]	@ 0x60
 80071ac:	e776      	b.n	800709c <_dtoa_r+0x100>
 80071ae:	2320      	movs	r3, #32
 80071b0:	0020      	movs	r0, r4
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	4098      	lsls	r0, r3
 80071b6:	e7f2      	b.n	800719e <_dtoa_r+0x202>
 80071b8:	9015      	str	r0, [sp, #84]	@ 0x54
 80071ba:	e7ba      	b.n	8007132 <_dtoa_r+0x196>
 80071bc:	920d      	str	r2, [sp, #52]	@ 0x34
 80071be:	e7c3      	b.n	8007148 <_dtoa_r+0x1ac>
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	9a04      	ldr	r2, [sp, #16]
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	9306      	str	r3, [sp, #24]
 80071c8:	4253      	negs	r3, r2
 80071ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071cc:	2300      	movs	r3, #0
 80071ce:	9314      	str	r3, [sp, #80]	@ 0x50
 80071d0:	e7c5      	b.n	800715e <_dtoa_r+0x1c2>
 80071d2:	2300      	movs	r3, #0
 80071d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80071d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80071da:	9309      	str	r3, [sp, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc13      	bgt.n	8007208 <_dtoa_r+0x26c>
 80071e0:	2301      	movs	r3, #1
 80071e2:	001a      	movs	r2, r3
 80071e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80071e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80071ea:	e00d      	b.n	8007208 <_dtoa_r+0x26c>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e7f1      	b.n	80071d4 <_dtoa_r+0x238>
 80071f0:	2300      	movs	r3, #0
 80071f2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80071f6:	4694      	mov	ip, r2
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	4463      	add	r3, ip
 80071fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80071fe:	3301      	adds	r3, #1
 8007200:	9309      	str	r3, [sp, #36]	@ 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	dc00      	bgt.n	8007208 <_dtoa_r+0x26c>
 8007206:	2301      	movs	r3, #1
 8007208:	9a03      	ldr	r2, [sp, #12]
 800720a:	2100      	movs	r1, #0
 800720c:	69d0      	ldr	r0, [r2, #28]
 800720e:	2204      	movs	r2, #4
 8007210:	0015      	movs	r5, r2
 8007212:	3514      	adds	r5, #20
 8007214:	429d      	cmp	r5, r3
 8007216:	d91b      	bls.n	8007250 <_dtoa_r+0x2b4>
 8007218:	6041      	str	r1, [r0, #4]
 800721a:	9803      	ldr	r0, [sp, #12]
 800721c:	f000 fdb8 	bl	8007d90 <_Balloc>
 8007220:	9008      	str	r0, [sp, #32]
 8007222:	2800      	cmp	r0, #0
 8007224:	d117      	bne.n	8007256 <_dtoa_r+0x2ba>
 8007226:	21b0      	movs	r1, #176	@ 0xb0
 8007228:	4b42      	ldr	r3, [pc, #264]	@ (8007334 <_dtoa_r+0x398>)
 800722a:	482e      	ldr	r0, [pc, #184]	@ (80072e4 <_dtoa_r+0x348>)
 800722c:	9a08      	ldr	r2, [sp, #32]
 800722e:	31ff      	adds	r1, #255	@ 0xff
 8007230:	e6c9      	b.n	8006fc6 <_dtoa_r+0x2a>
 8007232:	2301      	movs	r3, #1
 8007234:	e7dd      	b.n	80071f2 <_dtoa_r+0x256>
 8007236:	2300      	movs	r3, #0
 8007238:	9410      	str	r4, [sp, #64]	@ 0x40
 800723a:	9322      	str	r3, [sp, #136]	@ 0x88
 800723c:	3b01      	subs	r3, #1
 800723e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	2200      	movs	r2, #0
 8007244:	3313      	adds	r3, #19
 8007246:	e7cf      	b.n	80071e8 <_dtoa_r+0x24c>
 8007248:	2301      	movs	r3, #1
 800724a:	9310      	str	r3, [sp, #64]	@ 0x40
 800724c:	3b02      	subs	r3, #2
 800724e:	e7f6      	b.n	800723e <_dtoa_r+0x2a2>
 8007250:	3101      	adds	r1, #1
 8007252:	0052      	lsls	r2, r2, #1
 8007254:	e7dc      	b.n	8007210 <_dtoa_r+0x274>
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	9a08      	ldr	r2, [sp, #32]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007260:	2b0e      	cmp	r3, #14
 8007262:	d900      	bls.n	8007266 <_dtoa_r+0x2ca>
 8007264:	e0d9      	b.n	800741a <_dtoa_r+0x47e>
 8007266:	2c00      	cmp	r4, #0
 8007268:	d100      	bne.n	800726c <_dtoa_r+0x2d0>
 800726a:	e0d6      	b.n	800741a <_dtoa_r+0x47e>
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	dd64      	ble.n	800733c <_dtoa_r+0x3a0>
 8007272:	210f      	movs	r1, #15
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	4b2b      	ldr	r3, [pc, #172]	@ (8007324 <_dtoa_r+0x388>)
 8007278:	400a      	ands	r2, r1
 800727a:	00d2      	lsls	r2, r2, #3
 800727c:	189b      	adds	r3, r3, r2
 800727e:	681e      	ldr	r6, [r3, #0]
 8007280:	685f      	ldr	r7, [r3, #4]
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	2402      	movs	r4, #2
 8007286:	111d      	asrs	r5, r3, #4
 8007288:	05db      	lsls	r3, r3, #23
 800728a:	d50a      	bpl.n	80072a2 <_dtoa_r+0x306>
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <_dtoa_r+0x39c>)
 800728e:	400d      	ands	r5, r1
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007296:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007298:	f7f9 ff72 	bl	8001180 <__aeabi_ddiv>
 800729c:	900a      	str	r0, [sp, #40]	@ 0x28
 800729e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072a0:	3401      	adds	r4, #1
 80072a2:	4b25      	ldr	r3, [pc, #148]	@ (8007338 <_dtoa_r+0x39c>)
 80072a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	d108      	bne.n	80072bc <_dtoa_r+0x320>
 80072aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ae:	0032      	movs	r2, r6
 80072b0:	003b      	movs	r3, r7
 80072b2:	f7f9 ff65 	bl	8001180 <__aeabi_ddiv>
 80072b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80072b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80072ba:	e05a      	b.n	8007372 <_dtoa_r+0x3d6>
 80072bc:	2301      	movs	r3, #1
 80072be:	421d      	tst	r5, r3
 80072c0:	d009      	beq.n	80072d6 <_dtoa_r+0x33a>
 80072c2:	18e4      	adds	r4, r4, r3
 80072c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072c6:	0030      	movs	r0, r6
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	0039      	movs	r1, r7
 80072ce:	f7fa fb9b 	bl	8001a08 <__aeabi_dmul>
 80072d2:	0006      	movs	r6, r0
 80072d4:	000f      	movs	r7, r1
 80072d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	3308      	adds	r3, #8
 80072dc:	e7e2      	b.n	80072a4 <_dtoa_r+0x308>
 80072de:	46c0      	nop			@ (mov r8, r8)
 80072e0:	0800a816 	.word	0x0800a816
 80072e4:	0800a82d 	.word	0x0800a82d
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	0000270f 	.word	0x0000270f
 80072f0:	0800a812 	.word	0x0800a812
 80072f4:	0800a815 	.word	0x0800a815
 80072f8:	0800a7e1 	.word	0x0800a7e1
 80072fc:	0800a7e0 	.word	0x0800a7e0
 8007300:	3ff00000 	.word	0x3ff00000
 8007304:	fffffc01 	.word	0xfffffc01
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	636f4361 	.word	0x636f4361
 8007310:	3fd287a7 	.word	0x3fd287a7
 8007314:	8b60c8b3 	.word	0x8b60c8b3
 8007318:	3fc68a28 	.word	0x3fc68a28
 800731c:	509f79fb 	.word	0x509f79fb
 8007320:	3fd34413 	.word	0x3fd34413
 8007324:	0800a928 	.word	0x0800a928
 8007328:	00000432 	.word	0x00000432
 800732c:	00000412 	.word	0x00000412
 8007330:	fe100000 	.word	0xfe100000
 8007334:	0800a885 	.word	0x0800a885
 8007338:	0800a900 	.word	0x0800a900
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	2402      	movs	r4, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d016      	beq.n	8007372 <_dtoa_r+0x3d6>
 8007344:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007346:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007348:	220f      	movs	r2, #15
 800734a:	425d      	negs	r5, r3
 800734c:	402a      	ands	r2, r5
 800734e:	4bd7      	ldr	r3, [pc, #860]	@ (80076ac <_dtoa_r+0x710>)
 8007350:	00d2      	lsls	r2, r2, #3
 8007352:	189b      	adds	r3, r3, r2
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f7fa fb56 	bl	8001a08 <__aeabi_dmul>
 800735c:	2701      	movs	r7, #1
 800735e:	2300      	movs	r3, #0
 8007360:	900a      	str	r0, [sp, #40]	@ 0x28
 8007362:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007364:	4ed2      	ldr	r6, [pc, #840]	@ (80076b0 <_dtoa_r+0x714>)
 8007366:	112d      	asrs	r5, r5, #4
 8007368:	2d00      	cmp	r5, #0
 800736a:	d000      	beq.n	800736e <_dtoa_r+0x3d2>
 800736c:	e0ba      	b.n	80074e4 <_dtoa_r+0x548>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1a1      	bne.n	80072b6 <_dtoa_r+0x31a>
 8007372:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007374:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007376:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007378:	2b00      	cmp	r3, #0
 800737a:	d100      	bne.n	800737e <_dtoa_r+0x3e2>
 800737c:	e0bd      	b.n	80074fa <_dtoa_r+0x55e>
 800737e:	2200      	movs	r2, #0
 8007380:	0030      	movs	r0, r6
 8007382:	0039      	movs	r1, r7
 8007384:	4bcb      	ldr	r3, [pc, #812]	@ (80076b4 <_dtoa_r+0x718>)
 8007386:	f7f9 f867 	bl	8000458 <__aeabi_dcmplt>
 800738a:	2800      	cmp	r0, #0
 800738c:	d100      	bne.n	8007390 <_dtoa_r+0x3f4>
 800738e:	e0b4      	b.n	80074fa <_dtoa_r+0x55e>
 8007390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d100      	bne.n	8007398 <_dtoa_r+0x3fc>
 8007396:	e0b0      	b.n	80074fa <_dtoa_r+0x55e>
 8007398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd39      	ble.n	8007412 <_dtoa_r+0x476>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	2200      	movs	r2, #0
 80073a2:	3b01      	subs	r3, #1
 80073a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80073a6:	0030      	movs	r0, r6
 80073a8:	4bc3      	ldr	r3, [pc, #780]	@ (80076b8 <_dtoa_r+0x71c>)
 80073aa:	0039      	movs	r1, r7
 80073ac:	f7fa fb2c 	bl	8001a08 <__aeabi_dmul>
 80073b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80073b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b6:	3401      	adds	r4, #1
 80073b8:	0020      	movs	r0, r4
 80073ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80073bc:	f7fb f9e6 	bl	800278c <__aeabi_i2d>
 80073c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c4:	f7fa fb20 	bl	8001a08 <__aeabi_dmul>
 80073c8:	4bbc      	ldr	r3, [pc, #752]	@ (80076bc <_dtoa_r+0x720>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7f9 fb74 	bl	8000ab8 <__aeabi_dadd>
 80073d0:	4bbb      	ldr	r3, [pc, #748]	@ (80076c0 <_dtoa_r+0x724>)
 80073d2:	0006      	movs	r6, r0
 80073d4:	18cf      	adds	r7, r1, r3
 80073d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d000      	beq.n	80073de <_dtoa_r+0x442>
 80073dc:	e091      	b.n	8007502 <_dtoa_r+0x566>
 80073de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073e2:	2200      	movs	r2, #0
 80073e4:	4bb7      	ldr	r3, [pc, #732]	@ (80076c4 <_dtoa_r+0x728>)
 80073e6:	f7fa fdd7 	bl	8001f98 <__aeabi_dsub>
 80073ea:	0032      	movs	r2, r6
 80073ec:	003b      	movs	r3, r7
 80073ee:	0004      	movs	r4, r0
 80073f0:	000d      	movs	r5, r1
 80073f2:	f7f9 f845 	bl	8000480 <__aeabi_dcmpgt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d000      	beq.n	80073fc <_dtoa_r+0x460>
 80073fa:	e29d      	b.n	8007938 <_dtoa_r+0x99c>
 80073fc:	2180      	movs	r1, #128	@ 0x80
 80073fe:	0609      	lsls	r1, r1, #24
 8007400:	187b      	adds	r3, r7, r1
 8007402:	0032      	movs	r2, r6
 8007404:	0020      	movs	r0, r4
 8007406:	0029      	movs	r1, r5
 8007408:	f7f9 f826 	bl	8000458 <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d000      	beq.n	8007412 <_dtoa_r+0x476>
 8007410:	e130      	b.n	8007674 <_dtoa_r+0x6d8>
 8007412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007414:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007416:	930a      	str	r3, [sp, #40]	@ 0x28
 8007418:	940b      	str	r4, [sp, #44]	@ 0x2c
 800741a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800741c:	2b00      	cmp	r3, #0
 800741e:	da00      	bge.n	8007422 <_dtoa_r+0x486>
 8007420:	e177      	b.n	8007712 <_dtoa_r+0x776>
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	2a0e      	cmp	r2, #14
 8007426:	dd00      	ble.n	800742a <_dtoa_r+0x48e>
 8007428:	e173      	b.n	8007712 <_dtoa_r+0x776>
 800742a:	4ba0      	ldr	r3, [pc, #640]	@ (80076ac <_dtoa_r+0x710>)
 800742c:	00d2      	lsls	r2, r2, #3
 800742e:	189b      	adds	r3, r3, r2
 8007430:	685c      	ldr	r4, [r3, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9306      	str	r3, [sp, #24]
 8007436:	9407      	str	r4, [sp, #28]
 8007438:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800743a:	2b00      	cmp	r3, #0
 800743c:	da03      	bge.n	8007446 <_dtoa_r+0x4aa>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc00      	bgt.n	8007446 <_dtoa_r+0x4aa>
 8007444:	e106      	b.n	8007654 <_dtoa_r+0x6b8>
 8007446:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007448:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800744a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800744c:	9d08      	ldr	r5, [sp, #32]
 800744e:	3b01      	subs	r3, #1
 8007450:	195b      	adds	r3, r3, r5
 8007452:	930a      	str	r3, [sp, #40]	@ 0x28
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	9b07      	ldr	r3, [sp, #28]
 8007458:	0030      	movs	r0, r6
 800745a:	0039      	movs	r1, r7
 800745c:	f7f9 fe90 	bl	8001180 <__aeabi_ddiv>
 8007460:	f7fb f958 	bl	8002714 <__aeabi_d2iz>
 8007464:	9009      	str	r0, [sp, #36]	@ 0x24
 8007466:	f7fb f991 	bl	800278c <__aeabi_i2d>
 800746a:	9a06      	ldr	r2, [sp, #24]
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	f7fa facb 	bl	8001a08 <__aeabi_dmul>
 8007472:	0002      	movs	r2, r0
 8007474:	000b      	movs	r3, r1
 8007476:	0030      	movs	r0, r6
 8007478:	0039      	movs	r1, r7
 800747a:	f7fa fd8d 	bl	8001f98 <__aeabi_dsub>
 800747e:	002b      	movs	r3, r5
 8007480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007482:	3501      	adds	r5, #1
 8007484:	3230      	adds	r2, #48	@ 0x30
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800748a:	002c      	movs	r4, r5
 800748c:	429a      	cmp	r2, r3
 800748e:	d000      	beq.n	8007492 <_dtoa_r+0x4f6>
 8007490:	e131      	b.n	80076f6 <_dtoa_r+0x75a>
 8007492:	0002      	movs	r2, r0
 8007494:	000b      	movs	r3, r1
 8007496:	f7f9 fb0f 	bl	8000ab8 <__aeabi_dadd>
 800749a:	9a06      	ldr	r2, [sp, #24]
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	0006      	movs	r6, r0
 80074a0:	000f      	movs	r7, r1
 80074a2:	f7f8 ffed 	bl	8000480 <__aeabi_dcmpgt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d000      	beq.n	80074ac <_dtoa_r+0x510>
 80074aa:	e10f      	b.n	80076cc <_dtoa_r+0x730>
 80074ac:	9a06      	ldr	r2, [sp, #24]
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	0030      	movs	r0, r6
 80074b2:	0039      	movs	r1, r7
 80074b4:	f7f8 ffca 	bl	800044c <__aeabi_dcmpeq>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d003      	beq.n	80074c4 <_dtoa_r+0x528>
 80074bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074be:	07dd      	lsls	r5, r3, #31
 80074c0:	d500      	bpl.n	80074c4 <_dtoa_r+0x528>
 80074c2:	e103      	b.n	80076cc <_dtoa_r+0x730>
 80074c4:	9905      	ldr	r1, [sp, #20]
 80074c6:	9803      	ldr	r0, [sp, #12]
 80074c8:	f000 fca6 	bl	8007e18 <_Bfree>
 80074cc:	2300      	movs	r3, #0
 80074ce:	7023      	strb	r3, [r4, #0]
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80074d4:	3301      	adds	r3, #1
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d100      	bne.n	80074e0 <_dtoa_r+0x544>
 80074de:	e5a7      	b.n	8007030 <_dtoa_r+0x94>
 80074e0:	601c      	str	r4, [r3, #0]
 80074e2:	e5a5      	b.n	8007030 <_dtoa_r+0x94>
 80074e4:	423d      	tst	r5, r7
 80074e6:	d005      	beq.n	80074f4 <_dtoa_r+0x558>
 80074e8:	6832      	ldr	r2, [r6, #0]
 80074ea:	6873      	ldr	r3, [r6, #4]
 80074ec:	f7fa fa8c 	bl	8001a08 <__aeabi_dmul>
 80074f0:	003b      	movs	r3, r7
 80074f2:	3401      	adds	r4, #1
 80074f4:	106d      	asrs	r5, r5, #1
 80074f6:	3608      	adds	r6, #8
 80074f8:	e736      	b.n	8007368 <_dtoa_r+0x3cc>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80074fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007500:	e75a      	b.n	80073b8 <_dtoa_r+0x41c>
 8007502:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007504:	4b69      	ldr	r3, [pc, #420]	@ (80076ac <_dtoa_r+0x710>)
 8007506:	3a01      	subs	r2, #1
 8007508:	00d2      	lsls	r2, r2, #3
 800750a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800750c:	189b      	adds	r3, r3, r2
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2900      	cmp	r1, #0
 8007514:	d04c      	beq.n	80075b0 <_dtoa_r+0x614>
 8007516:	2000      	movs	r0, #0
 8007518:	496b      	ldr	r1, [pc, #428]	@ (80076c8 <_dtoa_r+0x72c>)
 800751a:	f7f9 fe31 	bl	8001180 <__aeabi_ddiv>
 800751e:	0032      	movs	r2, r6
 8007520:	003b      	movs	r3, r7
 8007522:	f7fa fd39 	bl	8001f98 <__aeabi_dsub>
 8007526:	9a08      	ldr	r2, [sp, #32]
 8007528:	0006      	movs	r6, r0
 800752a:	4694      	mov	ip, r2
 800752c:	000f      	movs	r7, r1
 800752e:	9b08      	ldr	r3, [sp, #32]
 8007530:	9316      	str	r3, [sp, #88]	@ 0x58
 8007532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007534:	4463      	add	r3, ip
 8007536:	9311      	str	r3, [sp, #68]	@ 0x44
 8007538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800753a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800753c:	f7fb f8ea 	bl	8002714 <__aeabi_d2iz>
 8007540:	0005      	movs	r5, r0
 8007542:	f7fb f923 	bl	800278c <__aeabi_i2d>
 8007546:	0002      	movs	r2, r0
 8007548:	000b      	movs	r3, r1
 800754a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800754c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800754e:	f7fa fd23 	bl	8001f98 <__aeabi_dsub>
 8007552:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007554:	3530      	adds	r5, #48	@ 0x30
 8007556:	1c5c      	adds	r4, r3, #1
 8007558:	701d      	strb	r5, [r3, #0]
 800755a:	0032      	movs	r2, r6
 800755c:	003b      	movs	r3, r7
 800755e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007560:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007562:	f7f8 ff79 	bl	8000458 <__aeabi_dcmplt>
 8007566:	2800      	cmp	r0, #0
 8007568:	d16a      	bne.n	8007640 <_dtoa_r+0x6a4>
 800756a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800756c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800756e:	2000      	movs	r0, #0
 8007570:	4950      	ldr	r1, [pc, #320]	@ (80076b4 <_dtoa_r+0x718>)
 8007572:	f7fa fd11 	bl	8001f98 <__aeabi_dsub>
 8007576:	0032      	movs	r2, r6
 8007578:	003b      	movs	r3, r7
 800757a:	f7f8 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800757e:	2800      	cmp	r0, #0
 8007580:	d000      	beq.n	8007584 <_dtoa_r+0x5e8>
 8007582:	e0a5      	b.n	80076d0 <_dtoa_r+0x734>
 8007584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007586:	42a3      	cmp	r3, r4
 8007588:	d100      	bne.n	800758c <_dtoa_r+0x5f0>
 800758a:	e742      	b.n	8007412 <_dtoa_r+0x476>
 800758c:	2200      	movs	r2, #0
 800758e:	0030      	movs	r0, r6
 8007590:	0039      	movs	r1, r7
 8007592:	4b49      	ldr	r3, [pc, #292]	@ (80076b8 <_dtoa_r+0x71c>)
 8007594:	f7fa fa38 	bl	8001a08 <__aeabi_dmul>
 8007598:	2200      	movs	r2, #0
 800759a:	0006      	movs	r6, r0
 800759c:	000f      	movs	r7, r1
 800759e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a2:	4b45      	ldr	r3, [pc, #276]	@ (80076b8 <_dtoa_r+0x71c>)
 80075a4:	f7fa fa30 	bl	8001a08 <__aeabi_dmul>
 80075a8:	9416      	str	r4, [sp, #88]	@ 0x58
 80075aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80075ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075ae:	e7c3      	b.n	8007538 <_dtoa_r+0x59c>
 80075b0:	0030      	movs	r0, r6
 80075b2:	0039      	movs	r1, r7
 80075b4:	f7fa fa28 	bl	8001a08 <__aeabi_dmul>
 80075b8:	9d08      	ldr	r5, [sp, #32]
 80075ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80075bc:	002b      	movs	r3, r5
 80075be:	4694      	mov	ip, r2
 80075c0:	9016      	str	r0, [sp, #88]	@ 0x58
 80075c2:	9117      	str	r1, [sp, #92]	@ 0x5c
 80075c4:	4463      	add	r3, ip
 80075c6:	9319      	str	r3, [sp, #100]	@ 0x64
 80075c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075cc:	f7fb f8a2 	bl	8002714 <__aeabi_d2iz>
 80075d0:	0004      	movs	r4, r0
 80075d2:	f7fb f8db 	bl	800278c <__aeabi_i2d>
 80075d6:	000b      	movs	r3, r1
 80075d8:	0002      	movs	r2, r0
 80075da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075de:	f7fa fcdb 	bl	8001f98 <__aeabi_dsub>
 80075e2:	3430      	adds	r4, #48	@ 0x30
 80075e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075e6:	702c      	strb	r4, [r5, #0]
 80075e8:	3501      	adds	r5, #1
 80075ea:	0006      	movs	r6, r0
 80075ec:	000f      	movs	r7, r1
 80075ee:	42ab      	cmp	r3, r5
 80075f0:	d129      	bne.n	8007646 <_dtoa_r+0x6aa>
 80075f2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80075f4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80075fa:	469c      	mov	ip, r3
 80075fc:	2200      	movs	r2, #0
 80075fe:	4b32      	ldr	r3, [pc, #200]	@ (80076c8 <_dtoa_r+0x72c>)
 8007600:	4464      	add	r4, ip
 8007602:	f7f9 fa59 	bl	8000ab8 <__aeabi_dadd>
 8007606:	0002      	movs	r2, r0
 8007608:	000b      	movs	r3, r1
 800760a:	0030      	movs	r0, r6
 800760c:	0039      	movs	r1, r7
 800760e:	f7f8 ff37 	bl	8000480 <__aeabi_dcmpgt>
 8007612:	2800      	cmp	r0, #0
 8007614:	d15c      	bne.n	80076d0 <_dtoa_r+0x734>
 8007616:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800761a:	2000      	movs	r0, #0
 800761c:	492a      	ldr	r1, [pc, #168]	@ (80076c8 <_dtoa_r+0x72c>)
 800761e:	f7fa fcbb 	bl	8001f98 <__aeabi_dsub>
 8007622:	0002      	movs	r2, r0
 8007624:	000b      	movs	r3, r1
 8007626:	0030      	movs	r0, r6
 8007628:	0039      	movs	r1, r7
 800762a:	f7f8 ff15 	bl	8000458 <__aeabi_dcmplt>
 800762e:	2800      	cmp	r0, #0
 8007630:	d100      	bne.n	8007634 <_dtoa_r+0x698>
 8007632:	e6ee      	b.n	8007412 <_dtoa_r+0x476>
 8007634:	0023      	movs	r3, r4
 8007636:	3c01      	subs	r4, #1
 8007638:	7822      	ldrb	r2, [r4, #0]
 800763a:	2a30      	cmp	r2, #48	@ 0x30
 800763c:	d0fa      	beq.n	8007634 <_dtoa_r+0x698>
 800763e:	001c      	movs	r4, r3
 8007640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	e73e      	b.n	80074c4 <_dtoa_r+0x528>
 8007646:	2200      	movs	r2, #0
 8007648:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <_dtoa_r+0x71c>)
 800764a:	f7fa f9dd 	bl	8001a08 <__aeabi_dmul>
 800764e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007650:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007652:	e7b9      	b.n	80075c8 <_dtoa_r+0x62c>
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10c      	bne.n	8007674 <_dtoa_r+0x6d8>
 800765a:	9806      	ldr	r0, [sp, #24]
 800765c:	9907      	ldr	r1, [sp, #28]
 800765e:	2200      	movs	r2, #0
 8007660:	4b18      	ldr	r3, [pc, #96]	@ (80076c4 <_dtoa_r+0x728>)
 8007662:	f7fa f9d1 	bl	8001a08 <__aeabi_dmul>
 8007666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800766a:	f7f8 ff13 	bl	8000494 <__aeabi_dcmpge>
 800766e:	2800      	cmp	r0, #0
 8007670:	d100      	bne.n	8007674 <_dtoa_r+0x6d8>
 8007672:	e164      	b.n	800793e <_dtoa_r+0x9a2>
 8007674:	2600      	movs	r6, #0
 8007676:	0037      	movs	r7, r6
 8007678:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800767a:	9c08      	ldr	r4, [sp, #32]
 800767c:	43db      	mvns	r3, r3
 800767e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007680:	2300      	movs	r3, #0
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	0031      	movs	r1, r6
 8007686:	9803      	ldr	r0, [sp, #12]
 8007688:	f000 fbc6 	bl	8007e18 <_Bfree>
 800768c:	2f00      	cmp	r7, #0
 800768e:	d0d7      	beq.n	8007640 <_dtoa_r+0x6a4>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <_dtoa_r+0x706>
 8007696:	42bb      	cmp	r3, r7
 8007698:	d003      	beq.n	80076a2 <_dtoa_r+0x706>
 800769a:	0019      	movs	r1, r3
 800769c:	9803      	ldr	r0, [sp, #12]
 800769e:	f000 fbbb 	bl	8007e18 <_Bfree>
 80076a2:	0039      	movs	r1, r7
 80076a4:	9803      	ldr	r0, [sp, #12]
 80076a6:	f000 fbb7 	bl	8007e18 <_Bfree>
 80076aa:	e7c9      	b.n	8007640 <_dtoa_r+0x6a4>
 80076ac:	0800a928 	.word	0x0800a928
 80076b0:	0800a900 	.word	0x0800a900
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	40240000 	.word	0x40240000
 80076bc:	401c0000 	.word	0x401c0000
 80076c0:	fcc00000 	.word	0xfcc00000
 80076c4:	40140000 	.word	0x40140000
 80076c8:	3fe00000 	.word	0x3fe00000
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80076d0:	0023      	movs	r3, r4
 80076d2:	001c      	movs	r4, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	781a      	ldrb	r2, [r3, #0]
 80076d8:	2a39      	cmp	r2, #57	@ 0x39
 80076da:	d108      	bne.n	80076ee <_dtoa_r+0x752>
 80076dc:	9a08      	ldr	r2, [sp, #32]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d1f7      	bne.n	80076d2 <_dtoa_r+0x736>
 80076e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076e4:	9908      	ldr	r1, [sp, #32]
 80076e6:	3201      	adds	r2, #1
 80076e8:	920c      	str	r2, [sp, #48]	@ 0x30
 80076ea:	2230      	movs	r2, #48	@ 0x30
 80076ec:	700a      	strb	r2, [r1, #0]
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	3201      	adds	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e7a4      	b.n	8007640 <_dtoa_r+0x6a4>
 80076f6:	2200      	movs	r2, #0
 80076f8:	4bc6      	ldr	r3, [pc, #792]	@ (8007a14 <_dtoa_r+0xa78>)
 80076fa:	f7fa f985 	bl	8001a08 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	0006      	movs	r6, r0
 8007704:	000f      	movs	r7, r1
 8007706:	f7f8 fea1 	bl	800044c <__aeabi_dcmpeq>
 800770a:	2800      	cmp	r0, #0
 800770c:	d100      	bne.n	8007710 <_dtoa_r+0x774>
 800770e:	e6a1      	b.n	8007454 <_dtoa_r+0x4b8>
 8007710:	e6d8      	b.n	80074c4 <_dtoa_r+0x528>
 8007712:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007714:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007716:	9c06      	ldr	r4, [sp, #24]
 8007718:	2f00      	cmp	r7, #0
 800771a:	d014      	beq.n	8007746 <_dtoa_r+0x7aa>
 800771c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800771e:	2a01      	cmp	r2, #1
 8007720:	dd00      	ble.n	8007724 <_dtoa_r+0x788>
 8007722:	e0c8      	b.n	80078b6 <_dtoa_r+0x91a>
 8007724:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007726:	2a00      	cmp	r2, #0
 8007728:	d100      	bne.n	800772c <_dtoa_r+0x790>
 800772a:	e0be      	b.n	80078aa <_dtoa_r+0x90e>
 800772c:	4aba      	ldr	r2, [pc, #744]	@ (8007a18 <_dtoa_r+0xa7c>)
 800772e:	189b      	adds	r3, r3, r2
 8007730:	9a06      	ldr	r2, [sp, #24]
 8007732:	2101      	movs	r1, #1
 8007734:	18d2      	adds	r2, r2, r3
 8007736:	9206      	str	r2, [sp, #24]
 8007738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	18d3      	adds	r3, r2, r3
 800773e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007740:	f000 fc6e 	bl	8008020 <__i2b>
 8007744:	0007      	movs	r7, r0
 8007746:	2c00      	cmp	r4, #0
 8007748:	d00e      	beq.n	8007768 <_dtoa_r+0x7cc>
 800774a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800774c:	2b00      	cmp	r3, #0
 800774e:	dd0b      	ble.n	8007768 <_dtoa_r+0x7cc>
 8007750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007752:	0023      	movs	r3, r4
 8007754:	4294      	cmp	r4, r2
 8007756:	dd00      	ble.n	800775a <_dtoa_r+0x7be>
 8007758:	0013      	movs	r3, r2
 800775a:	9a06      	ldr	r2, [sp, #24]
 800775c:	1ae4      	subs	r4, r4, r3
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	9206      	str	r2, [sp, #24]
 8007762:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	930d      	str	r3, [sp, #52]	@ 0x34
 8007768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01f      	beq.n	80077ae <_dtoa_r+0x812>
 800776e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	d100      	bne.n	8007776 <_dtoa_r+0x7da>
 8007774:	e0b5      	b.n	80078e2 <_dtoa_r+0x946>
 8007776:	2d00      	cmp	r5, #0
 8007778:	d010      	beq.n	800779c <_dtoa_r+0x800>
 800777a:	0039      	movs	r1, r7
 800777c:	002a      	movs	r2, r5
 800777e:	9803      	ldr	r0, [sp, #12]
 8007780:	f000 fd18 	bl	80081b4 <__pow5mult>
 8007784:	9a05      	ldr	r2, [sp, #20]
 8007786:	0001      	movs	r1, r0
 8007788:	0007      	movs	r7, r0
 800778a:	9803      	ldr	r0, [sp, #12]
 800778c:	f000 fc60 	bl	8008050 <__multiply>
 8007790:	0006      	movs	r6, r0
 8007792:	9905      	ldr	r1, [sp, #20]
 8007794:	9803      	ldr	r0, [sp, #12]
 8007796:	f000 fb3f 	bl	8007e18 <_Bfree>
 800779a:	9605      	str	r6, [sp, #20]
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	1b5a      	subs	r2, r3, r5
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	d004      	beq.n	80077ae <_dtoa_r+0x812>
 80077a4:	9905      	ldr	r1, [sp, #20]
 80077a6:	9803      	ldr	r0, [sp, #12]
 80077a8:	f000 fd04 	bl	80081b4 <__pow5mult>
 80077ac:	9005      	str	r0, [sp, #20]
 80077ae:	2101      	movs	r1, #1
 80077b0:	9803      	ldr	r0, [sp, #12]
 80077b2:	f000 fc35 	bl	8008020 <__i2b>
 80077b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077b8:	0006      	movs	r6, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d100      	bne.n	80077c0 <_dtoa_r+0x824>
 80077be:	e1bc      	b.n	8007b3a <_dtoa_r+0xb9e>
 80077c0:	001a      	movs	r2, r3
 80077c2:	0001      	movs	r1, r0
 80077c4:	9803      	ldr	r0, [sp, #12]
 80077c6:	f000 fcf5 	bl	80081b4 <__pow5mult>
 80077ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077cc:	0006      	movs	r6, r0
 80077ce:	2500      	movs	r5, #0
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	dc16      	bgt.n	8007802 <_dtoa_r+0x866>
 80077d4:	2500      	movs	r5, #0
 80077d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d8:	42ab      	cmp	r3, r5
 80077da:	d10e      	bne.n	80077fa <_dtoa_r+0x85e>
 80077dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077de:	031b      	lsls	r3, r3, #12
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	d10a      	bne.n	80077fa <_dtoa_r+0x85e>
 80077e4:	4b8d      	ldr	r3, [pc, #564]	@ (8007a1c <_dtoa_r+0xa80>)
 80077e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077e8:	4213      	tst	r3, r2
 80077ea:	d006      	beq.n	80077fa <_dtoa_r+0x85e>
 80077ec:	9b06      	ldr	r3, [sp, #24]
 80077ee:	3501      	adds	r5, #1
 80077f0:	3301      	adds	r3, #1
 80077f2:	9306      	str	r3, [sp, #24]
 80077f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f6:	3301      	adds	r3, #1
 80077f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80077fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077fc:	2001      	movs	r0, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d008      	beq.n	8007814 <_dtoa_r+0x878>
 8007802:	6933      	ldr	r3, [r6, #16]
 8007804:	3303      	adds	r3, #3
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	18f3      	adds	r3, r6, r3
 800780a:	6858      	ldr	r0, [r3, #4]
 800780c:	f000 fbb8 	bl	8007f80 <__hi0bits>
 8007810:	2320      	movs	r3, #32
 8007812:	1a18      	subs	r0, r3, r0
 8007814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007816:	1818      	adds	r0, r3, r0
 8007818:	0002      	movs	r2, r0
 800781a:	231f      	movs	r3, #31
 800781c:	401a      	ands	r2, r3
 800781e:	4218      	tst	r0, r3
 8007820:	d065      	beq.n	80078ee <_dtoa_r+0x952>
 8007822:	3301      	adds	r3, #1
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	2b04      	cmp	r3, #4
 8007828:	dd5d      	ble.n	80078e6 <_dtoa_r+0x94a>
 800782a:	231c      	movs	r3, #28
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	9a06      	ldr	r2, [sp, #24]
 8007830:	18e4      	adds	r4, r4, r3
 8007832:	18d2      	adds	r2, r2, r3
 8007834:	9206      	str	r2, [sp, #24]
 8007836:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007838:	18d3      	adds	r3, r2, r3
 800783a:	930d      	str	r3, [sp, #52]	@ 0x34
 800783c:	9b06      	ldr	r3, [sp, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dd05      	ble.n	800784e <_dtoa_r+0x8b2>
 8007842:	001a      	movs	r2, r3
 8007844:	9905      	ldr	r1, [sp, #20]
 8007846:	9803      	ldr	r0, [sp, #12]
 8007848:	f000 fd10 	bl	800826c <__lshift>
 800784c:	9005      	str	r0, [sp, #20]
 800784e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007850:	2b00      	cmp	r3, #0
 8007852:	dd05      	ble.n	8007860 <_dtoa_r+0x8c4>
 8007854:	0031      	movs	r1, r6
 8007856:	001a      	movs	r2, r3
 8007858:	9803      	ldr	r0, [sp, #12]
 800785a:	f000 fd07 	bl	800826c <__lshift>
 800785e:	0006      	movs	r6, r0
 8007860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007862:	2b00      	cmp	r3, #0
 8007864:	d045      	beq.n	80078f2 <_dtoa_r+0x956>
 8007866:	0031      	movs	r1, r6
 8007868:	9805      	ldr	r0, [sp, #20]
 800786a:	f000 fd6b 	bl	8008344 <__mcmp>
 800786e:	2800      	cmp	r0, #0
 8007870:	da3f      	bge.n	80078f2 <_dtoa_r+0x956>
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	220a      	movs	r2, #10
 8007876:	3b01      	subs	r3, #1
 8007878:	930c      	str	r3, [sp, #48]	@ 0x30
 800787a:	9905      	ldr	r1, [sp, #20]
 800787c:	2300      	movs	r3, #0
 800787e:	9803      	ldr	r0, [sp, #12]
 8007880:	f000 faee 	bl	8007e60 <__multadd>
 8007884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007886:	9005      	str	r0, [sp, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d100      	bne.n	800788e <_dtoa_r+0x8f2>
 800788c:	e15c      	b.n	8007b48 <_dtoa_r+0xbac>
 800788e:	2300      	movs	r3, #0
 8007890:	0039      	movs	r1, r7
 8007892:	220a      	movs	r2, #10
 8007894:	9803      	ldr	r0, [sp, #12]
 8007896:	f000 fae3 	bl	8007e60 <__multadd>
 800789a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800789c:	0007      	movs	r7, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dc55      	bgt.n	800794e <_dtoa_r+0x9b2>
 80078a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	dc2d      	bgt.n	8007904 <_dtoa_r+0x968>
 80078a8:	e051      	b.n	800794e <_dtoa_r+0x9b2>
 80078aa:	2336      	movs	r3, #54	@ 0x36
 80078ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80078b0:	9c06      	ldr	r4, [sp, #24]
 80078b2:	1a9b      	subs	r3, r3, r2
 80078b4:	e73c      	b.n	8007730 <_dtoa_r+0x794>
 80078b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b8:	1e5d      	subs	r5, r3, #1
 80078ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078bc:	42ab      	cmp	r3, r5
 80078be:	db08      	blt.n	80078d2 <_dtoa_r+0x936>
 80078c0:	1b5d      	subs	r5, r3, r5
 80078c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c4:	9c06      	ldr	r4, [sp, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db00      	blt.n	80078cc <_dtoa_r+0x930>
 80078ca:	e731      	b.n	8007730 <_dtoa_r+0x794>
 80078cc:	1ae4      	subs	r4, r4, r3
 80078ce:	2300      	movs	r3, #0
 80078d0:	e72e      	b.n	8007730 <_dtoa_r+0x794>
 80078d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078d6:	1aeb      	subs	r3, r5, r3
 80078d8:	18d3      	adds	r3, r2, r3
 80078da:	950f      	str	r5, [sp, #60]	@ 0x3c
 80078dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80078de:	2500      	movs	r5, #0
 80078e0:	e7ef      	b.n	80078c2 <_dtoa_r+0x926>
 80078e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078e4:	e75e      	b.n	80077a4 <_dtoa_r+0x808>
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d0a8      	beq.n	800783c <_dtoa_r+0x8a0>
 80078ea:	331c      	adds	r3, #28
 80078ec:	e79f      	b.n	800782e <_dtoa_r+0x892>
 80078ee:	0013      	movs	r3, r2
 80078f0:	e7fb      	b.n	80078ea <_dtoa_r+0x94e>
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80078f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dc23      	bgt.n	8007946 <_dtoa_r+0x9aa>
 80078fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007900:	2b02      	cmp	r3, #2
 8007902:	dd20      	ble.n	8007946 <_dtoa_r+0x9aa>
 8007904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007906:	2b00      	cmp	r3, #0
 8007908:	d000      	beq.n	800790c <_dtoa_r+0x970>
 800790a:	e6b5      	b.n	8007678 <_dtoa_r+0x6dc>
 800790c:	0031      	movs	r1, r6
 800790e:	2205      	movs	r2, #5
 8007910:	9803      	ldr	r0, [sp, #12]
 8007912:	f000 faa5 	bl	8007e60 <__multadd>
 8007916:	0006      	movs	r6, r0
 8007918:	0001      	movs	r1, r0
 800791a:	9805      	ldr	r0, [sp, #20]
 800791c:	f000 fd12 	bl	8008344 <__mcmp>
 8007920:	2800      	cmp	r0, #0
 8007922:	dc00      	bgt.n	8007926 <_dtoa_r+0x98a>
 8007924:	e6a8      	b.n	8007678 <_dtoa_r+0x6dc>
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	9a08      	ldr	r2, [sp, #32]
 800792a:	1c5c      	adds	r4, r3, #1
 800792c:	2331      	movs	r3, #49	@ 0x31
 800792e:	7013      	strb	r3, [r2, #0]
 8007930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007932:	3301      	adds	r3, #1
 8007934:	930c      	str	r3, [sp, #48]	@ 0x30
 8007936:	e6a3      	b.n	8007680 <_dtoa_r+0x6e4>
 8007938:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800793a:	0037      	movs	r7, r6
 800793c:	e7f3      	b.n	8007926 <_dtoa_r+0x98a>
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007942:	930c      	str	r3, [sp, #48]	@ 0x30
 8007944:	e7f9      	b.n	800793a <_dtoa_r+0x99e>
 8007946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d100      	bne.n	800794e <_dtoa_r+0x9b2>
 800794c:	e100      	b.n	8007b50 <_dtoa_r+0xbb4>
 800794e:	2c00      	cmp	r4, #0
 8007950:	dd05      	ble.n	800795e <_dtoa_r+0x9c2>
 8007952:	0039      	movs	r1, r7
 8007954:	0022      	movs	r2, r4
 8007956:	9803      	ldr	r0, [sp, #12]
 8007958:	f000 fc88 	bl	800826c <__lshift>
 800795c:	0007      	movs	r7, r0
 800795e:	0038      	movs	r0, r7
 8007960:	2d00      	cmp	r5, #0
 8007962:	d018      	beq.n	8007996 <_dtoa_r+0x9fa>
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	9803      	ldr	r0, [sp, #12]
 8007968:	f000 fa12 	bl	8007d90 <_Balloc>
 800796c:	1e04      	subs	r4, r0, #0
 800796e:	d105      	bne.n	800797c <_dtoa_r+0x9e0>
 8007970:	0022      	movs	r2, r4
 8007972:	4b2b      	ldr	r3, [pc, #172]	@ (8007a20 <_dtoa_r+0xa84>)
 8007974:	482b      	ldr	r0, [pc, #172]	@ (8007a24 <_dtoa_r+0xa88>)
 8007976:	492c      	ldr	r1, [pc, #176]	@ (8007a28 <_dtoa_r+0xa8c>)
 8007978:	f7ff fb25 	bl	8006fc6 <_dtoa_r+0x2a>
 800797c:	0039      	movs	r1, r7
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	310c      	adds	r1, #12
 8007982:	3202      	adds	r2, #2
 8007984:	0092      	lsls	r2, r2, #2
 8007986:	300c      	adds	r0, #12
 8007988:	f001 ffb2 	bl	80098f0 <memcpy>
 800798c:	2201      	movs	r2, #1
 800798e:	0021      	movs	r1, r4
 8007990:	9803      	ldr	r0, [sp, #12]
 8007992:	f000 fc6b 	bl	800826c <__lshift>
 8007996:	9b08      	ldr	r3, [sp, #32]
 8007998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800799a:	9306      	str	r3, [sp, #24]
 800799c:	3b01      	subs	r3, #1
 800799e:	189b      	adds	r3, r3, r2
 80079a0:	2201      	movs	r2, #1
 80079a2:	9704      	str	r7, [sp, #16]
 80079a4:	0007      	movs	r7, r0
 80079a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079aa:	4013      	ands	r3, r2
 80079ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80079ae:	0031      	movs	r1, r6
 80079b0:	9805      	ldr	r0, [sp, #20]
 80079b2:	f7ff fa65 	bl	8006e80 <quorem>
 80079b6:	9904      	ldr	r1, [sp, #16]
 80079b8:	0005      	movs	r5, r0
 80079ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80079bc:	9805      	ldr	r0, [sp, #20]
 80079be:	f000 fcc1 	bl	8008344 <__mcmp>
 80079c2:	003a      	movs	r2, r7
 80079c4:	900d      	str	r0, [sp, #52]	@ 0x34
 80079c6:	0031      	movs	r1, r6
 80079c8:	9803      	ldr	r0, [sp, #12]
 80079ca:	f000 fcd7 	bl	800837c <__mdiff>
 80079ce:	2201      	movs	r2, #1
 80079d0:	68c3      	ldr	r3, [r0, #12]
 80079d2:	0004      	movs	r4, r0
 80079d4:	3530      	adds	r5, #48	@ 0x30
 80079d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <_dtoa_r+0xa4a>
 80079dc:	0001      	movs	r1, r0
 80079de:	9805      	ldr	r0, [sp, #20]
 80079e0:	f000 fcb0 	bl	8008344 <__mcmp>
 80079e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80079e6:	0021      	movs	r1, r4
 80079e8:	9803      	ldr	r0, [sp, #12]
 80079ea:	f000 fa15 	bl	8007e18 <_Bfree>
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f2:	1c5c      	adds	r4, r3, #1
 80079f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80079f6:	4313      	orrs	r3, r2
 80079f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d116      	bne.n	8007a2c <_dtoa_r+0xa90>
 80079fe:	2d39      	cmp	r5, #57	@ 0x39
 8007a00:	d02f      	beq.n	8007a62 <_dtoa_r+0xac6>
 8007a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dd01      	ble.n	8007a0c <_dtoa_r+0xa70>
 8007a08:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007a0a:	3531      	adds	r5, #49	@ 0x31
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	701d      	strb	r5, [r3, #0]
 8007a10:	e638      	b.n	8007684 <_dtoa_r+0x6e8>
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	40240000 	.word	0x40240000
 8007a18:	00000433 	.word	0x00000433
 8007a1c:	7ff00000 	.word	0x7ff00000
 8007a20:	0800a885 	.word	0x0800a885
 8007a24:	0800a82d 	.word	0x0800a82d
 8007a28:	000002ef 	.word	0x000002ef
 8007a2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	db04      	blt.n	8007a3c <_dtoa_r+0xaa0>
 8007a32:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a34:	4313      	orrs	r3, r2
 8007a36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d11e      	bne.n	8007a7a <_dtoa_r+0xade>
 8007a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dde4      	ble.n	8007a0c <_dtoa_r+0xa70>
 8007a42:	9905      	ldr	r1, [sp, #20]
 8007a44:	2201      	movs	r2, #1
 8007a46:	9803      	ldr	r0, [sp, #12]
 8007a48:	f000 fc10 	bl	800826c <__lshift>
 8007a4c:	0031      	movs	r1, r6
 8007a4e:	9005      	str	r0, [sp, #20]
 8007a50:	f000 fc78 	bl	8008344 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dc02      	bgt.n	8007a5e <_dtoa_r+0xac2>
 8007a58:	d1d8      	bne.n	8007a0c <_dtoa_r+0xa70>
 8007a5a:	07eb      	lsls	r3, r5, #31
 8007a5c:	d5d6      	bpl.n	8007a0c <_dtoa_r+0xa70>
 8007a5e:	2d39      	cmp	r5, #57	@ 0x39
 8007a60:	d1d2      	bne.n	8007a08 <_dtoa_r+0xa6c>
 8007a62:	2339      	movs	r3, #57	@ 0x39
 8007a64:	9a06      	ldr	r2, [sp, #24]
 8007a66:	7013      	strb	r3, [r2, #0]
 8007a68:	0023      	movs	r3, r4
 8007a6a:	001c      	movs	r4, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	2a39      	cmp	r2, #57	@ 0x39
 8007a72:	d04f      	beq.n	8007b14 <_dtoa_r+0xb78>
 8007a74:	3201      	adds	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e604      	b.n	8007684 <_dtoa_r+0x6e8>
 8007a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd03      	ble.n	8007a88 <_dtoa_r+0xaec>
 8007a80:	2d39      	cmp	r5, #57	@ 0x39
 8007a82:	d0ee      	beq.n	8007a62 <_dtoa_r+0xac6>
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7c1      	b.n	8007a0c <_dtoa_r+0xa70>
 8007a88:	9b06      	ldr	r3, [sp, #24]
 8007a8a:	9a06      	ldr	r2, [sp, #24]
 8007a8c:	701d      	strb	r5, [r3, #0]
 8007a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d02a      	beq.n	8007aea <_dtoa_r+0xb4e>
 8007a94:	2300      	movs	r3, #0
 8007a96:	220a      	movs	r2, #10
 8007a98:	9905      	ldr	r1, [sp, #20]
 8007a9a:	9803      	ldr	r0, [sp, #12]
 8007a9c:	f000 f9e0 	bl	8007e60 <__multadd>
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	9005      	str	r0, [sp, #20]
 8007aa4:	42bb      	cmp	r3, r7
 8007aa6:	d109      	bne.n	8007abc <_dtoa_r+0xb20>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	220a      	movs	r2, #10
 8007aac:	9904      	ldr	r1, [sp, #16]
 8007aae:	9803      	ldr	r0, [sp, #12]
 8007ab0:	f000 f9d6 	bl	8007e60 <__multadd>
 8007ab4:	9004      	str	r0, [sp, #16]
 8007ab6:	0007      	movs	r7, r0
 8007ab8:	9406      	str	r4, [sp, #24]
 8007aba:	e778      	b.n	80079ae <_dtoa_r+0xa12>
 8007abc:	9904      	ldr	r1, [sp, #16]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	9803      	ldr	r0, [sp, #12]
 8007ac4:	f000 f9cc 	bl	8007e60 <__multadd>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9004      	str	r0, [sp, #16]
 8007acc:	220a      	movs	r2, #10
 8007ace:	0039      	movs	r1, r7
 8007ad0:	9803      	ldr	r0, [sp, #12]
 8007ad2:	f000 f9c5 	bl	8007e60 <__multadd>
 8007ad6:	e7ee      	b.n	8007ab6 <_dtoa_r+0xb1a>
 8007ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ada:	2401      	movs	r4, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd00      	ble.n	8007ae2 <_dtoa_r+0xb46>
 8007ae0:	001c      	movs	r4, r3
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	191c      	adds	r4, r3, r4
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	9905      	ldr	r1, [sp, #20]
 8007aec:	2201      	movs	r2, #1
 8007aee:	9803      	ldr	r0, [sp, #12]
 8007af0:	f000 fbbc 	bl	800826c <__lshift>
 8007af4:	0031      	movs	r1, r6
 8007af6:	9005      	str	r0, [sp, #20]
 8007af8:	f000 fc24 	bl	8008344 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	dcb3      	bgt.n	8007a68 <_dtoa_r+0xacc>
 8007b00:	d101      	bne.n	8007b06 <_dtoa_r+0xb6a>
 8007b02:	07ed      	lsls	r5, r5, #31
 8007b04:	d4b0      	bmi.n	8007a68 <_dtoa_r+0xacc>
 8007b06:	0023      	movs	r3, r4
 8007b08:	001c      	movs	r4, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	2a30      	cmp	r2, #48	@ 0x30
 8007b10:	d0fa      	beq.n	8007b08 <_dtoa_r+0xb6c>
 8007b12:	e5b7      	b.n	8007684 <_dtoa_r+0x6e8>
 8007b14:	9a08      	ldr	r2, [sp, #32]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d1a7      	bne.n	8007a6a <_dtoa_r+0xace>
 8007b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b20:	2331      	movs	r3, #49	@ 0x31
 8007b22:	7013      	strb	r3, [r2, #0]
 8007b24:	e5ae      	b.n	8007684 <_dtoa_r+0x6e8>
 8007b26:	4b15      	ldr	r3, [pc, #84]	@ (8007b7c <_dtoa_r+0xbe0>)
 8007b28:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007b2a:	9308      	str	r3, [sp, #32]
 8007b2c:	4b14      	ldr	r3, [pc, #80]	@ (8007b80 <_dtoa_r+0xbe4>)
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d001      	beq.n	8007b36 <_dtoa_r+0xb9a>
 8007b32:	f7ff fa7b 	bl	800702c <_dtoa_r+0x90>
 8007b36:	f7ff fa7b 	bl	8007030 <_dtoa_r+0x94>
 8007b3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	dc00      	bgt.n	8007b42 <_dtoa_r+0xba6>
 8007b40:	e648      	b.n	80077d4 <_dtoa_r+0x838>
 8007b42:	2001      	movs	r0, #1
 8007b44:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007b46:	e665      	b.n	8007814 <_dtoa_r+0x878>
 8007b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dc00      	bgt.n	8007b50 <_dtoa_r+0xbb4>
 8007b4e:	e6d6      	b.n	80078fe <_dtoa_r+0x962>
 8007b50:	2400      	movs	r4, #0
 8007b52:	0031      	movs	r1, r6
 8007b54:	9805      	ldr	r0, [sp, #20]
 8007b56:	f7ff f993 	bl	8006e80 <quorem>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	3030      	adds	r0, #48	@ 0x30
 8007b5e:	5518      	strb	r0, [r3, r4]
 8007b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b62:	3401      	adds	r4, #1
 8007b64:	0005      	movs	r5, r0
 8007b66:	429c      	cmp	r4, r3
 8007b68:	dab6      	bge.n	8007ad8 <_dtoa_r+0xb3c>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	9905      	ldr	r1, [sp, #20]
 8007b70:	9803      	ldr	r0, [sp, #12]
 8007b72:	f000 f975 	bl	8007e60 <__multadd>
 8007b76:	9005      	str	r0, [sp, #20]
 8007b78:	e7eb      	b.n	8007b52 <_dtoa_r+0xbb6>
 8007b7a:	46c0      	nop			@ (mov r8, r8)
 8007b7c:	0800a809 	.word	0x0800a809
 8007b80:	0800a811 	.word	0x0800a811

08007b84 <_free_r>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	0005      	movs	r5, r0
 8007b88:	1e0c      	subs	r4, r1, #0
 8007b8a:	d010      	beq.n	8007bae <_free_r+0x2a>
 8007b8c:	3c04      	subs	r4, #4
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da00      	bge.n	8007b96 <_free_r+0x12>
 8007b94:	18e4      	adds	r4, r4, r3
 8007b96:	0028      	movs	r0, r5
 8007b98:	f000 f8ea 	bl	8007d70 <__malloc_lock>
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c14 <_free_r+0x90>)
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d105      	bne.n	8007bb0 <_free_r+0x2c>
 8007ba4:	6063      	str	r3, [r4, #4]
 8007ba6:	6014      	str	r4, [r2, #0]
 8007ba8:	0028      	movs	r0, r5
 8007baa:	f000 f8e9 	bl	8007d80 <__malloc_unlock>
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d908      	bls.n	8007bc6 <_free_r+0x42>
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	1821      	adds	r1, r4, r0
 8007bb8:	428b      	cmp	r3, r1
 8007bba:	d1f3      	bne.n	8007ba4 <_free_r+0x20>
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	1809      	adds	r1, r1, r0
 8007bc2:	6021      	str	r1, [r4, #0]
 8007bc4:	e7ee      	b.n	8007ba4 <_free_r+0x20>
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <_free_r+0x4e>
 8007bce:	42a3      	cmp	r3, r4
 8007bd0:	d9f9      	bls.n	8007bc6 <_free_r+0x42>
 8007bd2:	6811      	ldr	r1, [r2, #0]
 8007bd4:	1850      	adds	r0, r2, r1
 8007bd6:	42a0      	cmp	r0, r4
 8007bd8:	d10b      	bne.n	8007bf2 <_free_r+0x6e>
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	1809      	adds	r1, r1, r0
 8007bde:	1850      	adds	r0, r2, r1
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	4283      	cmp	r3, r0
 8007be4:	d1e0      	bne.n	8007ba8 <_free_r+0x24>
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	1841      	adds	r1, r0, r1
 8007bec:	6011      	str	r1, [r2, #0]
 8007bee:	6053      	str	r3, [r2, #4]
 8007bf0:	e7da      	b.n	8007ba8 <_free_r+0x24>
 8007bf2:	42a0      	cmp	r0, r4
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x78>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d5      	b.n	8007ba8 <_free_r+0x24>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	d103      	bne.n	8007c0c <_free_r+0x88>
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	1809      	adds	r1, r1, r0
 8007c0a:	6021      	str	r1, [r4, #0]
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	6054      	str	r4, [r2, #4]
 8007c10:	e7ca      	b.n	8007ba8 <_free_r+0x24>
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	20000480 	.word	0x20000480

08007c18 <malloc>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4b03      	ldr	r3, [pc, #12]	@ (8007c28 <malloc+0x10>)
 8007c1c:	0001      	movs	r1, r0
 8007c1e:	6818      	ldr	r0, [r3, #0]
 8007c20:	f000 f826 	bl	8007c70 <_malloc_r>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	46c0      	nop			@ (mov r8, r8)
 8007c28:	20000018 	.word	0x20000018

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c6c <sbrk_aligned+0x40>)
 8007c30:	000d      	movs	r5, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	0004      	movs	r4, r0
 8007c36:	2900      	cmp	r1, #0
 8007c38:	d102      	bne.n	8007c40 <sbrk_aligned+0x14>
 8007c3a:	f001 fe47 	bl	80098cc <_sbrk_r>
 8007c3e:	6030      	str	r0, [r6, #0]
 8007c40:	0029      	movs	r1, r5
 8007c42:	0020      	movs	r0, r4
 8007c44:	f001 fe42 	bl	80098cc <_sbrk_r>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d103      	bne.n	8007c54 <sbrk_aligned+0x28>
 8007c4c:	2501      	movs	r5, #1
 8007c4e:	426d      	negs	r5, r5
 8007c50:	0028      	movs	r0, r5
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	2303      	movs	r3, #3
 8007c56:	1cc5      	adds	r5, r0, #3
 8007c58:	439d      	bics	r5, r3
 8007c5a:	42a8      	cmp	r0, r5
 8007c5c:	d0f8      	beq.n	8007c50 <sbrk_aligned+0x24>
 8007c5e:	1a29      	subs	r1, r5, r0
 8007c60:	0020      	movs	r0, r4
 8007c62:	f001 fe33 	bl	80098cc <_sbrk_r>
 8007c66:	3001      	adds	r0, #1
 8007c68:	d1f2      	bne.n	8007c50 <sbrk_aligned+0x24>
 8007c6a:	e7ef      	b.n	8007c4c <sbrk_aligned+0x20>
 8007c6c:	2000047c 	.word	0x2000047c

08007c70 <_malloc_r>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	2203      	movs	r2, #3
 8007c74:	1ccb      	adds	r3, r1, #3
 8007c76:	4393      	bics	r3, r2
 8007c78:	3308      	adds	r3, #8
 8007c7a:	0005      	movs	r5, r0
 8007c7c:	001f      	movs	r7, r3
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d234      	bcs.n	8007cec <_malloc_r+0x7c>
 8007c82:	270c      	movs	r7, #12
 8007c84:	42b9      	cmp	r1, r7
 8007c86:	d833      	bhi.n	8007cf0 <_malloc_r+0x80>
 8007c88:	0028      	movs	r0, r5
 8007c8a:	f000 f871 	bl	8007d70 <__malloc_lock>
 8007c8e:	4e37      	ldr	r6, [pc, #220]	@ (8007d6c <_malloc_r+0xfc>)
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	001c      	movs	r4, r3
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d12f      	bne.n	8007cf8 <_malloc_r+0x88>
 8007c98:	0039      	movs	r1, r7
 8007c9a:	0028      	movs	r0, r5
 8007c9c:	f7ff ffc6 	bl	8007c2c <sbrk_aligned>
 8007ca0:	0004      	movs	r4, r0
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d15f      	bne.n	8007d66 <_malloc_r+0xf6>
 8007ca6:	6834      	ldr	r4, [r6, #0]
 8007ca8:	9400      	str	r4, [sp, #0]
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d14a      	bne.n	8007d46 <_malloc_r+0xd6>
 8007cb0:	2c00      	cmp	r4, #0
 8007cb2:	d052      	beq.n	8007d5a <_malloc_r+0xea>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	0028      	movs	r0, r5
 8007cb8:	18e3      	adds	r3, r4, r3
 8007cba:	9900      	ldr	r1, [sp, #0]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f001 fe05 	bl	80098cc <_sbrk_r>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	4283      	cmp	r3, r0
 8007cc6:	d148      	bne.n	8007d5a <_malloc_r+0xea>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	0028      	movs	r0, r5
 8007ccc:	1aff      	subs	r7, r7, r3
 8007cce:	0039      	movs	r1, r7
 8007cd0:	f7ff ffac 	bl	8007c2c <sbrk_aligned>
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d040      	beq.n	8007d5a <_malloc_r+0xea>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	19db      	adds	r3, r3, r7
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	6833      	ldr	r3, [r6, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d133      	bne.n	8007d4e <_malloc_r+0xde>
 8007ce6:	9b00      	ldr	r3, [sp, #0]
 8007ce8:	6033      	str	r3, [r6, #0]
 8007cea:	e019      	b.n	8007d20 <_malloc_r+0xb0>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dac9      	bge.n	8007c84 <_malloc_r+0x14>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	602b      	str	r3, [r5, #0]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cf8:	6821      	ldr	r1, [r4, #0]
 8007cfa:	1bc9      	subs	r1, r1, r7
 8007cfc:	d420      	bmi.n	8007d40 <_malloc_r+0xd0>
 8007cfe:	290b      	cmp	r1, #11
 8007d00:	d90a      	bls.n	8007d18 <_malloc_r+0xa8>
 8007d02:	19e2      	adds	r2, r4, r7
 8007d04:	6027      	str	r7, [r4, #0]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	d104      	bne.n	8007d14 <_malloc_r+0xa4>
 8007d0a:	6032      	str	r2, [r6, #0]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	6011      	str	r1, [r2, #0]
 8007d10:	6053      	str	r3, [r2, #4]
 8007d12:	e005      	b.n	8007d20 <_malloc_r+0xb0>
 8007d14:	605a      	str	r2, [r3, #4]
 8007d16:	e7f9      	b.n	8007d0c <_malloc_r+0x9c>
 8007d18:	6862      	ldr	r2, [r4, #4]
 8007d1a:	42a3      	cmp	r3, r4
 8007d1c:	d10e      	bne.n	8007d3c <_malloc_r+0xcc>
 8007d1e:	6032      	str	r2, [r6, #0]
 8007d20:	0028      	movs	r0, r5
 8007d22:	f000 f82d 	bl	8007d80 <__malloc_unlock>
 8007d26:	0020      	movs	r0, r4
 8007d28:	2207      	movs	r2, #7
 8007d2a:	300b      	adds	r0, #11
 8007d2c:	1d23      	adds	r3, r4, #4
 8007d2e:	4390      	bics	r0, r2
 8007d30:	1ac2      	subs	r2, r0, r3
 8007d32:	4298      	cmp	r0, r3
 8007d34:	d0df      	beq.n	8007cf6 <_malloc_r+0x86>
 8007d36:	1a1b      	subs	r3, r3, r0
 8007d38:	50a3      	str	r3, [r4, r2]
 8007d3a:	e7dc      	b.n	8007cf6 <_malloc_r+0x86>
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	e7ef      	b.n	8007d20 <_malloc_r+0xb0>
 8007d40:	0023      	movs	r3, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7a6      	b.n	8007c94 <_malloc_r+0x24>
 8007d46:	9c00      	ldr	r4, [sp, #0]
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	e7ad      	b.n	8007caa <_malloc_r+0x3a>
 8007d4e:	001a      	movs	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	d1fb      	bne.n	8007d4e <_malloc_r+0xde>
 8007d56:	2300      	movs	r3, #0
 8007d58:	e7da      	b.n	8007d10 <_malloc_r+0xa0>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	0028      	movs	r0, r5
 8007d5e:	602b      	str	r3, [r5, #0]
 8007d60:	f000 f80e 	bl	8007d80 <__malloc_unlock>
 8007d64:	e7c6      	b.n	8007cf4 <_malloc_r+0x84>
 8007d66:	6007      	str	r7, [r0, #0]
 8007d68:	e7da      	b.n	8007d20 <_malloc_r+0xb0>
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	20000480 	.word	0x20000480

08007d70 <__malloc_lock>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4802      	ldr	r0, [pc, #8]	@ (8007d7c <__malloc_lock+0xc>)
 8007d74:	f7ff f873 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	20000478 	.word	0x20000478

08007d80 <__malloc_unlock>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4802      	ldr	r0, [pc, #8]	@ (8007d8c <__malloc_unlock+0xc>)
 8007d84:	f7ff f86c 	bl	8006e60 <__retarget_lock_release_recursive>
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	20000478 	.word	0x20000478

08007d90 <_Balloc>:
 8007d90:	b570      	push	{r4, r5, r6, lr}
 8007d92:	69c5      	ldr	r5, [r0, #28]
 8007d94:	0006      	movs	r6, r0
 8007d96:	000c      	movs	r4, r1
 8007d98:	2d00      	cmp	r5, #0
 8007d9a:	d10e      	bne.n	8007dba <_Balloc+0x2a>
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	f7ff ff3b 	bl	8007c18 <malloc>
 8007da2:	1e02      	subs	r2, r0, #0
 8007da4:	61f0      	str	r0, [r6, #28]
 8007da6:	d104      	bne.n	8007db2 <_Balloc+0x22>
 8007da8:	216b      	movs	r1, #107	@ 0x6b
 8007daa:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <_Balloc+0x80>)
 8007dac:	4819      	ldr	r0, [pc, #100]	@ (8007e14 <_Balloc+0x84>)
 8007dae:	f001 fdaf 	bl	8009910 <__assert_func>
 8007db2:	6045      	str	r5, [r0, #4]
 8007db4:	6085      	str	r5, [r0, #8]
 8007db6:	6005      	str	r5, [r0, #0]
 8007db8:	60c5      	str	r5, [r0, #12]
 8007dba:	69f5      	ldr	r5, [r6, #28]
 8007dbc:	68eb      	ldr	r3, [r5, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d013      	beq.n	8007dea <_Balloc+0x5a>
 8007dc2:	69f3      	ldr	r3, [r6, #28]
 8007dc4:	00a2      	lsls	r2, r4, #2
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	189b      	adds	r3, r3, r2
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d118      	bne.n	8007e02 <_Balloc+0x72>
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	000d      	movs	r5, r1
 8007dd4:	40a5      	lsls	r5, r4
 8007dd6:	1d6a      	adds	r2, r5, #5
 8007dd8:	0030      	movs	r0, r6
 8007dda:	0092      	lsls	r2, r2, #2
 8007ddc:	f001 fdb6 	bl	800994c <_calloc_r>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d00c      	beq.n	8007dfe <_Balloc+0x6e>
 8007de4:	6044      	str	r4, [r0, #4]
 8007de6:	6085      	str	r5, [r0, #8]
 8007de8:	e00d      	b.n	8007e06 <_Balloc+0x76>
 8007dea:	2221      	movs	r2, #33	@ 0x21
 8007dec:	2104      	movs	r1, #4
 8007dee:	0030      	movs	r0, r6
 8007df0:	f001 fdac 	bl	800994c <_calloc_r>
 8007df4:	69f3      	ldr	r3, [r6, #28]
 8007df6:	60e8      	str	r0, [r5, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e1      	bne.n	8007dc2 <_Balloc+0x32>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	6802      	ldr	r2, [r0, #0]
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6103      	str	r3, [r0, #16]
 8007e0a:	60c3      	str	r3, [r0, #12]
 8007e0c:	e7f8      	b.n	8007e00 <_Balloc+0x70>
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	0800a816 	.word	0x0800a816
 8007e14:	0800a896 	.word	0x0800a896

08007e18 <_Bfree>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	69c6      	ldr	r6, [r0, #28]
 8007e1c:	0005      	movs	r5, r0
 8007e1e:	000c      	movs	r4, r1
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d10e      	bne.n	8007e42 <_Bfree+0x2a>
 8007e24:	2010      	movs	r0, #16
 8007e26:	f7ff fef7 	bl	8007c18 <malloc>
 8007e2a:	1e02      	subs	r2, r0, #0
 8007e2c:	61e8      	str	r0, [r5, #28]
 8007e2e:	d104      	bne.n	8007e3a <_Bfree+0x22>
 8007e30:	218f      	movs	r1, #143	@ 0x8f
 8007e32:	4b09      	ldr	r3, [pc, #36]	@ (8007e58 <_Bfree+0x40>)
 8007e34:	4809      	ldr	r0, [pc, #36]	@ (8007e5c <_Bfree+0x44>)
 8007e36:	f001 fd6b 	bl	8009910 <__assert_func>
 8007e3a:	6046      	str	r6, [r0, #4]
 8007e3c:	6086      	str	r6, [r0, #8]
 8007e3e:	6006      	str	r6, [r0, #0]
 8007e40:	60c6      	str	r6, [r0, #12]
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d007      	beq.n	8007e56 <_Bfree+0x3e>
 8007e46:	69eb      	ldr	r3, [r5, #28]
 8007e48:	6862      	ldr	r2, [r4, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	189b      	adds	r3, r3, r2
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	6022      	str	r2, [r4, #0]
 8007e54:	601c      	str	r4, [r3, #0]
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	0800a816 	.word	0x0800a816
 8007e5c:	0800a896 	.word	0x0800a896

08007e60 <__multadd>:
 8007e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e62:	000f      	movs	r7, r1
 8007e64:	9001      	str	r0, [sp, #4]
 8007e66:	000c      	movs	r4, r1
 8007e68:	001e      	movs	r6, r3
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	690d      	ldr	r5, [r1, #16]
 8007e6e:	3714      	adds	r7, #20
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	3001      	adds	r0, #1
 8007e74:	b299      	uxth	r1, r3
 8007e76:	4351      	muls	r1, r2
 8007e78:	0c1b      	lsrs	r3, r3, #16
 8007e7a:	4353      	muls	r3, r2
 8007e7c:	1989      	adds	r1, r1, r6
 8007e7e:	0c0e      	lsrs	r6, r1, #16
 8007e80:	199b      	adds	r3, r3, r6
 8007e82:	0c1e      	lsrs	r6, r3, #16
 8007e84:	b289      	uxth	r1, r1
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	185b      	adds	r3, r3, r1
 8007e8a:	c708      	stmia	r7!, {r3}
 8007e8c:	4285      	cmp	r5, r0
 8007e8e:	dcef      	bgt.n	8007e70 <__multadd+0x10>
 8007e90:	2e00      	cmp	r6, #0
 8007e92:	d022      	beq.n	8007eda <__multadd+0x7a>
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	42ab      	cmp	r3, r5
 8007e98:	dc19      	bgt.n	8007ece <__multadd+0x6e>
 8007e9a:	6861      	ldr	r1, [r4, #4]
 8007e9c:	9801      	ldr	r0, [sp, #4]
 8007e9e:	3101      	adds	r1, #1
 8007ea0:	f7ff ff76 	bl	8007d90 <_Balloc>
 8007ea4:	1e07      	subs	r7, r0, #0
 8007ea6:	d105      	bne.n	8007eb4 <__multadd+0x54>
 8007ea8:	003a      	movs	r2, r7
 8007eaa:	21ba      	movs	r1, #186	@ 0xba
 8007eac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee0 <__multadd+0x80>)
 8007eae:	480d      	ldr	r0, [pc, #52]	@ (8007ee4 <__multadd+0x84>)
 8007eb0:	f001 fd2e 	bl	8009910 <__assert_func>
 8007eb4:	0021      	movs	r1, r4
 8007eb6:	6922      	ldr	r2, [r4, #16]
 8007eb8:	310c      	adds	r1, #12
 8007eba:	3202      	adds	r2, #2
 8007ebc:	0092      	lsls	r2, r2, #2
 8007ebe:	300c      	adds	r0, #12
 8007ec0:	f001 fd16 	bl	80098f0 <memcpy>
 8007ec4:	0021      	movs	r1, r4
 8007ec6:	9801      	ldr	r0, [sp, #4]
 8007ec8:	f7ff ffa6 	bl	8007e18 <_Bfree>
 8007ecc:	003c      	movs	r4, r7
 8007ece:	1d2b      	adds	r3, r5, #4
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	18e3      	adds	r3, r4, r3
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	605e      	str	r6, [r3, #4]
 8007ed8:	6125      	str	r5, [r4, #16]
 8007eda:	0020      	movs	r0, r4
 8007edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	0800a885 	.word	0x0800a885
 8007ee4:	0800a896 	.word	0x0800a896

08007ee8 <__s2b>:
 8007ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eea:	0007      	movs	r7, r0
 8007eec:	0018      	movs	r0, r3
 8007eee:	000c      	movs	r4, r1
 8007ef0:	3008      	adds	r0, #8
 8007ef2:	2109      	movs	r1, #9
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	0015      	movs	r5, r2
 8007ef8:	f7f8 f9ac 	bl	8000254 <__divsi3>
 8007efc:	2301      	movs	r3, #1
 8007efe:	2100      	movs	r1, #0
 8007f00:	4283      	cmp	r3, r0
 8007f02:	db0a      	blt.n	8007f1a <__s2b+0x32>
 8007f04:	0038      	movs	r0, r7
 8007f06:	f7ff ff43 	bl	8007d90 <_Balloc>
 8007f0a:	1e01      	subs	r1, r0, #0
 8007f0c:	d108      	bne.n	8007f20 <__s2b+0x38>
 8007f0e:	000a      	movs	r2, r1
 8007f10:	4b19      	ldr	r3, [pc, #100]	@ (8007f78 <__s2b+0x90>)
 8007f12:	481a      	ldr	r0, [pc, #104]	@ (8007f7c <__s2b+0x94>)
 8007f14:	31d3      	adds	r1, #211	@ 0xd3
 8007f16:	f001 fcfb 	bl	8009910 <__assert_func>
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	3101      	adds	r1, #1
 8007f1e:	e7ef      	b.n	8007f00 <__s2b+0x18>
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	6143      	str	r3, [r0, #20]
 8007f24:	2301      	movs	r3, #1
 8007f26:	6103      	str	r3, [r0, #16]
 8007f28:	2d09      	cmp	r5, #9
 8007f2a:	dd18      	ble.n	8007f5e <__s2b+0x76>
 8007f2c:	0023      	movs	r3, r4
 8007f2e:	3309      	adds	r3, #9
 8007f30:	001e      	movs	r6, r3
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	1964      	adds	r4, r4, r5
 8007f36:	7833      	ldrb	r3, [r6, #0]
 8007f38:	220a      	movs	r2, #10
 8007f3a:	0038      	movs	r0, r7
 8007f3c:	3b30      	subs	r3, #48	@ 0x30
 8007f3e:	f7ff ff8f 	bl	8007e60 <__multadd>
 8007f42:	3601      	adds	r6, #1
 8007f44:	0001      	movs	r1, r0
 8007f46:	42a6      	cmp	r6, r4
 8007f48:	d1f5      	bne.n	8007f36 <__s2b+0x4e>
 8007f4a:	002c      	movs	r4, r5
 8007f4c:	9b00      	ldr	r3, [sp, #0]
 8007f4e:	3c08      	subs	r4, #8
 8007f50:	191c      	adds	r4, r3, r4
 8007f52:	002e      	movs	r6, r5
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	429e      	cmp	r6, r3
 8007f58:	db04      	blt.n	8007f64 <__s2b+0x7c>
 8007f5a:	0008      	movs	r0, r1
 8007f5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f5e:	2509      	movs	r5, #9
 8007f60:	340a      	adds	r4, #10
 8007f62:	e7f6      	b.n	8007f52 <__s2b+0x6a>
 8007f64:	1b63      	subs	r3, r4, r5
 8007f66:	5d9b      	ldrb	r3, [r3, r6]
 8007f68:	220a      	movs	r2, #10
 8007f6a:	0038      	movs	r0, r7
 8007f6c:	3b30      	subs	r3, #48	@ 0x30
 8007f6e:	f7ff ff77 	bl	8007e60 <__multadd>
 8007f72:	3601      	adds	r6, #1
 8007f74:	0001      	movs	r1, r0
 8007f76:	e7ed      	b.n	8007f54 <__s2b+0x6c>
 8007f78:	0800a885 	.word	0x0800a885
 8007f7c:	0800a896 	.word	0x0800a896

08007f80 <__hi0bits>:
 8007f80:	2280      	movs	r2, #128	@ 0x80
 8007f82:	0003      	movs	r3, r0
 8007f84:	0252      	lsls	r2, r2, #9
 8007f86:	2000      	movs	r0, #0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d201      	bcs.n	8007f90 <__hi0bits+0x10>
 8007f8c:	041b      	lsls	r3, r3, #16
 8007f8e:	3010      	adds	r0, #16
 8007f90:	2280      	movs	r2, #128	@ 0x80
 8007f92:	0452      	lsls	r2, r2, #17
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d201      	bcs.n	8007f9c <__hi0bits+0x1c>
 8007f98:	3008      	adds	r0, #8
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	2280      	movs	r2, #128	@ 0x80
 8007f9e:	0552      	lsls	r2, r2, #21
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d201      	bcs.n	8007fa8 <__hi0bits+0x28>
 8007fa4:	3004      	adds	r0, #4
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	2280      	movs	r2, #128	@ 0x80
 8007faa:	05d2      	lsls	r2, r2, #23
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d201      	bcs.n	8007fb4 <__hi0bits+0x34>
 8007fb0:	3002      	adds	r0, #2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	db03      	blt.n	8007fc0 <__hi0bits+0x40>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	4213      	tst	r3, r2
 8007fbc:	d100      	bne.n	8007fc0 <__hi0bits+0x40>
 8007fbe:	2020      	movs	r0, #32
 8007fc0:	4770      	bx	lr

08007fc2 <__lo0bits>:
 8007fc2:	6803      	ldr	r3, [r0, #0]
 8007fc4:	0001      	movs	r1, r0
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	0018      	movs	r0, r3
 8007fca:	4010      	ands	r0, r2
 8007fcc:	4213      	tst	r3, r2
 8007fce:	d00d      	beq.n	8007fec <__lo0bits+0x2a>
 8007fd0:	3a06      	subs	r2, #6
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	4213      	tst	r3, r2
 8007fd6:	d105      	bne.n	8007fe4 <__lo0bits+0x22>
 8007fd8:	3002      	adds	r0, #2
 8007fda:	4203      	tst	r3, r0
 8007fdc:	d003      	beq.n	8007fe6 <__lo0bits+0x24>
 8007fde:	40d3      	lsrs	r3, r2
 8007fe0:	0010      	movs	r0, r2
 8007fe2:	600b      	str	r3, [r1, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	600b      	str	r3, [r1, #0]
 8007fea:	e7fb      	b.n	8007fe4 <__lo0bits+0x22>
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	d101      	bne.n	8007ff6 <__lo0bits+0x34>
 8007ff2:	2010      	movs	r0, #16
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	d101      	bne.n	8008000 <__lo0bits+0x3e>
 8007ffc:	3008      	adds	r0, #8
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	071a      	lsls	r2, r3, #28
 8008002:	d101      	bne.n	8008008 <__lo0bits+0x46>
 8008004:	3004      	adds	r0, #4
 8008006:	091b      	lsrs	r3, r3, #4
 8008008:	079a      	lsls	r2, r3, #30
 800800a:	d101      	bne.n	8008010 <__lo0bits+0x4e>
 800800c:	3002      	adds	r0, #2
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	07da      	lsls	r2, r3, #31
 8008012:	d4e9      	bmi.n	8007fe8 <__lo0bits+0x26>
 8008014:	3001      	adds	r0, #1
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	d1e6      	bne.n	8007fe8 <__lo0bits+0x26>
 800801a:	2020      	movs	r0, #32
 800801c:	e7e2      	b.n	8007fe4 <__lo0bits+0x22>
	...

08008020 <__i2b>:
 8008020:	b510      	push	{r4, lr}
 8008022:	000c      	movs	r4, r1
 8008024:	2101      	movs	r1, #1
 8008026:	f7ff feb3 	bl	8007d90 <_Balloc>
 800802a:	2800      	cmp	r0, #0
 800802c:	d107      	bne.n	800803e <__i2b+0x1e>
 800802e:	2146      	movs	r1, #70	@ 0x46
 8008030:	4c05      	ldr	r4, [pc, #20]	@ (8008048 <__i2b+0x28>)
 8008032:	0002      	movs	r2, r0
 8008034:	4b05      	ldr	r3, [pc, #20]	@ (800804c <__i2b+0x2c>)
 8008036:	0020      	movs	r0, r4
 8008038:	31ff      	adds	r1, #255	@ 0xff
 800803a:	f001 fc69 	bl	8009910 <__assert_func>
 800803e:	2301      	movs	r3, #1
 8008040:	6144      	str	r4, [r0, #20]
 8008042:	6103      	str	r3, [r0, #16]
 8008044:	bd10      	pop	{r4, pc}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	0800a896 	.word	0x0800a896
 800804c:	0800a885 	.word	0x0800a885

08008050 <__multiply>:
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	0014      	movs	r4, r2
 8008054:	690a      	ldr	r2, [r1, #16]
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	000d      	movs	r5, r1
 800805a:	b08b      	sub	sp, #44	@ 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	db02      	blt.n	8008066 <__multiply+0x16>
 8008060:	0023      	movs	r3, r4
 8008062:	000c      	movs	r4, r1
 8008064:	001d      	movs	r5, r3
 8008066:	6927      	ldr	r7, [r4, #16]
 8008068:	692e      	ldr	r6, [r5, #16]
 800806a:	6861      	ldr	r1, [r4, #4]
 800806c:	19bb      	adds	r3, r7, r6
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	19ba      	adds	r2, r7, r6
 8008074:	4293      	cmp	r3, r2
 8008076:	da00      	bge.n	800807a <__multiply+0x2a>
 8008078:	3101      	adds	r1, #1
 800807a:	f7ff fe89 	bl	8007d90 <_Balloc>
 800807e:	9002      	str	r0, [sp, #8]
 8008080:	2800      	cmp	r0, #0
 8008082:	d106      	bne.n	8008092 <__multiply+0x42>
 8008084:	21b1      	movs	r1, #177	@ 0xb1
 8008086:	4b49      	ldr	r3, [pc, #292]	@ (80081ac <__multiply+0x15c>)
 8008088:	4849      	ldr	r0, [pc, #292]	@ (80081b0 <__multiply+0x160>)
 800808a:	9a02      	ldr	r2, [sp, #8]
 800808c:	0049      	lsls	r1, r1, #1
 800808e:	f001 fc3f 	bl	8009910 <__assert_func>
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	3314      	adds	r3, #20
 8008098:	469c      	mov	ip, r3
 800809a:	19bb      	adds	r3, r7, r6
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4463      	add	r3, ip
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	4663      	mov	r3, ip
 80080a4:	9904      	ldr	r1, [sp, #16]
 80080a6:	428b      	cmp	r3, r1
 80080a8:	d32a      	bcc.n	8008100 <__multiply+0xb0>
 80080aa:	0023      	movs	r3, r4
 80080ac:	00bf      	lsls	r7, r7, #2
 80080ae:	3314      	adds	r3, #20
 80080b0:	3514      	adds	r5, #20
 80080b2:	9308      	str	r3, [sp, #32]
 80080b4:	00b6      	lsls	r6, r6, #2
 80080b6:	19db      	adds	r3, r3, r7
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	19ab      	adds	r3, r5, r6
 80080bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080be:	2304      	movs	r3, #4
 80080c0:	9306      	str	r3, [sp, #24]
 80080c2:	0023      	movs	r3, r4
 80080c4:	9a05      	ldr	r2, [sp, #20]
 80080c6:	3315      	adds	r3, #21
 80080c8:	9501      	str	r5, [sp, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d305      	bcc.n	80080da <__multiply+0x8a>
 80080ce:	1b13      	subs	r3, r2, r4
 80080d0:	3b15      	subs	r3, #21
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	3301      	adds	r3, #1
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	9306      	str	r3, [sp, #24]
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080de:	4293      	cmp	r3, r2
 80080e0:	d310      	bcc.n	8008104 <__multiply+0xb4>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dd05      	ble.n	80080f4 <__multiply+0xa4>
 80080e8:	9b04      	ldr	r3, [sp, #16]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d056      	beq.n	80081a2 <__multiply+0x152>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	9a03      	ldr	r2, [sp, #12]
 80080f8:	0018      	movs	r0, r3
 80080fa:	611a      	str	r2, [r3, #16]
 80080fc:	b00b      	add	sp, #44	@ 0x2c
 80080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008100:	c304      	stmia	r3!, {r2}
 8008102:	e7cf      	b.n	80080a4 <__multiply+0x54>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	b280      	uxth	r0, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	d01e      	beq.n	800814c <__multiply+0xfc>
 800810e:	4667      	mov	r7, ip
 8008110:	2500      	movs	r5, #0
 8008112:	9e08      	ldr	r6, [sp, #32]
 8008114:	ce02      	ldmia	r6!, {r1}
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	b28b      	uxth	r3, r1
 800811c:	4343      	muls	r3, r0
 800811e:	001a      	movs	r2, r3
 8008120:	466b      	mov	r3, sp
 8008122:	0c09      	lsrs	r1, r1, #16
 8008124:	8b9b      	ldrh	r3, [r3, #28]
 8008126:	4341      	muls	r1, r0
 8008128:	18d3      	adds	r3, r2, r3
 800812a:	9a07      	ldr	r2, [sp, #28]
 800812c:	195b      	adds	r3, r3, r5
 800812e:	0c12      	lsrs	r2, r2, #16
 8008130:	1889      	adds	r1, r1, r2
 8008132:	0c1a      	lsrs	r2, r3, #16
 8008134:	188a      	adds	r2, r1, r2
 8008136:	b29b      	uxth	r3, r3
 8008138:	0c15      	lsrs	r5, r2, #16
 800813a:	0412      	lsls	r2, r2, #16
 800813c:	431a      	orrs	r2, r3
 800813e:	9b05      	ldr	r3, [sp, #20]
 8008140:	c704      	stmia	r7!, {r2}
 8008142:	42b3      	cmp	r3, r6
 8008144:	d8e6      	bhi.n	8008114 <__multiply+0xc4>
 8008146:	4663      	mov	r3, ip
 8008148:	9a06      	ldr	r2, [sp, #24]
 800814a:	509d      	str	r5, [r3, r2]
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	0c00      	lsrs	r0, r0, #16
 8008152:	d020      	beq.n	8008196 <__multiply+0x146>
 8008154:	4663      	mov	r3, ip
 8008156:	0025      	movs	r5, r4
 8008158:	4661      	mov	r1, ip
 800815a:	2700      	movs	r7, #0
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3514      	adds	r5, #20
 8008160:	682a      	ldr	r2, [r5, #0]
 8008162:	680e      	ldr	r6, [r1, #0]
 8008164:	b292      	uxth	r2, r2
 8008166:	4342      	muls	r2, r0
 8008168:	0c36      	lsrs	r6, r6, #16
 800816a:	1992      	adds	r2, r2, r6
 800816c:	19d2      	adds	r2, r2, r7
 800816e:	0416      	lsls	r6, r2, #16
 8008170:	b29b      	uxth	r3, r3
 8008172:	431e      	orrs	r6, r3
 8008174:	600e      	str	r6, [r1, #0]
 8008176:	cd40      	ldmia	r5!, {r6}
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	0c36      	lsrs	r6, r6, #16
 800817c:	4346      	muls	r6, r0
 800817e:	b29b      	uxth	r3, r3
 8008180:	0c12      	lsrs	r2, r2, #16
 8008182:	18f3      	adds	r3, r6, r3
 8008184:	189b      	adds	r3, r3, r2
 8008186:	9a05      	ldr	r2, [sp, #20]
 8008188:	0c1f      	lsrs	r7, r3, #16
 800818a:	3104      	adds	r1, #4
 800818c:	42aa      	cmp	r2, r5
 800818e:	d8e7      	bhi.n	8008160 <__multiply+0x110>
 8008190:	4662      	mov	r2, ip
 8008192:	9906      	ldr	r1, [sp, #24]
 8008194:	5053      	str	r3, [r2, r1]
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	2304      	movs	r3, #4
 800819e:	449c      	add	ip, r3
 80081a0:	e79b      	b.n	80080da <__multiply+0x8a>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	9303      	str	r3, [sp, #12]
 80081a8:	e79b      	b.n	80080e2 <__multiply+0x92>
 80081aa:	46c0      	nop			@ (mov r8, r8)
 80081ac:	0800a885 	.word	0x0800a885
 80081b0:	0800a896 	.word	0x0800a896

080081b4 <__pow5mult>:
 80081b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b6:	2303      	movs	r3, #3
 80081b8:	0015      	movs	r5, r2
 80081ba:	0007      	movs	r7, r0
 80081bc:	000e      	movs	r6, r1
 80081be:	401a      	ands	r2, r3
 80081c0:	421d      	tst	r5, r3
 80081c2:	d008      	beq.n	80081d6 <__pow5mult+0x22>
 80081c4:	4925      	ldr	r1, [pc, #148]	@ (800825c <__pow5mult+0xa8>)
 80081c6:	3a01      	subs	r2, #1
 80081c8:	0092      	lsls	r2, r2, #2
 80081ca:	5852      	ldr	r2, [r2, r1]
 80081cc:	2300      	movs	r3, #0
 80081ce:	0031      	movs	r1, r6
 80081d0:	f7ff fe46 	bl	8007e60 <__multadd>
 80081d4:	0006      	movs	r6, r0
 80081d6:	10ad      	asrs	r5, r5, #2
 80081d8:	d03d      	beq.n	8008256 <__pow5mult+0xa2>
 80081da:	69fc      	ldr	r4, [r7, #28]
 80081dc:	2c00      	cmp	r4, #0
 80081de:	d10f      	bne.n	8008200 <__pow5mult+0x4c>
 80081e0:	2010      	movs	r0, #16
 80081e2:	f7ff fd19 	bl	8007c18 <malloc>
 80081e6:	1e02      	subs	r2, r0, #0
 80081e8:	61f8      	str	r0, [r7, #28]
 80081ea:	d105      	bne.n	80081f8 <__pow5mult+0x44>
 80081ec:	21b4      	movs	r1, #180	@ 0xb4
 80081ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <__pow5mult+0xac>)
 80081f0:	481c      	ldr	r0, [pc, #112]	@ (8008264 <__pow5mult+0xb0>)
 80081f2:	31ff      	adds	r1, #255	@ 0xff
 80081f4:	f001 fb8c 	bl	8009910 <__assert_func>
 80081f8:	6044      	str	r4, [r0, #4]
 80081fa:	6084      	str	r4, [r0, #8]
 80081fc:	6004      	str	r4, [r0, #0]
 80081fe:	60c4      	str	r4, [r0, #12]
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	689c      	ldr	r4, [r3, #8]
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	2c00      	cmp	r4, #0
 8008208:	d108      	bne.n	800821c <__pow5mult+0x68>
 800820a:	0038      	movs	r0, r7
 800820c:	4916      	ldr	r1, [pc, #88]	@ (8008268 <__pow5mult+0xb4>)
 800820e:	f7ff ff07 	bl	8008020 <__i2b>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	0004      	movs	r4, r0
 8008216:	6098      	str	r0, [r3, #8]
 8008218:	2300      	movs	r3, #0
 800821a:	6003      	str	r3, [r0, #0]
 800821c:	2301      	movs	r3, #1
 800821e:	421d      	tst	r5, r3
 8008220:	d00a      	beq.n	8008238 <__pow5mult+0x84>
 8008222:	0031      	movs	r1, r6
 8008224:	0022      	movs	r2, r4
 8008226:	0038      	movs	r0, r7
 8008228:	f7ff ff12 	bl	8008050 <__multiply>
 800822c:	0031      	movs	r1, r6
 800822e:	9001      	str	r0, [sp, #4]
 8008230:	0038      	movs	r0, r7
 8008232:	f7ff fdf1 	bl	8007e18 <_Bfree>
 8008236:	9e01      	ldr	r6, [sp, #4]
 8008238:	106d      	asrs	r5, r5, #1
 800823a:	d00c      	beq.n	8008256 <__pow5mult+0xa2>
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	2800      	cmp	r0, #0
 8008240:	d107      	bne.n	8008252 <__pow5mult+0x9e>
 8008242:	0022      	movs	r2, r4
 8008244:	0021      	movs	r1, r4
 8008246:	0038      	movs	r0, r7
 8008248:	f7ff ff02 	bl	8008050 <__multiply>
 800824c:	2300      	movs	r3, #0
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	0004      	movs	r4, r0
 8008254:	e7e2      	b.n	800821c <__pow5mult+0x68>
 8008256:	0030      	movs	r0, r6
 8008258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	0800a8f0 	.word	0x0800a8f0
 8008260:	0800a816 	.word	0x0800a816
 8008264:	0800a896 	.word	0x0800a896
 8008268:	00000271 	.word	0x00000271

0800826c <__lshift>:
 800826c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826e:	000c      	movs	r4, r1
 8008270:	0016      	movs	r6, r2
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	1157      	asrs	r7, r2, #5
 8008276:	b085      	sub	sp, #20
 8008278:	18fb      	adds	r3, r7, r3
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	3301      	adds	r3, #1
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	6849      	ldr	r1, [r1, #4]
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	9002      	str	r0, [sp, #8]
 8008286:	9a00      	ldr	r2, [sp, #0]
 8008288:	4293      	cmp	r3, r2
 800828a:	db10      	blt.n	80082ae <__lshift+0x42>
 800828c:	9802      	ldr	r0, [sp, #8]
 800828e:	f7ff fd7f 	bl	8007d90 <_Balloc>
 8008292:	2300      	movs	r3, #0
 8008294:	0001      	movs	r1, r0
 8008296:	0005      	movs	r5, r0
 8008298:	001a      	movs	r2, r3
 800829a:	3114      	adds	r1, #20
 800829c:	4298      	cmp	r0, r3
 800829e:	d10c      	bne.n	80082ba <__lshift+0x4e>
 80082a0:	21ef      	movs	r1, #239	@ 0xef
 80082a2:	002a      	movs	r2, r5
 80082a4:	4b25      	ldr	r3, [pc, #148]	@ (800833c <__lshift+0xd0>)
 80082a6:	4826      	ldr	r0, [pc, #152]	@ (8008340 <__lshift+0xd4>)
 80082a8:	0049      	lsls	r1, r1, #1
 80082aa:	f001 fb31 	bl	8009910 <__assert_func>
 80082ae:	3101      	adds	r1, #1
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	e7e8      	b.n	8008286 <__lshift+0x1a>
 80082b4:	0098      	lsls	r0, r3, #2
 80082b6:	500a      	str	r2, [r1, r0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	42bb      	cmp	r3, r7
 80082bc:	dbfa      	blt.n	80082b4 <__lshift+0x48>
 80082be:	43fb      	mvns	r3, r7
 80082c0:	17db      	asrs	r3, r3, #31
 80082c2:	401f      	ands	r7, r3
 80082c4:	00bf      	lsls	r7, r7, #2
 80082c6:	0023      	movs	r3, r4
 80082c8:	201f      	movs	r0, #31
 80082ca:	19c9      	adds	r1, r1, r7
 80082cc:	0037      	movs	r7, r6
 80082ce:	6922      	ldr	r2, [r4, #16]
 80082d0:	3314      	adds	r3, #20
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	189a      	adds	r2, r3, r2
 80082d6:	4007      	ands	r7, r0
 80082d8:	4206      	tst	r6, r0
 80082da:	d029      	beq.n	8008330 <__lshift+0xc4>
 80082dc:	3001      	adds	r0, #1
 80082de:	1bc0      	subs	r0, r0, r7
 80082e0:	9003      	str	r0, [sp, #12]
 80082e2:	468c      	mov	ip, r1
 80082e4:	2000      	movs	r0, #0
 80082e6:	681e      	ldr	r6, [r3, #0]
 80082e8:	40be      	lsls	r6, r7
 80082ea:	4306      	orrs	r6, r0
 80082ec:	4660      	mov	r0, ip
 80082ee:	c040      	stmia	r0!, {r6}
 80082f0:	4684      	mov	ip, r0
 80082f2:	9e03      	ldr	r6, [sp, #12]
 80082f4:	cb01      	ldmia	r3!, {r0}
 80082f6:	40f0      	lsrs	r0, r6
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d8f4      	bhi.n	80082e6 <__lshift+0x7a>
 80082fc:	0026      	movs	r6, r4
 80082fe:	3615      	adds	r6, #21
 8008300:	2304      	movs	r3, #4
 8008302:	42b2      	cmp	r2, r6
 8008304:	d304      	bcc.n	8008310 <__lshift+0xa4>
 8008306:	1b13      	subs	r3, r2, r4
 8008308:	3b15      	subs	r3, #21
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	3301      	adds	r3, #1
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	50c8      	str	r0, [r1, r3]
 8008312:	2800      	cmp	r0, #0
 8008314:	d002      	beq.n	800831c <__lshift+0xb0>
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	3302      	adds	r3, #2
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	9802      	ldr	r0, [sp, #8]
 8008320:	3b01      	subs	r3, #1
 8008322:	0021      	movs	r1, r4
 8008324:	612b      	str	r3, [r5, #16]
 8008326:	f7ff fd77 	bl	8007e18 <_Bfree>
 800832a:	0028      	movs	r0, r5
 800832c:	b005      	add	sp, #20
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	cb01      	ldmia	r3!, {r0}
 8008332:	c101      	stmia	r1!, {r0}
 8008334:	429a      	cmp	r2, r3
 8008336:	d8fb      	bhi.n	8008330 <__lshift+0xc4>
 8008338:	e7f0      	b.n	800831c <__lshift+0xb0>
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	0800a885 	.word	0x0800a885
 8008340:	0800a896 	.word	0x0800a896

08008344 <__mcmp>:
 8008344:	b530      	push	{r4, r5, lr}
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	6904      	ldr	r4, [r0, #16]
 800834a:	0002      	movs	r2, r0
 800834c:	1ae0      	subs	r0, r4, r3
 800834e:	429c      	cmp	r4, r3
 8008350:	d10f      	bne.n	8008372 <__mcmp+0x2e>
 8008352:	3214      	adds	r2, #20
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	3114      	adds	r1, #20
 8008358:	0014      	movs	r4, r2
 800835a:	18c9      	adds	r1, r1, r3
 800835c:	18d2      	adds	r2, r2, r3
 800835e:	3a04      	subs	r2, #4
 8008360:	3904      	subs	r1, #4
 8008362:	6815      	ldr	r5, [r2, #0]
 8008364:	680b      	ldr	r3, [r1, #0]
 8008366:	429d      	cmp	r5, r3
 8008368:	d004      	beq.n	8008374 <__mcmp+0x30>
 800836a:	2001      	movs	r0, #1
 800836c:	429d      	cmp	r5, r3
 800836e:	d200      	bcs.n	8008372 <__mcmp+0x2e>
 8008370:	3802      	subs	r0, #2
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	4294      	cmp	r4, r2
 8008376:	d3f2      	bcc.n	800835e <__mcmp+0x1a>
 8008378:	e7fb      	b.n	8008372 <__mcmp+0x2e>
	...

0800837c <__mdiff>:
 800837c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837e:	000c      	movs	r4, r1
 8008380:	b087      	sub	sp, #28
 8008382:	9000      	str	r0, [sp, #0]
 8008384:	0011      	movs	r1, r2
 8008386:	0020      	movs	r0, r4
 8008388:	0017      	movs	r7, r2
 800838a:	f7ff ffdb 	bl	8008344 <__mcmp>
 800838e:	1e05      	subs	r5, r0, #0
 8008390:	d110      	bne.n	80083b4 <__mdiff+0x38>
 8008392:	0001      	movs	r1, r0
 8008394:	9800      	ldr	r0, [sp, #0]
 8008396:	f7ff fcfb 	bl	8007d90 <_Balloc>
 800839a:	1e02      	subs	r2, r0, #0
 800839c:	d104      	bne.n	80083a8 <__mdiff+0x2c>
 800839e:	4b40      	ldr	r3, [pc, #256]	@ (80084a0 <__mdiff+0x124>)
 80083a0:	4840      	ldr	r0, [pc, #256]	@ (80084a4 <__mdiff+0x128>)
 80083a2:	4941      	ldr	r1, [pc, #260]	@ (80084a8 <__mdiff+0x12c>)
 80083a4:	f001 fab4 	bl	8009910 <__assert_func>
 80083a8:	2301      	movs	r3, #1
 80083aa:	6145      	str	r5, [r0, #20]
 80083ac:	6103      	str	r3, [r0, #16]
 80083ae:	0010      	movs	r0, r2
 80083b0:	b007      	add	sp, #28
 80083b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b4:	2600      	movs	r6, #0
 80083b6:	42b0      	cmp	r0, r6
 80083b8:	da03      	bge.n	80083c2 <__mdiff+0x46>
 80083ba:	0023      	movs	r3, r4
 80083bc:	003c      	movs	r4, r7
 80083be:	001f      	movs	r7, r3
 80083c0:	3601      	adds	r6, #1
 80083c2:	6861      	ldr	r1, [r4, #4]
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	f7ff fce3 	bl	8007d90 <_Balloc>
 80083ca:	1e02      	subs	r2, r0, #0
 80083cc:	d103      	bne.n	80083d6 <__mdiff+0x5a>
 80083ce:	4b34      	ldr	r3, [pc, #208]	@ (80084a0 <__mdiff+0x124>)
 80083d0:	4834      	ldr	r0, [pc, #208]	@ (80084a4 <__mdiff+0x128>)
 80083d2:	4936      	ldr	r1, [pc, #216]	@ (80084ac <__mdiff+0x130>)
 80083d4:	e7e6      	b.n	80083a4 <__mdiff+0x28>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	3414      	adds	r4, #20
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	18e3      	adds	r3, r4, r3
 80083e0:	0021      	movs	r1, r4
 80083e2:	9401      	str	r4, [sp, #4]
 80083e4:	003c      	movs	r4, r7
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3414      	adds	r4, #20
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	18e3      	adds	r3, r4, r3
 80083f0:	9303      	str	r3, [sp, #12]
 80083f2:	0003      	movs	r3, r0
 80083f4:	60c6      	str	r6, [r0, #12]
 80083f6:	468c      	mov	ip, r1
 80083f8:	2000      	movs	r0, #0
 80083fa:	3314      	adds	r3, #20
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	9305      	str	r3, [sp, #20]
 8008400:	4663      	mov	r3, ip
 8008402:	cb20      	ldmia	r3!, {r5}
 8008404:	b2a9      	uxth	r1, r5
 8008406:	000e      	movs	r6, r1
 8008408:	469c      	mov	ip, r3
 800840a:	cc08      	ldmia	r4!, {r3}
 800840c:	0c2d      	lsrs	r5, r5, #16
 800840e:	b299      	uxth	r1, r3
 8008410:	1a71      	subs	r1, r6, r1
 8008412:	1809      	adds	r1, r1, r0
 8008414:	0c1b      	lsrs	r3, r3, #16
 8008416:	1408      	asrs	r0, r1, #16
 8008418:	1aeb      	subs	r3, r5, r3
 800841a:	181b      	adds	r3, r3, r0
 800841c:	1418      	asrs	r0, r3, #16
 800841e:	b289      	uxth	r1, r1
 8008420:	041b      	lsls	r3, r3, #16
 8008422:	4319      	orrs	r1, r3
 8008424:	9b05      	ldr	r3, [sp, #20]
 8008426:	c302      	stmia	r3!, {r1}
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	42a3      	cmp	r3, r4
 800842e:	d8e7      	bhi.n	8008400 <__mdiff+0x84>
 8008430:	0039      	movs	r1, r7
 8008432:	9c03      	ldr	r4, [sp, #12]
 8008434:	3115      	adds	r1, #21
 8008436:	2304      	movs	r3, #4
 8008438:	428c      	cmp	r4, r1
 800843a:	d304      	bcc.n	8008446 <__mdiff+0xca>
 800843c:	1be3      	subs	r3, r4, r7
 800843e:	3b15      	subs	r3, #21
 8008440:	089b      	lsrs	r3, r3, #2
 8008442:	3301      	adds	r3, #1
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	9901      	ldr	r1, [sp, #4]
 8008448:	18cd      	adds	r5, r1, r3
 800844a:	9904      	ldr	r1, [sp, #16]
 800844c:	002e      	movs	r6, r5
 800844e:	18cb      	adds	r3, r1, r3
 8008450:	001f      	movs	r7, r3
 8008452:	9902      	ldr	r1, [sp, #8]
 8008454:	428e      	cmp	r6, r1
 8008456:	d311      	bcc.n	800847c <__mdiff+0x100>
 8008458:	9c02      	ldr	r4, [sp, #8]
 800845a:	1ee9      	subs	r1, r5, #3
 800845c:	2000      	movs	r0, #0
 800845e:	428c      	cmp	r4, r1
 8008460:	d304      	bcc.n	800846c <__mdiff+0xf0>
 8008462:	0021      	movs	r1, r4
 8008464:	3103      	adds	r1, #3
 8008466:	1b49      	subs	r1, r1, r5
 8008468:	0889      	lsrs	r1, r1, #2
 800846a:	0088      	lsls	r0, r1, #2
 800846c:	181b      	adds	r3, r3, r0
 800846e:	3b04      	subs	r3, #4
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	2900      	cmp	r1, #0
 8008474:	d010      	beq.n	8008498 <__mdiff+0x11c>
 8008476:	9b00      	ldr	r3, [sp, #0]
 8008478:	6113      	str	r3, [r2, #16]
 800847a:	e798      	b.n	80083ae <__mdiff+0x32>
 800847c:	4684      	mov	ip, r0
 800847e:	ce02      	ldmia	r6!, {r1}
 8008480:	b288      	uxth	r0, r1
 8008482:	4460      	add	r0, ip
 8008484:	1400      	asrs	r0, r0, #16
 8008486:	0c0c      	lsrs	r4, r1, #16
 8008488:	1904      	adds	r4, r0, r4
 800848a:	4461      	add	r1, ip
 800848c:	1420      	asrs	r0, r4, #16
 800848e:	b289      	uxth	r1, r1
 8008490:	0424      	lsls	r4, r4, #16
 8008492:	4321      	orrs	r1, r4
 8008494:	c702      	stmia	r7!, {r1}
 8008496:	e7dc      	b.n	8008452 <__mdiff+0xd6>
 8008498:	9900      	ldr	r1, [sp, #0]
 800849a:	3901      	subs	r1, #1
 800849c:	9100      	str	r1, [sp, #0]
 800849e:	e7e6      	b.n	800846e <__mdiff+0xf2>
 80084a0:	0800a885 	.word	0x0800a885
 80084a4:	0800a896 	.word	0x0800a896
 80084a8:	00000237 	.word	0x00000237
 80084ac:	00000245 	.word	0x00000245

080084b0 <__ulp>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	2400      	movs	r4, #0
 80084b4:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <__ulp+0x38>)
 80084b6:	4a0d      	ldr	r2, [pc, #52]	@ (80084ec <__ulp+0x3c>)
 80084b8:	400b      	ands	r3, r1
 80084ba:	189b      	adds	r3, r3, r2
 80084bc:	42a3      	cmp	r3, r4
 80084be:	dc06      	bgt.n	80084ce <__ulp+0x1e>
 80084c0:	425b      	negs	r3, r3
 80084c2:	151a      	asrs	r2, r3, #20
 80084c4:	2a13      	cmp	r2, #19
 80084c6:	dc05      	bgt.n	80084d4 <__ulp+0x24>
 80084c8:	2380      	movs	r3, #128	@ 0x80
 80084ca:	031b      	lsls	r3, r3, #12
 80084cc:	4113      	asrs	r3, r2
 80084ce:	0019      	movs	r1, r3
 80084d0:	0020      	movs	r0, r4
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	3a14      	subs	r2, #20
 80084d6:	2401      	movs	r4, #1
 80084d8:	2a1e      	cmp	r2, #30
 80084da:	dc02      	bgt.n	80084e2 <__ulp+0x32>
 80084dc:	2480      	movs	r4, #128	@ 0x80
 80084de:	0624      	lsls	r4, r4, #24
 80084e0:	40d4      	lsrs	r4, r2
 80084e2:	2300      	movs	r3, #0
 80084e4:	e7f3      	b.n	80084ce <__ulp+0x1e>
 80084e6:	46c0      	nop			@ (mov r8, r8)
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	fcc00000 	.word	0xfcc00000

080084f0 <__b2d>:
 80084f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084f2:	0006      	movs	r6, r0
 80084f4:	6903      	ldr	r3, [r0, #16]
 80084f6:	3614      	adds	r6, #20
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	18f3      	adds	r3, r6, r3
 80084fc:	1f1d      	subs	r5, r3, #4
 80084fe:	682c      	ldr	r4, [r5, #0]
 8008500:	000f      	movs	r7, r1
 8008502:	0020      	movs	r0, r4
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	f7ff fd3b 	bl	8007f80 <__hi0bits>
 800850a:	2220      	movs	r2, #32
 800850c:	1a12      	subs	r2, r2, r0
 800850e:	603a      	str	r2, [r7, #0]
 8008510:	0003      	movs	r3, r0
 8008512:	4a1c      	ldr	r2, [pc, #112]	@ (8008584 <__b2d+0x94>)
 8008514:	280a      	cmp	r0, #10
 8008516:	dc15      	bgt.n	8008544 <__b2d+0x54>
 8008518:	210b      	movs	r1, #11
 800851a:	0027      	movs	r7, r4
 800851c:	1a09      	subs	r1, r1, r0
 800851e:	40cf      	lsrs	r7, r1
 8008520:	433a      	orrs	r2, r7
 8008522:	468c      	mov	ip, r1
 8008524:	0011      	movs	r1, r2
 8008526:	2200      	movs	r2, #0
 8008528:	42ae      	cmp	r6, r5
 800852a:	d202      	bcs.n	8008532 <__b2d+0x42>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	3a08      	subs	r2, #8
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	3315      	adds	r3, #21
 8008534:	409c      	lsls	r4, r3
 8008536:	4663      	mov	r3, ip
 8008538:	0027      	movs	r7, r4
 800853a:	40da      	lsrs	r2, r3
 800853c:	4317      	orrs	r7, r2
 800853e:	0038      	movs	r0, r7
 8008540:	b003      	add	sp, #12
 8008542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008544:	2700      	movs	r7, #0
 8008546:	42ae      	cmp	r6, r5
 8008548:	d202      	bcs.n	8008550 <__b2d+0x60>
 800854a:	9d01      	ldr	r5, [sp, #4]
 800854c:	3d08      	subs	r5, #8
 800854e:	682f      	ldr	r7, [r5, #0]
 8008550:	210b      	movs	r1, #11
 8008552:	4249      	negs	r1, r1
 8008554:	468c      	mov	ip, r1
 8008556:	449c      	add	ip, r3
 8008558:	2b0b      	cmp	r3, #11
 800855a:	d010      	beq.n	800857e <__b2d+0x8e>
 800855c:	4661      	mov	r1, ip
 800855e:	2320      	movs	r3, #32
 8008560:	408c      	lsls	r4, r1
 8008562:	1a5b      	subs	r3, r3, r1
 8008564:	0039      	movs	r1, r7
 8008566:	40d9      	lsrs	r1, r3
 8008568:	430c      	orrs	r4, r1
 800856a:	4322      	orrs	r2, r4
 800856c:	0011      	movs	r1, r2
 800856e:	2200      	movs	r2, #0
 8008570:	42b5      	cmp	r5, r6
 8008572:	d901      	bls.n	8008578 <__b2d+0x88>
 8008574:	3d04      	subs	r5, #4
 8008576:	682a      	ldr	r2, [r5, #0]
 8008578:	4664      	mov	r4, ip
 800857a:	40a7      	lsls	r7, r4
 800857c:	e7dd      	b.n	800853a <__b2d+0x4a>
 800857e:	4322      	orrs	r2, r4
 8008580:	0011      	movs	r1, r2
 8008582:	e7dc      	b.n	800853e <__b2d+0x4e>
 8008584:	3ff00000 	.word	0x3ff00000

08008588 <__d2b>:
 8008588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800858a:	2101      	movs	r1, #1
 800858c:	0016      	movs	r6, r2
 800858e:	001f      	movs	r7, r3
 8008590:	f7ff fbfe 	bl	8007d90 <_Balloc>
 8008594:	1e04      	subs	r4, r0, #0
 8008596:	d105      	bne.n	80085a4 <__d2b+0x1c>
 8008598:	0022      	movs	r2, r4
 800859a:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <__d2b+0xa8>)
 800859c:	4825      	ldr	r0, [pc, #148]	@ (8008634 <__d2b+0xac>)
 800859e:	4926      	ldr	r1, [pc, #152]	@ (8008638 <__d2b+0xb0>)
 80085a0:	f001 f9b6 	bl	8009910 <__assert_func>
 80085a4:	033b      	lsls	r3, r7, #12
 80085a6:	007d      	lsls	r5, r7, #1
 80085a8:	0b1b      	lsrs	r3, r3, #12
 80085aa:	0d6d      	lsrs	r5, r5, #21
 80085ac:	d002      	beq.n	80085b4 <__d2b+0x2c>
 80085ae:	2280      	movs	r2, #128	@ 0x80
 80085b0:	0352      	lsls	r2, r2, #13
 80085b2:	4313      	orrs	r3, r2
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	2e00      	cmp	r6, #0
 80085b8:	d025      	beq.n	8008606 <__d2b+0x7e>
 80085ba:	4668      	mov	r0, sp
 80085bc:	9600      	str	r6, [sp, #0]
 80085be:	f7ff fd00 	bl	8007fc2 <__lo0bits>
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	9900      	ldr	r1, [sp, #0]
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d01b      	beq.n	8008602 <__d2b+0x7a>
 80085ca:	2220      	movs	r2, #32
 80085cc:	001e      	movs	r6, r3
 80085ce:	1a12      	subs	r2, r2, r0
 80085d0:	4096      	lsls	r6, r2
 80085d2:	0032      	movs	r2, r6
 80085d4:	40c3      	lsrs	r3, r0
 80085d6:	430a      	orrs	r2, r1
 80085d8:	6162      	str	r2, [r4, #20]
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	9e01      	ldr	r6, [sp, #4]
 80085de:	61a6      	str	r6, [r4, #24]
 80085e0:	1e73      	subs	r3, r6, #1
 80085e2:	419e      	sbcs	r6, r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	6126      	str	r6, [r4, #16]
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	d014      	beq.n	8008616 <__d2b+0x8e>
 80085ec:	2635      	movs	r6, #53	@ 0x35
 80085ee:	4b13      	ldr	r3, [pc, #76]	@ (800863c <__d2b+0xb4>)
 80085f0:	18ed      	adds	r5, r5, r3
 80085f2:	9b08      	ldr	r3, [sp, #32]
 80085f4:	182d      	adds	r5, r5, r0
 80085f6:	601d      	str	r5, [r3, #0]
 80085f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fa:	1a36      	subs	r6, r6, r0
 80085fc:	601e      	str	r6, [r3, #0]
 80085fe:	0020      	movs	r0, r4
 8008600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008602:	6161      	str	r1, [r4, #20]
 8008604:	e7ea      	b.n	80085dc <__d2b+0x54>
 8008606:	a801      	add	r0, sp, #4
 8008608:	f7ff fcdb 	bl	8007fc2 <__lo0bits>
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	2601      	movs	r6, #1
 8008610:	6163      	str	r3, [r4, #20]
 8008612:	3020      	adds	r0, #32
 8008614:	e7e7      	b.n	80085e6 <__d2b+0x5e>
 8008616:	4b0a      	ldr	r3, [pc, #40]	@ (8008640 <__d2b+0xb8>)
 8008618:	18c0      	adds	r0, r0, r3
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	6018      	str	r0, [r3, #0]
 800861e:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <__d2b+0xbc>)
 8008620:	18f3      	adds	r3, r6, r3
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	18e3      	adds	r3, r4, r3
 8008626:	6958      	ldr	r0, [r3, #20]
 8008628:	f7ff fcaa 	bl	8007f80 <__hi0bits>
 800862c:	0176      	lsls	r6, r6, #5
 800862e:	e7e3      	b.n	80085f8 <__d2b+0x70>
 8008630:	0800a885 	.word	0x0800a885
 8008634:	0800a896 	.word	0x0800a896
 8008638:	0000030f 	.word	0x0000030f
 800863c:	fffffbcd 	.word	0xfffffbcd
 8008640:	fffffbce 	.word	0xfffffbce
 8008644:	3fffffff 	.word	0x3fffffff

08008648 <__ratio>:
 8008648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864a:	b087      	sub	sp, #28
 800864c:	000f      	movs	r7, r1
 800864e:	a904      	add	r1, sp, #16
 8008650:	0006      	movs	r6, r0
 8008652:	f7ff ff4d 	bl	80084f0 <__b2d>
 8008656:	9000      	str	r0, [sp, #0]
 8008658:	9101      	str	r1, [sp, #4]
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	9c01      	ldr	r4, [sp, #4]
 800865e:	0038      	movs	r0, r7
 8008660:	a905      	add	r1, sp, #20
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	9403      	str	r4, [sp, #12]
 8008666:	f7ff ff43 	bl	80084f0 <__b2d>
 800866a:	000d      	movs	r5, r1
 800866c:	0002      	movs	r2, r0
 800866e:	000b      	movs	r3, r1
 8008670:	6930      	ldr	r0, [r6, #16]
 8008672:	6939      	ldr	r1, [r7, #16]
 8008674:	9e04      	ldr	r6, [sp, #16]
 8008676:	1a40      	subs	r0, r0, r1
 8008678:	9905      	ldr	r1, [sp, #20]
 800867a:	0140      	lsls	r0, r0, #5
 800867c:	1a71      	subs	r1, r6, r1
 800867e:	1841      	adds	r1, r0, r1
 8008680:	0508      	lsls	r0, r1, #20
 8008682:	2900      	cmp	r1, #0
 8008684:	dd08      	ble.n	8008698 <__ratio+0x50>
 8008686:	9901      	ldr	r1, [sp, #4]
 8008688:	1841      	adds	r1, r0, r1
 800868a:	9103      	str	r1, [sp, #12]
 800868c:	9802      	ldr	r0, [sp, #8]
 800868e:	9903      	ldr	r1, [sp, #12]
 8008690:	f7f8 fd76 	bl	8001180 <__aeabi_ddiv>
 8008694:	b007      	add	sp, #28
 8008696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008698:	1a2b      	subs	r3, r5, r0
 800869a:	e7f7      	b.n	800868c <__ratio+0x44>

0800869c <__copybits>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	0014      	movs	r4, r2
 80086a0:	0005      	movs	r5, r0
 80086a2:	3901      	subs	r1, #1
 80086a4:	6913      	ldr	r3, [r2, #16]
 80086a6:	1149      	asrs	r1, r1, #5
 80086a8:	3101      	adds	r1, #1
 80086aa:	0089      	lsls	r1, r1, #2
 80086ac:	3414      	adds	r4, #20
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	1841      	adds	r1, r0, r1
 80086b2:	18e3      	adds	r3, r4, r3
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d80d      	bhi.n	80086d4 <__copybits+0x38>
 80086b8:	0014      	movs	r4, r2
 80086ba:	3411      	adds	r4, #17
 80086bc:	2500      	movs	r5, #0
 80086be:	429c      	cmp	r4, r3
 80086c0:	d803      	bhi.n	80086ca <__copybits+0x2e>
 80086c2:	1a9b      	subs	r3, r3, r2
 80086c4:	3b11      	subs	r3, #17
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	009d      	lsls	r5, r3, #2
 80086ca:	2300      	movs	r3, #0
 80086cc:	1940      	adds	r0, r0, r5
 80086ce:	4281      	cmp	r1, r0
 80086d0:	d803      	bhi.n	80086da <__copybits+0x3e>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	cc40      	ldmia	r4!, {r6}
 80086d6:	c540      	stmia	r5!, {r6}
 80086d8:	e7ec      	b.n	80086b4 <__copybits+0x18>
 80086da:	c008      	stmia	r0!, {r3}
 80086dc:	e7f7      	b.n	80086ce <__copybits+0x32>

080086de <__any_on>:
 80086de:	0002      	movs	r2, r0
 80086e0:	6900      	ldr	r0, [r0, #16]
 80086e2:	b510      	push	{r4, lr}
 80086e4:	3214      	adds	r2, #20
 80086e6:	114b      	asrs	r3, r1, #5
 80086e8:	4298      	cmp	r0, r3
 80086ea:	db13      	blt.n	8008714 <__any_on+0x36>
 80086ec:	dd0c      	ble.n	8008708 <__any_on+0x2a>
 80086ee:	241f      	movs	r4, #31
 80086f0:	0008      	movs	r0, r1
 80086f2:	4020      	ands	r0, r4
 80086f4:	4221      	tst	r1, r4
 80086f6:	d007      	beq.n	8008708 <__any_on+0x2a>
 80086f8:	0099      	lsls	r1, r3, #2
 80086fa:	588c      	ldr	r4, [r1, r2]
 80086fc:	0021      	movs	r1, r4
 80086fe:	40c1      	lsrs	r1, r0
 8008700:	4081      	lsls	r1, r0
 8008702:	2001      	movs	r0, #1
 8008704:	428c      	cmp	r4, r1
 8008706:	d104      	bne.n	8008712 <__any_on+0x34>
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	18d3      	adds	r3, r2, r3
 800870c:	4293      	cmp	r3, r2
 800870e:	d803      	bhi.n	8008718 <__any_on+0x3a>
 8008710:	2000      	movs	r0, #0
 8008712:	bd10      	pop	{r4, pc}
 8008714:	0003      	movs	r3, r0
 8008716:	e7f7      	b.n	8008708 <__any_on+0x2a>
 8008718:	3b04      	subs	r3, #4
 800871a:	6819      	ldr	r1, [r3, #0]
 800871c:	2900      	cmp	r1, #0
 800871e:	d0f5      	beq.n	800870c <__any_on+0x2e>
 8008720:	2001      	movs	r0, #1
 8008722:	e7f6      	b.n	8008712 <__any_on+0x34>

08008724 <sulp>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	0016      	movs	r6, r2
 8008728:	000d      	movs	r5, r1
 800872a:	f7ff fec1 	bl	80084b0 <__ulp>
 800872e:	2e00      	cmp	r6, #0
 8008730:	d00d      	beq.n	800874e <sulp+0x2a>
 8008732:	236b      	movs	r3, #107	@ 0x6b
 8008734:	006a      	lsls	r2, r5, #1
 8008736:	0d52      	lsrs	r2, r2, #21
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	dd07      	ble.n	800874e <sulp+0x2a>
 800873e:	2400      	movs	r4, #0
 8008740:	4a03      	ldr	r2, [pc, #12]	@ (8008750 <sulp+0x2c>)
 8008742:	051b      	lsls	r3, r3, #20
 8008744:	189d      	adds	r5, r3, r2
 8008746:	002b      	movs	r3, r5
 8008748:	0022      	movs	r2, r4
 800874a:	f7f9 f95d 	bl	8001a08 <__aeabi_dmul>
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	3ff00000 	.word	0x3ff00000

08008754 <_strtod_l>:
 8008754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008756:	b0a3      	sub	sp, #140	@ 0x8c
 8008758:	921b      	str	r2, [sp, #108]	@ 0x6c
 800875a:	2200      	movs	r2, #0
 800875c:	2600      	movs	r6, #0
 800875e:	2700      	movs	r7, #0
 8008760:	9005      	str	r0, [sp, #20]
 8008762:	9109      	str	r1, [sp, #36]	@ 0x24
 8008764:	921e      	str	r2, [sp, #120]	@ 0x78
 8008766:	911d      	str	r1, [sp, #116]	@ 0x74
 8008768:	780a      	ldrb	r2, [r1, #0]
 800876a:	2a2b      	cmp	r2, #43	@ 0x2b
 800876c:	d053      	beq.n	8008816 <_strtod_l+0xc2>
 800876e:	d83f      	bhi.n	80087f0 <_strtod_l+0x9c>
 8008770:	2a0d      	cmp	r2, #13
 8008772:	d839      	bhi.n	80087e8 <_strtod_l+0x94>
 8008774:	2a08      	cmp	r2, #8
 8008776:	d839      	bhi.n	80087ec <_strtod_l+0x98>
 8008778:	2a00      	cmp	r2, #0
 800877a:	d042      	beq.n	8008802 <_strtod_l+0xae>
 800877c:	2200      	movs	r2, #0
 800877e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008780:	2100      	movs	r1, #0
 8008782:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008784:	910c      	str	r1, [sp, #48]	@ 0x30
 8008786:	782a      	ldrb	r2, [r5, #0]
 8008788:	2a30      	cmp	r2, #48	@ 0x30
 800878a:	d000      	beq.n	800878e <_strtod_l+0x3a>
 800878c:	e083      	b.n	8008896 <_strtod_l+0x142>
 800878e:	786a      	ldrb	r2, [r5, #1]
 8008790:	3120      	adds	r1, #32
 8008792:	438a      	bics	r2, r1
 8008794:	2a58      	cmp	r2, #88	@ 0x58
 8008796:	d000      	beq.n	800879a <_strtod_l+0x46>
 8008798:	e073      	b.n	8008882 <_strtod_l+0x12e>
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800879e:	4a95      	ldr	r2, [pc, #596]	@ (80089f4 <_strtod_l+0x2a0>)
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	ab1e      	add	r3, sp, #120	@ 0x78
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	9805      	ldr	r0, [sp, #20]
 80087a8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80087aa:	a91d      	add	r1, sp, #116	@ 0x74
 80087ac:	f001 f964 	bl	8009a78 <__gethex>
 80087b0:	230f      	movs	r3, #15
 80087b2:	0002      	movs	r2, r0
 80087b4:	401a      	ands	r2, r3
 80087b6:	0004      	movs	r4, r0
 80087b8:	9206      	str	r2, [sp, #24]
 80087ba:	4218      	tst	r0, r3
 80087bc:	d005      	beq.n	80087ca <_strtod_l+0x76>
 80087be:	2a06      	cmp	r2, #6
 80087c0:	d12b      	bne.n	800881a <_strtod_l+0xc6>
 80087c2:	2300      	movs	r3, #0
 80087c4:	3501      	adds	r5, #1
 80087c6:	951d      	str	r5, [sp, #116]	@ 0x74
 80087c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80087ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <_strtod_l+0x82>
 80087d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d019      	beq.n	8008810 <_strtod_l+0xbc>
 80087dc:	2380      	movs	r3, #128	@ 0x80
 80087de:	0030      	movs	r0, r6
 80087e0:	061b      	lsls	r3, r3, #24
 80087e2:	18f9      	adds	r1, r7, r3
 80087e4:	b023      	add	sp, #140	@ 0x8c
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e8:	2a20      	cmp	r2, #32
 80087ea:	d1c7      	bne.n	800877c <_strtod_l+0x28>
 80087ec:	3101      	adds	r1, #1
 80087ee:	e7ba      	b.n	8008766 <_strtod_l+0x12>
 80087f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80087f2:	d1c3      	bne.n	800877c <_strtod_l+0x28>
 80087f4:	3a2c      	subs	r2, #44	@ 0x2c
 80087f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80087f8:	1c4a      	adds	r2, r1, #1
 80087fa:	921d      	str	r2, [sp, #116]	@ 0x74
 80087fc:	784a      	ldrb	r2, [r1, #1]
 80087fe:	2a00      	cmp	r2, #0
 8008800:	d1be      	bne.n	8008780 <_strtod_l+0x2c>
 8008802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008804:	931d      	str	r3, [sp, #116]	@ 0x74
 8008806:	2300      	movs	r3, #0
 8008808:	9312      	str	r3, [sp, #72]	@ 0x48
 800880a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1df      	bne.n	80087d0 <_strtod_l+0x7c>
 8008810:	0030      	movs	r0, r6
 8008812:	0039      	movs	r1, r7
 8008814:	e7e6      	b.n	80087e4 <_strtod_l+0x90>
 8008816:	2200      	movs	r2, #0
 8008818:	e7ed      	b.n	80087f6 <_strtod_l+0xa2>
 800881a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800881c:	2a00      	cmp	r2, #0
 800881e:	d007      	beq.n	8008830 <_strtod_l+0xdc>
 8008820:	2135      	movs	r1, #53	@ 0x35
 8008822:	a820      	add	r0, sp, #128	@ 0x80
 8008824:	f7ff ff3a 	bl	800869c <__copybits>
 8008828:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	f7ff faf4 	bl	8007e18 <_Bfree>
 8008830:	9806      	ldr	r0, [sp, #24]
 8008832:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008834:	3801      	subs	r0, #1
 8008836:	2804      	cmp	r0, #4
 8008838:	d806      	bhi.n	8008848 <_strtod_l+0xf4>
 800883a:	f7f7 fc6d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800883e:	0312      	.short	0x0312
 8008840:	1e1c      	.short	0x1e1c
 8008842:	12          	.byte	0x12
 8008843:	00          	.byte	0x00
 8008844:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008846:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008848:	05e4      	lsls	r4, r4, #23
 800884a:	d502      	bpl.n	8008852 <_strtod_l+0xfe>
 800884c:	2380      	movs	r3, #128	@ 0x80
 800884e:	061b      	lsls	r3, r3, #24
 8008850:	431f      	orrs	r7, r3
 8008852:	4b69      	ldr	r3, [pc, #420]	@ (80089f8 <_strtod_l+0x2a4>)
 8008854:	423b      	tst	r3, r7
 8008856:	d1b8      	bne.n	80087ca <_strtod_l+0x76>
 8008858:	f7fe fad6 	bl	8006e08 <__errno>
 800885c:	2322      	movs	r3, #34	@ 0x22
 800885e:	6003      	str	r3, [r0, #0]
 8008860:	e7b3      	b.n	80087ca <_strtod_l+0x76>
 8008862:	4966      	ldr	r1, [pc, #408]	@ (80089fc <_strtod_l+0x2a8>)
 8008864:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008866:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008868:	400a      	ands	r2, r1
 800886a:	4965      	ldr	r1, [pc, #404]	@ (8008a00 <_strtod_l+0x2ac>)
 800886c:	185b      	adds	r3, r3, r1
 800886e:	051b      	lsls	r3, r3, #20
 8008870:	431a      	orrs	r2, r3
 8008872:	0017      	movs	r7, r2
 8008874:	e7e8      	b.n	8008848 <_strtod_l+0xf4>
 8008876:	4f60      	ldr	r7, [pc, #384]	@ (80089f8 <_strtod_l+0x2a4>)
 8008878:	e7e6      	b.n	8008848 <_strtod_l+0xf4>
 800887a:	2601      	movs	r6, #1
 800887c:	4f61      	ldr	r7, [pc, #388]	@ (8008a04 <_strtod_l+0x2b0>)
 800887e:	4276      	negs	r6, r6
 8008880:	e7e2      	b.n	8008848 <_strtod_l+0xf4>
 8008882:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	921d      	str	r2, [sp, #116]	@ 0x74
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b30      	cmp	r3, #48	@ 0x30
 800888c:	d0f9      	beq.n	8008882 <_strtod_l+0x12e>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d09b      	beq.n	80087ca <_strtod_l+0x76>
 8008892:	2301      	movs	r3, #1
 8008894:	930c      	str	r3, [sp, #48]	@ 0x30
 8008896:	2500      	movs	r5, #0
 8008898:	220a      	movs	r2, #10
 800889a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800889c:	950d      	str	r5, [sp, #52]	@ 0x34
 800889e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a0:	9508      	str	r5, [sp, #32]
 80088a2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80088a4:	7804      	ldrb	r4, [r0, #0]
 80088a6:	0023      	movs	r3, r4
 80088a8:	3b30      	subs	r3, #48	@ 0x30
 80088aa:	b2d9      	uxtb	r1, r3
 80088ac:	2909      	cmp	r1, #9
 80088ae:	d927      	bls.n	8008900 <_strtod_l+0x1ac>
 80088b0:	2201      	movs	r2, #1
 80088b2:	4955      	ldr	r1, [pc, #340]	@ (8008a08 <_strtod_l+0x2b4>)
 80088b4:	f000 fff8 	bl	80098a8 <strncmp>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d031      	beq.n	8008920 <_strtod_l+0x1cc>
 80088bc:	2000      	movs	r0, #0
 80088be:	0023      	movs	r3, r4
 80088c0:	4684      	mov	ip, r0
 80088c2:	9a08      	ldr	r2, [sp, #32]
 80088c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80088c6:	9206      	str	r2, [sp, #24]
 80088c8:	2220      	movs	r2, #32
 80088ca:	0019      	movs	r1, r3
 80088cc:	4391      	bics	r1, r2
 80088ce:	000a      	movs	r2, r1
 80088d0:	2100      	movs	r1, #0
 80088d2:	9107      	str	r1, [sp, #28]
 80088d4:	2a45      	cmp	r2, #69	@ 0x45
 80088d6:	d000      	beq.n	80088da <_strtod_l+0x186>
 80088d8:	e0c0      	b.n	8008a5c <_strtod_l+0x308>
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088de:	4303      	orrs	r3, r0
 80088e0:	4313      	orrs	r3, r2
 80088e2:	428b      	cmp	r3, r1
 80088e4:	d08d      	beq.n	8008802 <_strtod_l+0xae>
 80088e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ea:	3301      	adds	r3, #1
 80088ec:	931d      	str	r3, [sp, #116]	@ 0x74
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80088f4:	d070      	beq.n	80089d8 <_strtod_l+0x284>
 80088f6:	000c      	movs	r4, r1
 80088f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80088fa:	d173      	bne.n	80089e4 <_strtod_l+0x290>
 80088fc:	2401      	movs	r4, #1
 80088fe:	e06c      	b.n	80089da <_strtod_l+0x286>
 8008900:	9908      	ldr	r1, [sp, #32]
 8008902:	2908      	cmp	r1, #8
 8008904:	dc09      	bgt.n	800891a <_strtod_l+0x1c6>
 8008906:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008908:	4351      	muls	r1, r2
 800890a:	185b      	adds	r3, r3, r1
 800890c:	930d      	str	r3, [sp, #52]	@ 0x34
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	3001      	adds	r0, #1
 8008912:	3301      	adds	r3, #1
 8008914:	9308      	str	r3, [sp, #32]
 8008916:	901d      	str	r0, [sp, #116]	@ 0x74
 8008918:	e7c3      	b.n	80088a2 <_strtod_l+0x14e>
 800891a:	4355      	muls	r5, r2
 800891c:	195d      	adds	r5, r3, r5
 800891e:	e7f6      	b.n	800890e <_strtod_l+0x1ba>
 8008920:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008922:	1c5a      	adds	r2, r3, #1
 8008924:	921d      	str	r2, [sp, #116]	@ 0x74
 8008926:	9a08      	ldr	r2, [sp, #32]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2a00      	cmp	r2, #0
 800892c:	d03a      	beq.n	80089a4 <_strtod_l+0x250>
 800892e:	900e      	str	r0, [sp, #56]	@ 0x38
 8008930:	9206      	str	r2, [sp, #24]
 8008932:	001a      	movs	r2, r3
 8008934:	3a30      	subs	r2, #48	@ 0x30
 8008936:	2a09      	cmp	r2, #9
 8008938:	d912      	bls.n	8008960 <_strtod_l+0x20c>
 800893a:	2201      	movs	r2, #1
 800893c:	4694      	mov	ip, r2
 800893e:	e7c3      	b.n	80088c8 <_strtod_l+0x174>
 8008940:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008942:	3001      	adds	r0, #1
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	921d      	str	r2, [sp, #116]	@ 0x74
 8008948:	785b      	ldrb	r3, [r3, #1]
 800894a:	2b30      	cmp	r3, #48	@ 0x30
 800894c:	d0f8      	beq.n	8008940 <_strtod_l+0x1ec>
 800894e:	001a      	movs	r2, r3
 8008950:	3a31      	subs	r2, #49	@ 0x31
 8008952:	2a08      	cmp	r2, #8
 8008954:	d83b      	bhi.n	80089ce <_strtod_l+0x27a>
 8008956:	900e      	str	r0, [sp, #56]	@ 0x38
 8008958:	2000      	movs	r0, #0
 800895a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800895c:	9006      	str	r0, [sp, #24]
 800895e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008960:	001a      	movs	r2, r3
 8008962:	1c41      	adds	r1, r0, #1
 8008964:	3a30      	subs	r2, #48	@ 0x30
 8008966:	2b30      	cmp	r3, #48	@ 0x30
 8008968:	d016      	beq.n	8008998 <_strtod_l+0x244>
 800896a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800896c:	185b      	adds	r3, r3, r1
 800896e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	210a      	movs	r1, #10
 8008974:	469c      	mov	ip, r3
 8008976:	4484      	add	ip, r0
 8008978:	459c      	cmp	ip, r3
 800897a:	d115      	bne.n	80089a8 <_strtod_l+0x254>
 800897c:	9906      	ldr	r1, [sp, #24]
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	3101      	adds	r1, #1
 8008982:	1809      	adds	r1, r1, r0
 8008984:	181b      	adds	r3, r3, r0
 8008986:	9106      	str	r1, [sp, #24]
 8008988:	2b08      	cmp	r3, #8
 800898a:	dc19      	bgt.n	80089c0 <_strtod_l+0x26c>
 800898c:	230a      	movs	r3, #10
 800898e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008990:	434b      	muls	r3, r1
 8008992:	2100      	movs	r1, #0
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	930d      	str	r3, [sp, #52]	@ 0x34
 8008998:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800899a:	0008      	movs	r0, r1
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	921d      	str	r2, [sp, #116]	@ 0x74
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	e7c6      	b.n	8008932 <_strtod_l+0x1de>
 80089a4:	9808      	ldr	r0, [sp, #32]
 80089a6:	e7d0      	b.n	800894a <_strtod_l+0x1f6>
 80089a8:	1c5c      	adds	r4, r3, #1
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	dc04      	bgt.n	80089b8 <_strtod_l+0x264>
 80089ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089b0:	434b      	muls	r3, r1
 80089b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80089b4:	0023      	movs	r3, r4
 80089b6:	e7df      	b.n	8008978 <_strtod_l+0x224>
 80089b8:	2c10      	cmp	r4, #16
 80089ba:	dcfb      	bgt.n	80089b4 <_strtod_l+0x260>
 80089bc:	434d      	muls	r5, r1
 80089be:	e7f9      	b.n	80089b4 <_strtod_l+0x260>
 80089c0:	2100      	movs	r1, #0
 80089c2:	2b0f      	cmp	r3, #15
 80089c4:	dce8      	bgt.n	8008998 <_strtod_l+0x244>
 80089c6:	230a      	movs	r3, #10
 80089c8:	435d      	muls	r5, r3
 80089ca:	1955      	adds	r5, r2, r5
 80089cc:	e7e4      	b.n	8008998 <_strtod_l+0x244>
 80089ce:	2200      	movs	r2, #0
 80089d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80089d2:	9206      	str	r2, [sp, #24]
 80089d4:	3201      	adds	r2, #1
 80089d6:	e7b1      	b.n	800893c <_strtod_l+0x1e8>
 80089d8:	2400      	movs	r4, #0
 80089da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089dc:	3302      	adds	r3, #2
 80089de:	931d      	str	r3, [sp, #116]	@ 0x74
 80089e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e2:	789b      	ldrb	r3, [r3, #2]
 80089e4:	001a      	movs	r2, r3
 80089e6:	3a30      	subs	r2, #48	@ 0x30
 80089e8:	2a09      	cmp	r2, #9
 80089ea:	d913      	bls.n	8008a14 <_strtod_l+0x2c0>
 80089ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80089f0:	2200      	movs	r2, #0
 80089f2:	e032      	b.n	8008a5a <_strtod_l+0x306>
 80089f4:	0800aa08 	.word	0x0800aa08
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	ffefffff 	.word	0xffefffff
 8008a00:	00000433 	.word	0x00000433
 8008a04:	7fffffff 	.word	0x7fffffff
 8008a08:	0800a9f0 	.word	0x0800a9f0
 8008a0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	921d      	str	r2, [sp, #116]	@ 0x74
 8008a12:	785b      	ldrb	r3, [r3, #1]
 8008a14:	2b30      	cmp	r3, #48	@ 0x30
 8008a16:	d0f9      	beq.n	8008a0c <_strtod_l+0x2b8>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	9207      	str	r2, [sp, #28]
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	3a31      	subs	r2, #49	@ 0x31
 8008a20:	2a08      	cmp	r2, #8
 8008a22:	d81b      	bhi.n	8008a5c <_strtod_l+0x308>
 8008a24:	3b30      	subs	r3, #48	@ 0x30
 8008a26:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a2a:	9307      	str	r3, [sp, #28]
 8008a2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a2e:	1c59      	adds	r1, r3, #1
 8008a30:	911d      	str	r1, [sp, #116]	@ 0x74
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	001a      	movs	r2, r3
 8008a36:	3a30      	subs	r2, #48	@ 0x30
 8008a38:	2a09      	cmp	r2, #9
 8008a3a:	d93a      	bls.n	8008ab2 <_strtod_l+0x35e>
 8008a3c:	9a07      	ldr	r2, [sp, #28]
 8008a3e:	1a8a      	subs	r2, r1, r2
 8008a40:	49b4      	ldr	r1, [pc, #720]	@ (8008d14 <_strtod_l+0x5c0>)
 8008a42:	9107      	str	r1, [sp, #28]
 8008a44:	2a08      	cmp	r2, #8
 8008a46:	dc04      	bgt.n	8008a52 <_strtod_l+0x2fe>
 8008a48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008a4a:	9207      	str	r2, [sp, #28]
 8008a4c:	428a      	cmp	r2, r1
 8008a4e:	dd00      	ble.n	8008a52 <_strtod_l+0x2fe>
 8008a50:	9107      	str	r1, [sp, #28]
 8008a52:	2c00      	cmp	r4, #0
 8008a54:	d002      	beq.n	8008a5c <_strtod_l+0x308>
 8008a56:	9a07      	ldr	r2, [sp, #28]
 8008a58:	4252      	negs	r2, r2
 8008a5a:	9207      	str	r2, [sp, #28]
 8008a5c:	9a06      	ldr	r2, [sp, #24]
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	d14d      	bne.n	8008afe <_strtod_l+0x3aa>
 8008a62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a64:	4310      	orrs	r0, r2
 8008a66:	d000      	beq.n	8008a6a <_strtod_l+0x316>
 8008a68:	e6af      	b.n	80087ca <_strtod_l+0x76>
 8008a6a:	4662      	mov	r2, ip
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	d000      	beq.n	8008a72 <_strtod_l+0x31e>
 8008a70:	e6c7      	b.n	8008802 <_strtod_l+0xae>
 8008a72:	2b69      	cmp	r3, #105	@ 0x69
 8008a74:	d027      	beq.n	8008ac6 <_strtod_l+0x372>
 8008a76:	dc23      	bgt.n	8008ac0 <_strtod_l+0x36c>
 8008a78:	2b49      	cmp	r3, #73	@ 0x49
 8008a7a:	d024      	beq.n	8008ac6 <_strtod_l+0x372>
 8008a7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a7e:	d000      	beq.n	8008a82 <_strtod_l+0x32e>
 8008a80:	e6bf      	b.n	8008802 <_strtod_l+0xae>
 8008a82:	49a5      	ldr	r1, [pc, #660]	@ (8008d18 <_strtod_l+0x5c4>)
 8008a84:	a81d      	add	r0, sp, #116	@ 0x74
 8008a86:	f001 fa2d 	bl	8009ee4 <__match>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d100      	bne.n	8008a90 <_strtod_l+0x33c>
 8008a8e:	e6b8      	b.n	8008802 <_strtod_l+0xae>
 8008a90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b28      	cmp	r3, #40	@ 0x28
 8008a96:	d12c      	bne.n	8008af2 <_strtod_l+0x39e>
 8008a98:	49a0      	ldr	r1, [pc, #640]	@ (8008d1c <_strtod_l+0x5c8>)
 8008a9a:	aa20      	add	r2, sp, #128	@ 0x80
 8008a9c:	a81d      	add	r0, sp, #116	@ 0x74
 8008a9e:	f001 fa35 	bl	8009f0c <__hexnan>
 8008aa2:	2805      	cmp	r0, #5
 8008aa4:	d125      	bne.n	8008af2 <_strtod_l+0x39e>
 8008aa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008aa8:	4a9d      	ldr	r2, [pc, #628]	@ (8008d20 <_strtod_l+0x5cc>)
 8008aaa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008aac:	431a      	orrs	r2, r3
 8008aae:	0017      	movs	r7, r2
 8008ab0:	e68b      	b.n	80087ca <_strtod_l+0x76>
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008ab6:	434a      	muls	r2, r1
 8008ab8:	18d2      	adds	r2, r2, r3
 8008aba:	3a30      	subs	r2, #48	@ 0x30
 8008abc:	9210      	str	r2, [sp, #64]	@ 0x40
 8008abe:	e7b5      	b.n	8008a2c <_strtod_l+0x2d8>
 8008ac0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ac2:	d0de      	beq.n	8008a82 <_strtod_l+0x32e>
 8008ac4:	e69d      	b.n	8008802 <_strtod_l+0xae>
 8008ac6:	4997      	ldr	r1, [pc, #604]	@ (8008d24 <_strtod_l+0x5d0>)
 8008ac8:	a81d      	add	r0, sp, #116	@ 0x74
 8008aca:	f001 fa0b 	bl	8009ee4 <__match>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d100      	bne.n	8008ad4 <_strtod_l+0x380>
 8008ad2:	e696      	b.n	8008802 <_strtod_l+0xae>
 8008ad4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ad6:	4994      	ldr	r1, [pc, #592]	@ (8008d28 <_strtod_l+0x5d4>)
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	a81d      	add	r0, sp, #116	@ 0x74
 8008adc:	931d      	str	r3, [sp, #116]	@ 0x74
 8008ade:	f001 fa01 	bl	8009ee4 <__match>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d102      	bne.n	8008aec <_strtod_l+0x398>
 8008ae6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ae8:	3301      	adds	r3, #1
 8008aea:	931d      	str	r3, [sp, #116]	@ 0x74
 8008aec:	2600      	movs	r6, #0
 8008aee:	4f8c      	ldr	r7, [pc, #560]	@ (8008d20 <_strtod_l+0x5cc>)
 8008af0:	e66b      	b.n	80087ca <_strtod_l+0x76>
 8008af2:	488e      	ldr	r0, [pc, #568]	@ (8008d2c <_strtod_l+0x5d8>)
 8008af4:	f000 ff06 	bl	8009904 <nan>
 8008af8:	0006      	movs	r6, r0
 8008afa:	000f      	movs	r7, r1
 8008afc:	e665      	b.n	80087ca <_strtod_l+0x76>
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b06:	9b08      	ldr	r3, [sp, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <_strtod_l+0x3bc>
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	9308      	str	r3, [sp, #32]
 8008b10:	9c06      	ldr	r4, [sp, #24]
 8008b12:	2c10      	cmp	r4, #16
 8008b14:	dd00      	ble.n	8008b18 <_strtod_l+0x3c4>
 8008b16:	2410      	movs	r4, #16
 8008b18:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008b1a:	f7f9 fe65 	bl	80027e8 <__aeabi_ui2d>
 8008b1e:	9b06      	ldr	r3, [sp, #24]
 8008b20:	0006      	movs	r6, r0
 8008b22:	000f      	movs	r7, r1
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	dc13      	bgt.n	8008b50 <_strtod_l+0x3fc>
 8008b28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d100      	bne.n	8008b30 <_strtod_l+0x3dc>
 8008b2e:	e64c      	b.n	80087ca <_strtod_l+0x76>
 8008b30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc00      	bgt.n	8008b38 <_strtod_l+0x3e4>
 8008b36:	e07e      	b.n	8008c36 <_strtod_l+0x4e2>
 8008b38:	2b16      	cmp	r3, #22
 8008b3a:	dc63      	bgt.n	8008c04 <_strtod_l+0x4b0>
 8008b3c:	497c      	ldr	r1, [pc, #496]	@ (8008d30 <_strtod_l+0x5dc>)
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	18c9      	adds	r1, r1, r3
 8008b42:	0032      	movs	r2, r6
 8008b44:	6808      	ldr	r0, [r1, #0]
 8008b46:	6849      	ldr	r1, [r1, #4]
 8008b48:	003b      	movs	r3, r7
 8008b4a:	f7f8 ff5d 	bl	8001a08 <__aeabi_dmul>
 8008b4e:	e7d3      	b.n	8008af8 <_strtod_l+0x3a4>
 8008b50:	0022      	movs	r2, r4
 8008b52:	4b77      	ldr	r3, [pc, #476]	@ (8008d30 <_strtod_l+0x5dc>)
 8008b54:	3a09      	subs	r2, #9
 8008b56:	00d2      	lsls	r2, r2, #3
 8008b58:	189b      	adds	r3, r3, r2
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f7f8 ff53 	bl	8001a08 <__aeabi_dmul>
 8008b62:	0006      	movs	r6, r0
 8008b64:	0028      	movs	r0, r5
 8008b66:	000f      	movs	r7, r1
 8008b68:	f7f9 fe3e 	bl	80027e8 <__aeabi_ui2d>
 8008b6c:	000b      	movs	r3, r1
 8008b6e:	0002      	movs	r2, r0
 8008b70:	0039      	movs	r1, r7
 8008b72:	0030      	movs	r0, r6
 8008b74:	f7f7 ffa0 	bl	8000ab8 <__aeabi_dadd>
 8008b78:	9b06      	ldr	r3, [sp, #24]
 8008b7a:	0006      	movs	r6, r0
 8008b7c:	000f      	movs	r7, r1
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	ddd2      	ble.n	8008b28 <_strtod_l+0x3d4>
 8008b82:	9b06      	ldr	r3, [sp, #24]
 8008b84:	1b1c      	subs	r4, r3, r4
 8008b86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b88:	18e4      	adds	r4, r4, r3
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	dc00      	bgt.n	8008b90 <_strtod_l+0x43c>
 8008b8e:	e09b      	b.n	8008cc8 <_strtod_l+0x574>
 8008b90:	220f      	movs	r2, #15
 8008b92:	0023      	movs	r3, r4
 8008b94:	4013      	ands	r3, r2
 8008b96:	4214      	tst	r4, r2
 8008b98:	d00a      	beq.n	8008bb0 <_strtod_l+0x45c>
 8008b9a:	4965      	ldr	r1, [pc, #404]	@ (8008d30 <_strtod_l+0x5dc>)
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	18c9      	adds	r1, r1, r3
 8008ba0:	0032      	movs	r2, r6
 8008ba2:	6808      	ldr	r0, [r1, #0]
 8008ba4:	6849      	ldr	r1, [r1, #4]
 8008ba6:	003b      	movs	r3, r7
 8008ba8:	f7f8 ff2e 	bl	8001a08 <__aeabi_dmul>
 8008bac:	0006      	movs	r6, r0
 8008bae:	000f      	movs	r7, r1
 8008bb0:	230f      	movs	r3, #15
 8008bb2:	439c      	bics	r4, r3
 8008bb4:	d073      	beq.n	8008c9e <_strtod_l+0x54a>
 8008bb6:	3326      	adds	r3, #38	@ 0x26
 8008bb8:	33ff      	adds	r3, #255	@ 0xff
 8008bba:	429c      	cmp	r4, r3
 8008bbc:	dd4b      	ble.n	8008c56 <_strtod_l+0x502>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9306      	str	r3, [sp, #24]
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	2322      	movs	r3, #34	@ 0x22
 8008bca:	2600      	movs	r6, #0
 8008bcc:	9a05      	ldr	r2, [sp, #20]
 8008bce:	4f54      	ldr	r7, [pc, #336]	@ (8008d20 <_strtod_l+0x5cc>)
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bd4:	42b3      	cmp	r3, r6
 8008bd6:	d100      	bne.n	8008bda <_strtod_l+0x486>
 8008bd8:	e5f7      	b.n	80087ca <_strtod_l+0x76>
 8008bda:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008bdc:	9805      	ldr	r0, [sp, #20]
 8008bde:	f7ff f91b 	bl	8007e18 <_Bfree>
 8008be2:	9908      	ldr	r1, [sp, #32]
 8008be4:	9805      	ldr	r0, [sp, #20]
 8008be6:	f7ff f917 	bl	8007e18 <_Bfree>
 8008bea:	9907      	ldr	r1, [sp, #28]
 8008bec:	9805      	ldr	r0, [sp, #20]
 8008bee:	f7ff f913 	bl	8007e18 <_Bfree>
 8008bf2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008bf4:	9805      	ldr	r0, [sp, #20]
 8008bf6:	f7ff f90f 	bl	8007e18 <_Bfree>
 8008bfa:	9906      	ldr	r1, [sp, #24]
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	f7ff f90b 	bl	8007e18 <_Bfree>
 8008c02:	e5e2      	b.n	80087ca <_strtod_l+0x76>
 8008c04:	2325      	movs	r3, #37	@ 0x25
 8008c06:	9a06      	ldr	r2, [sp, #24]
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	dbb8      	blt.n	8008b82 <_strtod_l+0x42e>
 8008c10:	240f      	movs	r4, #15
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	4d46      	ldr	r5, [pc, #280]	@ (8008d30 <_strtod_l+0x5dc>)
 8008c16:	1ae4      	subs	r4, r4, r3
 8008c18:	00e1      	lsls	r1, r4, #3
 8008c1a:	1869      	adds	r1, r5, r1
 8008c1c:	0032      	movs	r2, r6
 8008c1e:	6808      	ldr	r0, [r1, #0]
 8008c20:	6849      	ldr	r1, [r1, #4]
 8008c22:	003b      	movs	r3, r7
 8008c24:	f7f8 fef0 	bl	8001a08 <__aeabi_dmul>
 8008c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c2a:	1b1c      	subs	r4, r3, r4
 8008c2c:	00e4      	lsls	r4, r4, #3
 8008c2e:	192d      	adds	r5, r5, r4
 8008c30:	682a      	ldr	r2, [r5, #0]
 8008c32:	686b      	ldr	r3, [r5, #4]
 8008c34:	e789      	b.n	8008b4a <_strtod_l+0x3f6>
 8008c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c38:	3316      	adds	r3, #22
 8008c3a:	dba2      	blt.n	8008b82 <_strtod_l+0x42e>
 8008c3c:	9907      	ldr	r1, [sp, #28]
 8008c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c40:	4b3b      	ldr	r3, [pc, #236]	@ (8008d30 <_strtod_l+0x5dc>)
 8008c42:	1a52      	subs	r2, r2, r1
 8008c44:	00d2      	lsls	r2, r2, #3
 8008c46:	189b      	adds	r3, r3, r2
 8008c48:	0030      	movs	r0, r6
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	0039      	movs	r1, r7
 8008c50:	f7f8 fa96 	bl	8001180 <__aeabi_ddiv>
 8008c54:	e750      	b.n	8008af8 <_strtod_l+0x3a4>
 8008c56:	2300      	movs	r3, #0
 8008c58:	0030      	movs	r0, r6
 8008c5a:	0039      	movs	r1, r7
 8008c5c:	4d35      	ldr	r5, [pc, #212]	@ (8008d34 <_strtod_l+0x5e0>)
 8008c5e:	1124      	asrs	r4, r4, #4
 8008c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c62:	2c01      	cmp	r4, #1
 8008c64:	dc1e      	bgt.n	8008ca4 <_strtod_l+0x550>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <_strtod_l+0x51a>
 8008c6a:	0006      	movs	r6, r0
 8008c6c:	000f      	movs	r7, r1
 8008c6e:	4b32      	ldr	r3, [pc, #200]	@ (8008d38 <_strtod_l+0x5e4>)
 8008c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c72:	18ff      	adds	r7, r7, r3
 8008c74:	4b2f      	ldr	r3, [pc, #188]	@ (8008d34 <_strtod_l+0x5e0>)
 8008c76:	00d5      	lsls	r5, r2, #3
 8008c78:	195d      	adds	r5, r3, r5
 8008c7a:	0032      	movs	r2, r6
 8008c7c:	6828      	ldr	r0, [r5, #0]
 8008c7e:	6869      	ldr	r1, [r5, #4]
 8008c80:	003b      	movs	r3, r7
 8008c82:	f7f8 fec1 	bl	8001a08 <__aeabi_dmul>
 8008c86:	4b26      	ldr	r3, [pc, #152]	@ (8008d20 <_strtod_l+0x5cc>)
 8008c88:	4a2c      	ldr	r2, [pc, #176]	@ (8008d3c <_strtod_l+0x5e8>)
 8008c8a:	0006      	movs	r6, r0
 8008c8c:	400b      	ands	r3, r1
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d895      	bhi.n	8008bbe <_strtod_l+0x46a>
 8008c92:	4a2b      	ldr	r2, [pc, #172]	@ (8008d40 <_strtod_l+0x5ec>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d913      	bls.n	8008cc0 <_strtod_l+0x56c>
 8008c98:	2601      	movs	r6, #1
 8008c9a:	4f2a      	ldr	r7, [pc, #168]	@ (8008d44 <_strtod_l+0x5f0>)
 8008c9c:	4276      	negs	r6, r6
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca2:	e086      	b.n	8008db2 <_strtod_l+0x65e>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	4214      	tst	r4, r2
 8008ca8:	d004      	beq.n	8008cb4 <_strtod_l+0x560>
 8008caa:	682a      	ldr	r2, [r5, #0]
 8008cac:	686b      	ldr	r3, [r5, #4]
 8008cae:	f7f8 feab 	bl	8001a08 <__aeabi_dmul>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cb6:	1064      	asrs	r4, r4, #1
 8008cb8:	3201      	adds	r2, #1
 8008cba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cbc:	3508      	adds	r5, #8
 8008cbe:	e7d0      	b.n	8008c62 <_strtod_l+0x50e>
 8008cc0:	23d4      	movs	r3, #212	@ 0xd4
 8008cc2:	049b      	lsls	r3, r3, #18
 8008cc4:	18cf      	adds	r7, r1, r3
 8008cc6:	e7ea      	b.n	8008c9e <_strtod_l+0x54a>
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	d0e8      	beq.n	8008c9e <_strtod_l+0x54a>
 8008ccc:	4264      	negs	r4, r4
 8008cce:	230f      	movs	r3, #15
 8008cd0:	0022      	movs	r2, r4
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	421c      	tst	r4, r3
 8008cd6:	d00a      	beq.n	8008cee <_strtod_l+0x59a>
 8008cd8:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <_strtod_l+0x5dc>)
 8008cda:	00d2      	lsls	r2, r2, #3
 8008cdc:	189b      	adds	r3, r3, r2
 8008cde:	0030      	movs	r0, r6
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	0039      	movs	r1, r7
 8008ce6:	f7f8 fa4b 	bl	8001180 <__aeabi_ddiv>
 8008cea:	0006      	movs	r6, r0
 8008cec:	000f      	movs	r7, r1
 8008cee:	1124      	asrs	r4, r4, #4
 8008cf0:	d0d5      	beq.n	8008c9e <_strtod_l+0x54a>
 8008cf2:	2c1f      	cmp	r4, #31
 8008cf4:	dd28      	ble.n	8008d48 <_strtod_l+0x5f4>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9306      	str	r3, [sp, #24]
 8008cfa:	9307      	str	r3, [sp, #28]
 8008cfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cfe:	9308      	str	r3, [sp, #32]
 8008d00:	2322      	movs	r3, #34	@ 0x22
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	2600      	movs	r6, #0
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d0a:	2700      	movs	r7, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d000      	beq.n	8008d12 <_strtod_l+0x5be>
 8008d10:	e763      	b.n	8008bda <_strtod_l+0x486>
 8008d12:	e55a      	b.n	80087ca <_strtod_l+0x76>
 8008d14:	00004e1f 	.word	0x00004e1f
 8008d18:	0800a7dd 	.word	0x0800a7dd
 8008d1c:	0800a9f4 	.word	0x0800a9f4
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	0800a7d5 	.word	0x0800a7d5
 8008d28:	0800a80c 	.word	0x0800a80c
 8008d2c:	0800ab9d 	.word	0x0800ab9d
 8008d30:	0800a928 	.word	0x0800a928
 8008d34:	0800a900 	.word	0x0800a900
 8008d38:	fcb00000 	.word	0xfcb00000
 8008d3c:	7ca00000 	.word	0x7ca00000
 8008d40:	7c900000 	.word	0x7c900000
 8008d44:	7fefffff 	.word	0x7fefffff
 8008d48:	2310      	movs	r3, #16
 8008d4a:	0022      	movs	r2, r4
 8008d4c:	401a      	ands	r2, r3
 8008d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d50:	421c      	tst	r4, r3
 8008d52:	d001      	beq.n	8008d58 <_strtod_l+0x604>
 8008d54:	335a      	adds	r3, #90	@ 0x5a
 8008d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d58:	0030      	movs	r0, r6
 8008d5a:	0039      	movs	r1, r7
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4dbf      	ldr	r5, [pc, #764]	@ (800905c <_strtod_l+0x908>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	4214      	tst	r4, r2
 8008d64:	d004      	beq.n	8008d70 <_strtod_l+0x61c>
 8008d66:	682a      	ldr	r2, [r5, #0]
 8008d68:	686b      	ldr	r3, [r5, #4]
 8008d6a:	f7f8 fe4d 	bl	8001a08 <__aeabi_dmul>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	1064      	asrs	r4, r4, #1
 8008d72:	3508      	adds	r5, #8
 8008d74:	2c00      	cmp	r4, #0
 8008d76:	d1f3      	bne.n	8008d60 <_strtod_l+0x60c>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <_strtod_l+0x62c>
 8008d7c:	0006      	movs	r6, r0
 8008d7e:	000f      	movs	r7, r1
 8008d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00d      	beq.n	8008da2 <_strtod_l+0x64e>
 8008d86:	236b      	movs	r3, #107	@ 0x6b
 8008d88:	007a      	lsls	r2, r7, #1
 8008d8a:	0d52      	lsrs	r2, r2, #21
 8008d8c:	0039      	movs	r1, r7
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd06      	ble.n	8008da2 <_strtod_l+0x64e>
 8008d94:	2b1f      	cmp	r3, #31
 8008d96:	dd5a      	ble.n	8008e4e <_strtod_l+0x6fa>
 8008d98:	2600      	movs	r6, #0
 8008d9a:	2b34      	cmp	r3, #52	@ 0x34
 8008d9c:	dd50      	ble.n	8008e40 <_strtod_l+0x6ec>
 8008d9e:	27dc      	movs	r7, #220	@ 0xdc
 8008da0:	04bf      	lsls	r7, r7, #18
 8008da2:	2200      	movs	r2, #0
 8008da4:	2300      	movs	r3, #0
 8008da6:	0030      	movs	r0, r6
 8008da8:	0039      	movs	r1, r7
 8008daa:	f7f7 fb4f 	bl	800044c <__aeabi_dcmpeq>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d1a1      	bne.n	8008cf6 <_strtod_l+0x5a2>
 8008db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008db4:	9a08      	ldr	r2, [sp, #32]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008dba:	9b06      	ldr	r3, [sp, #24]
 8008dbc:	9805      	ldr	r0, [sp, #20]
 8008dbe:	f7ff f893 	bl	8007ee8 <__s2b>
 8008dc2:	900d      	str	r0, [sp, #52]	@ 0x34
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d100      	bne.n	8008dca <_strtod_l+0x676>
 8008dc8:	e6f9      	b.n	8008bbe <_strtod_l+0x46a>
 8008dca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dcc:	9907      	ldr	r1, [sp, #28]
 8008dce:	17da      	asrs	r2, r3, #31
 8008dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd2:	1a5b      	subs	r3, r3, r1
 8008dd4:	401a      	ands	r2, r3
 8008dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008dda:	43db      	mvns	r3, r3
 8008ddc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008dde:	17db      	asrs	r3, r3, #31
 8008de0:	401a      	ands	r2, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008de6:	9306      	str	r3, [sp, #24]
 8008de8:	9307      	str	r3, [sp, #28]
 8008dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	6859      	ldr	r1, [r3, #4]
 8008df0:	f7fe ffce 	bl	8007d90 <_Balloc>
 8008df4:	9008      	str	r0, [sp, #32]
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d100      	bne.n	8008dfc <_strtod_l+0x6a8>
 8008dfa:	e6e5      	b.n	8008bc8 <_strtod_l+0x474>
 8008dfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dfe:	300c      	adds	r0, #12
 8008e00:	0019      	movs	r1, r3
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	310c      	adds	r1, #12
 8008e06:	3202      	adds	r2, #2
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	f000 fd71 	bl	80098f0 <memcpy>
 8008e0e:	ab20      	add	r3, sp, #128	@ 0x80
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	0032      	movs	r2, r6
 8008e18:	003b      	movs	r3, r7
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	9610      	str	r6, [sp, #64]	@ 0x40
 8008e1e:	9711      	str	r7, [sp, #68]	@ 0x44
 8008e20:	f7ff fbb2 	bl	8008588 <__d2b>
 8008e24:	901e      	str	r0, [sp, #120]	@ 0x78
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d100      	bne.n	8008e2c <_strtod_l+0x6d8>
 8008e2a:	e6cd      	b.n	8008bc8 <_strtod_l+0x474>
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	f7ff f8f6 	bl	8008020 <__i2b>
 8008e34:	9007      	str	r0, [sp, #28]
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d10e      	bne.n	8008e58 <_strtod_l+0x704>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	e6c3      	b.n	8008bc8 <_strtod_l+0x474>
 8008e40:	234b      	movs	r3, #75	@ 0x4b
 8008e42:	1a9a      	subs	r2, r3, r2
 8008e44:	3b4c      	subs	r3, #76	@ 0x4c
 8008e46:	4093      	lsls	r3, r2
 8008e48:	4019      	ands	r1, r3
 8008e4a:	000f      	movs	r7, r1
 8008e4c:	e7a9      	b.n	8008da2 <_strtod_l+0x64e>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4252      	negs	r2, r2
 8008e52:	409a      	lsls	r2, r3
 8008e54:	4016      	ands	r6, r2
 8008e56:	e7a4      	b.n	8008da2 <_strtod_l+0x64e>
 8008e58:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008e5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e5c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8008e5e:	1ad4      	subs	r4, r2, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db01      	blt.n	8008e68 <_strtod_l+0x714>
 8008e64:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008e66:	195d      	adds	r5, r3, r5
 8008e68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e6c:	1a5b      	subs	r3, r3, r1
 8008e6e:	2136      	movs	r1, #54	@ 0x36
 8008e70:	189b      	adds	r3, r3, r2
 8008e72:	1a8a      	subs	r2, r1, r2
 8008e74:	497a      	ldr	r1, [pc, #488]	@ (8009060 <_strtod_l+0x90c>)
 8008e76:	2001      	movs	r0, #1
 8008e78:	468c      	mov	ip, r1
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	9116      	str	r1, [sp, #88]	@ 0x58
 8008e80:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e82:	4563      	cmp	r3, ip
 8008e84:	da06      	bge.n	8008e94 <_strtod_l+0x740>
 8008e86:	4661      	mov	r1, ip
 8008e88:	1ac9      	subs	r1, r1, r3
 8008e8a:	1a52      	subs	r2, r2, r1
 8008e8c:	291f      	cmp	r1, #31
 8008e8e:	dc3f      	bgt.n	8008f10 <_strtod_l+0x7bc>
 8008e90:	4088      	lsls	r0, r1
 8008e92:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e94:	18ab      	adds	r3, r5, r2
 8008e96:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e98:	18a4      	adds	r4, r4, r2
 8008e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e9e:	191c      	adds	r4, r3, r4
 8008ea0:	002b      	movs	r3, r5
 8008ea2:	4295      	cmp	r5, r2
 8008ea4:	dd00      	ble.n	8008ea8 <_strtod_l+0x754>
 8008ea6:	0013      	movs	r3, r2
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	dd00      	ble.n	8008eae <_strtod_l+0x75a>
 8008eac:	0023      	movs	r3, r4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dd04      	ble.n	8008ebc <_strtod_l+0x768>
 8008eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eb4:	1ae4      	subs	r4, r4, r3
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eba:	1aed      	subs	r5, r5, r3
 8008ebc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	dd16      	ble.n	8008ef0 <_strtod_l+0x79c>
 8008ec2:	001a      	movs	r2, r3
 8008ec4:	9907      	ldr	r1, [sp, #28]
 8008ec6:	9805      	ldr	r0, [sp, #20]
 8008ec8:	f7ff f974 	bl	80081b4 <__pow5mult>
 8008ecc:	9007      	str	r0, [sp, #28]
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d0b3      	beq.n	8008e3a <_strtod_l+0x6e6>
 8008ed2:	0001      	movs	r1, r0
 8008ed4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008ed6:	9805      	ldr	r0, [sp, #20]
 8008ed8:	f7ff f8ba 	bl	8008050 <__multiply>
 8008edc:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d100      	bne.n	8008ee4 <_strtod_l+0x790>
 8008ee2:	e671      	b.n	8008bc8 <_strtod_l+0x474>
 8008ee4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008ee6:	9805      	ldr	r0, [sp, #20]
 8008ee8:	f7fe ff96 	bl	8007e18 <_Bfree>
 8008eec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008eee:	931e      	str	r3, [sp, #120]	@ 0x78
 8008ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dc12      	bgt.n	8008f1c <_strtod_l+0x7c8>
 8008ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dd18      	ble.n	8008f2e <_strtod_l+0x7da>
 8008efc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008efe:	9908      	ldr	r1, [sp, #32]
 8008f00:	9805      	ldr	r0, [sp, #20]
 8008f02:	f7ff f957 	bl	80081b4 <__pow5mult>
 8008f06:	9008      	str	r0, [sp, #32]
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d110      	bne.n	8008f2e <_strtod_l+0x7da>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e65a      	b.n	8008bc6 <_strtod_l+0x472>
 8008f10:	4954      	ldr	r1, [pc, #336]	@ (8009064 <_strtod_l+0x910>)
 8008f12:	1acb      	subs	r3, r1, r3
 8008f14:	0001      	movs	r1, r0
 8008f16:	4099      	lsls	r1, r3
 8008f18:	9116      	str	r1, [sp, #88]	@ 0x58
 8008f1a:	e7ba      	b.n	8008e92 <_strtod_l+0x73e>
 8008f1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f1e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008f20:	9805      	ldr	r0, [sp, #20]
 8008f22:	f7ff f9a3 	bl	800826c <__lshift>
 8008f26:	901e      	str	r0, [sp, #120]	@ 0x78
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1e4      	bne.n	8008ef6 <_strtod_l+0x7a2>
 8008f2c:	e64c      	b.n	8008bc8 <_strtod_l+0x474>
 8008f2e:	2c00      	cmp	r4, #0
 8008f30:	dd07      	ble.n	8008f42 <_strtod_l+0x7ee>
 8008f32:	0022      	movs	r2, r4
 8008f34:	9908      	ldr	r1, [sp, #32]
 8008f36:	9805      	ldr	r0, [sp, #20]
 8008f38:	f7ff f998 	bl	800826c <__lshift>
 8008f3c:	9008      	str	r0, [sp, #32]
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0e4      	beq.n	8008f0c <_strtod_l+0x7b8>
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	dd08      	ble.n	8008f58 <_strtod_l+0x804>
 8008f46:	002a      	movs	r2, r5
 8008f48:	9907      	ldr	r1, [sp, #28]
 8008f4a:	9805      	ldr	r0, [sp, #20]
 8008f4c:	f7ff f98e 	bl	800826c <__lshift>
 8008f50:	9007      	str	r0, [sp, #28]
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d100      	bne.n	8008f58 <_strtod_l+0x804>
 8008f56:	e637      	b.n	8008bc8 <_strtod_l+0x474>
 8008f58:	9a08      	ldr	r2, [sp, #32]
 8008f5a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	f7ff fa0d 	bl	800837c <__mdiff>
 8008f62:	9006      	str	r0, [sp, #24]
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d100      	bne.n	8008f6a <_strtod_l+0x816>
 8008f68:	e62e      	b.n	8008bc8 <_strtod_l+0x474>
 8008f6a:	68c3      	ldr	r3, [r0, #12]
 8008f6c:	9907      	ldr	r1, [sp, #28]
 8008f6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f70:	2300      	movs	r3, #0
 8008f72:	60c3      	str	r3, [r0, #12]
 8008f74:	f7ff f9e6 	bl	8008344 <__mcmp>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	da3b      	bge.n	8008ff4 <_strtod_l+0x8a0>
 8008f7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f7e:	4333      	orrs	r3, r6
 8008f80:	d167      	bne.n	8009052 <_strtod_l+0x8fe>
 8008f82:	033b      	lsls	r3, r7, #12
 8008f84:	d165      	bne.n	8009052 <_strtod_l+0x8fe>
 8008f86:	22d6      	movs	r2, #214	@ 0xd6
 8008f88:	4b37      	ldr	r3, [pc, #220]	@ (8009068 <_strtod_l+0x914>)
 8008f8a:	04d2      	lsls	r2, r2, #19
 8008f8c:	403b      	ands	r3, r7
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d95f      	bls.n	8009052 <_strtod_l+0x8fe>
 8008f92:	9b06      	ldr	r3, [sp, #24]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <_strtod_l+0x84e>
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	dd57      	ble.n	8009052 <_strtod_l+0x8fe>
 8008fa2:	9906      	ldr	r1, [sp, #24]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	9805      	ldr	r0, [sp, #20]
 8008fa8:	f7ff f960 	bl	800826c <__lshift>
 8008fac:	9907      	ldr	r1, [sp, #28]
 8008fae:	9006      	str	r0, [sp, #24]
 8008fb0:	f7ff f9c8 	bl	8008344 <__mcmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	dd4c      	ble.n	8009052 <_strtod_l+0x8fe>
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8009068 <_strtod_l+0x914>)
 8008fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fbc:	403b      	ands	r3, r7
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	d074      	beq.n	80090ac <_strtod_l+0x958>
 8008fc2:	22d6      	movs	r2, #214	@ 0xd6
 8008fc4:	04d2      	lsls	r2, r2, #19
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d870      	bhi.n	80090ac <_strtod_l+0x958>
 8008fca:	22dc      	movs	r2, #220	@ 0xdc
 8008fcc:	0492      	lsls	r2, r2, #18
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d800      	bhi.n	8008fd4 <_strtod_l+0x880>
 8008fd2:	e695      	b.n	8008d00 <_strtod_l+0x5ac>
 8008fd4:	0030      	movs	r0, r6
 8008fd6:	0039      	movs	r1, r7
 8008fd8:	4b24      	ldr	r3, [pc, #144]	@ (800906c <_strtod_l+0x918>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f7f8 fd14 	bl	8001a08 <__aeabi_dmul>
 8008fe0:	4b21      	ldr	r3, [pc, #132]	@ (8009068 <_strtod_l+0x914>)
 8008fe2:	0006      	movs	r6, r0
 8008fe4:	000f      	movs	r7, r1
 8008fe6:	420b      	tst	r3, r1
 8008fe8:	d000      	beq.n	8008fec <_strtod_l+0x898>
 8008fea:	e5f6      	b.n	8008bda <_strtod_l+0x486>
 8008fec:	2322      	movs	r3, #34	@ 0x22
 8008fee:	9a05      	ldr	r2, [sp, #20]
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	e5f2      	b.n	8008bda <_strtod_l+0x486>
 8008ff4:	970e      	str	r7, [sp, #56]	@ 0x38
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d175      	bne.n	80090e6 <_strtod_l+0x992>
 8008ffa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ffc:	033b      	lsls	r3, r7, #12
 8008ffe:	0b1b      	lsrs	r3, r3, #12
 8009000:	2a00      	cmp	r2, #0
 8009002:	d039      	beq.n	8009078 <_strtod_l+0x924>
 8009004:	4a1a      	ldr	r2, [pc, #104]	@ (8009070 <_strtod_l+0x91c>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d138      	bne.n	800907c <_strtod_l+0x928>
 800900a:	2101      	movs	r1, #1
 800900c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900e:	4249      	negs	r1, r1
 8009010:	0032      	movs	r2, r6
 8009012:	0008      	movs	r0, r1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <_strtod_l+0x8dc>
 8009018:	24d4      	movs	r4, #212	@ 0xd4
 800901a:	4b13      	ldr	r3, [pc, #76]	@ (8009068 <_strtod_l+0x914>)
 800901c:	0008      	movs	r0, r1
 800901e:	403b      	ands	r3, r7
 8009020:	04e4      	lsls	r4, r4, #19
 8009022:	42a3      	cmp	r3, r4
 8009024:	d804      	bhi.n	8009030 <_strtod_l+0x8dc>
 8009026:	306c      	adds	r0, #108	@ 0x6c
 8009028:	0d1b      	lsrs	r3, r3, #20
 800902a:	1ac3      	subs	r3, r0, r3
 800902c:	4099      	lsls	r1, r3
 800902e:	0008      	movs	r0, r1
 8009030:	4282      	cmp	r2, r0
 8009032:	d123      	bne.n	800907c <_strtod_l+0x928>
 8009034:	4b0f      	ldr	r3, [pc, #60]	@ (8009074 <_strtod_l+0x920>)
 8009036:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009038:	4299      	cmp	r1, r3
 800903a:	d102      	bne.n	8009042 <_strtod_l+0x8ee>
 800903c:	3201      	adds	r2, #1
 800903e:	d100      	bne.n	8009042 <_strtod_l+0x8ee>
 8009040:	e5c2      	b.n	8008bc8 <_strtod_l+0x474>
 8009042:	4b09      	ldr	r3, [pc, #36]	@ (8009068 <_strtod_l+0x914>)
 8009044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009046:	2600      	movs	r6, #0
 8009048:	401a      	ands	r2, r3
 800904a:	0013      	movs	r3, r2
 800904c:	2280      	movs	r2, #128	@ 0x80
 800904e:	0352      	lsls	r2, r2, #13
 8009050:	189f      	adds	r7, r3, r2
 8009052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1bd      	bne.n	8008fd4 <_strtod_l+0x880>
 8009058:	e5bf      	b.n	8008bda <_strtod_l+0x486>
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	0800aa20 	.word	0x0800aa20
 8009060:	fffffc02 	.word	0xfffffc02
 8009064:	fffffbe2 	.word	0xfffffbe2
 8009068:	7ff00000 	.word	0x7ff00000
 800906c:	39500000 	.word	0x39500000
 8009070:	000fffff 	.word	0x000fffff
 8009074:	7fefffff 	.word	0x7fefffff
 8009078:	4333      	orrs	r3, r6
 800907a:	d09d      	beq.n	8008fb8 <_strtod_l+0x864>
 800907c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01c      	beq.n	80090bc <_strtod_l+0x968>
 8009082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009084:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009086:	4213      	tst	r3, r2
 8009088:	d0e3      	beq.n	8009052 <_strtod_l+0x8fe>
 800908a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800908c:	0030      	movs	r0, r6
 800908e:	0039      	movs	r1, r7
 8009090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <_strtod_l+0x970>
 8009096:	f7ff fb45 	bl	8008724 <sulp>
 800909a:	0002      	movs	r2, r0
 800909c:	000b      	movs	r3, r1
 800909e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80090a0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80090a2:	f7f7 fd09 	bl	8000ab8 <__aeabi_dadd>
 80090a6:	0006      	movs	r6, r0
 80090a8:	000f      	movs	r7, r1
 80090aa:	e7d2      	b.n	8009052 <_strtod_l+0x8fe>
 80090ac:	2601      	movs	r6, #1
 80090ae:	4a92      	ldr	r2, [pc, #584]	@ (80092f8 <_strtod_l+0xba4>)
 80090b0:	4276      	negs	r6, r6
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	4a91      	ldr	r2, [pc, #580]	@ (80092fc <_strtod_l+0xba8>)
 80090b6:	431a      	orrs	r2, r3
 80090b8:	0017      	movs	r7, r2
 80090ba:	e7ca      	b.n	8009052 <_strtod_l+0x8fe>
 80090bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090be:	4233      	tst	r3, r6
 80090c0:	d0c7      	beq.n	8009052 <_strtod_l+0x8fe>
 80090c2:	e7e2      	b.n	800908a <_strtod_l+0x936>
 80090c4:	f7ff fb2e 	bl	8008724 <sulp>
 80090c8:	0002      	movs	r2, r0
 80090ca:	000b      	movs	r3, r1
 80090cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80090ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80090d0:	f7f8 ff62 	bl	8001f98 <__aeabi_dsub>
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	0006      	movs	r6, r0
 80090da:	000f      	movs	r7, r1
 80090dc:	f7f7 f9b6 	bl	800044c <__aeabi_dcmpeq>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d0b6      	beq.n	8009052 <_strtod_l+0x8fe>
 80090e4:	e60c      	b.n	8008d00 <_strtod_l+0x5ac>
 80090e6:	9907      	ldr	r1, [sp, #28]
 80090e8:	9806      	ldr	r0, [sp, #24]
 80090ea:	f7ff faad 	bl	8008648 <__ratio>
 80090ee:	2380      	movs	r3, #128	@ 0x80
 80090f0:	2200      	movs	r2, #0
 80090f2:	05db      	lsls	r3, r3, #23
 80090f4:	0004      	movs	r4, r0
 80090f6:	000d      	movs	r5, r1
 80090f8:	f7f7 f9b8 	bl	800046c <__aeabi_dcmple>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d06c      	beq.n	80091da <_strtod_l+0xa86>
 8009100:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d177      	bne.n	80091f6 <_strtod_l+0xaa2>
 8009106:	2e00      	cmp	r6, #0
 8009108:	d157      	bne.n	80091ba <_strtod_l+0xa66>
 800910a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910c:	031b      	lsls	r3, r3, #12
 800910e:	d15a      	bne.n	80091c6 <_strtod_l+0xa72>
 8009110:	2200      	movs	r2, #0
 8009112:	0020      	movs	r0, r4
 8009114:	0029      	movs	r1, r5
 8009116:	4b7a      	ldr	r3, [pc, #488]	@ (8009300 <_strtod_l+0xbac>)
 8009118:	f7f7 f99e 	bl	8000458 <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	d159      	bne.n	80091d4 <_strtod_l+0xa80>
 8009120:	0020      	movs	r0, r4
 8009122:	0029      	movs	r1, r5
 8009124:	2200      	movs	r2, #0
 8009126:	4b77      	ldr	r3, [pc, #476]	@ (8009304 <_strtod_l+0xbb0>)
 8009128:	f7f8 fc6e 	bl	8001a08 <__aeabi_dmul>
 800912c:	0004      	movs	r4, r0
 800912e:	000d      	movs	r5, r1
 8009130:	2380      	movs	r3, #128	@ 0x80
 8009132:	061b      	lsls	r3, r3, #24
 8009134:	18eb      	adds	r3, r5, r3
 8009136:	940a      	str	r4, [sp, #40]	@ 0x28
 8009138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800913a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800913c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800913e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009140:	9315      	str	r3, [sp, #84]	@ 0x54
 8009142:	4a71      	ldr	r2, [pc, #452]	@ (8009308 <_strtod_l+0xbb4>)
 8009144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009146:	4013      	ands	r3, r2
 8009148:	9316      	str	r3, [sp, #88]	@ 0x58
 800914a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800914c:	4b6f      	ldr	r3, [pc, #444]	@ (800930c <_strtod_l+0xbb8>)
 800914e:	429a      	cmp	r2, r3
 8009150:	d000      	beq.n	8009154 <_strtod_l+0xa00>
 8009152:	e087      	b.n	8009264 <_strtod_l+0xb10>
 8009154:	4a6e      	ldr	r2, [pc, #440]	@ (8009310 <_strtod_l+0xbbc>)
 8009156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009158:	4694      	mov	ip, r2
 800915a:	4463      	add	r3, ip
 800915c:	001f      	movs	r7, r3
 800915e:	0030      	movs	r0, r6
 8009160:	0019      	movs	r1, r3
 8009162:	f7ff f9a5 	bl	80084b0 <__ulp>
 8009166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800916a:	f7f8 fc4d 	bl	8001a08 <__aeabi_dmul>
 800916e:	0032      	movs	r2, r6
 8009170:	003b      	movs	r3, r7
 8009172:	f7f7 fca1 	bl	8000ab8 <__aeabi_dadd>
 8009176:	4a64      	ldr	r2, [pc, #400]	@ (8009308 <_strtod_l+0xbb4>)
 8009178:	4b66      	ldr	r3, [pc, #408]	@ (8009314 <_strtod_l+0xbc0>)
 800917a:	0006      	movs	r6, r0
 800917c:	400a      	ands	r2, r1
 800917e:	429a      	cmp	r2, r3
 8009180:	d940      	bls.n	8009204 <_strtod_l+0xab0>
 8009182:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009184:	4a64      	ldr	r2, [pc, #400]	@ (8009318 <_strtod_l+0xbc4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d103      	bne.n	8009192 <_strtod_l+0xa3e>
 800918a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800918c:	3301      	adds	r3, #1
 800918e:	d100      	bne.n	8009192 <_strtod_l+0xa3e>
 8009190:	e51a      	b.n	8008bc8 <_strtod_l+0x474>
 8009192:	2601      	movs	r6, #1
 8009194:	4f60      	ldr	r7, [pc, #384]	@ (8009318 <_strtod_l+0xbc4>)
 8009196:	4276      	negs	r6, r6
 8009198:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800919a:	9805      	ldr	r0, [sp, #20]
 800919c:	f7fe fe3c 	bl	8007e18 <_Bfree>
 80091a0:	9908      	ldr	r1, [sp, #32]
 80091a2:	9805      	ldr	r0, [sp, #20]
 80091a4:	f7fe fe38 	bl	8007e18 <_Bfree>
 80091a8:	9907      	ldr	r1, [sp, #28]
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	f7fe fe34 	bl	8007e18 <_Bfree>
 80091b0:	9906      	ldr	r1, [sp, #24]
 80091b2:	9805      	ldr	r0, [sp, #20]
 80091b4:	f7fe fe30 	bl	8007e18 <_Bfree>
 80091b8:	e617      	b.n	8008dea <_strtod_l+0x696>
 80091ba:	2e01      	cmp	r6, #1
 80091bc:	d103      	bne.n	80091c6 <_strtod_l+0xa72>
 80091be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d100      	bne.n	80091c6 <_strtod_l+0xa72>
 80091c4:	e59c      	b.n	8008d00 <_strtod_l+0x5ac>
 80091c6:	2300      	movs	r3, #0
 80091c8:	4c54      	ldr	r4, [pc, #336]	@ (800931c <_strtod_l+0xbc8>)
 80091ca:	4d4d      	ldr	r5, [pc, #308]	@ (8009300 <_strtod_l+0xbac>)
 80091cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80091ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091d0:	2400      	movs	r4, #0
 80091d2:	e7b2      	b.n	800913a <_strtod_l+0x9e6>
 80091d4:	2400      	movs	r4, #0
 80091d6:	4d4b      	ldr	r5, [pc, #300]	@ (8009304 <_strtod_l+0xbb0>)
 80091d8:	e7aa      	b.n	8009130 <_strtod_l+0x9dc>
 80091da:	0020      	movs	r0, r4
 80091dc:	0029      	movs	r1, r5
 80091de:	4b49      	ldr	r3, [pc, #292]	@ (8009304 <_strtod_l+0xbb0>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	f7f8 fc11 	bl	8001a08 <__aeabi_dmul>
 80091e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091e8:	0004      	movs	r4, r0
 80091ea:	000d      	movs	r5, r1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d09f      	beq.n	8009130 <_strtod_l+0x9dc>
 80091f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80091f2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80091f4:	e7a1      	b.n	800913a <_strtod_l+0x9e6>
 80091f6:	2300      	movs	r3, #0
 80091f8:	4c41      	ldr	r4, [pc, #260]	@ (8009300 <_strtod_l+0xbac>)
 80091fa:	0025      	movs	r5, r4
 80091fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80091fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009200:	001c      	movs	r4, r3
 8009202:	e79a      	b.n	800913a <_strtod_l+0x9e6>
 8009204:	23d4      	movs	r3, #212	@ 0xd4
 8009206:	049b      	lsls	r3, r3, #18
 8009208:	18cf      	adds	r7, r1, r3
 800920a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920c:	9710      	str	r7, [sp, #64]	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1c2      	bne.n	8009198 <_strtod_l+0xa44>
 8009212:	4b3d      	ldr	r3, [pc, #244]	@ (8009308 <_strtod_l+0xbb4>)
 8009214:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009216:	403b      	ands	r3, r7
 8009218:	429a      	cmp	r2, r3
 800921a:	d1bd      	bne.n	8009198 <_strtod_l+0xa44>
 800921c:	0020      	movs	r0, r4
 800921e:	0029      	movs	r1, r5
 8009220:	f7f7 f9ae 	bl	8000580 <__aeabi_d2lz>
 8009224:	f7f7 f9e6 	bl	80005f4 <__aeabi_l2d>
 8009228:	0002      	movs	r2, r0
 800922a:	000b      	movs	r3, r1
 800922c:	0020      	movs	r0, r4
 800922e:	0029      	movs	r1, r5
 8009230:	f7f8 feb2 	bl	8001f98 <__aeabi_dsub>
 8009234:	033c      	lsls	r4, r7, #12
 8009236:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009238:	0b24      	lsrs	r4, r4, #12
 800923a:	4334      	orrs	r4, r6
 800923c:	900e      	str	r0, [sp, #56]	@ 0x38
 800923e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009240:	4a37      	ldr	r2, [pc, #220]	@ (8009320 <_strtod_l+0xbcc>)
 8009242:	431c      	orrs	r4, r3
 8009244:	d052      	beq.n	80092ec <_strtod_l+0xb98>
 8009246:	4b37      	ldr	r3, [pc, #220]	@ (8009324 <_strtod_l+0xbd0>)
 8009248:	f7f7 f906 	bl	8000458 <__aeabi_dcmplt>
 800924c:	2800      	cmp	r0, #0
 800924e:	d000      	beq.n	8009252 <_strtod_l+0xafe>
 8009250:	e4c3      	b.n	8008bda <_strtod_l+0x486>
 8009252:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009254:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009256:	4a34      	ldr	r2, [pc, #208]	@ (8009328 <_strtod_l+0xbd4>)
 8009258:	4b2a      	ldr	r3, [pc, #168]	@ (8009304 <_strtod_l+0xbb0>)
 800925a:	f7f7 f911 	bl	8000480 <__aeabi_dcmpgt>
 800925e:	2800      	cmp	r0, #0
 8009260:	d09a      	beq.n	8009198 <_strtod_l+0xa44>
 8009262:	e4ba      	b.n	8008bda <_strtod_l+0x486>
 8009264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	d02a      	beq.n	80092c0 <_strtod_l+0xb6c>
 800926a:	23d4      	movs	r3, #212	@ 0xd4
 800926c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800926e:	04db      	lsls	r3, r3, #19
 8009270:	429a      	cmp	r2, r3
 8009272:	d825      	bhi.n	80092c0 <_strtod_l+0xb6c>
 8009274:	0020      	movs	r0, r4
 8009276:	0029      	movs	r1, r5
 8009278:	4a2c      	ldr	r2, [pc, #176]	@ (800932c <_strtod_l+0xbd8>)
 800927a:	4b2d      	ldr	r3, [pc, #180]	@ (8009330 <_strtod_l+0xbdc>)
 800927c:	f7f7 f8f6 	bl	800046c <__aeabi_dcmple>
 8009280:	2800      	cmp	r0, #0
 8009282:	d016      	beq.n	80092b2 <_strtod_l+0xb5e>
 8009284:	0020      	movs	r0, r4
 8009286:	0029      	movs	r1, r5
 8009288:	f7f7 f95c 	bl	8000544 <__aeabi_d2uiz>
 800928c:	2800      	cmp	r0, #0
 800928e:	d100      	bne.n	8009292 <_strtod_l+0xb3e>
 8009290:	3001      	adds	r0, #1
 8009292:	f7f9 faa9 	bl	80027e8 <__aeabi_ui2d>
 8009296:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009298:	0004      	movs	r4, r0
 800929a:	000d      	movs	r5, r1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d122      	bne.n	80092e6 <_strtod_l+0xb92>
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	061b      	lsls	r3, r3, #24
 80092a4:	18cb      	adds	r3, r1, r3
 80092a6:	9018      	str	r0, [sp, #96]	@ 0x60
 80092a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80092aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80092ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092ae:	9214      	str	r2, [sp, #80]	@ 0x50
 80092b0:	9315      	str	r3, [sp, #84]	@ 0x54
 80092b2:	22d6      	movs	r2, #214	@ 0xd6
 80092b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80092b6:	04d2      	lsls	r2, r2, #19
 80092b8:	189b      	adds	r3, r3, r2
 80092ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	9315      	str	r3, [sp, #84]	@ 0x54
 80092c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80092c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80092c4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80092c6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80092c8:	f7ff f8f2 	bl	80084b0 <__ulp>
 80092cc:	0002      	movs	r2, r0
 80092ce:	000b      	movs	r3, r1
 80092d0:	0030      	movs	r0, r6
 80092d2:	0039      	movs	r1, r7
 80092d4:	f7f8 fb98 	bl	8001a08 <__aeabi_dmul>
 80092d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80092da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092dc:	f7f7 fbec 	bl	8000ab8 <__aeabi_dadd>
 80092e0:	0006      	movs	r6, r0
 80092e2:	000f      	movs	r7, r1
 80092e4:	e791      	b.n	800920a <_strtod_l+0xab6>
 80092e6:	9418      	str	r4, [sp, #96]	@ 0x60
 80092e8:	9519      	str	r5, [sp, #100]	@ 0x64
 80092ea:	e7de      	b.n	80092aa <_strtod_l+0xb56>
 80092ec:	4b11      	ldr	r3, [pc, #68]	@ (8009334 <_strtod_l+0xbe0>)
 80092ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80092f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092f2:	f7f7 f8b1 	bl	8000458 <__aeabi_dcmplt>
 80092f6:	e7b2      	b.n	800925e <_strtod_l+0xb0a>
 80092f8:	fff00000 	.word	0xfff00000
 80092fc:	000fffff 	.word	0x000fffff
 8009300:	3ff00000 	.word	0x3ff00000
 8009304:	3fe00000 	.word	0x3fe00000
 8009308:	7ff00000 	.word	0x7ff00000
 800930c:	7fe00000 	.word	0x7fe00000
 8009310:	fcb00000 	.word	0xfcb00000
 8009314:	7c9fffff 	.word	0x7c9fffff
 8009318:	7fefffff 	.word	0x7fefffff
 800931c:	bff00000 	.word	0xbff00000
 8009320:	94a03595 	.word	0x94a03595
 8009324:	3fdfffff 	.word	0x3fdfffff
 8009328:	35afe535 	.word	0x35afe535
 800932c:	ffc00000 	.word	0xffc00000
 8009330:	41dfffff 	.word	0x41dfffff
 8009334:	3fcfffff 	.word	0x3fcfffff

08009338 <_strtod_r>:
 8009338:	b510      	push	{r4, lr}
 800933a:	4b02      	ldr	r3, [pc, #8]	@ (8009344 <_strtod_r+0xc>)
 800933c:	f7ff fa0a 	bl	8008754 <_strtod_l>
 8009340:	bd10      	pop	{r4, pc}
 8009342:	46c0      	nop			@ (mov r8, r8)
 8009344:	20000068 	.word	0x20000068

08009348 <_strtol_l.constprop.0>:
 8009348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800934a:	b085      	sub	sp, #20
 800934c:	0017      	movs	r7, r2
 800934e:	001e      	movs	r6, r3
 8009350:	9003      	str	r0, [sp, #12]
 8009352:	9101      	str	r1, [sp, #4]
 8009354:	2b24      	cmp	r3, #36	@ 0x24
 8009356:	d844      	bhi.n	80093e2 <_strtol_l.constprop.0+0x9a>
 8009358:	000c      	movs	r4, r1
 800935a:	2b01      	cmp	r3, #1
 800935c:	d041      	beq.n	80093e2 <_strtol_l.constprop.0+0x9a>
 800935e:	4b3d      	ldr	r3, [pc, #244]	@ (8009454 <_strtol_l.constprop.0+0x10c>)
 8009360:	2208      	movs	r2, #8
 8009362:	469c      	mov	ip, r3
 8009364:	0023      	movs	r3, r4
 8009366:	4661      	mov	r1, ip
 8009368:	781d      	ldrb	r5, [r3, #0]
 800936a:	3401      	adds	r4, #1
 800936c:	5d48      	ldrb	r0, [r1, r5]
 800936e:	0001      	movs	r1, r0
 8009370:	4011      	ands	r1, r2
 8009372:	4210      	tst	r0, r2
 8009374:	d1f6      	bne.n	8009364 <_strtol_l.constprop.0+0x1c>
 8009376:	2d2d      	cmp	r5, #45	@ 0x2d
 8009378:	d13a      	bne.n	80093f0 <_strtol_l.constprop.0+0xa8>
 800937a:	7825      	ldrb	r5, [r4, #0]
 800937c:	1c9c      	adds	r4, r3, #2
 800937e:	2301      	movs	r3, #1
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	2210      	movs	r2, #16
 8009384:	0033      	movs	r3, r6
 8009386:	4393      	bics	r3, r2
 8009388:	d109      	bne.n	800939e <_strtol_l.constprop.0+0x56>
 800938a:	2d30      	cmp	r5, #48	@ 0x30
 800938c:	d136      	bne.n	80093fc <_strtol_l.constprop.0+0xb4>
 800938e:	2120      	movs	r1, #32
 8009390:	7823      	ldrb	r3, [r4, #0]
 8009392:	438b      	bics	r3, r1
 8009394:	2b58      	cmp	r3, #88	@ 0x58
 8009396:	d131      	bne.n	80093fc <_strtol_l.constprop.0+0xb4>
 8009398:	0016      	movs	r6, r2
 800939a:	7865      	ldrb	r5, [r4, #1]
 800939c:	3402      	adds	r4, #2
 800939e:	4a2e      	ldr	r2, [pc, #184]	@ (8009458 <_strtol_l.constprop.0+0x110>)
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	4694      	mov	ip, r2
 80093a4:	4463      	add	r3, ip
 80093a6:	0031      	movs	r1, r6
 80093a8:	0018      	movs	r0, r3
 80093aa:	9302      	str	r3, [sp, #8]
 80093ac:	f7f6 ff4e 	bl	800024c <__aeabi_uidivmod>
 80093b0:	2200      	movs	r2, #0
 80093b2:	4684      	mov	ip, r0
 80093b4:	0010      	movs	r0, r2
 80093b6:	002b      	movs	r3, r5
 80093b8:	3b30      	subs	r3, #48	@ 0x30
 80093ba:	2b09      	cmp	r3, #9
 80093bc:	d825      	bhi.n	800940a <_strtol_l.constprop.0+0xc2>
 80093be:	001d      	movs	r5, r3
 80093c0:	42ae      	cmp	r6, r5
 80093c2:	dd31      	ble.n	8009428 <_strtol_l.constprop.0+0xe0>
 80093c4:	1c53      	adds	r3, r2, #1
 80093c6:	d009      	beq.n	80093dc <_strtol_l.constprop.0+0x94>
 80093c8:	2201      	movs	r2, #1
 80093ca:	4252      	negs	r2, r2
 80093cc:	4584      	cmp	ip, r0
 80093ce:	d305      	bcc.n	80093dc <_strtol_l.constprop.0+0x94>
 80093d0:	d101      	bne.n	80093d6 <_strtol_l.constprop.0+0x8e>
 80093d2:	42a9      	cmp	r1, r5
 80093d4:	db25      	blt.n	8009422 <_strtol_l.constprop.0+0xda>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4370      	muls	r0, r6
 80093da:	1828      	adds	r0, r5, r0
 80093dc:	7825      	ldrb	r5, [r4, #0]
 80093de:	3401      	adds	r4, #1
 80093e0:	e7e9      	b.n	80093b6 <_strtol_l.constprop.0+0x6e>
 80093e2:	f7fd fd11 	bl	8006e08 <__errno>
 80093e6:	2316      	movs	r3, #22
 80093e8:	6003      	str	r3, [r0, #0]
 80093ea:	2000      	movs	r0, #0
 80093ec:	b005      	add	sp, #20
 80093ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f0:	9100      	str	r1, [sp, #0]
 80093f2:	2d2b      	cmp	r5, #43	@ 0x2b
 80093f4:	d1c5      	bne.n	8009382 <_strtol_l.constprop.0+0x3a>
 80093f6:	7825      	ldrb	r5, [r4, #0]
 80093f8:	1c9c      	adds	r4, r3, #2
 80093fa:	e7c2      	b.n	8009382 <_strtol_l.constprop.0+0x3a>
 80093fc:	2e00      	cmp	r6, #0
 80093fe:	d1ce      	bne.n	800939e <_strtol_l.constprop.0+0x56>
 8009400:	3608      	adds	r6, #8
 8009402:	2d30      	cmp	r5, #48	@ 0x30
 8009404:	d0cb      	beq.n	800939e <_strtol_l.constprop.0+0x56>
 8009406:	3602      	adds	r6, #2
 8009408:	e7c9      	b.n	800939e <_strtol_l.constprop.0+0x56>
 800940a:	002b      	movs	r3, r5
 800940c:	3b41      	subs	r3, #65	@ 0x41
 800940e:	2b19      	cmp	r3, #25
 8009410:	d801      	bhi.n	8009416 <_strtol_l.constprop.0+0xce>
 8009412:	3d37      	subs	r5, #55	@ 0x37
 8009414:	e7d4      	b.n	80093c0 <_strtol_l.constprop.0+0x78>
 8009416:	002b      	movs	r3, r5
 8009418:	3b61      	subs	r3, #97	@ 0x61
 800941a:	2b19      	cmp	r3, #25
 800941c:	d804      	bhi.n	8009428 <_strtol_l.constprop.0+0xe0>
 800941e:	3d57      	subs	r5, #87	@ 0x57
 8009420:	e7ce      	b.n	80093c0 <_strtol_l.constprop.0+0x78>
 8009422:	2201      	movs	r2, #1
 8009424:	4252      	negs	r2, r2
 8009426:	e7d9      	b.n	80093dc <_strtol_l.constprop.0+0x94>
 8009428:	1c53      	adds	r3, r2, #1
 800942a:	d108      	bne.n	800943e <_strtol_l.constprop.0+0xf6>
 800942c:	2322      	movs	r3, #34	@ 0x22
 800942e:	9a03      	ldr	r2, [sp, #12]
 8009430:	9802      	ldr	r0, [sp, #8]
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	2f00      	cmp	r7, #0
 8009436:	d0d9      	beq.n	80093ec <_strtol_l.constprop.0+0xa4>
 8009438:	1e63      	subs	r3, r4, #1
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	e007      	b.n	800944e <_strtol_l.constprop.0+0x106>
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d000      	beq.n	8009446 <_strtol_l.constprop.0+0xfe>
 8009444:	4240      	negs	r0, r0
 8009446:	2f00      	cmp	r7, #0
 8009448:	d0d0      	beq.n	80093ec <_strtol_l.constprop.0+0xa4>
 800944a:	2a00      	cmp	r2, #0
 800944c:	d1f4      	bne.n	8009438 <_strtol_l.constprop.0+0xf0>
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	e7cb      	b.n	80093ec <_strtol_l.constprop.0+0xa4>
 8009454:	0800aa49 	.word	0x0800aa49
 8009458:	7fffffff 	.word	0x7fffffff

0800945c <_strtol_r>:
 800945c:	b510      	push	{r4, lr}
 800945e:	f7ff ff73 	bl	8009348 <_strtol_l.constprop.0>
 8009462:	bd10      	pop	{r4, pc}

08009464 <__ssputs_r>:
 8009464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009466:	688e      	ldr	r6, [r1, #8]
 8009468:	b085      	sub	sp, #20
 800946a:	001f      	movs	r7, r3
 800946c:	000c      	movs	r4, r1
 800946e:	680b      	ldr	r3, [r1, #0]
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9203      	str	r2, [sp, #12]
 8009474:	42be      	cmp	r6, r7
 8009476:	d830      	bhi.n	80094da <__ssputs_r+0x76>
 8009478:	210c      	movs	r1, #12
 800947a:	5e62      	ldrsh	r2, [r4, r1]
 800947c:	2190      	movs	r1, #144	@ 0x90
 800947e:	00c9      	lsls	r1, r1, #3
 8009480:	420a      	tst	r2, r1
 8009482:	d028      	beq.n	80094d6 <__ssputs_r+0x72>
 8009484:	2003      	movs	r0, #3
 8009486:	6921      	ldr	r1, [r4, #16]
 8009488:	1a5b      	subs	r3, r3, r1
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	6963      	ldr	r3, [r4, #20]
 800948e:	4343      	muls	r3, r0
 8009490:	9801      	ldr	r0, [sp, #4]
 8009492:	0fdd      	lsrs	r5, r3, #31
 8009494:	18ed      	adds	r5, r5, r3
 8009496:	1c7b      	adds	r3, r7, #1
 8009498:	181b      	adds	r3, r3, r0
 800949a:	106d      	asrs	r5, r5, #1
 800949c:	42ab      	cmp	r3, r5
 800949e:	d900      	bls.n	80094a2 <__ssputs_r+0x3e>
 80094a0:	001d      	movs	r5, r3
 80094a2:	0552      	lsls	r2, r2, #21
 80094a4:	d528      	bpl.n	80094f8 <__ssputs_r+0x94>
 80094a6:	0029      	movs	r1, r5
 80094a8:	9802      	ldr	r0, [sp, #8]
 80094aa:	f7fe fbe1 	bl	8007c70 <_malloc_r>
 80094ae:	1e06      	subs	r6, r0, #0
 80094b0:	d02c      	beq.n	800950c <__ssputs_r+0xa8>
 80094b2:	9a01      	ldr	r2, [sp, #4]
 80094b4:	6921      	ldr	r1, [r4, #16]
 80094b6:	f000 fa1b 	bl	80098f0 <memcpy>
 80094ba:	89a2      	ldrh	r2, [r4, #12]
 80094bc:	4b18      	ldr	r3, [pc, #96]	@ (8009520 <__ssputs_r+0xbc>)
 80094be:	401a      	ands	r2, r3
 80094c0:	2380      	movs	r3, #128	@ 0x80
 80094c2:	4313      	orrs	r3, r2
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6126      	str	r6, [r4, #16]
 80094ca:	18f6      	adds	r6, r6, r3
 80094cc:	6026      	str	r6, [r4, #0]
 80094ce:	003e      	movs	r6, r7
 80094d0:	6165      	str	r5, [r4, #20]
 80094d2:	1aed      	subs	r5, r5, r3
 80094d4:	60a5      	str	r5, [r4, #8]
 80094d6:	42be      	cmp	r6, r7
 80094d8:	d900      	bls.n	80094dc <__ssputs_r+0x78>
 80094da:	003e      	movs	r6, r7
 80094dc:	0032      	movs	r2, r6
 80094de:	9903      	ldr	r1, [sp, #12]
 80094e0:	6820      	ldr	r0, [r4, #0]
 80094e2:	f000 f9ce 	bl	8009882 <memmove>
 80094e6:	2000      	movs	r0, #0
 80094e8:	68a3      	ldr	r3, [r4, #8]
 80094ea:	1b9b      	subs	r3, r3, r6
 80094ec:	60a3      	str	r3, [r4, #8]
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	199b      	adds	r3, r3, r6
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	b005      	add	sp, #20
 80094f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f8:	002a      	movs	r2, r5
 80094fa:	9802      	ldr	r0, [sp, #8]
 80094fc:	f000 fdc0 	bl	800a080 <_realloc_r>
 8009500:	1e06      	subs	r6, r0, #0
 8009502:	d1e0      	bne.n	80094c6 <__ssputs_r+0x62>
 8009504:	6921      	ldr	r1, [r4, #16]
 8009506:	9802      	ldr	r0, [sp, #8]
 8009508:	f7fe fb3c 	bl	8007b84 <_free_r>
 800950c:	230c      	movs	r3, #12
 800950e:	2001      	movs	r0, #1
 8009510:	9a02      	ldr	r2, [sp, #8]
 8009512:	4240      	negs	r0, r0
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	89a2      	ldrh	r2, [r4, #12]
 8009518:	3334      	adds	r3, #52	@ 0x34
 800951a:	4313      	orrs	r3, r2
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7e9      	b.n	80094f4 <__ssputs_r+0x90>
 8009520:	fffffb7f 	.word	0xfffffb7f

08009524 <_svfiprintf_r>:
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b0a1      	sub	sp, #132	@ 0x84
 8009528:	9003      	str	r0, [sp, #12]
 800952a:	001d      	movs	r5, r3
 800952c:	898b      	ldrh	r3, [r1, #12]
 800952e:	000f      	movs	r7, r1
 8009530:	0016      	movs	r6, r2
 8009532:	061b      	lsls	r3, r3, #24
 8009534:	d511      	bpl.n	800955a <_svfiprintf_r+0x36>
 8009536:	690b      	ldr	r3, [r1, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10e      	bne.n	800955a <_svfiprintf_r+0x36>
 800953c:	2140      	movs	r1, #64	@ 0x40
 800953e:	f7fe fb97 	bl	8007c70 <_malloc_r>
 8009542:	6038      	str	r0, [r7, #0]
 8009544:	6138      	str	r0, [r7, #16]
 8009546:	2800      	cmp	r0, #0
 8009548:	d105      	bne.n	8009556 <_svfiprintf_r+0x32>
 800954a:	230c      	movs	r3, #12
 800954c:	9a03      	ldr	r2, [sp, #12]
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	2001      	movs	r0, #1
 8009552:	4240      	negs	r0, r0
 8009554:	e0cf      	b.n	80096f6 <_svfiprintf_r+0x1d2>
 8009556:	2340      	movs	r3, #64	@ 0x40
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	2300      	movs	r3, #0
 800955c:	ac08      	add	r4, sp, #32
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	3320      	adds	r3, #32
 8009562:	7663      	strb	r3, [r4, #25]
 8009564:	3310      	adds	r3, #16
 8009566:	76a3      	strb	r3, [r4, #26]
 8009568:	9507      	str	r5, [sp, #28]
 800956a:	0035      	movs	r5, r6
 800956c:	782b      	ldrb	r3, [r5, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <_svfiprintf_r+0x52>
 8009572:	2b25      	cmp	r3, #37	@ 0x25
 8009574:	d148      	bne.n	8009608 <_svfiprintf_r+0xe4>
 8009576:	1bab      	subs	r3, r5, r6
 8009578:	9305      	str	r3, [sp, #20]
 800957a:	42b5      	cmp	r5, r6
 800957c:	d00b      	beq.n	8009596 <_svfiprintf_r+0x72>
 800957e:	0032      	movs	r2, r6
 8009580:	0039      	movs	r1, r7
 8009582:	9803      	ldr	r0, [sp, #12]
 8009584:	f7ff ff6e 	bl	8009464 <__ssputs_r>
 8009588:	3001      	adds	r0, #1
 800958a:	d100      	bne.n	800958e <_svfiprintf_r+0x6a>
 800958c:	e0ae      	b.n	80096ec <_svfiprintf_r+0x1c8>
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	9a05      	ldr	r2, [sp, #20]
 8009592:	189b      	adds	r3, r3, r2
 8009594:	6163      	str	r3, [r4, #20]
 8009596:	782b      	ldrb	r3, [r5, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d100      	bne.n	800959e <_svfiprintf_r+0x7a>
 800959c:	e0a6      	b.n	80096ec <_svfiprintf_r+0x1c8>
 800959e:	2201      	movs	r2, #1
 80095a0:	2300      	movs	r3, #0
 80095a2:	4252      	negs	r2, r2
 80095a4:	6062      	str	r2, [r4, #4]
 80095a6:	a904      	add	r1, sp, #16
 80095a8:	3254      	adds	r2, #84	@ 0x54
 80095aa:	1852      	adds	r2, r2, r1
 80095ac:	1c6e      	adds	r6, r5, #1
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	60e3      	str	r3, [r4, #12]
 80095b2:	60a3      	str	r3, [r4, #8]
 80095b4:	7013      	strb	r3, [r2, #0]
 80095b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80095b8:	4b54      	ldr	r3, [pc, #336]	@ (800970c <_svfiprintf_r+0x1e8>)
 80095ba:	2205      	movs	r2, #5
 80095bc:	0018      	movs	r0, r3
 80095be:	7831      	ldrb	r1, [r6, #0]
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f7fd fc4e 	bl	8006e62 <memchr>
 80095c6:	1c75      	adds	r5, r6, #1
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d11f      	bne.n	800960c <_svfiprintf_r+0xe8>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	06d3      	lsls	r3, r2, #27
 80095d0:	d504      	bpl.n	80095dc <_svfiprintf_r+0xb8>
 80095d2:	2353      	movs	r3, #83	@ 0x53
 80095d4:	a904      	add	r1, sp, #16
 80095d6:	185b      	adds	r3, r3, r1
 80095d8:	2120      	movs	r1, #32
 80095da:	7019      	strb	r1, [r3, #0]
 80095dc:	0713      	lsls	r3, r2, #28
 80095de:	d504      	bpl.n	80095ea <_svfiprintf_r+0xc6>
 80095e0:	2353      	movs	r3, #83	@ 0x53
 80095e2:	a904      	add	r1, sp, #16
 80095e4:	185b      	adds	r3, r3, r1
 80095e6:	212b      	movs	r1, #43	@ 0x2b
 80095e8:	7019      	strb	r1, [r3, #0]
 80095ea:	7833      	ldrb	r3, [r6, #0]
 80095ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ee:	d016      	beq.n	800961e <_svfiprintf_r+0xfa>
 80095f0:	0035      	movs	r5, r6
 80095f2:	2100      	movs	r1, #0
 80095f4:	200a      	movs	r0, #10
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	782a      	ldrb	r2, [r5, #0]
 80095fa:	1c6e      	adds	r6, r5, #1
 80095fc:	3a30      	subs	r2, #48	@ 0x30
 80095fe:	2a09      	cmp	r2, #9
 8009600:	d950      	bls.n	80096a4 <_svfiprintf_r+0x180>
 8009602:	2900      	cmp	r1, #0
 8009604:	d111      	bne.n	800962a <_svfiprintf_r+0x106>
 8009606:	e017      	b.n	8009638 <_svfiprintf_r+0x114>
 8009608:	3501      	adds	r5, #1
 800960a:	e7af      	b.n	800956c <_svfiprintf_r+0x48>
 800960c:	9b05      	ldr	r3, [sp, #20]
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	1ac0      	subs	r0, r0, r3
 8009612:	2301      	movs	r3, #1
 8009614:	4083      	lsls	r3, r0
 8009616:	4313      	orrs	r3, r2
 8009618:	002e      	movs	r6, r5
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	e7cc      	b.n	80095b8 <_svfiprintf_r+0x94>
 800961e:	9b07      	ldr	r3, [sp, #28]
 8009620:	1d19      	adds	r1, r3, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	9107      	str	r1, [sp, #28]
 8009626:	2b00      	cmp	r3, #0
 8009628:	db01      	blt.n	800962e <_svfiprintf_r+0x10a>
 800962a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800962c:	e004      	b.n	8009638 <_svfiprintf_r+0x114>
 800962e:	425b      	negs	r3, r3
 8009630:	60e3      	str	r3, [r4, #12]
 8009632:	2302      	movs	r3, #2
 8009634:	4313      	orrs	r3, r2
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	782b      	ldrb	r3, [r5, #0]
 800963a:	2b2e      	cmp	r3, #46	@ 0x2e
 800963c:	d10c      	bne.n	8009658 <_svfiprintf_r+0x134>
 800963e:	786b      	ldrb	r3, [r5, #1]
 8009640:	2b2a      	cmp	r3, #42	@ 0x2a
 8009642:	d134      	bne.n	80096ae <_svfiprintf_r+0x18a>
 8009644:	9b07      	ldr	r3, [sp, #28]
 8009646:	3502      	adds	r5, #2
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	9207      	str	r2, [sp, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	da01      	bge.n	8009656 <_svfiprintf_r+0x132>
 8009652:	2301      	movs	r3, #1
 8009654:	425b      	negs	r3, r3
 8009656:	9309      	str	r3, [sp, #36]	@ 0x24
 8009658:	4e2d      	ldr	r6, [pc, #180]	@ (8009710 <_svfiprintf_r+0x1ec>)
 800965a:	2203      	movs	r2, #3
 800965c:	0030      	movs	r0, r6
 800965e:	7829      	ldrb	r1, [r5, #0]
 8009660:	f7fd fbff 	bl	8006e62 <memchr>
 8009664:	2800      	cmp	r0, #0
 8009666:	d006      	beq.n	8009676 <_svfiprintf_r+0x152>
 8009668:	2340      	movs	r3, #64	@ 0x40
 800966a:	1b80      	subs	r0, r0, r6
 800966c:	4083      	lsls	r3, r0
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	3501      	adds	r5, #1
 8009672:	4313      	orrs	r3, r2
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	7829      	ldrb	r1, [r5, #0]
 8009678:	2206      	movs	r2, #6
 800967a:	4826      	ldr	r0, [pc, #152]	@ (8009714 <_svfiprintf_r+0x1f0>)
 800967c:	1c6e      	adds	r6, r5, #1
 800967e:	7621      	strb	r1, [r4, #24]
 8009680:	f7fd fbef 	bl	8006e62 <memchr>
 8009684:	2800      	cmp	r0, #0
 8009686:	d038      	beq.n	80096fa <_svfiprintf_r+0x1d6>
 8009688:	4b23      	ldr	r3, [pc, #140]	@ (8009718 <_svfiprintf_r+0x1f4>)
 800968a:	2b00      	cmp	r3, #0
 800968c:	d122      	bne.n	80096d4 <_svfiprintf_r+0x1b0>
 800968e:	2207      	movs	r2, #7
 8009690:	9b07      	ldr	r3, [sp, #28]
 8009692:	3307      	adds	r3, #7
 8009694:	4393      	bics	r3, r2
 8009696:	3308      	adds	r3, #8
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	6963      	ldr	r3, [r4, #20]
 800969c:	9a04      	ldr	r2, [sp, #16]
 800969e:	189b      	adds	r3, r3, r2
 80096a0:	6163      	str	r3, [r4, #20]
 80096a2:	e762      	b.n	800956a <_svfiprintf_r+0x46>
 80096a4:	4343      	muls	r3, r0
 80096a6:	0035      	movs	r5, r6
 80096a8:	2101      	movs	r1, #1
 80096aa:	189b      	adds	r3, r3, r2
 80096ac:	e7a4      	b.n	80095f8 <_svfiprintf_r+0xd4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	200a      	movs	r0, #10
 80096b2:	0019      	movs	r1, r3
 80096b4:	3501      	adds	r5, #1
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	782a      	ldrb	r2, [r5, #0]
 80096ba:	1c6e      	adds	r6, r5, #1
 80096bc:	3a30      	subs	r2, #48	@ 0x30
 80096be:	2a09      	cmp	r2, #9
 80096c0:	d903      	bls.n	80096ca <_svfiprintf_r+0x1a6>
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0c8      	beq.n	8009658 <_svfiprintf_r+0x134>
 80096c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80096c8:	e7c6      	b.n	8009658 <_svfiprintf_r+0x134>
 80096ca:	4341      	muls	r1, r0
 80096cc:	0035      	movs	r5, r6
 80096ce:	2301      	movs	r3, #1
 80096d0:	1889      	adds	r1, r1, r2
 80096d2:	e7f1      	b.n	80096b8 <_svfiprintf_r+0x194>
 80096d4:	aa07      	add	r2, sp, #28
 80096d6:	9200      	str	r2, [sp, #0]
 80096d8:	0021      	movs	r1, r4
 80096da:	003a      	movs	r2, r7
 80096dc:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <_svfiprintf_r+0x1f8>)
 80096de:	9803      	ldr	r0, [sp, #12]
 80096e0:	f7fc fc3e 	bl	8005f60 <_printf_float>
 80096e4:	9004      	str	r0, [sp, #16]
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	3301      	adds	r3, #1
 80096ea:	d1d6      	bne.n	800969a <_svfiprintf_r+0x176>
 80096ec:	89bb      	ldrh	r3, [r7, #12]
 80096ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80096f0:	065b      	lsls	r3, r3, #25
 80096f2:	d500      	bpl.n	80096f6 <_svfiprintf_r+0x1d2>
 80096f4:	e72c      	b.n	8009550 <_svfiprintf_r+0x2c>
 80096f6:	b021      	add	sp, #132	@ 0x84
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fa:	aa07      	add	r2, sp, #28
 80096fc:	9200      	str	r2, [sp, #0]
 80096fe:	0021      	movs	r1, r4
 8009700:	003a      	movs	r2, r7
 8009702:	4b06      	ldr	r3, [pc, #24]	@ (800971c <_svfiprintf_r+0x1f8>)
 8009704:	9803      	ldr	r0, [sp, #12]
 8009706:	f7fc fed9 	bl	80064bc <_printf_i>
 800970a:	e7eb      	b.n	80096e4 <_svfiprintf_r+0x1c0>
 800970c:	0800ab49 	.word	0x0800ab49
 8009710:	0800ab4f 	.word	0x0800ab4f
 8009714:	0800ab53 	.word	0x0800ab53
 8009718:	08005f61 	.word	0x08005f61
 800971c:	08009465 	.word	0x08009465

08009720 <__sflush_r>:
 8009720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009722:	220c      	movs	r2, #12
 8009724:	5e8b      	ldrsh	r3, [r1, r2]
 8009726:	0005      	movs	r5, r0
 8009728:	000c      	movs	r4, r1
 800972a:	071a      	lsls	r2, r3, #28
 800972c:	d456      	bmi.n	80097dc <__sflush_r+0xbc>
 800972e:	684a      	ldr	r2, [r1, #4]
 8009730:	2a00      	cmp	r2, #0
 8009732:	dc02      	bgt.n	800973a <__sflush_r+0x1a>
 8009734:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009736:	2a00      	cmp	r2, #0
 8009738:	dd4e      	ble.n	80097d8 <__sflush_r+0xb8>
 800973a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800973c:	2f00      	cmp	r7, #0
 800973e:	d04b      	beq.n	80097d8 <__sflush_r+0xb8>
 8009740:	2200      	movs	r2, #0
 8009742:	2080      	movs	r0, #128	@ 0x80
 8009744:	682e      	ldr	r6, [r5, #0]
 8009746:	602a      	str	r2, [r5, #0]
 8009748:	001a      	movs	r2, r3
 800974a:	0140      	lsls	r0, r0, #5
 800974c:	6a21      	ldr	r1, [r4, #32]
 800974e:	4002      	ands	r2, r0
 8009750:	4203      	tst	r3, r0
 8009752:	d033      	beq.n	80097bc <__sflush_r+0x9c>
 8009754:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	075b      	lsls	r3, r3, #29
 800975a:	d506      	bpl.n	800976a <__sflush_r+0x4a>
 800975c:	6863      	ldr	r3, [r4, #4]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <__sflush_r+0x4a>
 8009766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009768:	1ad2      	subs	r2, r2, r3
 800976a:	2300      	movs	r3, #0
 800976c:	0028      	movs	r0, r5
 800976e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	47b8      	blx	r7
 8009774:	89a2      	ldrh	r2, [r4, #12]
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d106      	bne.n	8009788 <__sflush_r+0x68>
 800977a:	6829      	ldr	r1, [r5, #0]
 800977c:	291d      	cmp	r1, #29
 800977e:	d846      	bhi.n	800980e <__sflush_r+0xee>
 8009780:	4b29      	ldr	r3, [pc, #164]	@ (8009828 <__sflush_r+0x108>)
 8009782:	410b      	asrs	r3, r1
 8009784:	07db      	lsls	r3, r3, #31
 8009786:	d442      	bmi.n	800980e <__sflush_r+0xee>
 8009788:	2300      	movs	r3, #0
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	04d2      	lsls	r2, r2, #19
 8009792:	d505      	bpl.n	80097a0 <__sflush_r+0x80>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <__sflush_r+0x7e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d100      	bne.n	80097a0 <__sflush_r+0x80>
 800979e:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097a2:	602e      	str	r6, [r5, #0]
 80097a4:	2900      	cmp	r1, #0
 80097a6:	d017      	beq.n	80097d8 <__sflush_r+0xb8>
 80097a8:	0023      	movs	r3, r4
 80097aa:	3344      	adds	r3, #68	@ 0x44
 80097ac:	4299      	cmp	r1, r3
 80097ae:	d002      	beq.n	80097b6 <__sflush_r+0x96>
 80097b0:	0028      	movs	r0, r5
 80097b2:	f7fe f9e7 	bl	8007b84 <_free_r>
 80097b6:	2300      	movs	r3, #0
 80097b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097ba:	e00d      	b.n	80097d8 <__sflush_r+0xb8>
 80097bc:	2301      	movs	r3, #1
 80097be:	0028      	movs	r0, r5
 80097c0:	47b8      	blx	r7
 80097c2:	0002      	movs	r2, r0
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d1c6      	bne.n	8009756 <__sflush_r+0x36>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c3      	beq.n	8009756 <__sflush_r+0x36>
 80097ce:	2b1d      	cmp	r3, #29
 80097d0:	d001      	beq.n	80097d6 <__sflush_r+0xb6>
 80097d2:	2b16      	cmp	r3, #22
 80097d4:	d11a      	bne.n	800980c <__sflush_r+0xec>
 80097d6:	602e      	str	r6, [r5, #0]
 80097d8:	2000      	movs	r0, #0
 80097da:	e01e      	b.n	800981a <__sflush_r+0xfa>
 80097dc:	690e      	ldr	r6, [r1, #16]
 80097de:	2e00      	cmp	r6, #0
 80097e0:	d0fa      	beq.n	80097d8 <__sflush_r+0xb8>
 80097e2:	680f      	ldr	r7, [r1, #0]
 80097e4:	600e      	str	r6, [r1, #0]
 80097e6:	1bba      	subs	r2, r7, r6
 80097e8:	9201      	str	r2, [sp, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	079b      	lsls	r3, r3, #30
 80097ee:	d100      	bne.n	80097f2 <__sflush_r+0xd2>
 80097f0:	694a      	ldr	r2, [r1, #20]
 80097f2:	60a2      	str	r2, [r4, #8]
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	ddee      	ble.n	80097d8 <__sflush_r+0xb8>
 80097fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80097fc:	0032      	movs	r2, r6
 80097fe:	001f      	movs	r7, r3
 8009800:	0028      	movs	r0, r5
 8009802:	9b01      	ldr	r3, [sp, #4]
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	47b8      	blx	r7
 8009808:	2800      	cmp	r0, #0
 800980a:	dc07      	bgt.n	800981c <__sflush_r+0xfc>
 800980c:	89a2      	ldrh	r2, [r4, #12]
 800980e:	2340      	movs	r3, #64	@ 0x40
 8009810:	2001      	movs	r0, #1
 8009812:	4313      	orrs	r3, r2
 8009814:	b21b      	sxth	r3, r3
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	4240      	negs	r0, r0
 800981a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	1836      	adds	r6, r6, r0
 8009820:	1a1b      	subs	r3, r3, r0
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	e7e6      	b.n	80097f4 <__sflush_r+0xd4>
 8009826:	46c0      	nop			@ (mov r8, r8)
 8009828:	dfbffffe 	.word	0xdfbffffe

0800982c <_fflush_r>:
 800982c:	690b      	ldr	r3, [r1, #16]
 800982e:	b570      	push	{r4, r5, r6, lr}
 8009830:	0005      	movs	r5, r0
 8009832:	000c      	movs	r4, r1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <_fflush_r+0x12>
 8009838:	2500      	movs	r5, #0
 800983a:	0028      	movs	r0, r5
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	2800      	cmp	r0, #0
 8009840:	d004      	beq.n	800984c <_fflush_r+0x20>
 8009842:	6a03      	ldr	r3, [r0, #32]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <_fflush_r+0x20>
 8009848:	f7fd f9e4 	bl	8006c14 <__sinit>
 800984c:	220c      	movs	r2, #12
 800984e:	5ea3      	ldrsh	r3, [r4, r2]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0f1      	beq.n	8009838 <_fflush_r+0xc>
 8009854:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009856:	07d2      	lsls	r2, r2, #31
 8009858:	d404      	bmi.n	8009864 <_fflush_r+0x38>
 800985a:	059b      	lsls	r3, r3, #22
 800985c:	d402      	bmi.n	8009864 <_fflush_r+0x38>
 800985e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009860:	f7fd fafd 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8009864:	0028      	movs	r0, r5
 8009866:	0021      	movs	r1, r4
 8009868:	f7ff ff5a 	bl	8009720 <__sflush_r>
 800986c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800986e:	0005      	movs	r5, r0
 8009870:	07db      	lsls	r3, r3, #31
 8009872:	d4e2      	bmi.n	800983a <_fflush_r+0xe>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	059b      	lsls	r3, r3, #22
 8009878:	d4df      	bmi.n	800983a <_fflush_r+0xe>
 800987a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987c:	f7fd faf0 	bl	8006e60 <__retarget_lock_release_recursive>
 8009880:	e7db      	b.n	800983a <_fflush_r+0xe>

08009882 <memmove>:
 8009882:	b510      	push	{r4, lr}
 8009884:	4288      	cmp	r0, r1
 8009886:	d806      	bhi.n	8009896 <memmove+0x14>
 8009888:	2300      	movs	r3, #0
 800988a:	429a      	cmp	r2, r3
 800988c:	d008      	beq.n	80098a0 <memmove+0x1e>
 800988e:	5ccc      	ldrb	r4, [r1, r3]
 8009890:	54c4      	strb	r4, [r0, r3]
 8009892:	3301      	adds	r3, #1
 8009894:	e7f9      	b.n	800988a <memmove+0x8>
 8009896:	188b      	adds	r3, r1, r2
 8009898:	4298      	cmp	r0, r3
 800989a:	d2f5      	bcs.n	8009888 <memmove+0x6>
 800989c:	3a01      	subs	r2, #1
 800989e:	d200      	bcs.n	80098a2 <memmove+0x20>
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	5c8b      	ldrb	r3, [r1, r2]
 80098a4:	5483      	strb	r3, [r0, r2]
 80098a6:	e7f9      	b.n	800989c <memmove+0x1a>

080098a8 <strncmp>:
 80098a8:	b530      	push	{r4, r5, lr}
 80098aa:	0005      	movs	r5, r0
 80098ac:	1e10      	subs	r0, r2, #0
 80098ae:	d00b      	beq.n	80098c8 <strncmp+0x20>
 80098b0:	2400      	movs	r4, #0
 80098b2:	3a01      	subs	r2, #1
 80098b4:	5d2b      	ldrb	r3, [r5, r4]
 80098b6:	5d08      	ldrb	r0, [r1, r4]
 80098b8:	4283      	cmp	r3, r0
 80098ba:	d104      	bne.n	80098c6 <strncmp+0x1e>
 80098bc:	42a2      	cmp	r2, r4
 80098be:	d002      	beq.n	80098c6 <strncmp+0x1e>
 80098c0:	3401      	adds	r4, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1f6      	bne.n	80098b4 <strncmp+0xc>
 80098c6:	1a18      	subs	r0, r3, r0
 80098c8:	bd30      	pop	{r4, r5, pc}
	...

080098cc <_sbrk_r>:
 80098cc:	2300      	movs	r3, #0
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	4d06      	ldr	r5, [pc, #24]	@ (80098ec <_sbrk_r+0x20>)
 80098d2:	0004      	movs	r4, r0
 80098d4:	0008      	movs	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f9 fd22 	bl	8003320 <_sbrk>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d103      	bne.n	80098e8 <_sbrk_r+0x1c>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d000      	beq.n	80098e8 <_sbrk_r+0x1c>
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	bd70      	pop	{r4, r5, r6, pc}
 80098ea:	46c0      	nop			@ (mov r8, r8)
 80098ec:	20000474 	.word	0x20000474

080098f0 <memcpy>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	b510      	push	{r4, lr}
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d100      	bne.n	80098fa <memcpy+0xa>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	5ccc      	ldrb	r4, [r1, r3]
 80098fc:	54c4      	strb	r4, [r0, r3]
 80098fe:	3301      	adds	r3, #1
 8009900:	e7f8      	b.n	80098f4 <memcpy+0x4>
	...

08009904 <nan>:
 8009904:	2000      	movs	r0, #0
 8009906:	4901      	ldr	r1, [pc, #4]	@ (800990c <nan+0x8>)
 8009908:	4770      	bx	lr
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	7ff80000 	.word	0x7ff80000

08009910 <__assert_func>:
 8009910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009912:	0014      	movs	r4, r2
 8009914:	001a      	movs	r2, r3
 8009916:	4b09      	ldr	r3, [pc, #36]	@ (800993c <__assert_func+0x2c>)
 8009918:	0005      	movs	r5, r0
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	000e      	movs	r6, r1
 800991e:	68d8      	ldr	r0, [r3, #12]
 8009920:	4b07      	ldr	r3, [pc, #28]	@ (8009940 <__assert_func+0x30>)
 8009922:	2c00      	cmp	r4, #0
 8009924:	d101      	bne.n	800992a <__assert_func+0x1a>
 8009926:	4b07      	ldr	r3, [pc, #28]	@ (8009944 <__assert_func+0x34>)
 8009928:	001c      	movs	r4, r3
 800992a:	4907      	ldr	r1, [pc, #28]	@ (8009948 <__assert_func+0x38>)
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	9402      	str	r4, [sp, #8]
 8009930:	002b      	movs	r3, r5
 8009932:	9600      	str	r6, [sp, #0]
 8009934:	f000 fbe0 	bl	800a0f8 <fiprintf>
 8009938:	f000 fbee 	bl	800a118 <abort>
 800993c:	20000018 	.word	0x20000018
 8009940:	0800ab62 	.word	0x0800ab62
 8009944:	0800ab9d 	.word	0x0800ab9d
 8009948:	0800ab6f 	.word	0x0800ab6f

0800994c <_calloc_r>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	0c0b      	lsrs	r3, r1, #16
 8009950:	0c15      	lsrs	r5, r2, #16
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11e      	bne.n	8009994 <_calloc_r+0x48>
 8009956:	2d00      	cmp	r5, #0
 8009958:	d10c      	bne.n	8009974 <_calloc_r+0x28>
 800995a:	b289      	uxth	r1, r1
 800995c:	b294      	uxth	r4, r2
 800995e:	434c      	muls	r4, r1
 8009960:	0021      	movs	r1, r4
 8009962:	f7fe f985 	bl	8007c70 <_malloc_r>
 8009966:	1e05      	subs	r5, r0, #0
 8009968:	d01a      	beq.n	80099a0 <_calloc_r+0x54>
 800996a:	0022      	movs	r2, r4
 800996c:	2100      	movs	r1, #0
 800996e:	f7fd f9f1 	bl	8006d54 <memset>
 8009972:	e016      	b.n	80099a2 <_calloc_r+0x56>
 8009974:	1c2b      	adds	r3, r5, #0
 8009976:	1c0c      	adds	r4, r1, #0
 8009978:	b289      	uxth	r1, r1
 800997a:	b292      	uxth	r2, r2
 800997c:	434a      	muls	r2, r1
 800997e:	b29b      	uxth	r3, r3
 8009980:	b2a1      	uxth	r1, r4
 8009982:	4359      	muls	r1, r3
 8009984:	0c14      	lsrs	r4, r2, #16
 8009986:	190c      	adds	r4, r1, r4
 8009988:	0c23      	lsrs	r3, r4, #16
 800998a:	d107      	bne.n	800999c <_calloc_r+0x50>
 800998c:	0424      	lsls	r4, r4, #16
 800998e:	b292      	uxth	r2, r2
 8009990:	4314      	orrs	r4, r2
 8009992:	e7e5      	b.n	8009960 <_calloc_r+0x14>
 8009994:	2d00      	cmp	r5, #0
 8009996:	d101      	bne.n	800999c <_calloc_r+0x50>
 8009998:	1c14      	adds	r4, r2, #0
 800999a:	e7ed      	b.n	8009978 <_calloc_r+0x2c>
 800999c:	230c      	movs	r3, #12
 800999e:	6003      	str	r3, [r0, #0]
 80099a0:	2500      	movs	r5, #0
 80099a2:	0028      	movs	r0, r5
 80099a4:	bd70      	pop	{r4, r5, r6, pc}

080099a6 <rshift>:
 80099a6:	0002      	movs	r2, r0
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	6904      	ldr	r4, [r0, #16]
 80099ac:	b085      	sub	sp, #20
 80099ae:	3214      	adds	r2, #20
 80099b0:	114b      	asrs	r3, r1, #5
 80099b2:	0016      	movs	r6, r2
 80099b4:	9302      	str	r3, [sp, #8]
 80099b6:	429c      	cmp	r4, r3
 80099b8:	dd31      	ble.n	8009a1e <rshift+0x78>
 80099ba:	261f      	movs	r6, #31
 80099bc:	000f      	movs	r7, r1
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	00a5      	lsls	r5, r4, #2
 80099c2:	18d3      	adds	r3, r2, r3
 80099c4:	4037      	ands	r7, r6
 80099c6:	1955      	adds	r5, r2, r5
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	9701      	str	r7, [sp, #4]
 80099cc:	4231      	tst	r1, r6
 80099ce:	d10d      	bne.n	80099ec <rshift+0x46>
 80099d0:	0016      	movs	r6, r2
 80099d2:	0019      	movs	r1, r3
 80099d4:	428d      	cmp	r5, r1
 80099d6:	d836      	bhi.n	8009a46 <rshift+0xa0>
 80099d8:	9b00      	ldr	r3, [sp, #0]
 80099da:	2600      	movs	r6, #0
 80099dc:	3b03      	subs	r3, #3
 80099de:	429d      	cmp	r5, r3
 80099e0:	d302      	bcc.n	80099e8 <rshift+0x42>
 80099e2:	9b02      	ldr	r3, [sp, #8]
 80099e4:	1ae4      	subs	r4, r4, r3
 80099e6:	00a6      	lsls	r6, r4, #2
 80099e8:	1996      	adds	r6, r2, r6
 80099ea:	e018      	b.n	8009a1e <rshift+0x78>
 80099ec:	2120      	movs	r1, #32
 80099ee:	9e01      	ldr	r6, [sp, #4]
 80099f0:	9f01      	ldr	r7, [sp, #4]
 80099f2:	1b89      	subs	r1, r1, r6
 80099f4:	9e00      	ldr	r6, [sp, #0]
 80099f6:	9103      	str	r1, [sp, #12]
 80099f8:	ce02      	ldmia	r6!, {r1}
 80099fa:	4694      	mov	ip, r2
 80099fc:	40f9      	lsrs	r1, r7
 80099fe:	42b5      	cmp	r5, r6
 8009a00:	d816      	bhi.n	8009a30 <rshift+0x8a>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	2600      	movs	r6, #0
 8009a06:	3301      	adds	r3, #1
 8009a08:	429d      	cmp	r5, r3
 8009a0a:	d303      	bcc.n	8009a14 <rshift+0x6e>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	1ae4      	subs	r4, r4, r3
 8009a10:	00a6      	lsls	r6, r4, #2
 8009a12:	3e04      	subs	r6, #4
 8009a14:	1996      	adds	r6, r2, r6
 8009a16:	6031      	str	r1, [r6, #0]
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d000      	beq.n	8009a1e <rshift+0x78>
 8009a1c:	3604      	adds	r6, #4
 8009a1e:	1ab1      	subs	r1, r6, r2
 8009a20:	1089      	asrs	r1, r1, #2
 8009a22:	6101      	str	r1, [r0, #16]
 8009a24:	4296      	cmp	r6, r2
 8009a26:	d101      	bne.n	8009a2c <rshift+0x86>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	6143      	str	r3, [r0, #20]
 8009a2c:	b005      	add	sp, #20
 8009a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a30:	6837      	ldr	r7, [r6, #0]
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	409f      	lsls	r7, r3
 8009a36:	430f      	orrs	r7, r1
 8009a38:	4661      	mov	r1, ip
 8009a3a:	c180      	stmia	r1!, {r7}
 8009a3c:	468c      	mov	ip, r1
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	ce02      	ldmia	r6!, {r1}
 8009a42:	40d9      	lsrs	r1, r3
 8009a44:	e7db      	b.n	80099fe <rshift+0x58>
 8009a46:	c980      	ldmia	r1!, {r7}
 8009a48:	c680      	stmia	r6!, {r7}
 8009a4a:	e7c3      	b.n	80099d4 <rshift+0x2e>

08009a4c <__hexdig_fun>:
 8009a4c:	0002      	movs	r2, r0
 8009a4e:	3a30      	subs	r2, #48	@ 0x30
 8009a50:	0003      	movs	r3, r0
 8009a52:	2a09      	cmp	r2, #9
 8009a54:	d802      	bhi.n	8009a5c <__hexdig_fun+0x10>
 8009a56:	3b20      	subs	r3, #32
 8009a58:	b2d8      	uxtb	r0, r3
 8009a5a:	4770      	bx	lr
 8009a5c:	0002      	movs	r2, r0
 8009a5e:	3a61      	subs	r2, #97	@ 0x61
 8009a60:	2a05      	cmp	r2, #5
 8009a62:	d801      	bhi.n	8009a68 <__hexdig_fun+0x1c>
 8009a64:	3b47      	subs	r3, #71	@ 0x47
 8009a66:	e7f7      	b.n	8009a58 <__hexdig_fun+0xc>
 8009a68:	001a      	movs	r2, r3
 8009a6a:	3a41      	subs	r2, #65	@ 0x41
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	2a05      	cmp	r2, #5
 8009a70:	d8f3      	bhi.n	8009a5a <__hexdig_fun+0xe>
 8009a72:	3b27      	subs	r3, #39	@ 0x27
 8009a74:	e7f0      	b.n	8009a58 <__hexdig_fun+0xc>
	...

08009a78 <__gethex>:
 8009a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7a:	b089      	sub	sp, #36	@ 0x24
 8009a7c:	9307      	str	r3, [sp, #28]
 8009a7e:	680b      	ldr	r3, [r1, #0]
 8009a80:	9201      	str	r2, [sp, #4]
 8009a82:	9003      	str	r0, [sp, #12]
 8009a84:	9106      	str	r1, [sp, #24]
 8009a86:	1c9a      	adds	r2, r3, #2
 8009a88:	0011      	movs	r1, r2
 8009a8a:	3201      	adds	r2, #1
 8009a8c:	1e50      	subs	r0, r2, #1
 8009a8e:	7800      	ldrb	r0, [r0, #0]
 8009a90:	2830      	cmp	r0, #48	@ 0x30
 8009a92:	d0f9      	beq.n	8009a88 <__gethex+0x10>
 8009a94:	1acb      	subs	r3, r1, r3
 8009a96:	3b02      	subs	r3, #2
 8009a98:	9305      	str	r3, [sp, #20]
 8009a9a:	9100      	str	r1, [sp, #0]
 8009a9c:	f7ff ffd6 	bl	8009a4c <__hexdig_fun>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	001d      	movs	r5, r3
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	4298      	cmp	r0, r3
 8009aa8:	d11e      	bne.n	8009ae8 <__gethex+0x70>
 8009aaa:	2201      	movs	r2, #1
 8009aac:	49a6      	ldr	r1, [pc, #664]	@ (8009d48 <__gethex+0x2d0>)
 8009aae:	9800      	ldr	r0, [sp, #0]
 8009ab0:	f7ff fefa 	bl	80098a8 <strncmp>
 8009ab4:	0007      	movs	r7, r0
 8009ab6:	42a8      	cmp	r0, r5
 8009ab8:	d000      	beq.n	8009abc <__gethex+0x44>
 8009aba:	e06a      	b.n	8009b92 <__gethex+0x11a>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	7858      	ldrb	r0, [r3, #1]
 8009ac0:	1c5c      	adds	r4, r3, #1
 8009ac2:	f7ff ffc3 	bl	8009a4c <__hexdig_fun>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	9302      	str	r3, [sp, #8]
 8009aca:	42a8      	cmp	r0, r5
 8009acc:	d02f      	beq.n	8009b2e <__gethex+0xb6>
 8009ace:	9400      	str	r4, [sp, #0]
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	7818      	ldrb	r0, [r3, #0]
 8009ad4:	2830      	cmp	r0, #48	@ 0x30
 8009ad6:	d009      	beq.n	8009aec <__gethex+0x74>
 8009ad8:	f7ff ffb8 	bl	8009a4c <__hexdig_fun>
 8009adc:	4242      	negs	r2, r0
 8009ade:	4142      	adcs	r2, r0
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	0025      	movs	r5, r4
 8009ae4:	9202      	str	r2, [sp, #8]
 8009ae6:	9305      	str	r3, [sp, #20]
 8009ae8:	9c00      	ldr	r4, [sp, #0]
 8009aea:	e004      	b.n	8009af6 <__gethex+0x7e>
 8009aec:	9b00      	ldr	r3, [sp, #0]
 8009aee:	3301      	adds	r3, #1
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	e7ed      	b.n	8009ad0 <__gethex+0x58>
 8009af4:	3401      	adds	r4, #1
 8009af6:	7820      	ldrb	r0, [r4, #0]
 8009af8:	f7ff ffa8 	bl	8009a4c <__hexdig_fun>
 8009afc:	1e07      	subs	r7, r0, #0
 8009afe:	d1f9      	bne.n	8009af4 <__gethex+0x7c>
 8009b00:	2201      	movs	r2, #1
 8009b02:	0020      	movs	r0, r4
 8009b04:	4990      	ldr	r1, [pc, #576]	@ (8009d48 <__gethex+0x2d0>)
 8009b06:	f7ff fecf 	bl	80098a8 <strncmp>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d10d      	bne.n	8009b2a <__gethex+0xb2>
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	d106      	bne.n	8009b20 <__gethex+0xa8>
 8009b12:	3401      	adds	r4, #1
 8009b14:	0025      	movs	r5, r4
 8009b16:	7820      	ldrb	r0, [r4, #0]
 8009b18:	f7ff ff98 	bl	8009a4c <__hexdig_fun>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d102      	bne.n	8009b26 <__gethex+0xae>
 8009b20:	1b2d      	subs	r5, r5, r4
 8009b22:	00af      	lsls	r7, r5, #2
 8009b24:	e003      	b.n	8009b2e <__gethex+0xb6>
 8009b26:	3401      	adds	r4, #1
 8009b28:	e7f5      	b.n	8009b16 <__gethex+0x9e>
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	d1f8      	bne.n	8009b20 <__gethex+0xa8>
 8009b2e:	2220      	movs	r2, #32
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	0026      	movs	r6, r4
 8009b34:	4393      	bics	r3, r2
 8009b36:	2b50      	cmp	r3, #80	@ 0x50
 8009b38:	d11d      	bne.n	8009b76 <__gethex+0xfe>
 8009b3a:	7863      	ldrb	r3, [r4, #1]
 8009b3c:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b3e:	d02d      	beq.n	8009b9c <__gethex+0x124>
 8009b40:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b42:	d02f      	beq.n	8009ba4 <__gethex+0x12c>
 8009b44:	2300      	movs	r3, #0
 8009b46:	1c66      	adds	r6, r4, #1
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	7830      	ldrb	r0, [r6, #0]
 8009b4c:	f7ff ff7e 	bl	8009a4c <__hexdig_fun>
 8009b50:	1e43      	subs	r3, r0, #1
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	0005      	movs	r5, r0
 8009b56:	2b18      	cmp	r3, #24
 8009b58:	d82a      	bhi.n	8009bb0 <__gethex+0x138>
 8009b5a:	7870      	ldrb	r0, [r6, #1]
 8009b5c:	f7ff ff76 	bl	8009a4c <__hexdig_fun>
 8009b60:	1e43      	subs	r3, r0, #1
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	3d10      	subs	r5, #16
 8009b68:	2b18      	cmp	r3, #24
 8009b6a:	d91d      	bls.n	8009ba8 <__gethex+0x130>
 8009b6c:	9b04      	ldr	r3, [sp, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d000      	beq.n	8009b74 <__gethex+0xfc>
 8009b72:	426d      	negs	r5, r5
 8009b74:	197f      	adds	r7, r7, r5
 8009b76:	9b06      	ldr	r3, [sp, #24]
 8009b78:	601e      	str	r6, [r3, #0]
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d019      	beq.n	8009bb4 <__gethex+0x13c>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	2606      	movs	r6, #6
 8009b84:	425a      	negs	r2, r3
 8009b86:	4153      	adcs	r3, r2
 8009b88:	425b      	negs	r3, r3
 8009b8a:	401e      	ands	r6, r3
 8009b8c:	0030      	movs	r0, r6
 8009b8e:	b009      	add	sp, #36	@ 0x24
 8009b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b92:	2301      	movs	r3, #1
 8009b94:	2700      	movs	r7, #0
 8009b96:	9c00      	ldr	r4, [sp, #0]
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	e7c8      	b.n	8009b2e <__gethex+0xb6>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9304      	str	r3, [sp, #16]
 8009ba0:	1ca6      	adds	r6, r4, #2
 8009ba2:	e7d2      	b.n	8009b4a <__gethex+0xd2>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e7fa      	b.n	8009b9e <__gethex+0x126>
 8009ba8:	230a      	movs	r3, #10
 8009baa:	435d      	muls	r5, r3
 8009bac:	182d      	adds	r5, r5, r0
 8009bae:	e7d4      	b.n	8009b5a <__gethex+0xe2>
 8009bb0:	0026      	movs	r6, r4
 8009bb2:	e7e0      	b.n	8009b76 <__gethex+0xfe>
 8009bb4:	9b00      	ldr	r3, [sp, #0]
 8009bb6:	9902      	ldr	r1, [sp, #8]
 8009bb8:	1ae3      	subs	r3, r4, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	dc0a      	bgt.n	8009bd6 <__gethex+0x15e>
 8009bc0:	9803      	ldr	r0, [sp, #12]
 8009bc2:	f7fe f8e5 	bl	8007d90 <_Balloc>
 8009bc6:	1e05      	subs	r5, r0, #0
 8009bc8:	d108      	bne.n	8009bdc <__gethex+0x164>
 8009bca:	002a      	movs	r2, r5
 8009bcc:	21e4      	movs	r1, #228	@ 0xe4
 8009bce:	4b5f      	ldr	r3, [pc, #380]	@ (8009d4c <__gethex+0x2d4>)
 8009bd0:	485f      	ldr	r0, [pc, #380]	@ (8009d50 <__gethex+0x2d8>)
 8009bd2:	f7ff fe9d 	bl	8009910 <__assert_func>
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	105b      	asrs	r3, r3, #1
 8009bda:	e7ef      	b.n	8009bbc <__gethex+0x144>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	3314      	adds	r3, #20
 8009be0:	9302      	str	r3, [sp, #8]
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	2300      	movs	r3, #0
 8009be6:	001e      	movs	r6, r3
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	d338      	bcc.n	8009c62 <__gethex+0x1ea>
 8009bf0:	9c05      	ldr	r4, [sp, #20]
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	c440      	stmia	r4!, {r6}
 8009bf6:	1ae4      	subs	r4, r4, r3
 8009bf8:	10a4      	asrs	r4, r4, #2
 8009bfa:	0030      	movs	r0, r6
 8009bfc:	612c      	str	r4, [r5, #16]
 8009bfe:	f7fe f9bf 	bl	8007f80 <__hi0bits>
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	0164      	lsls	r4, r4, #5
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	1a26      	subs	r6, r4, r0
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	429e      	cmp	r6, r3
 8009c0e:	dd52      	ble.n	8009cb6 <__gethex+0x23e>
 8009c10:	1af6      	subs	r6, r6, r3
 8009c12:	0031      	movs	r1, r6
 8009c14:	0028      	movs	r0, r5
 8009c16:	f7fe fd62 	bl	80086de <__any_on>
 8009c1a:	1e04      	subs	r4, r0, #0
 8009c1c:	d00f      	beq.n	8009c3e <__gethex+0x1c6>
 8009c1e:	2401      	movs	r4, #1
 8009c20:	231f      	movs	r3, #31
 8009c22:	0020      	movs	r0, r4
 8009c24:	1e72      	subs	r2, r6, #1
 8009c26:	4013      	ands	r3, r2
 8009c28:	4098      	lsls	r0, r3
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	1151      	asrs	r1, r2, #5
 8009c2e:	9802      	ldr	r0, [sp, #8]
 8009c30:	0089      	lsls	r1, r1, #2
 8009c32:	5809      	ldr	r1, [r1, r0]
 8009c34:	4219      	tst	r1, r3
 8009c36:	d002      	beq.n	8009c3e <__gethex+0x1c6>
 8009c38:	42a2      	cmp	r2, r4
 8009c3a:	dc34      	bgt.n	8009ca6 <__gethex+0x22e>
 8009c3c:	2402      	movs	r4, #2
 8009c3e:	0031      	movs	r1, r6
 8009c40:	0028      	movs	r0, r5
 8009c42:	f7ff feb0 	bl	80099a6 <rshift>
 8009c46:	19bf      	adds	r7, r7, r6
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	42bb      	cmp	r3, r7
 8009c4e:	da42      	bge.n	8009cd6 <__gethex+0x25e>
 8009c50:	0029      	movs	r1, r5
 8009c52:	9803      	ldr	r0, [sp, #12]
 8009c54:	f7fe f8e0 	bl	8007e18 <_Bfree>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c5c:	26a3      	movs	r6, #163	@ 0xa3
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	e794      	b.n	8009b8c <__gethex+0x114>
 8009c62:	3c01      	subs	r4, #1
 8009c64:	7823      	ldrb	r3, [r4, #0]
 8009c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c68:	d012      	beq.n	8009c90 <__gethex+0x218>
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d104      	bne.n	8009c7a <__gethex+0x202>
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	c340      	stmia	r3!, {r6}
 8009c74:	2600      	movs	r6, #0
 8009c76:	9305      	str	r3, [sp, #20]
 8009c78:	9604      	str	r6, [sp, #16]
 8009c7a:	7820      	ldrb	r0, [r4, #0]
 8009c7c:	f7ff fee6 	bl	8009a4c <__hexdig_fun>
 8009c80:	230f      	movs	r3, #15
 8009c82:	4018      	ands	r0, r3
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	4098      	lsls	r0, r3
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4306      	orrs	r6, r0
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	e7ac      	b.n	8009bea <__gethex+0x172>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	d8e9      	bhi.n	8009c6a <__gethex+0x1f2>
 8009c96:	2201      	movs	r2, #1
 8009c98:	0020      	movs	r0, r4
 8009c9a:	492b      	ldr	r1, [pc, #172]	@ (8009d48 <__gethex+0x2d0>)
 8009c9c:	f7ff fe04 	bl	80098a8 <strncmp>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d1e2      	bne.n	8009c6a <__gethex+0x1f2>
 8009ca4:	e7a1      	b.n	8009bea <__gethex+0x172>
 8009ca6:	0028      	movs	r0, r5
 8009ca8:	1eb1      	subs	r1, r6, #2
 8009caa:	f7fe fd18 	bl	80086de <__any_on>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d0c4      	beq.n	8009c3c <__gethex+0x1c4>
 8009cb2:	2403      	movs	r4, #3
 8009cb4:	e7c3      	b.n	8009c3e <__gethex+0x1c6>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	2400      	movs	r4, #0
 8009cba:	429e      	cmp	r6, r3
 8009cbc:	dac4      	bge.n	8009c48 <__gethex+0x1d0>
 8009cbe:	1b9e      	subs	r6, r3, r6
 8009cc0:	0029      	movs	r1, r5
 8009cc2:	0032      	movs	r2, r6
 8009cc4:	9803      	ldr	r0, [sp, #12]
 8009cc6:	f7fe fad1 	bl	800826c <__lshift>
 8009cca:	0003      	movs	r3, r0
 8009ccc:	3314      	adds	r3, #20
 8009cce:	0005      	movs	r5, r0
 8009cd0:	1bbf      	subs	r7, r7, r6
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	e7b8      	b.n	8009c48 <__gethex+0x1d0>
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	685e      	ldr	r6, [r3, #4]
 8009cda:	42be      	cmp	r6, r7
 8009cdc:	dd6f      	ble.n	8009dbe <__gethex+0x346>
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	1bf6      	subs	r6, r6, r7
 8009ce2:	42b3      	cmp	r3, r6
 8009ce4:	dc36      	bgt.n	8009d54 <__gethex+0x2dc>
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d024      	beq.n	8009d38 <__gethex+0x2c0>
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d026      	beq.n	8009d40 <__gethex+0x2c8>
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d117      	bne.n	8009d26 <__gethex+0x2ae>
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	42b3      	cmp	r3, r6
 8009cfa:	d114      	bne.n	8009d26 <__gethex+0x2ae>
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10b      	bne.n	8009d18 <__gethex+0x2a0>
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	9a07      	ldr	r2, [sp, #28]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	2662      	movs	r6, #98	@ 0x62
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9a02      	ldr	r2, [sp, #8]
 8009d0e:	612b      	str	r3, [r5, #16]
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d14:	601d      	str	r5, [r3, #0]
 8009d16:	e739      	b.n	8009b8c <__gethex+0x114>
 8009d18:	9900      	ldr	r1, [sp, #0]
 8009d1a:	0028      	movs	r0, r5
 8009d1c:	3901      	subs	r1, #1
 8009d1e:	f7fe fcde 	bl	80086de <__any_on>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d1ec      	bne.n	8009d00 <__gethex+0x288>
 8009d26:	0029      	movs	r1, r5
 8009d28:	9803      	ldr	r0, [sp, #12]
 8009d2a:	f7fe f875 	bl	8007e18 <_Bfree>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d32:	2650      	movs	r6, #80	@ 0x50
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	e729      	b.n	8009b8c <__gethex+0x114>
 8009d38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1f3      	bne.n	8009d26 <__gethex+0x2ae>
 8009d3e:	e7df      	b.n	8009d00 <__gethex+0x288>
 8009d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1dc      	bne.n	8009d00 <__gethex+0x288>
 8009d46:	e7ee      	b.n	8009d26 <__gethex+0x2ae>
 8009d48:	0800a9f0 	.word	0x0800a9f0
 8009d4c:	0800a885 	.word	0x0800a885
 8009d50:	0800ab9e 	.word	0x0800ab9e
 8009d54:	1e77      	subs	r7, r6, #1
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d12f      	bne.n	8009dba <__gethex+0x342>
 8009d5a:	2f00      	cmp	r7, #0
 8009d5c:	d004      	beq.n	8009d68 <__gethex+0x2f0>
 8009d5e:	0039      	movs	r1, r7
 8009d60:	0028      	movs	r0, r5
 8009d62:	f7fe fcbc 	bl	80086de <__any_on>
 8009d66:	0004      	movs	r4, r0
 8009d68:	231f      	movs	r3, #31
 8009d6a:	117a      	asrs	r2, r7, #5
 8009d6c:	401f      	ands	r7, r3
 8009d6e:	3b1e      	subs	r3, #30
 8009d70:	40bb      	lsls	r3, r7
 8009d72:	9902      	ldr	r1, [sp, #8]
 8009d74:	0092      	lsls	r2, r2, #2
 8009d76:	5852      	ldr	r2, [r2, r1]
 8009d78:	421a      	tst	r2, r3
 8009d7a:	d001      	beq.n	8009d80 <__gethex+0x308>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	431c      	orrs	r4, r3
 8009d80:	9b00      	ldr	r3, [sp, #0]
 8009d82:	0031      	movs	r1, r6
 8009d84:	1b9b      	subs	r3, r3, r6
 8009d86:	2602      	movs	r6, #2
 8009d88:	0028      	movs	r0, r5
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	f7ff fe0b 	bl	80099a6 <rshift>
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	685f      	ldr	r7, [r3, #4]
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d03f      	beq.n	8009e18 <__gethex+0x3a0>
 8009d98:	9b01      	ldr	r3, [sp, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d010      	beq.n	8009dc2 <__gethex+0x34a>
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d012      	beq.n	8009dca <__gethex+0x352>
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d106      	bne.n	8009db6 <__gethex+0x33e>
 8009da8:	07a2      	lsls	r2, r4, #30
 8009daa:	d504      	bpl.n	8009db6 <__gethex+0x33e>
 8009dac:	9a02      	ldr	r2, [sp, #8]
 8009dae:	6812      	ldr	r2, [r2, #0]
 8009db0:	4314      	orrs	r4, r2
 8009db2:	421c      	tst	r4, r3
 8009db4:	d10c      	bne.n	8009dd0 <__gethex+0x358>
 8009db6:	2310      	movs	r3, #16
 8009db8:	e02d      	b.n	8009e16 <__gethex+0x39e>
 8009dba:	2401      	movs	r4, #1
 8009dbc:	e7d4      	b.n	8009d68 <__gethex+0x2f0>
 8009dbe:	2601      	movs	r6, #1
 8009dc0:	e7e8      	b.n	8009d94 <__gethex+0x31c>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009dc6:	1a9b      	subs	r3, r3, r2
 8009dc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0f2      	beq.n	8009db6 <__gethex+0x33e>
 8009dd0:	692b      	ldr	r3, [r5, #16]
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	002b      	movs	r3, r5
 8009ddc:	9a04      	ldr	r2, [sp, #16]
 8009dde:	3314      	adds	r3, #20
 8009de0:	1899      	adds	r1, r3, r2
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	1c54      	adds	r4, r2, #1
 8009de6:	d01c      	beq.n	8009e22 <__gethex+0x3aa>
 8009de8:	3201      	adds	r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	002b      	movs	r3, r5
 8009dee:	3314      	adds	r3, #20
 8009df0:	2e02      	cmp	r6, #2
 8009df2:	d13f      	bne.n	8009e74 <__gethex+0x3fc>
 8009df4:	9a01      	ldr	r2, [sp, #4]
 8009df6:	9900      	ldr	r1, [sp, #0]
 8009df8:	6812      	ldr	r2, [r2, #0]
 8009dfa:	3a01      	subs	r2, #1
 8009dfc:	428a      	cmp	r2, r1
 8009dfe:	d109      	bne.n	8009e14 <__gethex+0x39c>
 8009e00:	000a      	movs	r2, r1
 8009e02:	201f      	movs	r0, #31
 8009e04:	4010      	ands	r0, r2
 8009e06:	2201      	movs	r2, #1
 8009e08:	4082      	lsls	r2, r0
 8009e0a:	1149      	asrs	r1, r1, #5
 8009e0c:	0089      	lsls	r1, r1, #2
 8009e0e:	58cb      	ldr	r3, [r1, r3]
 8009e10:	4213      	tst	r3, r2
 8009e12:	d13d      	bne.n	8009e90 <__gethex+0x418>
 8009e14:	2320      	movs	r3, #32
 8009e16:	431e      	orrs	r6, r3
 8009e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e1a:	601d      	str	r5, [r3, #0]
 8009e1c:	9b07      	ldr	r3, [sp, #28]
 8009e1e:	601f      	str	r7, [r3, #0]
 8009e20:	e6b4      	b.n	8009b8c <__gethex+0x114>
 8009e22:	c301      	stmia	r3!, {r0}
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d8dc      	bhi.n	8009de2 <__gethex+0x36a>
 8009e28:	68ab      	ldr	r3, [r5, #8]
 8009e2a:	9a02      	ldr	r2, [sp, #8]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	db18      	blt.n	8009e62 <__gethex+0x3ea>
 8009e30:	6869      	ldr	r1, [r5, #4]
 8009e32:	9803      	ldr	r0, [sp, #12]
 8009e34:	3101      	adds	r1, #1
 8009e36:	f7fd ffab 	bl	8007d90 <_Balloc>
 8009e3a:	1e04      	subs	r4, r0, #0
 8009e3c:	d104      	bne.n	8009e48 <__gethex+0x3d0>
 8009e3e:	0022      	movs	r2, r4
 8009e40:	2184      	movs	r1, #132	@ 0x84
 8009e42:	4b1d      	ldr	r3, [pc, #116]	@ (8009eb8 <__gethex+0x440>)
 8009e44:	481d      	ldr	r0, [pc, #116]	@ (8009ebc <__gethex+0x444>)
 8009e46:	e6c4      	b.n	8009bd2 <__gethex+0x15a>
 8009e48:	0029      	movs	r1, r5
 8009e4a:	692a      	ldr	r2, [r5, #16]
 8009e4c:	310c      	adds	r1, #12
 8009e4e:	3202      	adds	r2, #2
 8009e50:	0092      	lsls	r2, r2, #2
 8009e52:	300c      	adds	r0, #12
 8009e54:	f7ff fd4c 	bl	80098f0 <memcpy>
 8009e58:	0029      	movs	r1, r5
 8009e5a:	9803      	ldr	r0, [sp, #12]
 8009e5c:	f7fd ffdc 	bl	8007e18 <_Bfree>
 8009e60:	0025      	movs	r5, r4
 8009e62:	692b      	ldr	r3, [r5, #16]
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	612a      	str	r2, [r5, #16]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	18eb      	adds	r3, r5, r3
 8009e70:	605a      	str	r2, [r3, #4]
 8009e72:	e7bb      	b.n	8009dec <__gethex+0x374>
 8009e74:	692a      	ldr	r2, [r5, #16]
 8009e76:	9902      	ldr	r1, [sp, #8]
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	dd0b      	ble.n	8009e94 <__gethex+0x41c>
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	0028      	movs	r0, r5
 8009e80:	f7ff fd91 	bl	80099a6 <rshift>
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	3701      	adds	r7, #1
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	42bb      	cmp	r3, r7
 8009e8c:	da00      	bge.n	8009e90 <__gethex+0x418>
 8009e8e:	e6df      	b.n	8009c50 <__gethex+0x1d8>
 8009e90:	2601      	movs	r6, #1
 8009e92:	e7bf      	b.n	8009e14 <__gethex+0x39c>
 8009e94:	221f      	movs	r2, #31
 8009e96:	9c00      	ldr	r4, [sp, #0]
 8009e98:	9900      	ldr	r1, [sp, #0]
 8009e9a:	4014      	ands	r4, r2
 8009e9c:	4211      	tst	r1, r2
 8009e9e:	d0f7      	beq.n	8009e90 <__gethex+0x418>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	189b      	adds	r3, r3, r2
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	f7fe f86a 	bl	8007f80 <__hi0bits>
 8009eac:	2320      	movs	r3, #32
 8009eae:	1b1b      	subs	r3, r3, r4
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	dbe3      	blt.n	8009e7c <__gethex+0x404>
 8009eb4:	e7ec      	b.n	8009e90 <__gethex+0x418>
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	0800a885 	.word	0x0800a885
 8009ebc:	0800ab9e 	.word	0x0800ab9e

08009ec0 <L_shift>:
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	b570      	push	{r4, r5, r6, lr}
 8009ec4:	2520      	movs	r5, #32
 8009ec6:	1a9a      	subs	r2, r3, r2
 8009ec8:	0092      	lsls	r2, r2, #2
 8009eca:	1aad      	subs	r5, r5, r2
 8009ecc:	6843      	ldr	r3, [r0, #4]
 8009ece:	6804      	ldr	r4, [r0, #0]
 8009ed0:	001e      	movs	r6, r3
 8009ed2:	40ae      	lsls	r6, r5
 8009ed4:	40d3      	lsrs	r3, r2
 8009ed6:	4334      	orrs	r4, r6
 8009ed8:	6004      	str	r4, [r0, #0]
 8009eda:	6043      	str	r3, [r0, #4]
 8009edc:	3004      	adds	r0, #4
 8009ede:	4288      	cmp	r0, r1
 8009ee0:	d3f4      	bcc.n	8009ecc <L_shift+0xc>
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}

08009ee4 <__match>:
 8009ee4:	b530      	push	{r4, r5, lr}
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	780c      	ldrb	r4, [r1, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	2c00      	cmp	r4, #0
 8009eee:	d102      	bne.n	8009ef6 <__match+0x12>
 8009ef0:	6003      	str	r3, [r0, #0]
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	bd30      	pop	{r4, r5, pc}
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	0015      	movs	r5, r2
 8009efa:	3d41      	subs	r5, #65	@ 0x41
 8009efc:	2d19      	cmp	r5, #25
 8009efe:	d800      	bhi.n	8009f02 <__match+0x1e>
 8009f00:	3220      	adds	r2, #32
 8009f02:	3101      	adds	r1, #1
 8009f04:	42a2      	cmp	r2, r4
 8009f06:	d0ef      	beq.n	8009ee8 <__match+0x4>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e7f3      	b.n	8009ef4 <__match+0x10>

08009f0c <__hexnan>:
 8009f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f0e:	680b      	ldr	r3, [r1, #0]
 8009f10:	b08b      	sub	sp, #44	@ 0x2c
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	9901      	ldr	r1, [sp, #4]
 8009f16:	115a      	asrs	r2, r3, #5
 8009f18:	0092      	lsls	r2, r2, #2
 8009f1a:	188a      	adds	r2, r1, r2
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	0019      	movs	r1, r3
 8009f20:	221f      	movs	r2, #31
 8009f22:	4011      	ands	r1, r2
 8009f24:	9008      	str	r0, [sp, #32]
 8009f26:	9106      	str	r1, [sp, #24]
 8009f28:	4213      	tst	r3, r2
 8009f2a:	d002      	beq.n	8009f32 <__hexnan+0x26>
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	9b02      	ldr	r3, [sp, #8]
 8009f34:	2500      	movs	r5, #0
 8009f36:	1f1f      	subs	r7, r3, #4
 8009f38:	003e      	movs	r6, r7
 8009f3a:	003c      	movs	r4, r7
 8009f3c:	9b08      	ldr	r3, [sp, #32]
 8009f3e:	603d      	str	r5, [r7, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9507      	str	r5, [sp, #28]
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	9503      	str	r5, [sp, #12]
 8009f48:	9b05      	ldr	r3, [sp, #20]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	9b05      	ldr	r3, [sp, #20]
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d028      	beq.n	8009faa <__hexnan+0x9e>
 8009f58:	9804      	ldr	r0, [sp, #16]
 8009f5a:	f7ff fd77 	bl	8009a4c <__hexdig_fun>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d155      	bne.n	800a00e <__hexnan+0x102>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d819      	bhi.n	8009f9c <__hexnan+0x90>
 8009f68:	9b03      	ldr	r3, [sp, #12]
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	dd12      	ble.n	8009f96 <__hexnan+0x8a>
 8009f70:	42b4      	cmp	r4, r6
 8009f72:	d206      	bcs.n	8009f82 <__hexnan+0x76>
 8009f74:	2d07      	cmp	r5, #7
 8009f76:	dc04      	bgt.n	8009f82 <__hexnan+0x76>
 8009f78:	002a      	movs	r2, r5
 8009f7a:	0031      	movs	r1, r6
 8009f7c:	0020      	movs	r0, r4
 8009f7e:	f7ff ff9f 	bl	8009ec0 <L_shift>
 8009f82:	9b01      	ldr	r3, [sp, #4]
 8009f84:	2508      	movs	r5, #8
 8009f86:	429c      	cmp	r4, r3
 8009f88:	d905      	bls.n	8009f96 <__hexnan+0x8a>
 8009f8a:	1f26      	subs	r6, r4, #4
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	0034      	movs	r4, r6
 8009f90:	9b03      	ldr	r3, [sp, #12]
 8009f92:	6035      	str	r5, [r6, #0]
 8009f94:	9307      	str	r3, [sp, #28]
 8009f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f98:	9305      	str	r3, [sp, #20]
 8009f9a:	e7d5      	b.n	8009f48 <__hexnan+0x3c>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	2b29      	cmp	r3, #41	@ 0x29
 8009fa0:	d15a      	bne.n	800a058 <__hexnan+0x14c>
 8009fa2:	9b05      	ldr	r3, [sp, #20]
 8009fa4:	9a08      	ldr	r2, [sp, #32]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d053      	beq.n	800a058 <__hexnan+0x14c>
 8009fb0:	42b4      	cmp	r4, r6
 8009fb2:	d206      	bcs.n	8009fc2 <__hexnan+0xb6>
 8009fb4:	2d07      	cmp	r5, #7
 8009fb6:	dc04      	bgt.n	8009fc2 <__hexnan+0xb6>
 8009fb8:	002a      	movs	r2, r5
 8009fba:	0031      	movs	r1, r6
 8009fbc:	0020      	movs	r0, r4
 8009fbe:	f7ff ff7f 	bl	8009ec0 <L_shift>
 8009fc2:	9b01      	ldr	r3, [sp, #4]
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	d936      	bls.n	800a036 <__hexnan+0x12a>
 8009fc8:	001a      	movs	r2, r3
 8009fca:	0023      	movs	r3, r4
 8009fcc:	cb02      	ldmia	r3!, {r1}
 8009fce:	c202      	stmia	r2!, {r1}
 8009fd0:	429f      	cmp	r7, r3
 8009fd2:	d2fb      	bcs.n	8009fcc <__hexnan+0xc0>
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	1c61      	adds	r1, r4, #1
 8009fd8:	1eda      	subs	r2, r3, #3
 8009fda:	2304      	movs	r3, #4
 8009fdc:	4291      	cmp	r1, r2
 8009fde:	d805      	bhi.n	8009fec <__hexnan+0xe0>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	3b04      	subs	r3, #4
 8009fe4:	1b1b      	subs	r3, r3, r4
 8009fe6:	089b      	lsrs	r3, r3, #2
 8009fe8:	3301      	adds	r3, #1
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	9a01      	ldr	r2, [sp, #4]
 8009fee:	18d3      	adds	r3, r2, r3
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	c304      	stmia	r3!, {r2}
 8009ff4:	429f      	cmp	r7, r3
 8009ff6:	d2fc      	bcs.n	8009ff2 <__hexnan+0xe6>
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d104      	bne.n	800a008 <__hexnan+0xfc>
 8009ffe:	9b01      	ldr	r3, [sp, #4]
 800a000:	429f      	cmp	r7, r3
 800a002:	d127      	bne.n	800a054 <__hexnan+0x148>
 800a004:	2301      	movs	r3, #1
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	2005      	movs	r0, #5
 800a00a:	b00b      	add	sp, #44	@ 0x2c
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	3501      	adds	r5, #1
 800a012:	3301      	adds	r3, #1
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	2d08      	cmp	r5, #8
 800a018:	dd06      	ble.n	800a028 <__hexnan+0x11c>
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d9ba      	bls.n	8009f96 <__hexnan+0x8a>
 800a020:	2300      	movs	r3, #0
 800a022:	2501      	movs	r5, #1
 800a024:	3c04      	subs	r4, #4
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	220f      	movs	r2, #15
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4010      	ands	r0, r2
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	4303      	orrs	r3, r0
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	e7af      	b.n	8009f96 <__hexnan+0x8a>
 800a036:	9b06      	ldr	r3, [sp, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0dd      	beq.n	8009ff8 <__hexnan+0xec>
 800a03c:	2320      	movs	r3, #32
 800a03e:	9a06      	ldr	r2, [sp, #24]
 800a040:	9902      	ldr	r1, [sp, #8]
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	2201      	movs	r2, #1
 800a046:	4252      	negs	r2, r2
 800a048:	40da      	lsrs	r2, r3
 800a04a:	3904      	subs	r1, #4
 800a04c:	680b      	ldr	r3, [r1, #0]
 800a04e:	4013      	ands	r3, r2
 800a050:	600b      	str	r3, [r1, #0]
 800a052:	e7d1      	b.n	8009ff8 <__hexnan+0xec>
 800a054:	3f04      	subs	r7, #4
 800a056:	e7cf      	b.n	8009ff8 <__hexnan+0xec>
 800a058:	2004      	movs	r0, #4
 800a05a:	e7d6      	b.n	800a00a <__hexnan+0xfe>

0800a05c <__ascii_mbtowc>:
 800a05c:	b082      	sub	sp, #8
 800a05e:	2900      	cmp	r1, #0
 800a060:	d100      	bne.n	800a064 <__ascii_mbtowc+0x8>
 800a062:	a901      	add	r1, sp, #4
 800a064:	1e10      	subs	r0, r2, #0
 800a066:	d006      	beq.n	800a076 <__ascii_mbtowc+0x1a>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d006      	beq.n	800a07a <__ascii_mbtowc+0x1e>
 800a06c:	7813      	ldrb	r3, [r2, #0]
 800a06e:	600b      	str	r3, [r1, #0]
 800a070:	7810      	ldrb	r0, [r2, #0]
 800a072:	1e43      	subs	r3, r0, #1
 800a074:	4198      	sbcs	r0, r3
 800a076:	b002      	add	sp, #8
 800a078:	4770      	bx	lr
 800a07a:	2002      	movs	r0, #2
 800a07c:	4240      	negs	r0, r0
 800a07e:	e7fa      	b.n	800a076 <__ascii_mbtowc+0x1a>

0800a080 <_realloc_r>:
 800a080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a082:	0006      	movs	r6, r0
 800a084:	000c      	movs	r4, r1
 800a086:	0015      	movs	r5, r2
 800a088:	2900      	cmp	r1, #0
 800a08a:	d105      	bne.n	800a098 <_realloc_r+0x18>
 800a08c:	0011      	movs	r1, r2
 800a08e:	f7fd fdef 	bl	8007c70 <_malloc_r>
 800a092:	0004      	movs	r4, r0
 800a094:	0020      	movs	r0, r4
 800a096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a098:	2a00      	cmp	r2, #0
 800a09a:	d103      	bne.n	800a0a4 <_realloc_r+0x24>
 800a09c:	f7fd fd72 	bl	8007b84 <_free_r>
 800a0a0:	2400      	movs	r4, #0
 800a0a2:	e7f7      	b.n	800a094 <_realloc_r+0x14>
 800a0a4:	f000 f83f 	bl	800a126 <_malloc_usable_size_r>
 800a0a8:	0007      	movs	r7, r0
 800a0aa:	4285      	cmp	r5, r0
 800a0ac:	d802      	bhi.n	800a0b4 <_realloc_r+0x34>
 800a0ae:	0843      	lsrs	r3, r0, #1
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	d3ef      	bcc.n	800a094 <_realloc_r+0x14>
 800a0b4:	0029      	movs	r1, r5
 800a0b6:	0030      	movs	r0, r6
 800a0b8:	f7fd fdda 	bl	8007c70 <_malloc_r>
 800a0bc:	9001      	str	r0, [sp, #4]
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d0ee      	beq.n	800a0a0 <_realloc_r+0x20>
 800a0c2:	002a      	movs	r2, r5
 800a0c4:	42bd      	cmp	r5, r7
 800a0c6:	d900      	bls.n	800a0ca <_realloc_r+0x4a>
 800a0c8:	003a      	movs	r2, r7
 800a0ca:	0021      	movs	r1, r4
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	f7ff fc0f 	bl	80098f0 <memcpy>
 800a0d2:	0021      	movs	r1, r4
 800a0d4:	0030      	movs	r0, r6
 800a0d6:	f7fd fd55 	bl	8007b84 <_free_r>
 800a0da:	9c01      	ldr	r4, [sp, #4]
 800a0dc:	e7da      	b.n	800a094 <_realloc_r+0x14>

0800a0de <__ascii_wctomb>:
 800a0de:	0003      	movs	r3, r0
 800a0e0:	1e08      	subs	r0, r1, #0
 800a0e2:	d005      	beq.n	800a0f0 <__ascii_wctomb+0x12>
 800a0e4:	2aff      	cmp	r2, #255	@ 0xff
 800a0e6:	d904      	bls.n	800a0f2 <__ascii_wctomb+0x14>
 800a0e8:	228a      	movs	r2, #138	@ 0x8a
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	4240      	negs	r0, r0
 800a0f0:	4770      	bx	lr
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	700a      	strb	r2, [r1, #0]
 800a0f6:	e7fb      	b.n	800a0f0 <__ascii_wctomb+0x12>

0800a0f8 <fiprintf>:
 800a0f8:	b40e      	push	{r1, r2, r3}
 800a0fa:	b517      	push	{r0, r1, r2, r4, lr}
 800a0fc:	4c05      	ldr	r4, [pc, #20]	@ (800a114 <fiprintf+0x1c>)
 800a0fe:	ab05      	add	r3, sp, #20
 800a100:	cb04      	ldmia	r3!, {r2}
 800a102:	0001      	movs	r1, r0
 800a104:	6820      	ldr	r0, [r4, #0]
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	f000 f83c 	bl	800a184 <_vfiprintf_r>
 800a10c:	bc1e      	pop	{r1, r2, r3, r4}
 800a10e:	bc08      	pop	{r3}
 800a110:	b003      	add	sp, #12
 800a112:	4718      	bx	r3
 800a114:	20000018 	.word	0x20000018

0800a118 <abort>:
 800a118:	2006      	movs	r0, #6
 800a11a:	b510      	push	{r4, lr}
 800a11c:	f000 fa18 	bl	800a550 <raise>
 800a120:	2001      	movs	r0, #1
 800a122:	f7f9 f88b 	bl	800323c <_exit>

0800a126 <_malloc_usable_size_r>:
 800a126:	1f0b      	subs	r3, r1, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	1f18      	subs	r0, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	da01      	bge.n	800a134 <_malloc_usable_size_r+0xe>
 800a130:	580b      	ldr	r3, [r1, r0]
 800a132:	18c0      	adds	r0, r0, r3
 800a134:	4770      	bx	lr

0800a136 <__sfputc_r>:
 800a136:	6893      	ldr	r3, [r2, #8]
 800a138:	b510      	push	{r4, lr}
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6093      	str	r3, [r2, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da04      	bge.n	800a14c <__sfputc_r+0x16>
 800a142:	6994      	ldr	r4, [r2, #24]
 800a144:	42a3      	cmp	r3, r4
 800a146:	db07      	blt.n	800a158 <__sfputc_r+0x22>
 800a148:	290a      	cmp	r1, #10
 800a14a:	d005      	beq.n	800a158 <__sfputc_r+0x22>
 800a14c:	6813      	ldr	r3, [r2, #0]
 800a14e:	1c58      	adds	r0, r3, #1
 800a150:	6010      	str	r0, [r2, #0]
 800a152:	7019      	strb	r1, [r3, #0]
 800a154:	0008      	movs	r0, r1
 800a156:	bd10      	pop	{r4, pc}
 800a158:	f000 f930 	bl	800a3bc <__swbuf_r>
 800a15c:	0001      	movs	r1, r0
 800a15e:	e7f9      	b.n	800a154 <__sfputc_r+0x1e>

0800a160 <__sfputs_r>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	0006      	movs	r6, r0
 800a164:	000f      	movs	r7, r1
 800a166:	0014      	movs	r4, r2
 800a168:	18d5      	adds	r5, r2, r3
 800a16a:	42ac      	cmp	r4, r5
 800a16c:	d101      	bne.n	800a172 <__sfputs_r+0x12>
 800a16e:	2000      	movs	r0, #0
 800a170:	e007      	b.n	800a182 <__sfputs_r+0x22>
 800a172:	7821      	ldrb	r1, [r4, #0]
 800a174:	003a      	movs	r2, r7
 800a176:	0030      	movs	r0, r6
 800a178:	f7ff ffdd 	bl	800a136 <__sfputc_r>
 800a17c:	3401      	adds	r4, #1
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d1f3      	bne.n	800a16a <__sfputs_r+0xa>
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a184 <_vfiprintf_r>:
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	b0a1      	sub	sp, #132	@ 0x84
 800a188:	000f      	movs	r7, r1
 800a18a:	0015      	movs	r5, r2
 800a18c:	001e      	movs	r6, r3
 800a18e:	9003      	str	r0, [sp, #12]
 800a190:	2800      	cmp	r0, #0
 800a192:	d004      	beq.n	800a19e <_vfiprintf_r+0x1a>
 800a194:	6a03      	ldr	r3, [r0, #32]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <_vfiprintf_r+0x1a>
 800a19a:	f7fc fd3b 	bl	8006c14 <__sinit>
 800a19e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1a0:	07db      	lsls	r3, r3, #31
 800a1a2:	d405      	bmi.n	800a1b0 <_vfiprintf_r+0x2c>
 800a1a4:	89bb      	ldrh	r3, [r7, #12]
 800a1a6:	059b      	lsls	r3, r3, #22
 800a1a8:	d402      	bmi.n	800a1b0 <_vfiprintf_r+0x2c>
 800a1aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a1ac:	f7fc fe57 	bl	8006e5e <__retarget_lock_acquire_recursive>
 800a1b0:	89bb      	ldrh	r3, [r7, #12]
 800a1b2:	071b      	lsls	r3, r3, #28
 800a1b4:	d502      	bpl.n	800a1bc <_vfiprintf_r+0x38>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d113      	bne.n	800a1e4 <_vfiprintf_r+0x60>
 800a1bc:	0039      	movs	r1, r7
 800a1be:	9803      	ldr	r0, [sp, #12]
 800a1c0:	f000 f93e 	bl	800a440 <__swsetup_r>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d00d      	beq.n	800a1e4 <_vfiprintf_r+0x60>
 800a1c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1ca:	07db      	lsls	r3, r3, #31
 800a1cc:	d503      	bpl.n	800a1d6 <_vfiprintf_r+0x52>
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	4240      	negs	r0, r0
 800a1d2:	b021      	add	sp, #132	@ 0x84
 800a1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d6:	89bb      	ldrh	r3, [r7, #12]
 800a1d8:	059b      	lsls	r3, r3, #22
 800a1da:	d4f8      	bmi.n	800a1ce <_vfiprintf_r+0x4a>
 800a1dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a1de:	f7fc fe3f 	bl	8006e60 <__retarget_lock_release_recursive>
 800a1e2:	e7f4      	b.n	800a1ce <_vfiprintf_r+0x4a>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	ac08      	add	r4, sp, #32
 800a1e8:	6163      	str	r3, [r4, #20]
 800a1ea:	3320      	adds	r3, #32
 800a1ec:	7663      	strb	r3, [r4, #25]
 800a1ee:	3310      	adds	r3, #16
 800a1f0:	76a3      	strb	r3, [r4, #26]
 800a1f2:	9607      	str	r6, [sp, #28]
 800a1f4:	002e      	movs	r6, r5
 800a1f6:	7833      	ldrb	r3, [r6, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <_vfiprintf_r+0x7c>
 800a1fc:	2b25      	cmp	r3, #37	@ 0x25
 800a1fe:	d148      	bne.n	800a292 <_vfiprintf_r+0x10e>
 800a200:	1b73      	subs	r3, r6, r5
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	42ae      	cmp	r6, r5
 800a206:	d00b      	beq.n	800a220 <_vfiprintf_r+0x9c>
 800a208:	002a      	movs	r2, r5
 800a20a:	0039      	movs	r1, r7
 800a20c:	9803      	ldr	r0, [sp, #12]
 800a20e:	f7ff ffa7 	bl	800a160 <__sfputs_r>
 800a212:	3001      	adds	r0, #1
 800a214:	d100      	bne.n	800a218 <_vfiprintf_r+0x94>
 800a216:	e0ae      	b.n	800a376 <_vfiprintf_r+0x1f2>
 800a218:	6963      	ldr	r3, [r4, #20]
 800a21a:	9a05      	ldr	r2, [sp, #20]
 800a21c:	189b      	adds	r3, r3, r2
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	7833      	ldrb	r3, [r6, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d100      	bne.n	800a228 <_vfiprintf_r+0xa4>
 800a226:	e0a6      	b.n	800a376 <_vfiprintf_r+0x1f2>
 800a228:	2201      	movs	r2, #1
 800a22a:	2300      	movs	r3, #0
 800a22c:	4252      	negs	r2, r2
 800a22e:	6062      	str	r2, [r4, #4]
 800a230:	a904      	add	r1, sp, #16
 800a232:	3254      	adds	r2, #84	@ 0x54
 800a234:	1852      	adds	r2, r2, r1
 800a236:	1c75      	adds	r5, r6, #1
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	60e3      	str	r3, [r4, #12]
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	7013      	strb	r3, [r2, #0]
 800a240:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a242:	4b59      	ldr	r3, [pc, #356]	@ (800a3a8 <_vfiprintf_r+0x224>)
 800a244:	2205      	movs	r2, #5
 800a246:	0018      	movs	r0, r3
 800a248:	7829      	ldrb	r1, [r5, #0]
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	f7fc fe09 	bl	8006e62 <memchr>
 800a250:	1c6e      	adds	r6, r5, #1
 800a252:	2800      	cmp	r0, #0
 800a254:	d11f      	bne.n	800a296 <_vfiprintf_r+0x112>
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	06d3      	lsls	r3, r2, #27
 800a25a:	d504      	bpl.n	800a266 <_vfiprintf_r+0xe2>
 800a25c:	2353      	movs	r3, #83	@ 0x53
 800a25e:	a904      	add	r1, sp, #16
 800a260:	185b      	adds	r3, r3, r1
 800a262:	2120      	movs	r1, #32
 800a264:	7019      	strb	r1, [r3, #0]
 800a266:	0713      	lsls	r3, r2, #28
 800a268:	d504      	bpl.n	800a274 <_vfiprintf_r+0xf0>
 800a26a:	2353      	movs	r3, #83	@ 0x53
 800a26c:	a904      	add	r1, sp, #16
 800a26e:	185b      	adds	r3, r3, r1
 800a270:	212b      	movs	r1, #43	@ 0x2b
 800a272:	7019      	strb	r1, [r3, #0]
 800a274:	782b      	ldrb	r3, [r5, #0]
 800a276:	2b2a      	cmp	r3, #42	@ 0x2a
 800a278:	d016      	beq.n	800a2a8 <_vfiprintf_r+0x124>
 800a27a:	002e      	movs	r6, r5
 800a27c:	2100      	movs	r1, #0
 800a27e:	200a      	movs	r0, #10
 800a280:	68e3      	ldr	r3, [r4, #12]
 800a282:	7832      	ldrb	r2, [r6, #0]
 800a284:	1c75      	adds	r5, r6, #1
 800a286:	3a30      	subs	r2, #48	@ 0x30
 800a288:	2a09      	cmp	r2, #9
 800a28a:	d950      	bls.n	800a32e <_vfiprintf_r+0x1aa>
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d111      	bne.n	800a2b4 <_vfiprintf_r+0x130>
 800a290:	e017      	b.n	800a2c2 <_vfiprintf_r+0x13e>
 800a292:	3601      	adds	r6, #1
 800a294:	e7af      	b.n	800a1f6 <_vfiprintf_r+0x72>
 800a296:	9b05      	ldr	r3, [sp, #20]
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	1ac0      	subs	r0, r0, r3
 800a29c:	2301      	movs	r3, #1
 800a29e:	4083      	lsls	r3, r0
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	0035      	movs	r5, r6
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	e7cc      	b.n	800a242 <_vfiprintf_r+0xbe>
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	1d19      	adds	r1, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	9107      	str	r1, [sp, #28]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	db01      	blt.n	800a2b8 <_vfiprintf_r+0x134>
 800a2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2b6:	e004      	b.n	800a2c2 <_vfiprintf_r+0x13e>
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	60e3      	str	r3, [r4, #12]
 800a2bc:	2302      	movs	r3, #2
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	7833      	ldrb	r3, [r6, #0]
 800a2c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c6:	d10c      	bne.n	800a2e2 <_vfiprintf_r+0x15e>
 800a2c8:	7873      	ldrb	r3, [r6, #1]
 800a2ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2cc:	d134      	bne.n	800a338 <_vfiprintf_r+0x1b4>
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	3602      	adds	r6, #2
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	9207      	str	r2, [sp, #28]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da01      	bge.n	800a2e0 <_vfiprintf_r+0x15c>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	425b      	negs	r3, r3
 800a2e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e2:	4d32      	ldr	r5, [pc, #200]	@ (800a3ac <_vfiprintf_r+0x228>)
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	0028      	movs	r0, r5
 800a2e8:	7831      	ldrb	r1, [r6, #0]
 800a2ea:	f7fc fdba 	bl	8006e62 <memchr>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d006      	beq.n	800a300 <_vfiprintf_r+0x17c>
 800a2f2:	2340      	movs	r3, #64	@ 0x40
 800a2f4:	1b40      	subs	r0, r0, r5
 800a2f6:	4083      	lsls	r3, r0
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	7831      	ldrb	r1, [r6, #0]
 800a302:	2206      	movs	r2, #6
 800a304:	482a      	ldr	r0, [pc, #168]	@ (800a3b0 <_vfiprintf_r+0x22c>)
 800a306:	1c75      	adds	r5, r6, #1
 800a308:	7621      	strb	r1, [r4, #24]
 800a30a:	f7fc fdaa 	bl	8006e62 <memchr>
 800a30e:	2800      	cmp	r0, #0
 800a310:	d040      	beq.n	800a394 <_vfiprintf_r+0x210>
 800a312:	4b28      	ldr	r3, [pc, #160]	@ (800a3b4 <_vfiprintf_r+0x230>)
 800a314:	2b00      	cmp	r3, #0
 800a316:	d122      	bne.n	800a35e <_vfiprintf_r+0x1da>
 800a318:	2207      	movs	r2, #7
 800a31a:	9b07      	ldr	r3, [sp, #28]
 800a31c:	3307      	adds	r3, #7
 800a31e:	4393      	bics	r3, r2
 800a320:	3308      	adds	r3, #8
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	6963      	ldr	r3, [r4, #20]
 800a326:	9a04      	ldr	r2, [sp, #16]
 800a328:	189b      	adds	r3, r3, r2
 800a32a:	6163      	str	r3, [r4, #20]
 800a32c:	e762      	b.n	800a1f4 <_vfiprintf_r+0x70>
 800a32e:	4343      	muls	r3, r0
 800a330:	002e      	movs	r6, r5
 800a332:	2101      	movs	r1, #1
 800a334:	189b      	adds	r3, r3, r2
 800a336:	e7a4      	b.n	800a282 <_vfiprintf_r+0xfe>
 800a338:	2300      	movs	r3, #0
 800a33a:	200a      	movs	r0, #10
 800a33c:	0019      	movs	r1, r3
 800a33e:	3601      	adds	r6, #1
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	7832      	ldrb	r2, [r6, #0]
 800a344:	1c75      	adds	r5, r6, #1
 800a346:	3a30      	subs	r2, #48	@ 0x30
 800a348:	2a09      	cmp	r2, #9
 800a34a:	d903      	bls.n	800a354 <_vfiprintf_r+0x1d0>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0c8      	beq.n	800a2e2 <_vfiprintf_r+0x15e>
 800a350:	9109      	str	r1, [sp, #36]	@ 0x24
 800a352:	e7c6      	b.n	800a2e2 <_vfiprintf_r+0x15e>
 800a354:	4341      	muls	r1, r0
 800a356:	002e      	movs	r6, r5
 800a358:	2301      	movs	r3, #1
 800a35a:	1889      	adds	r1, r1, r2
 800a35c:	e7f1      	b.n	800a342 <_vfiprintf_r+0x1be>
 800a35e:	aa07      	add	r2, sp, #28
 800a360:	9200      	str	r2, [sp, #0]
 800a362:	0021      	movs	r1, r4
 800a364:	003a      	movs	r2, r7
 800a366:	4b14      	ldr	r3, [pc, #80]	@ (800a3b8 <_vfiprintf_r+0x234>)
 800a368:	9803      	ldr	r0, [sp, #12]
 800a36a:	f7fb fdf9 	bl	8005f60 <_printf_float>
 800a36e:	9004      	str	r0, [sp, #16]
 800a370:	9b04      	ldr	r3, [sp, #16]
 800a372:	3301      	adds	r3, #1
 800a374:	d1d6      	bne.n	800a324 <_vfiprintf_r+0x1a0>
 800a376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a378:	07db      	lsls	r3, r3, #31
 800a37a:	d405      	bmi.n	800a388 <_vfiprintf_r+0x204>
 800a37c:	89bb      	ldrh	r3, [r7, #12]
 800a37e:	059b      	lsls	r3, r3, #22
 800a380:	d402      	bmi.n	800a388 <_vfiprintf_r+0x204>
 800a382:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a384:	f7fc fd6c 	bl	8006e60 <__retarget_lock_release_recursive>
 800a388:	89bb      	ldrh	r3, [r7, #12]
 800a38a:	065b      	lsls	r3, r3, #25
 800a38c:	d500      	bpl.n	800a390 <_vfiprintf_r+0x20c>
 800a38e:	e71e      	b.n	800a1ce <_vfiprintf_r+0x4a>
 800a390:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a392:	e71e      	b.n	800a1d2 <_vfiprintf_r+0x4e>
 800a394:	aa07      	add	r2, sp, #28
 800a396:	9200      	str	r2, [sp, #0]
 800a398:	0021      	movs	r1, r4
 800a39a:	003a      	movs	r2, r7
 800a39c:	4b06      	ldr	r3, [pc, #24]	@ (800a3b8 <_vfiprintf_r+0x234>)
 800a39e:	9803      	ldr	r0, [sp, #12]
 800a3a0:	f7fc f88c 	bl	80064bc <_printf_i>
 800a3a4:	e7e3      	b.n	800a36e <_vfiprintf_r+0x1ea>
 800a3a6:	46c0      	nop			@ (mov r8, r8)
 800a3a8:	0800ab49 	.word	0x0800ab49
 800a3ac:	0800ab4f 	.word	0x0800ab4f
 800a3b0:	0800ab53 	.word	0x0800ab53
 800a3b4:	08005f61 	.word	0x08005f61
 800a3b8:	0800a161 	.word	0x0800a161

0800a3bc <__swbuf_r>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	0006      	movs	r6, r0
 800a3c0:	000d      	movs	r5, r1
 800a3c2:	0014      	movs	r4, r2
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d004      	beq.n	800a3d2 <__swbuf_r+0x16>
 800a3c8:	6a03      	ldr	r3, [r0, #32]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <__swbuf_r+0x16>
 800a3ce:	f7fc fc21 	bl	8006c14 <__sinit>
 800a3d2:	69a3      	ldr	r3, [r4, #24]
 800a3d4:	60a3      	str	r3, [r4, #8]
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	071b      	lsls	r3, r3, #28
 800a3da:	d502      	bpl.n	800a3e2 <__swbuf_r+0x26>
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <__swbuf_r+0x3a>
 800a3e2:	0021      	movs	r1, r4
 800a3e4:	0030      	movs	r0, r6
 800a3e6:	f000 f82b 	bl	800a440 <__swsetup_r>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d003      	beq.n	800a3f6 <__swbuf_r+0x3a>
 800a3ee:	2501      	movs	r5, #1
 800a3f0:	426d      	negs	r5, r5
 800a3f2:	0028      	movs	r0, r5
 800a3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	b2ef      	uxtb	r7, r5
 800a3fc:	1ac0      	subs	r0, r0, r3
 800a3fe:	6963      	ldr	r3, [r4, #20]
 800a400:	b2ed      	uxtb	r5, r5
 800a402:	4283      	cmp	r3, r0
 800a404:	dc05      	bgt.n	800a412 <__swbuf_r+0x56>
 800a406:	0021      	movs	r1, r4
 800a408:	0030      	movs	r0, r6
 800a40a:	f7ff fa0f 	bl	800982c <_fflush_r>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d1ed      	bne.n	800a3ee <__swbuf_r+0x32>
 800a412:	68a3      	ldr	r3, [r4, #8]
 800a414:	3001      	adds	r0, #1
 800a416:	3b01      	subs	r3, #1
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	701f      	strb	r7, [r3, #0]
 800a422:	6963      	ldr	r3, [r4, #20]
 800a424:	4283      	cmp	r3, r0
 800a426:	d004      	beq.n	800a432 <__swbuf_r+0x76>
 800a428:	89a3      	ldrh	r3, [r4, #12]
 800a42a:	07db      	lsls	r3, r3, #31
 800a42c:	d5e1      	bpl.n	800a3f2 <__swbuf_r+0x36>
 800a42e:	2d0a      	cmp	r5, #10
 800a430:	d1df      	bne.n	800a3f2 <__swbuf_r+0x36>
 800a432:	0021      	movs	r1, r4
 800a434:	0030      	movs	r0, r6
 800a436:	f7ff f9f9 	bl	800982c <_fflush_r>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0d9      	beq.n	800a3f2 <__swbuf_r+0x36>
 800a43e:	e7d6      	b.n	800a3ee <__swbuf_r+0x32>

0800a440 <__swsetup_r>:
 800a440:	4b2d      	ldr	r3, [pc, #180]	@ (800a4f8 <__swsetup_r+0xb8>)
 800a442:	b570      	push	{r4, r5, r6, lr}
 800a444:	0005      	movs	r5, r0
 800a446:	6818      	ldr	r0, [r3, #0]
 800a448:	000c      	movs	r4, r1
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d004      	beq.n	800a458 <__swsetup_r+0x18>
 800a44e:	6a03      	ldr	r3, [r0, #32]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <__swsetup_r+0x18>
 800a454:	f7fc fbde 	bl	8006c14 <__sinit>
 800a458:	230c      	movs	r3, #12
 800a45a:	5ee2      	ldrsh	r2, [r4, r3]
 800a45c:	0713      	lsls	r3, r2, #28
 800a45e:	d423      	bmi.n	800a4a8 <__swsetup_r+0x68>
 800a460:	06d3      	lsls	r3, r2, #27
 800a462:	d407      	bmi.n	800a474 <__swsetup_r+0x34>
 800a464:	2309      	movs	r3, #9
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	2001      	movs	r0, #1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	4240      	negs	r0, r0
 800a472:	e03a      	b.n	800a4ea <__swsetup_r+0xaa>
 800a474:	0752      	lsls	r2, r2, #29
 800a476:	d513      	bpl.n	800a4a0 <__swsetup_r+0x60>
 800a478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a47a:	2900      	cmp	r1, #0
 800a47c:	d008      	beq.n	800a490 <__swsetup_r+0x50>
 800a47e:	0023      	movs	r3, r4
 800a480:	3344      	adds	r3, #68	@ 0x44
 800a482:	4299      	cmp	r1, r3
 800a484:	d002      	beq.n	800a48c <__swsetup_r+0x4c>
 800a486:	0028      	movs	r0, r5
 800a488:	f7fd fb7c 	bl	8007b84 <_free_r>
 800a48c:	2300      	movs	r3, #0
 800a48e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a490:	2224      	movs	r2, #36	@ 0x24
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	4393      	bics	r3, r2
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	2300      	movs	r3, #0
 800a49a:	6063      	str	r3, [r4, #4]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	89a2      	ldrh	r2, [r4, #12]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <__swsetup_r+0x86>
 800a4ae:	21a0      	movs	r1, #160	@ 0xa0
 800a4b0:	2280      	movs	r2, #128	@ 0x80
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	0089      	lsls	r1, r1, #2
 800a4b6:	0092      	lsls	r2, r2, #2
 800a4b8:	400b      	ands	r3, r1
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d003      	beq.n	800a4c6 <__swsetup_r+0x86>
 800a4be:	0021      	movs	r1, r4
 800a4c0:	0028      	movs	r0, r5
 800a4c2:	f000 f88f 	bl	800a5e4 <__smakebuf_r>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	5ee2      	ldrsh	r2, [r4, r3]
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	0013      	movs	r3, r2
 800a4ce:	400b      	ands	r3, r1
 800a4d0:	420a      	tst	r2, r1
 800a4d2:	d00b      	beq.n	800a4ec <__swsetup_r+0xac>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60a3      	str	r3, [r4, #8]
 800a4d8:	6963      	ldr	r3, [r4, #20]
 800a4da:	425b      	negs	r3, r3
 800a4dc:	61a3      	str	r3, [r4, #24]
 800a4de:	2000      	movs	r0, #0
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	4283      	cmp	r3, r0
 800a4e4:	d101      	bne.n	800a4ea <__swsetup_r+0xaa>
 800a4e6:	0613      	lsls	r3, r2, #24
 800a4e8:	d4be      	bmi.n	800a468 <__swsetup_r+0x28>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	0791      	lsls	r1, r2, #30
 800a4ee:	d400      	bmi.n	800a4f2 <__swsetup_r+0xb2>
 800a4f0:	6963      	ldr	r3, [r4, #20]
 800a4f2:	60a3      	str	r3, [r4, #8]
 800a4f4:	e7f3      	b.n	800a4de <__swsetup_r+0x9e>
 800a4f6:	46c0      	nop			@ (mov r8, r8)
 800a4f8:	20000018 	.word	0x20000018

0800a4fc <_raise_r>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	0004      	movs	r4, r0
 800a500:	000d      	movs	r5, r1
 800a502:	291f      	cmp	r1, #31
 800a504:	d904      	bls.n	800a510 <_raise_r+0x14>
 800a506:	2316      	movs	r3, #22
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	2001      	movs	r0, #1
 800a50c:	4240      	negs	r0, r0
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d004      	beq.n	800a520 <_raise_r+0x24>
 800a516:	008a      	lsls	r2, r1, #2
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	2a00      	cmp	r2, #0
 800a51e:	d108      	bne.n	800a532 <_raise_r+0x36>
 800a520:	0020      	movs	r0, r4
 800a522:	f000 f831 	bl	800a588 <_getpid_r>
 800a526:	002a      	movs	r2, r5
 800a528:	0001      	movs	r1, r0
 800a52a:	0020      	movs	r0, r4
 800a52c:	f000 f81a 	bl	800a564 <_kill_r>
 800a530:	e7ed      	b.n	800a50e <_raise_r+0x12>
 800a532:	2a01      	cmp	r2, #1
 800a534:	d009      	beq.n	800a54a <_raise_r+0x4e>
 800a536:	1c51      	adds	r1, r2, #1
 800a538:	d103      	bne.n	800a542 <_raise_r+0x46>
 800a53a:	2316      	movs	r3, #22
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	2001      	movs	r0, #1
 800a540:	e7e5      	b.n	800a50e <_raise_r+0x12>
 800a542:	2100      	movs	r1, #0
 800a544:	0028      	movs	r0, r5
 800a546:	6019      	str	r1, [r3, #0]
 800a548:	4790      	blx	r2
 800a54a:	2000      	movs	r0, #0
 800a54c:	e7df      	b.n	800a50e <_raise_r+0x12>
	...

0800a550 <raise>:
 800a550:	b510      	push	{r4, lr}
 800a552:	4b03      	ldr	r3, [pc, #12]	@ (800a560 <raise+0x10>)
 800a554:	0001      	movs	r1, r0
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	f7ff ffd0 	bl	800a4fc <_raise_r>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	20000018 	.word	0x20000018

0800a564 <_kill_r>:
 800a564:	2300      	movs	r3, #0
 800a566:	b570      	push	{r4, r5, r6, lr}
 800a568:	4d06      	ldr	r5, [pc, #24]	@ (800a584 <_kill_r+0x20>)
 800a56a:	0004      	movs	r4, r0
 800a56c:	0008      	movs	r0, r1
 800a56e:	0011      	movs	r1, r2
 800a570:	602b      	str	r3, [r5, #0]
 800a572:	f7f8 fe53 	bl	800321c <_kill>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d103      	bne.n	800a582 <_kill_r+0x1e>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d000      	beq.n	800a582 <_kill_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	20000474 	.word	0x20000474

0800a588 <_getpid_r>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	f7f8 fe41 	bl	8003210 <_getpid>
 800a58e:	bd10      	pop	{r4, pc}

0800a590 <__swhatbuf_r>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	000e      	movs	r6, r1
 800a594:	001d      	movs	r5, r3
 800a596:	230e      	movs	r3, #14
 800a598:	5ec9      	ldrsh	r1, [r1, r3]
 800a59a:	0014      	movs	r4, r2
 800a59c:	b096      	sub	sp, #88	@ 0x58
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	da0c      	bge.n	800a5bc <__swhatbuf_r+0x2c>
 800a5a2:	89b2      	ldrh	r2, [r6, #12]
 800a5a4:	2380      	movs	r3, #128	@ 0x80
 800a5a6:	0011      	movs	r1, r2
 800a5a8:	4019      	ands	r1, r3
 800a5aa:	421a      	tst	r2, r3
 800a5ac:	d114      	bne.n	800a5d8 <__swhatbuf_r+0x48>
 800a5ae:	2380      	movs	r3, #128	@ 0x80
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	6029      	str	r1, [r5, #0]
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	b016      	add	sp, #88	@ 0x58
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	466a      	mov	r2, sp
 800a5be:	f000 f853 	bl	800a668 <_fstat_r>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	dbed      	blt.n	800a5a2 <__swhatbuf_r+0x12>
 800a5c6:	23f0      	movs	r3, #240	@ 0xf0
 800a5c8:	9901      	ldr	r1, [sp, #4]
 800a5ca:	021b      	lsls	r3, r3, #8
 800a5cc:	4019      	ands	r1, r3
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <__swhatbuf_r+0x50>)
 800a5d0:	18c9      	adds	r1, r1, r3
 800a5d2:	424b      	negs	r3, r1
 800a5d4:	4159      	adcs	r1, r3
 800a5d6:	e7ea      	b.n	800a5ae <__swhatbuf_r+0x1e>
 800a5d8:	2100      	movs	r1, #0
 800a5da:	2340      	movs	r3, #64	@ 0x40
 800a5dc:	e7e9      	b.n	800a5b2 <__swhatbuf_r+0x22>
 800a5de:	46c0      	nop			@ (mov r8, r8)
 800a5e0:	ffffe000 	.word	0xffffe000

0800a5e4 <__smakebuf_r>:
 800a5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e6:	2602      	movs	r6, #2
 800a5e8:	898b      	ldrh	r3, [r1, #12]
 800a5ea:	0005      	movs	r5, r0
 800a5ec:	000c      	movs	r4, r1
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	4233      	tst	r3, r6
 800a5f2:	d007      	beq.n	800a604 <__smakebuf_r+0x20>
 800a5f4:	0023      	movs	r3, r4
 800a5f6:	3347      	adds	r3, #71	@ 0x47
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	6163      	str	r3, [r4, #20]
 800a600:	b005      	add	sp, #20
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a604:	ab03      	add	r3, sp, #12
 800a606:	aa02      	add	r2, sp, #8
 800a608:	f7ff ffc2 	bl	800a590 <__swhatbuf_r>
 800a60c:	9f02      	ldr	r7, [sp, #8]
 800a60e:	9001      	str	r0, [sp, #4]
 800a610:	0039      	movs	r1, r7
 800a612:	0028      	movs	r0, r5
 800a614:	f7fd fb2c 	bl	8007c70 <_malloc_r>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d108      	bne.n	800a62e <__smakebuf_r+0x4a>
 800a61c:	220c      	movs	r2, #12
 800a61e:	5ea3      	ldrsh	r3, [r4, r2]
 800a620:	059a      	lsls	r2, r3, #22
 800a622:	d4ed      	bmi.n	800a600 <__smakebuf_r+0x1c>
 800a624:	2203      	movs	r2, #3
 800a626:	4393      	bics	r3, r2
 800a628:	431e      	orrs	r6, r3
 800a62a:	81a6      	strh	r6, [r4, #12]
 800a62c:	e7e2      	b.n	800a5f4 <__smakebuf_r+0x10>
 800a62e:	2380      	movs	r3, #128	@ 0x80
 800a630:	89a2      	ldrh	r2, [r4, #12]
 800a632:	6020      	str	r0, [r4, #0]
 800a634:	4313      	orrs	r3, r2
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	6120      	str	r0, [r4, #16]
 800a63c:	6167      	str	r7, [r4, #20]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <__smakebuf_r+0x78>
 800a642:	0028      	movs	r0, r5
 800a644:	230e      	movs	r3, #14
 800a646:	5ee1      	ldrsh	r1, [r4, r3]
 800a648:	f000 f820 	bl	800a68c <_isatty_r>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d005      	beq.n	800a65c <__smakebuf_r+0x78>
 800a650:	2303      	movs	r3, #3
 800a652:	89a2      	ldrh	r2, [r4, #12]
 800a654:	439a      	bics	r2, r3
 800a656:	3b02      	subs	r3, #2
 800a658:	4313      	orrs	r3, r2
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	9a01      	ldr	r2, [sp, #4]
 800a660:	4313      	orrs	r3, r2
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	e7cc      	b.n	800a600 <__smakebuf_r+0x1c>
	...

0800a668 <_fstat_r>:
 800a668:	2300      	movs	r3, #0
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	4d06      	ldr	r5, [pc, #24]	@ (800a688 <_fstat_r+0x20>)
 800a66e:	0004      	movs	r4, r0
 800a670:	0008      	movs	r0, r1
 800a672:	0011      	movs	r1, r2
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f7f8 fe31 	bl	80032dc <_fstat>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d103      	bne.n	800a686 <_fstat_r+0x1e>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d000      	beq.n	800a686 <_fstat_r+0x1e>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	20000474 	.word	0x20000474

0800a68c <_isatty_r>:
 800a68c:	2300      	movs	r3, #0
 800a68e:	b570      	push	{r4, r5, r6, lr}
 800a690:	4d06      	ldr	r5, [pc, #24]	@ (800a6ac <_isatty_r+0x20>)
 800a692:	0004      	movs	r4, r0
 800a694:	0008      	movs	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f8 fe2e 	bl	80032f8 <_isatty>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d103      	bne.n	800a6a8 <_isatty_r+0x1c>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d000      	beq.n	800a6a8 <_isatty_r+0x1c>
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
 800a6aa:	46c0      	nop			@ (mov r8, r8)
 800a6ac:	20000474 	.word	0x20000474

0800a6b0 <_init>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	46c0      	nop			@ (mov r8, r8)
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr

0800a6bc <_fini>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr
