
I2c_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800bbd0  0800bbd0  0000cbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c148  0800c148  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c148  0800c148  0000d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c150  0800c150  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  0000d150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c154  0800c154  0000d154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c158  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001d8  0800c330  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  0800c330  0000e4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc3b  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  0001ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0001ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a7  00000000  00000000  0001d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154c4  00000000  00000000  0001e287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eac9  00000000  00000000  0003374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e965  00000000  00000000  00042214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  000c0bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000c48e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bbb4 	.word	0x0800bbb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800bbb4 	.word	0x0800bbb4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd35 	bl	8001eac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc75 	bl	8001d3c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd27 	bl	8001eac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd1d 	bl	8001eac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc9f 	bl	8001dc4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc95 	bl	8001dc4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a2 	bl	8000620 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 fb9f 	bl	8002c9c <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 ffda 	bl	8002520 <__aeabi_dsub>
 800056c:	f002 fb96 	bl	8002c9c <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0004      	movs	r4, r0
 8000588:	000d      	movs	r5, r1
 800058a:	f7ff ff65 	bl	8000458 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x24>
 8000592:	0020      	movs	r0, r4
 8000594:	0029      	movs	r1, r5
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e9      	adds	r1, r5, r3
 80005aa:	0020      	movs	r0, r4
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x1e>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 fce5 	bl	8001f90 <__aeabi_dmul>
 80005c6:	f7ff ffbd 	bl	8000544 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f002 fbd0 	bl	8002d70 <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 fcdc 	bl	8001f90 <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 ff9e 	bl	8002520 <__aeabi_dsub>
 80005e4:	f7ff ffae 	bl	8000544 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f002 fb8b 	bl	8002d14 <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 fcc5 	bl	8001f90 <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f002 fbb0 	bl	8002d70 <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 fd14 	bl	8001040 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f002 fca4 	bl	8002f8c <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f002 fc9f 	bl	8002f8c <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_fdiv>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0244      	lsls	r4, r0, #9
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	0047      	lsls	r7, r0, #1
 80007c6:	1c0e      	adds	r6, r1, #0
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	0e3f      	lsrs	r7, r7, #24
 80007cc:	0fc5      	lsrs	r5, r0, #31
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	d03c      	beq.n	800084c <__aeabi_fdiv+0x94>
 80007d2:	2fff      	cmp	r7, #255	@ 0xff
 80007d4:	d042      	beq.n	800085c <__aeabi_fdiv+0xa4>
 80007d6:	2300      	movs	r3, #0
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	4699      	mov	r9, r3
 80007dc:	469a      	mov	sl, r3
 80007de:	00e4      	lsls	r4, r4, #3
 80007e0:	04d2      	lsls	r2, r2, #19
 80007e2:	4314      	orrs	r4, r2
 80007e4:	3f7f      	subs	r7, #127	@ 0x7f
 80007e6:	0273      	lsls	r3, r6, #9
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	4698      	mov	r8, r3
 80007ec:	0073      	lsls	r3, r6, #1
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	0ff6      	lsrs	r6, r6, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d01b      	beq.n	800082e <__aeabi_fdiv+0x76>
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d013      	beq.n	8000822 <__aeabi_fdiv+0x6a>
 80007fa:	4642      	mov	r2, r8
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	00d2      	lsls	r2, r2, #3
 8000800:	04c9      	lsls	r1, r1, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	4688      	mov	r8, r1
 8000806:	2000      	movs	r0, #0
 8000808:	3b7f      	subs	r3, #127	@ 0x7f
 800080a:	0029      	movs	r1, r5
 800080c:	1aff      	subs	r7, r7, r3
 800080e:	464b      	mov	r3, r9
 8000810:	4071      	eors	r1, r6
 8000812:	b2c9      	uxtb	r1, r1
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d900      	bls.n	800081a <__aeabi_fdiv+0x62>
 8000818:	e0b5      	b.n	8000986 <__aeabi_fdiv+0x1ce>
 800081a:	4a74      	ldr	r2, [pc, #464]	@ (80009ec <__aeabi_fdiv+0x234>)
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	58d3      	ldr	r3, [r2, r3]
 8000820:	469f      	mov	pc, r3
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0xf0>
 8000828:	3fff      	subs	r7, #255	@ 0xff
 800082a:	3302      	adds	r3, #2
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0x7e>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0xd8>
 8000834:	2301      	movs	r3, #1
 8000836:	0029      	movs	r1, r5
 8000838:	464a      	mov	r2, r9
 800083a:	4071      	eors	r1, r6
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	2a0e      	cmp	r2, #14
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0xfe>
 8000844:	486a      	ldr	r0, [pc, #424]	@ (80009f0 <__aeabi_fdiv+0x238>)
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	5882      	ldr	r2, [r0, r2]
 800084a:	4697      	mov	pc, r2
 800084c:	2c00      	cmp	r4, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0xc0>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e7c4      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800085c:	2c00      	cmp	r4, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0xb4>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7bc      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	@ 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e7b6      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000878:	0020      	movs	r0, r4
 800087a:	f002 fb69 	bl	8002f50 <__clzsi2>
 800087e:	2776      	movs	r7, #118	@ 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409c      	lsls	r4, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e7aa      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000890:	4640      	mov	r0, r8
 8000892:	f002 fb5d 	bl	8002f50 <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	@ 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	4690      	mov	r8, r2
 80008a4:	2000      	movs	r0, #0
 80008a6:	e7b0      	b.n	800080a <__aeabi_fdiv+0x52>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	2003      	movs	r0, #3
 80008b2:	33fc      	adds	r3, #252	@ 0xfc
 80008b4:	e7a9      	b.n	800080a <__aeabi_fdiv+0x52>
 80008b6:	000d      	movs	r5, r1
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	05c0      	lsls	r0, r0, #23
 80008be:	07ed      	lsls	r5, r5, #31
 80008c0:	4310      	orrs	r0, r2
 80008c2:	4328      	orrs	r0, r5
 80008c4:	bce0      	pop	{r5, r6, r7}
 80008c6:	46ba      	mov	sl, r7
 80008c8:	46b1      	mov	r9, r6
 80008ca:	46a8      	mov	r8, r5
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ce:	000d      	movs	r5, r1
 80008d0:	2000      	movs	r0, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	e7f2      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008d6:	4653      	mov	r3, sl
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d0ed      	beq.n	80008b8 <__aeabi_fdiv+0x100>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d033      	beq.n	8000948 <__aeabi_fdiv+0x190>
 80008e0:	46a0      	mov	r8, r4
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fdiv+0x13a>
 80008e6:	2000      	movs	r0, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	e7e7      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008ec:	0035      	movs	r5, r6
 80008ee:	2803      	cmp	r0, #3
 80008f0:	d07a      	beq.n	80009e8 <__aeabi_fdiv+0x230>
 80008f2:	003b      	movs	r3, r7
 80008f4:	337f      	adds	r3, #127	@ 0x7f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd2d      	ble.n	8000956 <__aeabi_fdiv+0x19e>
 80008fa:	4642      	mov	r2, r8
 80008fc:	0752      	lsls	r2, r2, #29
 80008fe:	d007      	beq.n	8000910 <__aeabi_fdiv+0x158>
 8000900:	220f      	movs	r2, #15
 8000902:	4641      	mov	r1, r8
 8000904:	400a      	ands	r2, r1
 8000906:	2a04      	cmp	r2, #4
 8000908:	d002      	beq.n	8000910 <__aeabi_fdiv+0x158>
 800090a:	2204      	movs	r2, #4
 800090c:	4694      	mov	ip, r2
 800090e:	44e0      	add	r8, ip
 8000910:	4642      	mov	r2, r8
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	d505      	bpl.n	8000922 <__aeabi_fdiv+0x16a>
 8000916:	4642      	mov	r2, r8
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <__aeabi_fdiv+0x23c>)
 800091a:	401a      	ands	r2, r3
 800091c:	003b      	movs	r3, r7
 800091e:	4690      	mov	r8, r2
 8000920:	3380      	adds	r3, #128	@ 0x80
 8000922:	2bfe      	cmp	r3, #254	@ 0xfe
 8000924:	dcc8      	bgt.n	80008b8 <__aeabi_fdiv+0x100>
 8000926:	4642      	mov	r2, r8
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	0a52      	lsrs	r2, r2, #9
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	e7c5      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	2500      	movs	r5, #0
 8000934:	20ff      	movs	r0, #255	@ 0xff
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	e7c0      	b.n	80008bc <__aeabi_fdiv+0x104>
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4214      	tst	r4, r2
 8000940:	d002      	beq.n	8000948 <__aeabi_fdiv+0x190>
 8000942:	4643      	mov	r3, r8
 8000944:	4213      	tst	r3, r2
 8000946:	d049      	beq.n	80009dc <__aeabi_fdiv+0x224>
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	03d2      	lsls	r2, r2, #15
 800094c:	4322      	orrs	r2, r4
 800094e:	0252      	lsls	r2, r2, #9
 8000950:	20ff      	movs	r0, #255	@ 0xff
 8000952:	0a52      	lsrs	r2, r2, #9
 8000954:	e7b2      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000956:	2201      	movs	r2, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dcc3      	bgt.n	80008e6 <__aeabi_fdiv+0x12e>
 800095e:	4642      	mov	r2, r8
 8000960:	40da      	lsrs	r2, r3
 8000962:	4643      	mov	r3, r8
 8000964:	379e      	adds	r7, #158	@ 0x9e
 8000966:	40bb      	lsls	r3, r7
 8000968:	1e59      	subs	r1, r3, #1
 800096a:	418b      	sbcs	r3, r1
 800096c:	431a      	orrs	r2, r3
 800096e:	0753      	lsls	r3, r2, #29
 8000970:	d004      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 8000972:	230f      	movs	r3, #15
 8000974:	4013      	ands	r3, r2
 8000976:	2b04      	cmp	r3, #4
 8000978:	d000      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 800097a:	3204      	adds	r2, #4
 800097c:	0153      	lsls	r3, r2, #5
 800097e:	d529      	bpl.n	80009d4 <__aeabi_fdiv+0x21c>
 8000980:	2001      	movs	r0, #1
 8000982:	2200      	movs	r2, #0
 8000984:	e79a      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000986:	4642      	mov	r2, r8
 8000988:	0163      	lsls	r3, r4, #5
 800098a:	0155      	lsls	r5, r2, #5
 800098c:	42ab      	cmp	r3, r5
 800098e:	d215      	bcs.n	80009bc <__aeabi_fdiv+0x204>
 8000990:	201b      	movs	r0, #27
 8000992:	2200      	movs	r2, #0
 8000994:	3f01      	subs	r7, #1
 8000996:	2601      	movs	r6, #1
 8000998:	001c      	movs	r4, r3
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2c00      	cmp	r4, #0
 80009a0:	db01      	blt.n	80009a6 <__aeabi_fdiv+0x1ee>
 80009a2:	429d      	cmp	r5, r3
 80009a4:	d801      	bhi.n	80009aa <__aeabi_fdiv+0x1f2>
 80009a6:	1b5b      	subs	r3, r3, r5
 80009a8:	4332      	orrs	r2, r6
 80009aa:	3801      	subs	r0, #1
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1f3      	bne.n	8000998 <__aeabi_fdiv+0x1e0>
 80009b0:	1e58      	subs	r0, r3, #1
 80009b2:	4183      	sbcs	r3, r0
 80009b4:	4313      	orrs	r3, r2
 80009b6:	4698      	mov	r8, r3
 80009b8:	000d      	movs	r5, r1
 80009ba:	e79a      	b.n	80008f2 <__aeabi_fdiv+0x13a>
 80009bc:	201a      	movs	r0, #26
 80009be:	2201      	movs	r2, #1
 80009c0:	1b5b      	subs	r3, r3, r5
 80009c2:	e7e8      	b.n	8000996 <__aeabi_fdiv+0x1de>
 80009c4:	3b02      	subs	r3, #2
 80009c6:	425a      	negs	r2, r3
 80009c8:	4153      	adcs	r3, r2
 80009ca:	425b      	negs	r3, r3
 80009cc:	0035      	movs	r5, r6
 80009ce:	2200      	movs	r2, #0
 80009d0:	b2d8      	uxtb	r0, r3
 80009d2:	e773      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009d4:	0192      	lsls	r2, r2, #6
 80009d6:	2000      	movs	r0, #0
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e76f      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009dc:	431a      	orrs	r2, r3
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	0035      	movs	r5, r6
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	0a52      	lsrs	r2, r2, #9
 80009e6:	e769      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009e8:	4644      	mov	r4, r8
 80009ea:	e7ad      	b.n	8000948 <__aeabi_fdiv+0x190>
 80009ec:	0800bbf4 	.word	0x0800bbf4
 80009f0:	0800bc34 	.word	0x0800bc34
 80009f4:	f7ffffff 	.word	0xf7ffffff

080009f8 <__aeabi_fmul>:
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	464f      	mov	r7, r9
 80009fc:	4646      	mov	r6, r8
 80009fe:	46d6      	mov	lr, sl
 8000a00:	0243      	lsls	r3, r0, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0045      	lsls	r5, r0, #1
 8000a06:	b5c0      	push	{r6, r7, lr}
 8000a08:	4699      	mov	r9, r3
 8000a0a:	1c0f      	adds	r7, r1, #0
 8000a0c:	0e2d      	lsrs	r5, r5, #24
 8000a0e:	0fc6      	lsrs	r6, r0, #31
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x1e>
 8000a14:	e088      	b.n	8000b28 <__aeabi_fmul+0x130>
 8000a16:	2dff      	cmp	r5, #255	@ 0xff
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fmul+0x24>
 8000a1a:	e08d      	b.n	8000b38 <__aeabi_fmul+0x140>
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	04d2      	lsls	r2, r2, #19
 8000a22:	431a      	orrs	r2, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	4691      	mov	r9, r2
 8000a28:	4698      	mov	r8, r3
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	3d7f      	subs	r5, #127	@ 0x7f
 8000a2e:	027c      	lsls	r4, r7, #9
 8000a30:	007b      	lsls	r3, r7, #1
 8000a32:	0a64      	lsrs	r4, r4, #9
 8000a34:	0e1b      	lsrs	r3, r3, #24
 8000a36:	0fff      	lsrs	r7, r7, #31
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d068      	beq.n	8000b0e <__aeabi_fmul+0x116>
 8000a3c:	2bff      	cmp	r3, #255	@ 0xff
 8000a3e:	d021      	beq.n	8000a84 <__aeabi_fmul+0x8c>
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4314      	orrs	r4, r2
 8000a48:	4642      	mov	r2, r8
 8000a4a:	3b7f      	subs	r3, #127	@ 0x7f
 8000a4c:	195b      	adds	r3, r3, r5
 8000a4e:	2100      	movs	r1, #0
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2a0a      	cmp	r2, #10
 8000a54:	dc2e      	bgt.n	8000ab4 <__aeabi_fmul+0xbc>
 8000a56:	407e      	eors	r6, r7
 8000a58:	4642      	mov	r2, r8
 8000a5a:	2a02      	cmp	r2, #2
 8000a5c:	dc23      	bgt.n	8000aa6 <__aeabi_fmul+0xae>
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	2a01      	cmp	r2, #1
 8000a62:	d900      	bls.n	8000a66 <__aeabi_fmul+0x6e>
 8000a64:	e0bd      	b.n	8000be2 <__aeabi_fmul+0x1ea>
 8000a66:	2902      	cmp	r1, #2
 8000a68:	d06e      	beq.n	8000b48 <__aeabi_fmul+0x150>
 8000a6a:	2901      	cmp	r1, #1
 8000a6c:	d12c      	bne.n	8000ac8 <__aeabi_fmul+0xd0>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	05c0      	lsls	r0, r0, #23
 8000a74:	07f6      	lsls	r6, r6, #31
 8000a76:	4310      	orrs	r0, r2
 8000a78:	4330      	orrs	r0, r6
 8000a7a:	bce0      	pop	{r5, r6, r7}
 8000a7c:	46ba      	mov	sl, r7
 8000a7e:	46b1      	mov	r9, r6
 8000a80:	46a8      	mov	r8, r5
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	002b      	movs	r3, r5
 8000a86:	33ff      	adds	r3, #255	@ 0xff
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	d065      	beq.n	8000b58 <__aeabi_fmul+0x160>
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4641      	mov	r1, r8
 8000a90:	4311      	orrs	r1, r2
 8000a92:	0032      	movs	r2, r6
 8000a94:	3501      	adds	r5, #1
 8000a96:	4688      	mov	r8, r1
 8000a98:	407a      	eors	r2, r7
 8000a9a:	35ff      	adds	r5, #255	@ 0xff
 8000a9c:	290a      	cmp	r1, #10
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_fmul+0xaa>
 8000aa0:	e0d8      	b.n	8000c54 <__aeabi_fmul+0x25c>
 8000aa2:	0016      	movs	r6, r2
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	4640      	mov	r0, r8
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	4082      	lsls	r2, r0
 8000aac:	20a6      	movs	r0, #166	@ 0xa6
 8000aae:	00c0      	lsls	r0, r0, #3
 8000ab0:	4202      	tst	r2, r0
 8000ab2:	d020      	beq.n	8000af6 <__aeabi_fmul+0xfe>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d046      	beq.n	8000b48 <__aeabi_fmul+0x150>
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_fmul+0xc8>
 8000abe:	e0bb      	b.n	8000c38 <__aeabi_fmul+0x240>
 8000ac0:	4651      	mov	r1, sl
 8000ac2:	464c      	mov	r4, r9
 8000ac4:	2901      	cmp	r1, #1
 8000ac6:	d0d2      	beq.n	8000a6e <__aeabi_fmul+0x76>
 8000ac8:	002b      	movs	r3, r5
 8000aca:	337f      	adds	r3, #127	@ 0x7f
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dd70      	ble.n	8000bb2 <__aeabi_fmul+0x1ba>
 8000ad0:	0762      	lsls	r2, r4, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fmul+0xe6>
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	4022      	ands	r2, r4
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fmul+0xe6>
 8000adc:	3404      	adds	r4, #4
 8000ade:	0122      	lsls	r2, r4, #4
 8000ae0:	d503      	bpl.n	8000aea <__aeabi_fmul+0xf2>
 8000ae2:	4b63      	ldr	r3, [pc, #396]	@ (8000c70 <__aeabi_fmul+0x278>)
 8000ae4:	401c      	ands	r4, r3
 8000ae6:	002b      	movs	r3, r5
 8000ae8:	3380      	adds	r3, #128	@ 0x80
 8000aea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aec:	dc2c      	bgt.n	8000b48 <__aeabi_fmul+0x150>
 8000aee:	01a2      	lsls	r2, r4, #6
 8000af0:	0a52      	lsrs	r2, r2, #9
 8000af2:	b2d8      	uxtb	r0, r3
 8000af4:	e7bd      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000af6:	2090      	movs	r0, #144	@ 0x90
 8000af8:	0080      	lsls	r0, r0, #2
 8000afa:	4202      	tst	r2, r0
 8000afc:	d127      	bne.n	8000b4e <__aeabi_fmul+0x156>
 8000afe:	38b9      	subs	r0, #185	@ 0xb9
 8000b00:	38ff      	subs	r0, #255	@ 0xff
 8000b02:	4210      	tst	r0, r2
 8000b04:	d06d      	beq.n	8000be2 <__aeabi_fmul+0x1ea>
 8000b06:	003e      	movs	r6, r7
 8000b08:	46a1      	mov	r9, r4
 8000b0a:	468a      	mov	sl, r1
 8000b0c:	e7d2      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d141      	bne.n	8000b96 <__aeabi_fmul+0x19e>
 8000b12:	2301      	movs	r3, #1
 8000b14:	4642      	mov	r2, r8
 8000b16:	431a      	orrs	r2, r3
 8000b18:	4690      	mov	r8, r2
 8000b1a:	002b      	movs	r3, r5
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	2101      	movs	r1, #1
 8000b20:	1c5d      	adds	r5, r3, #1
 8000b22:	2a0a      	cmp	r2, #10
 8000b24:	dd97      	ble.n	8000a56 <__aeabi_fmul+0x5e>
 8000b26:	e7c5      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d126      	bne.n	8000b7a <__aeabi_fmul+0x182>
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	4698      	mov	r8, r3
 8000b30:	3b03      	subs	r3, #3
 8000b32:	2500      	movs	r5, #0
 8000b34:	469a      	mov	sl, r3
 8000b36:	e77a      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d118      	bne.n	8000b6e <__aeabi_fmul+0x176>
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	4698      	mov	r8, r3
 8000b40:	3b06      	subs	r3, #6
 8000b42:	25ff      	movs	r5, #255	@ 0xff
 8000b44:	469a      	mov	sl, r3
 8000b46:	e772      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b48:	20ff      	movs	r0, #255	@ 0xff
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e791      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	2600      	movs	r6, #0
 8000b52:	20ff      	movs	r0, #255	@ 0xff
 8000b54:	03d2      	lsls	r2, r2, #15
 8000b56:	e78c      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000b58:	4641      	mov	r1, r8
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	3501      	adds	r5, #1
 8000b5e:	4311      	orrs	r1, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	35ff      	adds	r5, #255	@ 0xff
 8000b64:	290a      	cmp	r1, #10
 8000b66:	dca5      	bgt.n	8000ab4 <__aeabi_fmul+0xbc>
 8000b68:	2102      	movs	r1, #2
 8000b6a:	407e      	eors	r6, r7
 8000b6c:	e774      	b.n	8000a58 <__aeabi_fmul+0x60>
 8000b6e:	230c      	movs	r3, #12
 8000b70:	4698      	mov	r8, r3
 8000b72:	3b09      	subs	r3, #9
 8000b74:	25ff      	movs	r5, #255	@ 0xff
 8000b76:	469a      	mov	sl, r3
 8000b78:	e759      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 f9e8 	bl	8002f50 <__clzsi2>
 8000b80:	464a      	mov	r2, r9
 8000b82:	1f43      	subs	r3, r0, #5
 8000b84:	2576      	movs	r5, #118	@ 0x76
 8000b86:	409a      	lsls	r2, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	426d      	negs	r5, r5
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	4698      	mov	r8, r3
 8000b90:	469a      	mov	sl, r3
 8000b92:	1a2d      	subs	r5, r5, r0
 8000b94:	e74b      	b.n	8000a2e <__aeabi_fmul+0x36>
 8000b96:	0020      	movs	r0, r4
 8000b98:	f002 f9da 	bl	8002f50 <__clzsi2>
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	1f43      	subs	r3, r0, #5
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	1a2b      	subs	r3, r5, r0
 8000ba4:	3b76      	subs	r3, #118	@ 0x76
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	1c5d      	adds	r5, r3, #1
 8000baa:	2a0a      	cmp	r2, #10
 8000bac:	dc00      	bgt.n	8000bb0 <__aeabi_fmul+0x1b8>
 8000bae:	e752      	b.n	8000a56 <__aeabi_fmul+0x5e>
 8000bb0:	e780      	b.n	8000ab4 <__aeabi_fmul+0xbc>
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b1b      	cmp	r3, #27
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_fmul+0x1c4>
 8000bba:	e758      	b.n	8000a6e <__aeabi_fmul+0x76>
 8000bbc:	359e      	adds	r5, #158	@ 0x9e
 8000bbe:	0022      	movs	r2, r4
 8000bc0:	40ac      	lsls	r4, r5
 8000bc2:	40da      	lsrs	r2, r3
 8000bc4:	1e63      	subs	r3, r4, #1
 8000bc6:	419c      	sbcs	r4, r3
 8000bc8:	4322      	orrs	r2, r4
 8000bca:	0753      	lsls	r3, r2, #29
 8000bcc:	d004      	beq.n	8000bd8 <__aeabi_fmul+0x1e0>
 8000bce:	230f      	movs	r3, #15
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_fmul+0x1e0>
 8000bd6:	3204      	adds	r2, #4
 8000bd8:	0153      	lsls	r3, r2, #5
 8000bda:	d537      	bpl.n	8000c4c <__aeabi_fmul+0x254>
 8000bdc:	2001      	movs	r0, #1
 8000bde:	2200      	movs	r2, #0
 8000be0:	e747      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000be2:	0c21      	lsrs	r1, r4, #16
 8000be4:	464a      	mov	r2, r9
 8000be6:	0424      	lsls	r4, r4, #16
 8000be8:	0c24      	lsrs	r4, r4, #16
 8000bea:	0027      	movs	r7, r4
 8000bec:	0c10      	lsrs	r0, r2, #16
 8000bee:	0412      	lsls	r2, r2, #16
 8000bf0:	0c12      	lsrs	r2, r2, #16
 8000bf2:	4344      	muls	r4, r0
 8000bf4:	4357      	muls	r7, r2
 8000bf6:	4348      	muls	r0, r1
 8000bf8:	4351      	muls	r1, r2
 8000bfa:	0c3a      	lsrs	r2, r7, #16
 8000bfc:	1909      	adds	r1, r1, r4
 8000bfe:	1852      	adds	r2, r2, r1
 8000c00:	4294      	cmp	r4, r2
 8000c02:	d903      	bls.n	8000c0c <__aeabi_fmul+0x214>
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0249      	lsls	r1, r1, #9
 8000c08:	468c      	mov	ip, r1
 8000c0a:	4460      	add	r0, ip
 8000c0c:	043f      	lsls	r7, r7, #16
 8000c0e:	0411      	lsls	r1, r2, #16
 8000c10:	0c3f      	lsrs	r7, r7, #16
 8000c12:	19c9      	adds	r1, r1, r7
 8000c14:	018c      	lsls	r4, r1, #6
 8000c16:	1e67      	subs	r7, r4, #1
 8000c18:	41bc      	sbcs	r4, r7
 8000c1a:	0c12      	lsrs	r2, r2, #16
 8000c1c:	0e89      	lsrs	r1, r1, #26
 8000c1e:	1812      	adds	r2, r2, r0
 8000c20:	430c      	orrs	r4, r1
 8000c22:	0192      	lsls	r2, r2, #6
 8000c24:	4314      	orrs	r4, r2
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	d50e      	bpl.n	8000c48 <__aeabi_fmul+0x250>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	0862      	lsrs	r2, r4, #1
 8000c2e:	401c      	ands	r4, r3
 8000c30:	4314      	orrs	r4, r2
 8000c32:	e749      	b.n	8000ac8 <__aeabi_fmul+0xd0>
 8000c34:	003e      	movs	r6, r7
 8000c36:	46a1      	mov	r9, r4
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	464b      	mov	r3, r9
 8000c3c:	03d2      	lsls	r2, r2, #15
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	0252      	lsls	r2, r2, #9
 8000c42:	20ff      	movs	r0, #255	@ 0xff
 8000c44:	0a52      	lsrs	r2, r2, #9
 8000c46:	e714      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c48:	001d      	movs	r5, r3
 8000c4a:	e73d      	b.n	8000ac8 <__aeabi_fmul+0xd0>
 8000c4c:	0192      	lsls	r2, r2, #6
 8000c4e:	2000      	movs	r0, #0
 8000c50:	0a52      	lsrs	r2, r2, #9
 8000c52:	e70e      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c54:	290f      	cmp	r1, #15
 8000c56:	d1ed      	bne.n	8000c34 <__aeabi_fmul+0x23c>
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	03d2      	lsls	r2, r2, #15
 8000c5e:	4213      	tst	r3, r2
 8000c60:	d0ea      	beq.n	8000c38 <__aeabi_fmul+0x240>
 8000c62:	4214      	tst	r4, r2
 8000c64:	d1e8      	bne.n	8000c38 <__aeabi_fmul+0x240>
 8000c66:	003e      	movs	r6, r7
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	4322      	orrs	r2, r4
 8000c6c:	e701      	b.n	8000a72 <__aeabi_fmul+0x7a>
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	f7ffffff 	.word	0xf7ffffff

08000c74 <__aeabi_fsub>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	4647      	mov	r7, r8
 8000c78:	46ce      	mov	lr, r9
 8000c7a:	024e      	lsls	r6, r1, #9
 8000c7c:	0243      	lsls	r3, r0, #9
 8000c7e:	0045      	lsls	r5, r0, #1
 8000c80:	0a72      	lsrs	r2, r6, #9
 8000c82:	0fc4      	lsrs	r4, r0, #31
 8000c84:	0048      	lsls	r0, r1, #1
 8000c86:	b580      	push	{r7, lr}
 8000c88:	4694      	mov	ip, r2
 8000c8a:	0a5f      	lsrs	r7, r3, #9
 8000c8c:	0e2d      	lsrs	r5, r5, #24
 8000c8e:	099b      	lsrs	r3, r3, #6
 8000c90:	0e00      	lsrs	r0, r0, #24
 8000c92:	0fc9      	lsrs	r1, r1, #31
 8000c94:	09b6      	lsrs	r6, r6, #6
 8000c96:	28ff      	cmp	r0, #255	@ 0xff
 8000c98:	d024      	beq.n	8000ce4 <__aeabi_fsub+0x70>
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4051      	eors	r1, r2
 8000c9e:	1a2a      	subs	r2, r5, r0
 8000ca0:	428c      	cmp	r4, r1
 8000ca2:	d00f      	beq.n	8000cc4 <__aeabi_fsub+0x50>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	dc00      	bgt.n	8000caa <__aeabi_fsub+0x36>
 8000ca8:	e16a      	b.n	8000f80 <__aeabi_fsub+0x30c>
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d135      	bne.n	8000d1a <__aeabi_fsub+0xa6>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x40>
 8000cb2:	e0a2      	b.n	8000dfa <__aeabi_fsub+0x186>
 8000cb4:	1e51      	subs	r1, r2, #1
 8000cb6:	2a01      	cmp	r2, #1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x48>
 8000cba:	e124      	b.n	8000f06 <__aeabi_fsub+0x292>
 8000cbc:	2aff      	cmp	r2, #255	@ 0xff
 8000cbe:	d021      	beq.n	8000d04 <__aeabi_fsub+0x90>
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	e02f      	b.n	8000d24 <__aeabi_fsub+0xb0>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	dc00      	bgt.n	8000cca <__aeabi_fsub+0x56>
 8000cc8:	e167      	b.n	8000f9a <__aeabi_fsub+0x326>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d05e      	beq.n	8000d8c <__aeabi_fsub+0x118>
 8000cce:	2dff      	cmp	r5, #255	@ 0xff
 8000cd0:	d018      	beq.n	8000d04 <__aeabi_fsub+0x90>
 8000cd2:	2180      	movs	r1, #128	@ 0x80
 8000cd4:	04c9      	lsls	r1, r1, #19
 8000cd6:	430e      	orrs	r6, r1
 8000cd8:	2a1b      	cmp	r2, #27
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_fsub+0x6a>
 8000cdc:	e076      	b.n	8000dcc <__aeabi_fsub+0x158>
 8000cde:	002a      	movs	r2, r5
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	e032      	b.n	8000d4a <__aeabi_fsub+0xd6>
 8000ce4:	002a      	movs	r2, r5
 8000ce6:	3aff      	subs	r2, #255	@ 0xff
 8000ce8:	4691      	mov	r9, r2
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d042      	beq.n	8000d74 <__aeabi_fsub+0x100>
 8000cee:	428c      	cmp	r4, r1
 8000cf0:	d055      	beq.n	8000d9e <__aeabi_fsub+0x12a>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x86>
 8000cf8:	e09c      	b.n	8000e34 <__aeabi_fsub+0x1c0>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x8c>
 8000cfe:	e077      	b.n	8000df0 <__aeabi_fsub+0x17c>
 8000d00:	000c      	movs	r4, r1
 8000d02:	0033      	movs	r3, r6
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_fsub+0x98>
 8000d0a:	e06e      	b.n	8000dea <__aeabi_fsub+0x176>
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	03d2      	lsls	r2, r2, #15
 8000d10:	4313      	orrs	r3, r2
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	20ff      	movs	r0, #255	@ 0xff
 8000d16:	0a5b      	lsrs	r3, r3, #9
 8000d18:	e024      	b.n	8000d64 <__aeabi_fsub+0xf0>
 8000d1a:	2dff      	cmp	r5, #255	@ 0xff
 8000d1c:	d0f2      	beq.n	8000d04 <__aeabi_fsub+0x90>
 8000d1e:	2180      	movs	r1, #128	@ 0x80
 8000d20:	04c9      	lsls	r1, r1, #19
 8000d22:	430e      	orrs	r6, r1
 8000d24:	2101      	movs	r1, #1
 8000d26:	2a1b      	cmp	r2, #27
 8000d28:	dc08      	bgt.n	8000d3c <__aeabi_fsub+0xc8>
 8000d2a:	0031      	movs	r1, r6
 8000d2c:	2020      	movs	r0, #32
 8000d2e:	40d1      	lsrs	r1, r2
 8000d30:	1a82      	subs	r2, r0, r2
 8000d32:	4096      	lsls	r6, r2
 8000d34:	0032      	movs	r2, r6
 8000d36:	1e50      	subs	r0, r2, #1
 8000d38:	4182      	sbcs	r2, r0
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	015a      	lsls	r2, r3, #5
 8000d40:	d460      	bmi.n	8000e04 <__aeabi_fsub+0x190>
 8000d42:	2107      	movs	r1, #7
 8000d44:	002a      	movs	r2, r5
 8000d46:	4019      	ands	r1, r3
 8000d48:	d057      	beq.n	8000dfa <__aeabi_fsub+0x186>
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	4019      	ands	r1, r3
 8000d4e:	2904      	cmp	r1, #4
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0xe0>
 8000d52:	3304      	adds	r3, #4
 8000d54:	0159      	lsls	r1, r3, #5
 8000d56:	d550      	bpl.n	8000dfa <__aeabi_fsub+0x186>
 8000d58:	1c50      	adds	r0, r2, #1
 8000d5a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d5c:	d045      	beq.n	8000dea <__aeabi_fsub+0x176>
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	b2c0      	uxtb	r0, r0
 8000d62:	0a5b      	lsrs	r3, r3, #9
 8000d64:	05c0      	lsls	r0, r0, #23
 8000d66:	4318      	orrs	r0, r3
 8000d68:	07e4      	lsls	r4, r4, #31
 8000d6a:	4320      	orrs	r0, r4
 8000d6c:	bcc0      	pop	{r6, r7}
 8000d6e:	46b9      	mov	r9, r7
 8000d70:	46b0      	mov	r8, r6
 8000d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d74:	2201      	movs	r2, #1
 8000d76:	4051      	eors	r1, r2
 8000d78:	428c      	cmp	r4, r1
 8000d7a:	d1ba      	bne.n	8000cf2 <__aeabi_fsub+0x7e>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d010      	beq.n	8000da4 <__aeabi_fsub+0x130>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_fsub+0x114>
 8000d86:	e098      	b.n	8000eba <__aeabi_fsub+0x246>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e7bb      	b.n	8000d04 <__aeabi_fsub+0x90>
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d034      	beq.n	8000dfa <__aeabi_fsub+0x186>
 8000d90:	1e51      	subs	r1, r2, #1
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d06e      	beq.n	8000e74 <__aeabi_fsub+0x200>
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d0b4      	beq.n	8000d04 <__aeabi_fsub+0x90>
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	e79c      	b.n	8000cd8 <__aeabi_fsub+0x64>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fsub+0x130>
 8000da2:	e088      	b.n	8000eb6 <__aeabi_fsub+0x242>
 8000da4:	20fe      	movs	r0, #254	@ 0xfe
 8000da6:	1c6a      	adds	r2, r5, #1
 8000da8:	4210      	tst	r0, r2
 8000daa:	d000      	beq.n	8000dae <__aeabi_fsub+0x13a>
 8000dac:	e092      	b.n	8000ed4 <__aeabi_fsub+0x260>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x140>
 8000db2:	e0a4      	b.n	8000efe <__aeabi_fsub+0x28a>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x146>
 8000db8:	e0cb      	b.n	8000f52 <__aeabi_fsub+0x2de>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fsub+0x14c>
 8000dbe:	e0ca      	b.n	8000f56 <__aeabi_fsub+0x2e2>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	025b      	lsls	r3, r3, #9
 8000dc6:	0a5b      	lsrs	r3, r3, #9
 8000dc8:	b2d0      	uxtb	r0, r2
 8000dca:	e7cb      	b.n	8000d64 <__aeabi_fsub+0xf0>
 8000dcc:	0031      	movs	r1, r6
 8000dce:	2020      	movs	r0, #32
 8000dd0:	40d1      	lsrs	r1, r2
 8000dd2:	1a82      	subs	r2, r0, r2
 8000dd4:	4096      	lsls	r6, r2
 8000dd6:	0032      	movs	r2, r6
 8000dd8:	1e50      	subs	r0, r2, #1
 8000dda:	4182      	sbcs	r2, r0
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	189b      	adds	r3, r3, r2
 8000de0:	015a      	lsls	r2, r3, #5
 8000de2:	d5ae      	bpl.n	8000d42 <__aeabi_fsub+0xce>
 8000de4:	1c6a      	adds	r2, r5, #1
 8000de6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000de8:	d14a      	bne.n	8000e80 <__aeabi_fsub+0x20c>
 8000dea:	20ff      	movs	r0, #255	@ 0xff
 8000dec:	2300      	movs	r3, #0
 8000dee:	e7b9      	b.n	8000d64 <__aeabi_fsub+0xf0>
 8000df0:	22ff      	movs	r2, #255	@ 0xff
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d14b      	bne.n	8000e8e <__aeabi_fsub+0x21a>
 8000df6:	000c      	movs	r4, r1
 8000df8:	0033      	movs	r3, r6
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	2aff      	cmp	r2, #255	@ 0xff
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_fsub+0x18e>
 8000e00:	e781      	b.n	8000d06 <__aeabi_fsub+0x92>
 8000e02:	e7df      	b.n	8000dc4 <__aeabi_fsub+0x150>
 8000e04:	019f      	lsls	r7, r3, #6
 8000e06:	09bf      	lsrs	r7, r7, #6
 8000e08:	0038      	movs	r0, r7
 8000e0a:	f002 f8a1 	bl	8002f50 <__clzsi2>
 8000e0e:	3805      	subs	r0, #5
 8000e10:	4087      	lsls	r7, r0
 8000e12:	4285      	cmp	r5, r0
 8000e14:	dc21      	bgt.n	8000e5a <__aeabi_fsub+0x1e6>
 8000e16:	003b      	movs	r3, r7
 8000e18:	2120      	movs	r1, #32
 8000e1a:	1b42      	subs	r2, r0, r5
 8000e1c:	3201      	adds	r2, #1
 8000e1e:	40d3      	lsrs	r3, r2
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	4097      	lsls	r7, r2
 8000e24:	1e7a      	subs	r2, r7, #1
 8000e26:	4197      	sbcs	r7, r2
 8000e28:	2200      	movs	r2, #0
 8000e2a:	433b      	orrs	r3, r7
 8000e2c:	0759      	lsls	r1, r3, #29
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_fsub+0x1be>
 8000e30:	e78b      	b.n	8000d4a <__aeabi_fsub+0xd6>
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fsub+0xe0>
 8000e34:	20fe      	movs	r0, #254	@ 0xfe
 8000e36:	1c6a      	adds	r2, r5, #1
 8000e38:	4210      	tst	r0, r2
 8000e3a:	d112      	bne.n	8000e62 <__aeabi_fsub+0x1ee>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d152      	bne.n	8000ee6 <__aeabi_fsub+0x272>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d07c      	beq.n	8000f3e <__aeabi_fsub+0x2ca>
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	d0bb      	beq.n	8000dc0 <__aeabi_fsub+0x14c>
 8000e48:	1b9a      	subs	r2, r3, r6
 8000e4a:	0150      	lsls	r0, r2, #5
 8000e4c:	d400      	bmi.n	8000e50 <__aeabi_fsub+0x1dc>
 8000e4e:	e08b      	b.n	8000f68 <__aeabi_fsub+0x2f4>
 8000e50:	2401      	movs	r4, #1
 8000e52:	2200      	movs	r2, #0
 8000e54:	1af3      	subs	r3, r6, r3
 8000e56:	400c      	ands	r4, r1
 8000e58:	e7e8      	b.n	8000e2c <__aeabi_fsub+0x1b8>
 8000e5a:	4b56      	ldr	r3, [pc, #344]	@ (8000fb4 <__aeabi_fsub+0x340>)
 8000e5c:	1a2a      	subs	r2, r5, r0
 8000e5e:	403b      	ands	r3, r7
 8000e60:	e7e4      	b.n	8000e2c <__aeabi_fsub+0x1b8>
 8000e62:	1b9f      	subs	r7, r3, r6
 8000e64:	017a      	lsls	r2, r7, #5
 8000e66:	d446      	bmi.n	8000ef6 <__aeabi_fsub+0x282>
 8000e68:	2f00      	cmp	r7, #0
 8000e6a:	d1cd      	bne.n	8000e08 <__aeabi_fsub+0x194>
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	2300      	movs	r3, #0
 8000e72:	e777      	b.n	8000d64 <__aeabi_fsub+0xf0>
 8000e74:	199b      	adds	r3, r3, r6
 8000e76:	2501      	movs	r5, #1
 8000e78:	3201      	adds	r2, #1
 8000e7a:	0159      	lsls	r1, r3, #5
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_fsub+0x20c>
 8000e7e:	e760      	b.n	8000d42 <__aeabi_fsub+0xce>
 8000e80:	2101      	movs	r1, #1
 8000e82:	484d      	ldr	r0, [pc, #308]	@ (8000fb8 <__aeabi_fsub+0x344>)
 8000e84:	4019      	ands	r1, r3
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	4003      	ands	r3, r0
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	e7ce      	b.n	8000e2c <__aeabi_fsub+0x1b8>
 8000e8e:	1e57      	subs	r7, r2, #1
 8000e90:	2a01      	cmp	r2, #1
 8000e92:	d05a      	beq.n	8000f4a <__aeabi_fsub+0x2d6>
 8000e94:	000c      	movs	r4, r1
 8000e96:	2aff      	cmp	r2, #255	@ 0xff
 8000e98:	d033      	beq.n	8000f02 <__aeabi_fsub+0x28e>
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2f1b      	cmp	r7, #27
 8000e9e:	dc07      	bgt.n	8000eb0 <__aeabi_fsub+0x23c>
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	1bc9      	subs	r1, r1, r7
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	40fa      	lsrs	r2, r7
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	418b      	sbcs	r3, r1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	0005      	movs	r5, r0
 8000eb2:	1ab3      	subs	r3, r6, r2
 8000eb4:	e743      	b.n	8000d3e <__aeabi_fsub+0xca>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d123      	bne.n	8000f02 <__aeabi_fsub+0x28e>
 8000eba:	22ff      	movs	r2, #255	@ 0xff
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d09b      	beq.n	8000df8 <__aeabi_fsub+0x184>
 8000ec0:	1e51      	subs	r1, r2, #1
 8000ec2:	2a01      	cmp	r2, #1
 8000ec4:	d0d6      	beq.n	8000e74 <__aeabi_fsub+0x200>
 8000ec6:	2aff      	cmp	r2, #255	@ 0xff
 8000ec8:	d01b      	beq.n	8000f02 <__aeabi_fsub+0x28e>
 8000eca:	291b      	cmp	r1, #27
 8000ecc:	dd2c      	ble.n	8000f28 <__aeabi_fsub+0x2b4>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1c73      	adds	r3, r6, #1
 8000ed2:	e73a      	b.n	8000d4a <__aeabi_fsub+0xd6>
 8000ed4:	2aff      	cmp	r2, #255	@ 0xff
 8000ed6:	d088      	beq.n	8000dea <__aeabi_fsub+0x176>
 8000ed8:	199b      	adds	r3, r3, r6
 8000eda:	085b      	lsrs	r3, r3, #1
 8000edc:	0759      	lsls	r1, r3, #29
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fsub+0x26e>
 8000ee0:	e733      	b.n	8000d4a <__aeabi_fsub+0xd6>
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	e76e      	b.n	8000dc4 <__aeabi_fsub+0x150>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d110      	bne.n	8000f0c <__aeabi_fsub+0x298>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d043      	beq.n	8000f76 <__aeabi_fsub+0x302>
 8000eee:	2401      	movs	r4, #1
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	400c      	ands	r4, r1
 8000ef4:	e706      	b.n	8000d04 <__aeabi_fsub+0x90>
 8000ef6:	2401      	movs	r4, #1
 8000ef8:	1af7      	subs	r7, r6, r3
 8000efa:	400c      	ands	r4, r1
 8000efc:	e784      	b.n	8000e08 <__aeabi_fsub+0x194>
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d104      	bne.n	8000f0c <__aeabi_fsub+0x298>
 8000f02:	0033      	movs	r3, r6
 8000f04:	e6fe      	b.n	8000d04 <__aeabi_fsub+0x90>
 8000f06:	2501      	movs	r5, #1
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	e718      	b.n	8000d3e <__aeabi_fsub+0xca>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x29e>
 8000f10:	e6f8      	b.n	8000d04 <__aeabi_fsub+0x90>
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	03d2      	lsls	r2, r2, #15
 8000f16:	4297      	cmp	r7, r2
 8000f18:	d304      	bcc.n	8000f24 <__aeabi_fsub+0x2b0>
 8000f1a:	4594      	cmp	ip, r2
 8000f1c:	d202      	bcs.n	8000f24 <__aeabi_fsub+0x2b0>
 8000f1e:	2401      	movs	r4, #1
 8000f20:	0033      	movs	r3, r6
 8000f22:	400c      	ands	r4, r1
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	e6f1      	b.n	8000d0c <__aeabi_fsub+0x98>
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2520      	movs	r5, #32
 8000f2c:	40ca      	lsrs	r2, r1
 8000f2e:	1a69      	subs	r1, r5, r1
 8000f30:	408b      	lsls	r3, r1
 8000f32:	1e59      	subs	r1, r3, #1
 8000f34:	418b      	sbcs	r3, r1
 8000f36:	4313      	orrs	r3, r2
 8000f38:	0005      	movs	r5, r0
 8000f3a:	199b      	adds	r3, r3, r6
 8000f3c:	e750      	b.n	8000de0 <__aeabi_fsub+0x16c>
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d094      	beq.n	8000e6c <__aeabi_fsub+0x1f8>
 8000f42:	2401      	movs	r4, #1
 8000f44:	0033      	movs	r3, r6
 8000f46:	400c      	ands	r4, r1
 8000f48:	e73a      	b.n	8000dc0 <__aeabi_fsub+0x14c>
 8000f4a:	000c      	movs	r4, r1
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	1af3      	subs	r3, r6, r3
 8000f50:	e6f5      	b.n	8000d3e <__aeabi_fsub+0xca>
 8000f52:	0033      	movs	r3, r6
 8000f54:	e734      	b.n	8000dc0 <__aeabi_fsub+0x14c>
 8000f56:	199b      	adds	r3, r3, r6
 8000f58:	2200      	movs	r2, #0
 8000f5a:	0159      	lsls	r1, r3, #5
 8000f5c:	d5c1      	bpl.n	8000ee2 <__aeabi_fsub+0x26e>
 8000f5e:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <__aeabi_fsub+0x340>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	2201      	movs	r2, #1
 8000f66:	e72d      	b.n	8000dc4 <__aeabi_fsub+0x150>
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x2fa>
 8000f6c:	e77e      	b.n	8000e6c <__aeabi_fsub+0x1f8>
 8000f6e:	0013      	movs	r3, r2
 8000f70:	2200      	movs	r2, #0
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	e726      	b.n	8000dc4 <__aeabi_fsub+0x150>
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	2400      	movs	r4, #0
 8000f7a:	20ff      	movs	r0, #255	@ 0xff
 8000f7c:	03db      	lsls	r3, r3, #15
 8000f7e:	e6f1      	b.n	8000d64 <__aeabi_fsub+0xf0>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_fsub+0x312>
 8000f84:	e756      	b.n	8000e34 <__aeabi_fsub+0x1c0>
 8000f86:	1b47      	subs	r7, r0, r5
 8000f88:	003a      	movs	r2, r7
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x31c>
 8000f8e:	e730      	b.n	8000df2 <__aeabi_fsub+0x17e>
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	04d2      	lsls	r2, r2, #19
 8000f94:	000c      	movs	r4, r1
 8000f96:	4313      	orrs	r3, r2
 8000f98:	e77f      	b.n	8000e9a <__aeabi_fsub+0x226>
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_fsub+0x32c>
 8000f9e:	e701      	b.n	8000da4 <__aeabi_fsub+0x130>
 8000fa0:	1b41      	subs	r1, r0, r5
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d101      	bne.n	8000faa <__aeabi_fsub+0x336>
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	e788      	b.n	8000ebc <__aeabi_fsub+0x248>
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	04d2      	lsls	r2, r2, #19
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	e78b      	b.n	8000eca <__aeabi_fsub+0x256>
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	fbffffff 	.word	0xfbffffff
 8000fb8:	7dffffff 	.word	0x7dffffff

08000fbc <__aeabi_ui2f>:
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	1e04      	subs	r4, r0, #0
 8000fc0:	d00e      	beq.n	8000fe0 <__aeabi_ui2f+0x24>
 8000fc2:	f001 ffc5 	bl	8002f50 <__clzsi2>
 8000fc6:	239e      	movs	r3, #158	@ 0x9e
 8000fc8:	0001      	movs	r1, r0
 8000fca:	1a1b      	subs	r3, r3, r0
 8000fcc:	2b96      	cmp	r3, #150	@ 0x96
 8000fce:	dc0c      	bgt.n	8000fea <__aeabi_ui2f+0x2e>
 8000fd0:	2808      	cmp	r0, #8
 8000fd2:	d02f      	beq.n	8001034 <__aeabi_ui2f+0x78>
 8000fd4:	3908      	subs	r1, #8
 8000fd6:	408c      	lsls	r4, r1
 8000fd8:	0264      	lsls	r4, r4, #9
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	b2d8      	uxtb	r0, r3
 8000fde:	e001      	b.n	8000fe4 <__aeabi_ui2f+0x28>
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	05c0      	lsls	r0, r0, #23
 8000fe6:	4320      	orrs	r0, r4
 8000fe8:	bd70      	pop	{r4, r5, r6, pc}
 8000fea:	2b99      	cmp	r3, #153	@ 0x99
 8000fec:	dc16      	bgt.n	800101c <__aeabi_ui2f+0x60>
 8000fee:	1f42      	subs	r2, r0, #5
 8000ff0:	2805      	cmp	r0, #5
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_ui2f+0x3a>
 8000ff4:	4094      	lsls	r4, r2
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	4810      	ldr	r0, [pc, #64]	@ (800103c <__aeabi_ui2f+0x80>)
 8000ffa:	4002      	ands	r2, r0
 8000ffc:	0765      	lsls	r5, r4, #29
 8000ffe:	d009      	beq.n	8001014 <__aeabi_ui2f+0x58>
 8001000:	250f      	movs	r5, #15
 8001002:	402c      	ands	r4, r5
 8001004:	2c04      	cmp	r4, #4
 8001006:	d005      	beq.n	8001014 <__aeabi_ui2f+0x58>
 8001008:	3204      	adds	r2, #4
 800100a:	0154      	lsls	r4, r2, #5
 800100c:	d502      	bpl.n	8001014 <__aeabi_ui2f+0x58>
 800100e:	239f      	movs	r3, #159	@ 0x9f
 8001010:	4002      	ands	r2, r0
 8001012:	1a5b      	subs	r3, r3, r1
 8001014:	0192      	lsls	r2, r2, #6
 8001016:	0a54      	lsrs	r4, r2, #9
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	e7e3      	b.n	8000fe4 <__aeabi_ui2f+0x28>
 800101c:	0002      	movs	r2, r0
 800101e:	0020      	movs	r0, r4
 8001020:	321b      	adds	r2, #27
 8001022:	4090      	lsls	r0, r2
 8001024:	0002      	movs	r2, r0
 8001026:	1e50      	subs	r0, r2, #1
 8001028:	4182      	sbcs	r2, r0
 800102a:	2005      	movs	r0, #5
 800102c:	1a40      	subs	r0, r0, r1
 800102e:	40c4      	lsrs	r4, r0
 8001030:	4314      	orrs	r4, r2
 8001032:	e7e0      	b.n	8000ff6 <__aeabi_ui2f+0x3a>
 8001034:	0264      	lsls	r4, r4, #9
 8001036:	2096      	movs	r0, #150	@ 0x96
 8001038:	0a64      	lsrs	r4, r4, #9
 800103a:	e7d3      	b.n	8000fe4 <__aeabi_ui2f+0x28>
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__aeabi_dadd>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	4657      	mov	r7, sl
 8001044:	464e      	mov	r6, r9
 8001046:	4645      	mov	r5, r8
 8001048:	46de      	mov	lr, fp
 800104a:	b5e0      	push	{r5, r6, r7, lr}
 800104c:	b083      	sub	sp, #12
 800104e:	9000      	str	r0, [sp, #0]
 8001050:	9101      	str	r1, [sp, #4]
 8001052:	030c      	lsls	r4, r1, #12
 8001054:	004f      	lsls	r7, r1, #1
 8001056:	0fce      	lsrs	r6, r1, #31
 8001058:	0a61      	lsrs	r1, r4, #9
 800105a:	9c00      	ldr	r4, [sp, #0]
 800105c:	031d      	lsls	r5, r3, #12
 800105e:	0f64      	lsrs	r4, r4, #29
 8001060:	430c      	orrs	r4, r1
 8001062:	9900      	ldr	r1, [sp, #0]
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	00c8      	lsls	r0, r1, #3
 800106a:	0059      	lsls	r1, r3, #1
 800106c:	0d4b      	lsrs	r3, r1, #21
 800106e:	4699      	mov	r9, r3
 8001070:	9a00      	ldr	r2, [sp, #0]
 8001072:	9b01      	ldr	r3, [sp, #4]
 8001074:	0a6d      	lsrs	r5, r5, #9
 8001076:	0fd9      	lsrs	r1, r3, #31
 8001078:	0f53      	lsrs	r3, r2, #29
 800107a:	432b      	orrs	r3, r5
 800107c:	469a      	mov	sl, r3
 800107e:	9b00      	ldr	r3, [sp, #0]
 8001080:	0d7f      	lsrs	r7, r7, #21
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4694      	mov	ip, r2
 8001086:	464a      	mov	r2, r9
 8001088:	46b0      	mov	r8, r6
 800108a:	1aba      	subs	r2, r7, r2
 800108c:	428e      	cmp	r6, r1
 800108e:	d100      	bne.n	8001092 <__aeabi_dadd+0x52>
 8001090:	e0b0      	b.n	80011f4 <__aeabi_dadd+0x1b4>
 8001092:	2a00      	cmp	r2, #0
 8001094:	dc00      	bgt.n	8001098 <__aeabi_dadd+0x58>
 8001096:	e078      	b.n	800118a <__aeabi_dadd+0x14a>
 8001098:	4649      	mov	r1, r9
 800109a:	2900      	cmp	r1, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x60>
 800109e:	e0e9      	b.n	8001274 <__aeabi_dadd+0x234>
 80010a0:	49c9      	ldr	r1, [pc, #804]	@ (80013c8 <__aeabi_dadd+0x388>)
 80010a2:	428f      	cmp	r7, r1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x68>
 80010a6:	e195      	b.n	80013d4 <__aeabi_dadd+0x394>
 80010a8:	2501      	movs	r5, #1
 80010aa:	2a38      	cmp	r2, #56	@ 0x38
 80010ac:	dc16      	bgt.n	80010dc <__aeabi_dadd+0x9c>
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	4653      	mov	r3, sl
 80010b2:	0409      	lsls	r1, r1, #16
 80010b4:	430b      	orrs	r3, r1
 80010b6:	469a      	mov	sl, r3
 80010b8:	2a1f      	cmp	r2, #31
 80010ba:	dd00      	ble.n	80010be <__aeabi_dadd+0x7e>
 80010bc:	e1e7      	b.n	800148e <__aeabi_dadd+0x44e>
 80010be:	2120      	movs	r1, #32
 80010c0:	4655      	mov	r5, sl
 80010c2:	1a8b      	subs	r3, r1, r2
 80010c4:	4661      	mov	r1, ip
 80010c6:	409d      	lsls	r5, r3
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	430d      	orrs	r5, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	4099      	lsls	r1, r3
 80010d0:	1e4b      	subs	r3, r1, #1
 80010d2:	4199      	sbcs	r1, r3
 80010d4:	4653      	mov	r3, sl
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	430d      	orrs	r5, r1
 80010da:	1ae4      	subs	r4, r4, r3
 80010dc:	1b45      	subs	r5, r0, r5
 80010de:	42a8      	cmp	r0, r5
 80010e0:	4180      	sbcs	r0, r0
 80010e2:	4240      	negs	r0, r0
 80010e4:	1a24      	subs	r4, r4, r0
 80010e6:	0223      	lsls	r3, r4, #8
 80010e8:	d400      	bmi.n	80010ec <__aeabi_dadd+0xac>
 80010ea:	e10f      	b.n	800130c <__aeabi_dadd+0x2cc>
 80010ec:	0264      	lsls	r4, r4, #9
 80010ee:	0a64      	lsrs	r4, r4, #9
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0xb6>
 80010f4:	e139      	b.n	800136a <__aeabi_dadd+0x32a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 ff2a 	bl	8002f50 <__clzsi2>
 80010fc:	0003      	movs	r3, r0
 80010fe:	3b08      	subs	r3, #8
 8001100:	2120      	movs	r1, #32
 8001102:	0028      	movs	r0, r5
 8001104:	1aca      	subs	r2, r1, r3
 8001106:	40d0      	lsrs	r0, r2
 8001108:	409c      	lsls	r4, r3
 800110a:	0002      	movs	r2, r0
 800110c:	409d      	lsls	r5, r3
 800110e:	4322      	orrs	r2, r4
 8001110:	429f      	cmp	r7, r3
 8001112:	dd00      	ble.n	8001116 <__aeabi_dadd+0xd6>
 8001114:	e173      	b.n	80013fe <__aeabi_dadd+0x3be>
 8001116:	1bd8      	subs	r0, r3, r7
 8001118:	3001      	adds	r0, #1
 800111a:	1a09      	subs	r1, r1, r0
 800111c:	002c      	movs	r4, r5
 800111e:	408d      	lsls	r5, r1
 8001120:	40c4      	lsrs	r4, r0
 8001122:	1e6b      	subs	r3, r5, #1
 8001124:	419d      	sbcs	r5, r3
 8001126:	0013      	movs	r3, r2
 8001128:	40c2      	lsrs	r2, r0
 800112a:	408b      	lsls	r3, r1
 800112c:	4325      	orrs	r5, r4
 800112e:	2700      	movs	r7, #0
 8001130:	0014      	movs	r4, r2
 8001132:	431d      	orrs	r5, r3
 8001134:	076b      	lsls	r3, r5, #29
 8001136:	d009      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001138:	230f      	movs	r3, #15
 800113a:	402b      	ands	r3, r5
 800113c:	2b04      	cmp	r3, #4
 800113e:	d005      	beq.n	800114c <__aeabi_dadd+0x10c>
 8001140:	1d2b      	adds	r3, r5, #4
 8001142:	42ab      	cmp	r3, r5
 8001144:	41ad      	sbcs	r5, r5
 8001146:	426d      	negs	r5, r5
 8001148:	1964      	adds	r4, r4, r5
 800114a:	001d      	movs	r5, r3
 800114c:	0223      	lsls	r3, r4, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x112>
 8001150:	e12d      	b.n	80013ae <__aeabi_dadd+0x36e>
 8001152:	4a9d      	ldr	r2, [pc, #628]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001154:	3701      	adds	r7, #1
 8001156:	4297      	cmp	r7, r2
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x11c>
 800115a:	e0d3      	b.n	8001304 <__aeabi_dadd+0x2c4>
 800115c:	4646      	mov	r6, r8
 800115e:	499b      	ldr	r1, [pc, #620]	@ (80013cc <__aeabi_dadd+0x38c>)
 8001160:	08ed      	lsrs	r5, r5, #3
 8001162:	4021      	ands	r1, r4
 8001164:	074a      	lsls	r2, r1, #29
 8001166:	432a      	orrs	r2, r5
 8001168:	057c      	lsls	r4, r7, #21
 800116a:	024d      	lsls	r5, r1, #9
 800116c:	0b2d      	lsrs	r5, r5, #12
 800116e:	0d64      	lsrs	r4, r4, #21
 8001170:	0524      	lsls	r4, r4, #20
 8001172:	432c      	orrs	r4, r5
 8001174:	07f6      	lsls	r6, r6, #31
 8001176:	4334      	orrs	r4, r6
 8001178:	0010      	movs	r0, r2
 800117a:	0021      	movs	r1, r4
 800117c:	b003      	add	sp, #12
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	46bb      	mov	fp, r7
 8001182:	46b2      	mov	sl, r6
 8001184:	46a9      	mov	r9, r5
 8001186:	46a0      	mov	r8, r4
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_dadd+0x150>
 800118e:	e084      	b.n	800129a <__aeabi_dadd+0x25a>
 8001190:	464a      	mov	r2, r9
 8001192:	1bd2      	subs	r2, r2, r7
 8001194:	2f00      	cmp	r7, #0
 8001196:	d000      	beq.n	800119a <__aeabi_dadd+0x15a>
 8001198:	e16d      	b.n	8001476 <__aeabi_dadd+0x436>
 800119a:	0025      	movs	r5, r4
 800119c:	4305      	orrs	r5, r0
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x162>
 80011a0:	e127      	b.n	80013f2 <__aeabi_dadd+0x3b2>
 80011a2:	1e56      	subs	r6, r2, #1
 80011a4:	2a01      	cmp	r2, #1
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x16a>
 80011a8:	e23b      	b.n	8001622 <__aeabi_dadd+0x5e2>
 80011aa:	4d87      	ldr	r5, [pc, #540]	@ (80013c8 <__aeabi_dadd+0x388>)
 80011ac:	42aa      	cmp	r2, r5
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x172>
 80011b0:	e26a      	b.n	8001688 <__aeabi_dadd+0x648>
 80011b2:	2501      	movs	r5, #1
 80011b4:	2e38      	cmp	r6, #56	@ 0x38
 80011b6:	dc12      	bgt.n	80011de <__aeabi_dadd+0x19e>
 80011b8:	0032      	movs	r2, r6
 80011ba:	2a1f      	cmp	r2, #31
 80011bc:	dd00      	ble.n	80011c0 <__aeabi_dadd+0x180>
 80011be:	e1f8      	b.n	80015b2 <__aeabi_dadd+0x572>
 80011c0:	2620      	movs	r6, #32
 80011c2:	0025      	movs	r5, r4
 80011c4:	1ab6      	subs	r6, r6, r2
 80011c6:	0007      	movs	r7, r0
 80011c8:	4653      	mov	r3, sl
 80011ca:	40b0      	lsls	r0, r6
 80011cc:	40d4      	lsrs	r4, r2
 80011ce:	40b5      	lsls	r5, r6
 80011d0:	40d7      	lsrs	r7, r2
 80011d2:	1e46      	subs	r6, r0, #1
 80011d4:	41b0      	sbcs	r0, r6
 80011d6:	1b1b      	subs	r3, r3, r4
 80011d8:	469a      	mov	sl, r3
 80011da:	433d      	orrs	r5, r7
 80011dc:	4305      	orrs	r5, r0
 80011de:	4662      	mov	r2, ip
 80011e0:	1b55      	subs	r5, r2, r5
 80011e2:	45ac      	cmp	ip, r5
 80011e4:	4192      	sbcs	r2, r2
 80011e6:	4653      	mov	r3, sl
 80011e8:	4252      	negs	r2, r2
 80011ea:	000e      	movs	r6, r1
 80011ec:	464f      	mov	r7, r9
 80011ee:	4688      	mov	r8, r1
 80011f0:	1a9c      	subs	r4, r3, r2
 80011f2:	e778      	b.n	80010e6 <__aeabi_dadd+0xa6>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_dadd+0x1ba>
 80011f8:	e08e      	b.n	8001318 <__aeabi_dadd+0x2d8>
 80011fa:	4649      	mov	r1, r9
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d175      	bne.n	80012ec <__aeabi_dadd+0x2ac>
 8001200:	4661      	mov	r1, ip
 8001202:	4653      	mov	r3, sl
 8001204:	4319      	orrs	r1, r3
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x1ca>
 8001208:	e0f6      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800120a:	1e51      	subs	r1, r2, #1
 800120c:	2a01      	cmp	r2, #1
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1d2>
 8001210:	e191      	b.n	8001536 <__aeabi_dadd+0x4f6>
 8001212:	4d6d      	ldr	r5, [pc, #436]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001214:	42aa      	cmp	r2, r5
 8001216:	d100      	bne.n	800121a <__aeabi_dadd+0x1da>
 8001218:	e0dc      	b.n	80013d4 <__aeabi_dadd+0x394>
 800121a:	2501      	movs	r5, #1
 800121c:	2938      	cmp	r1, #56	@ 0x38
 800121e:	dc14      	bgt.n	800124a <__aeabi_dadd+0x20a>
 8001220:	000a      	movs	r2, r1
 8001222:	2a1f      	cmp	r2, #31
 8001224:	dd00      	ble.n	8001228 <__aeabi_dadd+0x1e8>
 8001226:	e1a2      	b.n	800156e <__aeabi_dadd+0x52e>
 8001228:	2120      	movs	r1, #32
 800122a:	4653      	mov	r3, sl
 800122c:	1a89      	subs	r1, r1, r2
 800122e:	408b      	lsls	r3, r1
 8001230:	001d      	movs	r5, r3
 8001232:	4663      	mov	r3, ip
 8001234:	40d3      	lsrs	r3, r2
 8001236:	431d      	orrs	r5, r3
 8001238:	4663      	mov	r3, ip
 800123a:	408b      	lsls	r3, r1
 800123c:	0019      	movs	r1, r3
 800123e:	1e4b      	subs	r3, r1, #1
 8001240:	4199      	sbcs	r1, r3
 8001242:	4653      	mov	r3, sl
 8001244:	40d3      	lsrs	r3, r2
 8001246:	430d      	orrs	r5, r1
 8001248:	18e4      	adds	r4, r4, r3
 800124a:	182d      	adds	r5, r5, r0
 800124c:	4285      	cmp	r5, r0
 800124e:	4180      	sbcs	r0, r0
 8001250:	4240      	negs	r0, r0
 8001252:	1824      	adds	r4, r4, r0
 8001254:	0223      	lsls	r3, r4, #8
 8001256:	d559      	bpl.n	800130c <__aeabi_dadd+0x2cc>
 8001258:	4b5b      	ldr	r3, [pc, #364]	@ (80013c8 <__aeabi_dadd+0x388>)
 800125a:	3701      	adds	r7, #1
 800125c:	429f      	cmp	r7, r3
 800125e:	d051      	beq.n	8001304 <__aeabi_dadd+0x2c4>
 8001260:	2101      	movs	r1, #1
 8001262:	4b5a      	ldr	r3, [pc, #360]	@ (80013cc <__aeabi_dadd+0x38c>)
 8001264:	086a      	lsrs	r2, r5, #1
 8001266:	401c      	ands	r4, r3
 8001268:	4029      	ands	r1, r5
 800126a:	430a      	orrs	r2, r1
 800126c:	07e5      	lsls	r5, r4, #31
 800126e:	4315      	orrs	r5, r2
 8001270:	0864      	lsrs	r4, r4, #1
 8001272:	e75f      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001274:	4661      	mov	r1, ip
 8001276:	4653      	mov	r3, sl
 8001278:	4319      	orrs	r1, r3
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x23e>
 800127c:	e0bc      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800127e:	1e51      	subs	r1, r2, #1
 8001280:	2a01      	cmp	r2, #1
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x246>
 8001284:	e164      	b.n	8001550 <__aeabi_dadd+0x510>
 8001286:	4d50      	ldr	r5, [pc, #320]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001288:	42aa      	cmp	r2, r5
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x24e>
 800128c:	e16a      	b.n	8001564 <__aeabi_dadd+0x524>
 800128e:	2501      	movs	r5, #1
 8001290:	2938      	cmp	r1, #56	@ 0x38
 8001292:	dd00      	ble.n	8001296 <__aeabi_dadd+0x256>
 8001294:	e722      	b.n	80010dc <__aeabi_dadd+0x9c>
 8001296:	000a      	movs	r2, r1
 8001298:	e70e      	b.n	80010b8 <__aeabi_dadd+0x78>
 800129a:	4a4d      	ldr	r2, [pc, #308]	@ (80013d0 <__aeabi_dadd+0x390>)
 800129c:	1c7d      	adds	r5, r7, #1
 800129e:	4215      	tst	r5, r2
 80012a0:	d000      	beq.n	80012a4 <__aeabi_dadd+0x264>
 80012a2:	e0d0      	b.n	8001446 <__aeabi_dadd+0x406>
 80012a4:	0025      	movs	r5, r4
 80012a6:	4662      	mov	r2, ip
 80012a8:	4653      	mov	r3, sl
 80012aa:	4305      	orrs	r5, r0
 80012ac:	431a      	orrs	r2, r3
 80012ae:	2f00      	cmp	r7, #0
 80012b0:	d000      	beq.n	80012b4 <__aeabi_dadd+0x274>
 80012b2:	e137      	b.n	8001524 <__aeabi_dadd+0x4e4>
 80012b4:	2d00      	cmp	r5, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x27a>
 80012b8:	e1a8      	b.n	800160c <__aeabi_dadd+0x5cc>
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x280>
 80012be:	e16a      	b.n	8001596 <__aeabi_dadd+0x556>
 80012c0:	4663      	mov	r3, ip
 80012c2:	1ac5      	subs	r5, r0, r3
 80012c4:	4653      	mov	r3, sl
 80012c6:	1ae2      	subs	r2, r4, r3
 80012c8:	42a8      	cmp	r0, r5
 80012ca:	419b      	sbcs	r3, r3
 80012cc:	425b      	negs	r3, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	d400      	bmi.n	80012d6 <__aeabi_dadd+0x296>
 80012d4:	e203      	b.n	80016de <__aeabi_dadd+0x69e>
 80012d6:	4663      	mov	r3, ip
 80012d8:	1a1d      	subs	r5, r3, r0
 80012da:	45ac      	cmp	ip, r5
 80012dc:	4192      	sbcs	r2, r2
 80012de:	4653      	mov	r3, sl
 80012e0:	4252      	negs	r2, r2
 80012e2:	1b1c      	subs	r4, r3, r4
 80012e4:	000e      	movs	r6, r1
 80012e6:	4688      	mov	r8, r1
 80012e8:	1aa4      	subs	r4, r4, r2
 80012ea:	e723      	b.n	8001134 <__aeabi_dadd+0xf4>
 80012ec:	4936      	ldr	r1, [pc, #216]	@ (80013c8 <__aeabi_dadd+0x388>)
 80012ee:	428f      	cmp	r7, r1
 80012f0:	d070      	beq.n	80013d4 <__aeabi_dadd+0x394>
 80012f2:	2501      	movs	r5, #1
 80012f4:	2a38      	cmp	r2, #56	@ 0x38
 80012f6:	dca8      	bgt.n	800124a <__aeabi_dadd+0x20a>
 80012f8:	2180      	movs	r1, #128	@ 0x80
 80012fa:	4653      	mov	r3, sl
 80012fc:	0409      	lsls	r1, r1, #16
 80012fe:	430b      	orrs	r3, r1
 8001300:	469a      	mov	sl, r3
 8001302:	e78e      	b.n	8001222 <__aeabi_dadd+0x1e2>
 8001304:	003c      	movs	r4, r7
 8001306:	2500      	movs	r5, #0
 8001308:	2200      	movs	r2, #0
 800130a:	e731      	b.n	8001170 <__aeabi_dadd+0x130>
 800130c:	2307      	movs	r3, #7
 800130e:	402b      	ands	r3, r5
 8001310:	2b00      	cmp	r3, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x2d6>
 8001314:	e710      	b.n	8001138 <__aeabi_dadd+0xf8>
 8001316:	e093      	b.n	8001440 <__aeabi_dadd+0x400>
 8001318:	2a00      	cmp	r2, #0
 800131a:	d074      	beq.n	8001406 <__aeabi_dadd+0x3c6>
 800131c:	464a      	mov	r2, r9
 800131e:	1bd2      	subs	r2, r2, r7
 8001320:	2f00      	cmp	r7, #0
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x2e6>
 8001324:	e0c7      	b.n	80014b6 <__aeabi_dadd+0x476>
 8001326:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <__aeabi_dadd+0x388>)
 8001328:	4589      	cmp	r9, r1
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x2ee>
 800132c:	e185      	b.n	800163a <__aeabi_dadd+0x5fa>
 800132e:	2501      	movs	r5, #1
 8001330:	2a38      	cmp	r2, #56	@ 0x38
 8001332:	dc12      	bgt.n	800135a <__aeabi_dadd+0x31a>
 8001334:	2180      	movs	r1, #128	@ 0x80
 8001336:	0409      	lsls	r1, r1, #16
 8001338:	430c      	orrs	r4, r1
 800133a:	2a1f      	cmp	r2, #31
 800133c:	dd00      	ble.n	8001340 <__aeabi_dadd+0x300>
 800133e:	e1ab      	b.n	8001698 <__aeabi_dadd+0x658>
 8001340:	2120      	movs	r1, #32
 8001342:	0025      	movs	r5, r4
 8001344:	1a89      	subs	r1, r1, r2
 8001346:	0007      	movs	r7, r0
 8001348:	4088      	lsls	r0, r1
 800134a:	408d      	lsls	r5, r1
 800134c:	40d7      	lsrs	r7, r2
 800134e:	1e41      	subs	r1, r0, #1
 8001350:	4188      	sbcs	r0, r1
 8001352:	40d4      	lsrs	r4, r2
 8001354:	433d      	orrs	r5, r7
 8001356:	4305      	orrs	r5, r0
 8001358:	44a2      	add	sl, r4
 800135a:	4465      	add	r5, ip
 800135c:	4565      	cmp	r5, ip
 800135e:	4192      	sbcs	r2, r2
 8001360:	4252      	negs	r2, r2
 8001362:	4452      	add	r2, sl
 8001364:	0014      	movs	r4, r2
 8001366:	464f      	mov	r7, r9
 8001368:	e774      	b.n	8001254 <__aeabi_dadd+0x214>
 800136a:	0028      	movs	r0, r5
 800136c:	f001 fdf0 	bl	8002f50 <__clzsi2>
 8001370:	0003      	movs	r3, r0
 8001372:	3318      	adds	r3, #24
 8001374:	2b1f      	cmp	r3, #31
 8001376:	dc00      	bgt.n	800137a <__aeabi_dadd+0x33a>
 8001378:	e6c2      	b.n	8001100 <__aeabi_dadd+0xc0>
 800137a:	002a      	movs	r2, r5
 800137c:	3808      	subs	r0, #8
 800137e:	4082      	lsls	r2, r0
 8001380:	429f      	cmp	r7, r3
 8001382:	dd00      	ble.n	8001386 <__aeabi_dadd+0x346>
 8001384:	e0a9      	b.n	80014da <__aeabi_dadd+0x49a>
 8001386:	1bdb      	subs	r3, r3, r7
 8001388:	1c58      	adds	r0, r3, #1
 800138a:	281f      	cmp	r0, #31
 800138c:	dc00      	bgt.n	8001390 <__aeabi_dadd+0x350>
 800138e:	e1ac      	b.n	80016ea <__aeabi_dadd+0x6aa>
 8001390:	0015      	movs	r5, r2
 8001392:	3b1f      	subs	r3, #31
 8001394:	40dd      	lsrs	r5, r3
 8001396:	2820      	cmp	r0, #32
 8001398:	d005      	beq.n	80013a6 <__aeabi_dadd+0x366>
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	1a1b      	subs	r3, r3, r0
 800139e:	409a      	lsls	r2, r3
 80013a0:	1e53      	subs	r3, r2, #1
 80013a2:	419a      	sbcs	r2, r3
 80013a4:	4315      	orrs	r5, r2
 80013a6:	2307      	movs	r3, #7
 80013a8:	2700      	movs	r7, #0
 80013aa:	402b      	ands	r3, r5
 80013ac:	e7b0      	b.n	8001310 <__aeabi_dadd+0x2d0>
 80013ae:	08ed      	lsrs	r5, r5, #3
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <__aeabi_dadd+0x388>)
 80013b2:	0762      	lsls	r2, r4, #29
 80013b4:	432a      	orrs	r2, r5
 80013b6:	08e4      	lsrs	r4, r4, #3
 80013b8:	429f      	cmp	r7, r3
 80013ba:	d00f      	beq.n	80013dc <__aeabi_dadd+0x39c>
 80013bc:	0324      	lsls	r4, r4, #12
 80013be:	0b25      	lsrs	r5, r4, #12
 80013c0:	057c      	lsls	r4, r7, #21
 80013c2:	0d64      	lsrs	r4, r4, #21
 80013c4:	e6d4      	b.n	8001170 <__aeabi_dadd+0x130>
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	000007ff 	.word	0x000007ff
 80013cc:	ff7fffff 	.word	0xff7fffff
 80013d0:	000007fe 	.word	0x000007fe
 80013d4:	08c0      	lsrs	r0, r0, #3
 80013d6:	0762      	lsls	r2, r4, #29
 80013d8:	4302      	orrs	r2, r0
 80013da:	08e4      	lsrs	r4, r4, #3
 80013dc:	0013      	movs	r3, r2
 80013de:	4323      	orrs	r3, r4
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x3a4>
 80013e2:	e186      	b.n	80016f2 <__aeabi_dadd+0x6b2>
 80013e4:	2580      	movs	r5, #128	@ 0x80
 80013e6:	032d      	lsls	r5, r5, #12
 80013e8:	4325      	orrs	r5, r4
 80013ea:	032d      	lsls	r5, r5, #12
 80013ec:	4cc3      	ldr	r4, [pc, #780]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80013ee:	0b2d      	lsrs	r5, r5, #12
 80013f0:	e6be      	b.n	8001170 <__aeabi_dadd+0x130>
 80013f2:	4660      	mov	r0, ip
 80013f4:	4654      	mov	r4, sl
 80013f6:	000e      	movs	r6, r1
 80013f8:	0017      	movs	r7, r2
 80013fa:	08c5      	lsrs	r5, r0, #3
 80013fc:	e7d8      	b.n	80013b0 <__aeabi_dadd+0x370>
 80013fe:	4cc0      	ldr	r4, [pc, #768]	@ (8001700 <__aeabi_dadd+0x6c0>)
 8001400:	1aff      	subs	r7, r7, r3
 8001402:	4014      	ands	r4, r2
 8001404:	e696      	b.n	8001134 <__aeabi_dadd+0xf4>
 8001406:	4abf      	ldr	r2, [pc, #764]	@ (8001704 <__aeabi_dadd+0x6c4>)
 8001408:	1c79      	adds	r1, r7, #1
 800140a:	4211      	tst	r1, r2
 800140c:	d16b      	bne.n	80014e6 <__aeabi_dadd+0x4a6>
 800140e:	0022      	movs	r2, r4
 8001410:	4302      	orrs	r2, r0
 8001412:	2f00      	cmp	r7, #0
 8001414:	d000      	beq.n	8001418 <__aeabi_dadd+0x3d8>
 8001416:	e0db      	b.n	80015d0 <__aeabi_dadd+0x590>
 8001418:	2a00      	cmp	r2, #0
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x3de>
 800141c:	e12d      	b.n	800167a <__aeabi_dadd+0x63a>
 800141e:	4662      	mov	r2, ip
 8001420:	4653      	mov	r3, sl
 8001422:	431a      	orrs	r2, r3
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x3e8>
 8001426:	e0b6      	b.n	8001596 <__aeabi_dadd+0x556>
 8001428:	4663      	mov	r3, ip
 800142a:	18c5      	adds	r5, r0, r3
 800142c:	4285      	cmp	r5, r0
 800142e:	4180      	sbcs	r0, r0
 8001430:	4454      	add	r4, sl
 8001432:	4240      	negs	r0, r0
 8001434:	1824      	adds	r4, r4, r0
 8001436:	0223      	lsls	r3, r4, #8
 8001438:	d502      	bpl.n	8001440 <__aeabi_dadd+0x400>
 800143a:	000f      	movs	r7, r1
 800143c:	4bb0      	ldr	r3, [pc, #704]	@ (8001700 <__aeabi_dadd+0x6c0>)
 800143e:	401c      	ands	r4, r3
 8001440:	003a      	movs	r2, r7
 8001442:	0028      	movs	r0, r5
 8001444:	e7d8      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 8001446:	4662      	mov	r2, ip
 8001448:	1a85      	subs	r5, r0, r2
 800144a:	42a8      	cmp	r0, r5
 800144c:	4192      	sbcs	r2, r2
 800144e:	4653      	mov	r3, sl
 8001450:	4252      	negs	r2, r2
 8001452:	4691      	mov	r9, r2
 8001454:	1ae3      	subs	r3, r4, r3
 8001456:	001a      	movs	r2, r3
 8001458:	464b      	mov	r3, r9
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	4691      	mov	r9, r2
 8001460:	021a      	lsls	r2, r3, #8
 8001462:	d454      	bmi.n	800150e <__aeabi_dadd+0x4ce>
 8001464:	464a      	mov	r2, r9
 8001466:	464c      	mov	r4, r9
 8001468:	432a      	orrs	r2, r5
 800146a:	d000      	beq.n	800146e <__aeabi_dadd+0x42e>
 800146c:	e640      	b.n	80010f0 <__aeabi_dadd+0xb0>
 800146e:	2600      	movs	r6, #0
 8001470:	2400      	movs	r4, #0
 8001472:	2500      	movs	r5, #0
 8001474:	e67c      	b.n	8001170 <__aeabi_dadd+0x130>
 8001476:	4da1      	ldr	r5, [pc, #644]	@ (80016fc <__aeabi_dadd+0x6bc>)
 8001478:	45a9      	cmp	r9, r5
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x43e>
 800147c:	e090      	b.n	80015a0 <__aeabi_dadd+0x560>
 800147e:	2501      	movs	r5, #1
 8001480:	2a38      	cmp	r2, #56	@ 0x38
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0x446>
 8001484:	e6ab      	b.n	80011de <__aeabi_dadd+0x19e>
 8001486:	2580      	movs	r5, #128	@ 0x80
 8001488:	042d      	lsls	r5, r5, #16
 800148a:	432c      	orrs	r4, r5
 800148c:	e695      	b.n	80011ba <__aeabi_dadd+0x17a>
 800148e:	0011      	movs	r1, r2
 8001490:	4655      	mov	r5, sl
 8001492:	3920      	subs	r1, #32
 8001494:	40cd      	lsrs	r5, r1
 8001496:	46a9      	mov	r9, r5
 8001498:	2a20      	cmp	r2, #32
 800149a:	d006      	beq.n	80014aa <__aeabi_dadd+0x46a>
 800149c:	2140      	movs	r1, #64	@ 0x40
 800149e:	4653      	mov	r3, sl
 80014a0:	1a8a      	subs	r2, r1, r2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	4662      	mov	r2, ip
 80014a6:	431a      	orrs	r2, r3
 80014a8:	4694      	mov	ip, r2
 80014aa:	4665      	mov	r5, ip
 80014ac:	1e6b      	subs	r3, r5, #1
 80014ae:	419d      	sbcs	r5, r3
 80014b0:	464b      	mov	r3, r9
 80014b2:	431d      	orrs	r5, r3
 80014b4:	e612      	b.n	80010dc <__aeabi_dadd+0x9c>
 80014b6:	0021      	movs	r1, r4
 80014b8:	4301      	orrs	r1, r0
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x47e>
 80014bc:	e0c4      	b.n	8001648 <__aeabi_dadd+0x608>
 80014be:	1e51      	subs	r1, r2, #1
 80014c0:	2a01      	cmp	r2, #1
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dadd+0x486>
 80014c4:	e0fb      	b.n	80016be <__aeabi_dadd+0x67e>
 80014c6:	4d8d      	ldr	r5, [pc, #564]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80014c8:	42aa      	cmp	r2, r5
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x48e>
 80014cc:	e0b5      	b.n	800163a <__aeabi_dadd+0x5fa>
 80014ce:	2501      	movs	r5, #1
 80014d0:	2938      	cmp	r1, #56	@ 0x38
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dadd+0x496>
 80014d4:	e741      	b.n	800135a <__aeabi_dadd+0x31a>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e72f      	b.n	800133a <__aeabi_dadd+0x2fa>
 80014da:	4c89      	ldr	r4, [pc, #548]	@ (8001700 <__aeabi_dadd+0x6c0>)
 80014dc:	1aff      	subs	r7, r7, r3
 80014de:	4014      	ands	r4, r2
 80014e0:	0762      	lsls	r2, r4, #29
 80014e2:	08e4      	lsrs	r4, r4, #3
 80014e4:	e76a      	b.n	80013bc <__aeabi_dadd+0x37c>
 80014e6:	4a85      	ldr	r2, [pc, #532]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80014e8:	4291      	cmp	r1, r2
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x4ae>
 80014ec:	e0e3      	b.n	80016b6 <__aeabi_dadd+0x676>
 80014ee:	4663      	mov	r3, ip
 80014f0:	18c2      	adds	r2, r0, r3
 80014f2:	4282      	cmp	r2, r0
 80014f4:	4180      	sbcs	r0, r0
 80014f6:	0023      	movs	r3, r4
 80014f8:	4240      	negs	r0, r0
 80014fa:	4453      	add	r3, sl
 80014fc:	181b      	adds	r3, r3, r0
 80014fe:	07dd      	lsls	r5, r3, #31
 8001500:	085c      	lsrs	r4, r3, #1
 8001502:	2307      	movs	r3, #7
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	4315      	orrs	r5, r2
 8001508:	000f      	movs	r7, r1
 800150a:	402b      	ands	r3, r5
 800150c:	e700      	b.n	8001310 <__aeabi_dadd+0x2d0>
 800150e:	4663      	mov	r3, ip
 8001510:	1a1d      	subs	r5, r3, r0
 8001512:	45ac      	cmp	ip, r5
 8001514:	4192      	sbcs	r2, r2
 8001516:	4653      	mov	r3, sl
 8001518:	4252      	negs	r2, r2
 800151a:	1b1c      	subs	r4, r3, r4
 800151c:	000e      	movs	r6, r1
 800151e:	4688      	mov	r8, r1
 8001520:	1aa4      	subs	r4, r4, r2
 8001522:	e5e5      	b.n	80010f0 <__aeabi_dadd+0xb0>
 8001524:	2d00      	cmp	r5, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x4ea>
 8001528:	e091      	b.n	800164e <__aeabi_dadd+0x60e>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d138      	bne.n	80015a0 <__aeabi_dadd+0x560>
 800152e:	2480      	movs	r4, #128	@ 0x80
 8001530:	2600      	movs	r6, #0
 8001532:	0324      	lsls	r4, r4, #12
 8001534:	e756      	b.n	80013e4 <__aeabi_dadd+0x3a4>
 8001536:	4663      	mov	r3, ip
 8001538:	18c5      	adds	r5, r0, r3
 800153a:	4285      	cmp	r5, r0
 800153c:	4180      	sbcs	r0, r0
 800153e:	4454      	add	r4, sl
 8001540:	4240      	negs	r0, r0
 8001542:	1824      	adds	r4, r4, r0
 8001544:	2701      	movs	r7, #1
 8001546:	0223      	lsls	r3, r4, #8
 8001548:	d400      	bmi.n	800154c <__aeabi_dadd+0x50c>
 800154a:	e6df      	b.n	800130c <__aeabi_dadd+0x2cc>
 800154c:	2702      	movs	r7, #2
 800154e:	e687      	b.n	8001260 <__aeabi_dadd+0x220>
 8001550:	4663      	mov	r3, ip
 8001552:	1ac5      	subs	r5, r0, r3
 8001554:	42a8      	cmp	r0, r5
 8001556:	4180      	sbcs	r0, r0
 8001558:	4653      	mov	r3, sl
 800155a:	4240      	negs	r0, r0
 800155c:	1ae4      	subs	r4, r4, r3
 800155e:	2701      	movs	r7, #1
 8001560:	1a24      	subs	r4, r4, r0
 8001562:	e5c0      	b.n	80010e6 <__aeabi_dadd+0xa6>
 8001564:	0762      	lsls	r2, r4, #29
 8001566:	08c0      	lsrs	r0, r0, #3
 8001568:	4302      	orrs	r2, r0
 800156a:	08e4      	lsrs	r4, r4, #3
 800156c:	e736      	b.n	80013dc <__aeabi_dadd+0x39c>
 800156e:	0011      	movs	r1, r2
 8001570:	4653      	mov	r3, sl
 8001572:	3920      	subs	r1, #32
 8001574:	40cb      	lsrs	r3, r1
 8001576:	4699      	mov	r9, r3
 8001578:	2a20      	cmp	r2, #32
 800157a:	d006      	beq.n	800158a <__aeabi_dadd+0x54a>
 800157c:	2140      	movs	r1, #64	@ 0x40
 800157e:	4653      	mov	r3, sl
 8001580:	1a8a      	subs	r2, r1, r2
 8001582:	4093      	lsls	r3, r2
 8001584:	4662      	mov	r2, ip
 8001586:	431a      	orrs	r2, r3
 8001588:	4694      	mov	ip, r2
 800158a:	4665      	mov	r5, ip
 800158c:	1e6b      	subs	r3, r5, #1
 800158e:	419d      	sbcs	r5, r3
 8001590:	464b      	mov	r3, r9
 8001592:	431d      	orrs	r5, r3
 8001594:	e659      	b.n	800124a <__aeabi_dadd+0x20a>
 8001596:	0762      	lsls	r2, r4, #29
 8001598:	08c0      	lsrs	r0, r0, #3
 800159a:	4302      	orrs	r2, r0
 800159c:	08e4      	lsrs	r4, r4, #3
 800159e:	e70d      	b.n	80013bc <__aeabi_dadd+0x37c>
 80015a0:	4653      	mov	r3, sl
 80015a2:	075a      	lsls	r2, r3, #29
 80015a4:	4663      	mov	r3, ip
 80015a6:	08d8      	lsrs	r0, r3, #3
 80015a8:	4653      	mov	r3, sl
 80015aa:	000e      	movs	r6, r1
 80015ac:	4302      	orrs	r2, r0
 80015ae:	08dc      	lsrs	r4, r3, #3
 80015b0:	e714      	b.n	80013dc <__aeabi_dadd+0x39c>
 80015b2:	0015      	movs	r5, r2
 80015b4:	0026      	movs	r6, r4
 80015b6:	3d20      	subs	r5, #32
 80015b8:	40ee      	lsrs	r6, r5
 80015ba:	2a20      	cmp	r2, #32
 80015bc:	d003      	beq.n	80015c6 <__aeabi_dadd+0x586>
 80015be:	2540      	movs	r5, #64	@ 0x40
 80015c0:	1aaa      	subs	r2, r5, r2
 80015c2:	4094      	lsls	r4, r2
 80015c4:	4320      	orrs	r0, r4
 80015c6:	1e42      	subs	r2, r0, #1
 80015c8:	4190      	sbcs	r0, r2
 80015ca:	0005      	movs	r5, r0
 80015cc:	4335      	orrs	r5, r6
 80015ce:	e606      	b.n	80011de <__aeabi_dadd+0x19e>
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d07c      	beq.n	80016ce <__aeabi_dadd+0x68e>
 80015d4:	4662      	mov	r2, ip
 80015d6:	4653      	mov	r3, sl
 80015d8:	08c0      	lsrs	r0, r0, #3
 80015da:	431a      	orrs	r2, r3
 80015dc:	d100      	bne.n	80015e0 <__aeabi_dadd+0x5a0>
 80015de:	e6fa      	b.n	80013d6 <__aeabi_dadd+0x396>
 80015e0:	0762      	lsls	r2, r4, #29
 80015e2:	4310      	orrs	r0, r2
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	08e4      	lsrs	r4, r4, #3
 80015e8:	0312      	lsls	r2, r2, #12
 80015ea:	4214      	tst	r4, r2
 80015ec:	d008      	beq.n	8001600 <__aeabi_dadd+0x5c0>
 80015ee:	08d9      	lsrs	r1, r3, #3
 80015f0:	4211      	tst	r1, r2
 80015f2:	d105      	bne.n	8001600 <__aeabi_dadd+0x5c0>
 80015f4:	4663      	mov	r3, ip
 80015f6:	08d8      	lsrs	r0, r3, #3
 80015f8:	4653      	mov	r3, sl
 80015fa:	000c      	movs	r4, r1
 80015fc:	075b      	lsls	r3, r3, #29
 80015fe:	4318      	orrs	r0, r3
 8001600:	0f42      	lsrs	r2, r0, #29
 8001602:	00c0      	lsls	r0, r0, #3
 8001604:	08c0      	lsrs	r0, r0, #3
 8001606:	0752      	lsls	r2, r2, #29
 8001608:	4302      	orrs	r2, r0
 800160a:	e6e7      	b.n	80013dc <__aeabi_dadd+0x39c>
 800160c:	2a00      	cmp	r2, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x5d2>
 8001610:	e72d      	b.n	800146e <__aeabi_dadd+0x42e>
 8001612:	4663      	mov	r3, ip
 8001614:	08d8      	lsrs	r0, r3, #3
 8001616:	4653      	mov	r3, sl
 8001618:	075a      	lsls	r2, r3, #29
 800161a:	000e      	movs	r6, r1
 800161c:	4302      	orrs	r2, r0
 800161e:	08dc      	lsrs	r4, r3, #3
 8001620:	e6cc      	b.n	80013bc <__aeabi_dadd+0x37c>
 8001622:	4663      	mov	r3, ip
 8001624:	1a1d      	subs	r5, r3, r0
 8001626:	45ac      	cmp	ip, r5
 8001628:	4192      	sbcs	r2, r2
 800162a:	4653      	mov	r3, sl
 800162c:	4252      	negs	r2, r2
 800162e:	1b1c      	subs	r4, r3, r4
 8001630:	000e      	movs	r6, r1
 8001632:	4688      	mov	r8, r1
 8001634:	1aa4      	subs	r4, r4, r2
 8001636:	3701      	adds	r7, #1
 8001638:	e555      	b.n	80010e6 <__aeabi_dadd+0xa6>
 800163a:	4663      	mov	r3, ip
 800163c:	08d9      	lsrs	r1, r3, #3
 800163e:	4653      	mov	r3, sl
 8001640:	075a      	lsls	r2, r3, #29
 8001642:	430a      	orrs	r2, r1
 8001644:	08dc      	lsrs	r4, r3, #3
 8001646:	e6c9      	b.n	80013dc <__aeabi_dadd+0x39c>
 8001648:	4660      	mov	r0, ip
 800164a:	4654      	mov	r4, sl
 800164c:	e6d4      	b.n	80013f8 <__aeabi_dadd+0x3b8>
 800164e:	08c0      	lsrs	r0, r0, #3
 8001650:	2a00      	cmp	r2, #0
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x616>
 8001654:	e6bf      	b.n	80013d6 <__aeabi_dadd+0x396>
 8001656:	0762      	lsls	r2, r4, #29
 8001658:	4310      	orrs	r0, r2
 800165a:	2280      	movs	r2, #128	@ 0x80
 800165c:	08e4      	lsrs	r4, r4, #3
 800165e:	0312      	lsls	r2, r2, #12
 8001660:	4214      	tst	r4, r2
 8001662:	d0cd      	beq.n	8001600 <__aeabi_dadd+0x5c0>
 8001664:	08dd      	lsrs	r5, r3, #3
 8001666:	4215      	tst	r5, r2
 8001668:	d1ca      	bne.n	8001600 <__aeabi_dadd+0x5c0>
 800166a:	4663      	mov	r3, ip
 800166c:	08d8      	lsrs	r0, r3, #3
 800166e:	4653      	mov	r3, sl
 8001670:	075b      	lsls	r3, r3, #29
 8001672:	000e      	movs	r6, r1
 8001674:	002c      	movs	r4, r5
 8001676:	4318      	orrs	r0, r3
 8001678:	e7c2      	b.n	8001600 <__aeabi_dadd+0x5c0>
 800167a:	4663      	mov	r3, ip
 800167c:	08d9      	lsrs	r1, r3, #3
 800167e:	4653      	mov	r3, sl
 8001680:	075a      	lsls	r2, r3, #29
 8001682:	430a      	orrs	r2, r1
 8001684:	08dc      	lsrs	r4, r3, #3
 8001686:	e699      	b.n	80013bc <__aeabi_dadd+0x37c>
 8001688:	4663      	mov	r3, ip
 800168a:	08d8      	lsrs	r0, r3, #3
 800168c:	4653      	mov	r3, sl
 800168e:	075a      	lsls	r2, r3, #29
 8001690:	000e      	movs	r6, r1
 8001692:	4302      	orrs	r2, r0
 8001694:	08dc      	lsrs	r4, r3, #3
 8001696:	e6a1      	b.n	80013dc <__aeabi_dadd+0x39c>
 8001698:	0011      	movs	r1, r2
 800169a:	0027      	movs	r7, r4
 800169c:	3920      	subs	r1, #32
 800169e:	40cf      	lsrs	r7, r1
 80016a0:	2a20      	cmp	r2, #32
 80016a2:	d003      	beq.n	80016ac <__aeabi_dadd+0x66c>
 80016a4:	2140      	movs	r1, #64	@ 0x40
 80016a6:	1a8a      	subs	r2, r1, r2
 80016a8:	4094      	lsls	r4, r2
 80016aa:	4320      	orrs	r0, r4
 80016ac:	1e42      	subs	r2, r0, #1
 80016ae:	4190      	sbcs	r0, r2
 80016b0:	0005      	movs	r5, r0
 80016b2:	433d      	orrs	r5, r7
 80016b4:	e651      	b.n	800135a <__aeabi_dadd+0x31a>
 80016b6:	000c      	movs	r4, r1
 80016b8:	2500      	movs	r5, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	e558      	b.n	8001170 <__aeabi_dadd+0x130>
 80016be:	4460      	add	r0, ip
 80016c0:	4560      	cmp	r0, ip
 80016c2:	4192      	sbcs	r2, r2
 80016c4:	4454      	add	r4, sl
 80016c6:	4252      	negs	r2, r2
 80016c8:	0005      	movs	r5, r0
 80016ca:	18a4      	adds	r4, r4, r2
 80016cc:	e73a      	b.n	8001544 <__aeabi_dadd+0x504>
 80016ce:	4653      	mov	r3, sl
 80016d0:	075a      	lsls	r2, r3, #29
 80016d2:	4663      	mov	r3, ip
 80016d4:	08d9      	lsrs	r1, r3, #3
 80016d6:	4653      	mov	r3, sl
 80016d8:	430a      	orrs	r2, r1
 80016da:	08dc      	lsrs	r4, r3, #3
 80016dc:	e67e      	b.n	80013dc <__aeabi_dadd+0x39c>
 80016de:	001a      	movs	r2, r3
 80016e0:	001c      	movs	r4, r3
 80016e2:	432a      	orrs	r2, r5
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dadd+0x6a8>
 80016e6:	e6ab      	b.n	8001440 <__aeabi_dadd+0x400>
 80016e8:	e6c1      	b.n	800146e <__aeabi_dadd+0x42e>
 80016ea:	2120      	movs	r1, #32
 80016ec:	2500      	movs	r5, #0
 80016ee:	1a09      	subs	r1, r1, r0
 80016f0:	e519      	b.n	8001126 <__aeabi_dadd+0xe6>
 80016f2:	2200      	movs	r2, #0
 80016f4:	2500      	movs	r5, #0
 80016f6:	4c01      	ldr	r4, [pc, #4]	@ (80016fc <__aeabi_dadd+0x6bc>)
 80016f8:	e53a      	b.n	8001170 <__aeabi_dadd+0x130>
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	ff7fffff 	.word	0xff7fffff
 8001704:	000007fe 	.word	0x000007fe

08001708 <__aeabi_ddiv>:
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	46de      	mov	lr, fp
 800170c:	4645      	mov	r5, r8
 800170e:	4657      	mov	r7, sl
 8001710:	464e      	mov	r6, r9
 8001712:	b5e0      	push	{r5, r6, r7, lr}
 8001714:	b087      	sub	sp, #28
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	030b      	lsls	r3, r1, #12
 800171c:	0b1b      	lsrs	r3, r3, #12
 800171e:	469b      	mov	fp, r3
 8001720:	0fca      	lsrs	r2, r1, #31
 8001722:	004b      	lsls	r3, r1, #1
 8001724:	0004      	movs	r4, r0
 8001726:	4680      	mov	r8, r0
 8001728:	0d5b      	lsrs	r3, r3, #21
 800172a:	9202      	str	r2, [sp, #8]
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x28>
 800172e:	e16a      	b.n	8001a06 <__aeabi_ddiv+0x2fe>
 8001730:	4ad4      	ldr	r2, [pc, #848]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0x30>
 8001736:	e18c      	b.n	8001a52 <__aeabi_ddiv+0x34a>
 8001738:	4659      	mov	r1, fp
 800173a:	0f42      	lsrs	r2, r0, #29
 800173c:	00c9      	lsls	r1, r1, #3
 800173e:	430a      	orrs	r2, r1
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0409      	lsls	r1, r1, #16
 8001744:	4311      	orrs	r1, r2
 8001746:	00c2      	lsls	r2, r0, #3
 8001748:	4690      	mov	r8, r2
 800174a:	4acf      	ldr	r2, [pc, #828]	@ (8001a88 <__aeabi_ddiv+0x380>)
 800174c:	4689      	mov	r9, r1
 800174e:	4692      	mov	sl, r2
 8001750:	449a      	add	sl, r3
 8001752:	2300      	movs	r3, #0
 8001754:	2400      	movs	r4, #0
 8001756:	9303      	str	r3, [sp, #12]
 8001758:	9e00      	ldr	r6, [sp, #0]
 800175a:	9f01      	ldr	r7, [sp, #4]
 800175c:	033b      	lsls	r3, r7, #12
 800175e:	0b1b      	lsrs	r3, r3, #12
 8001760:	469b      	mov	fp, r3
 8001762:	007b      	lsls	r3, r7, #1
 8001764:	0030      	movs	r0, r6
 8001766:	0d5b      	lsrs	r3, r3, #21
 8001768:	0ffd      	lsrs	r5, r7, #31
 800176a:	2b00      	cmp	r3, #0
 800176c:	d100      	bne.n	8001770 <__aeabi_ddiv+0x68>
 800176e:	e128      	b.n	80019c2 <__aeabi_ddiv+0x2ba>
 8001770:	4ac4      	ldr	r2, [pc, #784]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x70>
 8001776:	e177      	b.n	8001a68 <__aeabi_ddiv+0x360>
 8001778:	4659      	mov	r1, fp
 800177a:	0f72      	lsrs	r2, r6, #29
 800177c:	00c9      	lsls	r1, r1, #3
 800177e:	430a      	orrs	r2, r1
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	4311      	orrs	r1, r2
 8001786:	468b      	mov	fp, r1
 8001788:	49bf      	ldr	r1, [pc, #764]	@ (8001a88 <__aeabi_ddiv+0x380>)
 800178a:	00f2      	lsls	r2, r6, #3
 800178c:	468c      	mov	ip, r1
 800178e:	4651      	mov	r1, sl
 8001790:	4463      	add	r3, ip
 8001792:	1acb      	subs	r3, r1, r3
 8001794:	469a      	mov	sl, r3
 8001796:	2300      	movs	r3, #0
 8001798:	9e02      	ldr	r6, [sp, #8]
 800179a:	406e      	eors	r6, r5
 800179c:	2c0f      	cmp	r4, #15
 800179e:	d827      	bhi.n	80017f0 <__aeabi_ddiv+0xe8>
 80017a0:	49ba      	ldr	r1, [pc, #744]	@ (8001a8c <__aeabi_ddiv+0x384>)
 80017a2:	00a4      	lsls	r4, r4, #2
 80017a4:	5909      	ldr	r1, [r1, r4]
 80017a6:	468f      	mov	pc, r1
 80017a8:	46cb      	mov	fp, r9
 80017aa:	4642      	mov	r2, r8
 80017ac:	9e02      	ldr	r6, [sp, #8]
 80017ae:	9b03      	ldr	r3, [sp, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d016      	beq.n	80017e2 <__aeabi_ddiv+0xda>
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d100      	bne.n	80017ba <__aeabi_ddiv+0xb2>
 80017b8:	e2a6      	b.n	8001d08 <__aeabi_ddiv+0x600>
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d000      	beq.n	80017c0 <__aeabi_ddiv+0xb8>
 80017be:	e0df      	b.n	8001980 <__aeabi_ddiv+0x278>
 80017c0:	2200      	movs	r2, #0
 80017c2:	2300      	movs	r3, #0
 80017c4:	2400      	movs	r4, #0
 80017c6:	4690      	mov	r8, r2
 80017c8:	051b      	lsls	r3, r3, #20
 80017ca:	4323      	orrs	r3, r4
 80017cc:	07f6      	lsls	r6, r6, #31
 80017ce:	4333      	orrs	r3, r6
 80017d0:	4640      	mov	r0, r8
 80017d2:	0019      	movs	r1, r3
 80017d4:	b007      	add	sp, #28
 80017d6:	bcf0      	pop	{r4, r5, r6, r7}
 80017d8:	46bb      	mov	fp, r7
 80017da:	46b2      	mov	sl, r6
 80017dc:	46a9      	mov	r9, r5
 80017de:	46a0      	mov	r8, r4
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e2:	2200      	movs	r2, #0
 80017e4:	2400      	movs	r4, #0
 80017e6:	4690      	mov	r8, r2
 80017e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001a84 <__aeabi_ddiv+0x37c>)
 80017ea:	e7ed      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 80017ec:	002e      	movs	r6, r5
 80017ee:	e7df      	b.n	80017b0 <__aeabi_ddiv+0xa8>
 80017f0:	45cb      	cmp	fp, r9
 80017f2:	d200      	bcs.n	80017f6 <__aeabi_ddiv+0xee>
 80017f4:	e1d4      	b.n	8001ba0 <__aeabi_ddiv+0x498>
 80017f6:	d100      	bne.n	80017fa <__aeabi_ddiv+0xf2>
 80017f8:	e1cf      	b.n	8001b9a <__aeabi_ddiv+0x492>
 80017fa:	2301      	movs	r3, #1
 80017fc:	425b      	negs	r3, r3
 80017fe:	469c      	mov	ip, r3
 8001800:	4644      	mov	r4, r8
 8001802:	4648      	mov	r0, r9
 8001804:	2700      	movs	r7, #0
 8001806:	44e2      	add	sl, ip
 8001808:	465b      	mov	r3, fp
 800180a:	0e15      	lsrs	r5, r2, #24
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	431d      	orrs	r5, r3
 8001810:	0c19      	lsrs	r1, r3, #16
 8001812:	042b      	lsls	r3, r5, #16
 8001814:	0212      	lsls	r2, r2, #8
 8001816:	9500      	str	r5, [sp, #0]
 8001818:	0c1d      	lsrs	r5, r3, #16
 800181a:	4691      	mov	r9, r2
 800181c:	9102      	str	r1, [sp, #8]
 800181e:	9503      	str	r5, [sp, #12]
 8001820:	f7fe fd14 	bl	800024c <__aeabi_uidivmod>
 8001824:	0002      	movs	r2, r0
 8001826:	436a      	muls	r2, r5
 8001828:	040b      	lsls	r3, r1, #16
 800182a:	0c21      	lsrs	r1, r4, #16
 800182c:	4680      	mov	r8, r0
 800182e:	4319      	orrs	r1, r3
 8001830:	428a      	cmp	r2, r1
 8001832:	d909      	bls.n	8001848 <__aeabi_ddiv+0x140>
 8001834:	9d00      	ldr	r5, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	46ac      	mov	ip, r5
 800183a:	425b      	negs	r3, r3
 800183c:	4461      	add	r1, ip
 800183e:	469c      	mov	ip, r3
 8001840:	44e0      	add	r8, ip
 8001842:	428d      	cmp	r5, r1
 8001844:	d800      	bhi.n	8001848 <__aeabi_ddiv+0x140>
 8001846:	e1fb      	b.n	8001c40 <__aeabi_ddiv+0x538>
 8001848:	1a88      	subs	r0, r1, r2
 800184a:	9902      	ldr	r1, [sp, #8]
 800184c:	f7fe fcfe 	bl	800024c <__aeabi_uidivmod>
 8001850:	9a03      	ldr	r2, [sp, #12]
 8001852:	0424      	lsls	r4, r4, #16
 8001854:	4342      	muls	r2, r0
 8001856:	0409      	lsls	r1, r1, #16
 8001858:	0c24      	lsrs	r4, r4, #16
 800185a:	0003      	movs	r3, r0
 800185c:	430c      	orrs	r4, r1
 800185e:	42a2      	cmp	r2, r4
 8001860:	d906      	bls.n	8001870 <__aeabi_ddiv+0x168>
 8001862:	9900      	ldr	r1, [sp, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	468c      	mov	ip, r1
 8001868:	4464      	add	r4, ip
 800186a:	42a1      	cmp	r1, r4
 800186c:	d800      	bhi.n	8001870 <__aeabi_ddiv+0x168>
 800186e:	e1e1      	b.n	8001c34 <__aeabi_ddiv+0x52c>
 8001870:	1aa0      	subs	r0, r4, r2
 8001872:	4642      	mov	r2, r8
 8001874:	0412      	lsls	r2, r2, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	4693      	mov	fp, r2
 800187a:	464b      	mov	r3, r9
 800187c:	4659      	mov	r1, fp
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	001d      	movs	r5, r3
 8001882:	9304      	str	r3, [sp, #16]
 8001884:	040b      	lsls	r3, r1, #16
 8001886:	4649      	mov	r1, r9
 8001888:	0409      	lsls	r1, r1, #16
 800188a:	0c09      	lsrs	r1, r1, #16
 800188c:	000c      	movs	r4, r1
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	435c      	muls	r4, r3
 8001892:	0c12      	lsrs	r2, r2, #16
 8001894:	436b      	muls	r3, r5
 8001896:	4688      	mov	r8, r1
 8001898:	4351      	muls	r1, r2
 800189a:	436a      	muls	r2, r5
 800189c:	0c25      	lsrs	r5, r4, #16
 800189e:	46ac      	mov	ip, r5
 80018a0:	185b      	adds	r3, r3, r1
 80018a2:	4463      	add	r3, ip
 80018a4:	4299      	cmp	r1, r3
 80018a6:	d903      	bls.n	80018b0 <__aeabi_ddiv+0x1a8>
 80018a8:	2180      	movs	r1, #128	@ 0x80
 80018aa:	0249      	lsls	r1, r1, #9
 80018ac:	468c      	mov	ip, r1
 80018ae:	4462      	add	r2, ip
 80018b0:	0c19      	lsrs	r1, r3, #16
 80018b2:	0424      	lsls	r4, r4, #16
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	0c24      	lsrs	r4, r4, #16
 80018b8:	188a      	adds	r2, r1, r2
 80018ba:	191c      	adds	r4, r3, r4
 80018bc:	4290      	cmp	r0, r2
 80018be:	d302      	bcc.n	80018c6 <__aeabi_ddiv+0x1be>
 80018c0:	d116      	bne.n	80018f0 <__aeabi_ddiv+0x1e8>
 80018c2:	42a7      	cmp	r7, r4
 80018c4:	d214      	bcs.n	80018f0 <__aeabi_ddiv+0x1e8>
 80018c6:	465b      	mov	r3, fp
 80018c8:	9d00      	ldr	r5, [sp, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	444f      	add	r7, r9
 80018ce:	9305      	str	r3, [sp, #20]
 80018d0:	454f      	cmp	r7, r9
 80018d2:	419b      	sbcs	r3, r3
 80018d4:	46ac      	mov	ip, r5
 80018d6:	425b      	negs	r3, r3
 80018d8:	4463      	add	r3, ip
 80018da:	18c0      	adds	r0, r0, r3
 80018dc:	4285      	cmp	r5, r0
 80018de:	d300      	bcc.n	80018e2 <__aeabi_ddiv+0x1da>
 80018e0:	e1a1      	b.n	8001c26 <__aeabi_ddiv+0x51e>
 80018e2:	4282      	cmp	r2, r0
 80018e4:	d900      	bls.n	80018e8 <__aeabi_ddiv+0x1e0>
 80018e6:	e1f6      	b.n	8001cd6 <__aeabi_ddiv+0x5ce>
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x1e4>
 80018ea:	e1f1      	b.n	8001cd0 <__aeabi_ddiv+0x5c8>
 80018ec:	9b05      	ldr	r3, [sp, #20]
 80018ee:	469b      	mov	fp, r3
 80018f0:	1b3c      	subs	r4, r7, r4
 80018f2:	42a7      	cmp	r7, r4
 80018f4:	41bf      	sbcs	r7, r7
 80018f6:	9d00      	ldr	r5, [sp, #0]
 80018f8:	1a80      	subs	r0, r0, r2
 80018fa:	427f      	negs	r7, r7
 80018fc:	1bc0      	subs	r0, r0, r7
 80018fe:	4285      	cmp	r5, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x1fc>
 8001902:	e1d0      	b.n	8001ca6 <__aeabi_ddiv+0x59e>
 8001904:	9902      	ldr	r1, [sp, #8]
 8001906:	f7fe fca1 	bl	800024c <__aeabi_uidivmod>
 800190a:	9a03      	ldr	r2, [sp, #12]
 800190c:	040b      	lsls	r3, r1, #16
 800190e:	4342      	muls	r2, r0
 8001910:	0c21      	lsrs	r1, r4, #16
 8001912:	0007      	movs	r7, r0
 8001914:	4319      	orrs	r1, r3
 8001916:	428a      	cmp	r2, r1
 8001918:	d900      	bls.n	800191c <__aeabi_ddiv+0x214>
 800191a:	e178      	b.n	8001c0e <__aeabi_ddiv+0x506>
 800191c:	1a88      	subs	r0, r1, r2
 800191e:	9902      	ldr	r1, [sp, #8]
 8001920:	f7fe fc94 	bl	800024c <__aeabi_uidivmod>
 8001924:	9a03      	ldr	r2, [sp, #12]
 8001926:	0424      	lsls	r4, r4, #16
 8001928:	4342      	muls	r2, r0
 800192a:	0409      	lsls	r1, r1, #16
 800192c:	0c24      	lsrs	r4, r4, #16
 800192e:	0003      	movs	r3, r0
 8001930:	430c      	orrs	r4, r1
 8001932:	42a2      	cmp	r2, r4
 8001934:	d900      	bls.n	8001938 <__aeabi_ddiv+0x230>
 8001936:	e15d      	b.n	8001bf4 <__aeabi_ddiv+0x4ec>
 8001938:	4641      	mov	r1, r8
 800193a:	1aa4      	subs	r4, r4, r2
 800193c:	043a      	lsls	r2, r7, #16
 800193e:	431a      	orrs	r2, r3
 8001940:	9d04      	ldr	r5, [sp, #16]
 8001942:	0413      	lsls	r3, r2, #16
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	4359      	muls	r1, r3
 8001948:	4647      	mov	r7, r8
 800194a:	436b      	muls	r3, r5
 800194c:	469c      	mov	ip, r3
 800194e:	0c10      	lsrs	r0, r2, #16
 8001950:	4347      	muls	r7, r0
 8001952:	0c0b      	lsrs	r3, r1, #16
 8001954:	44bc      	add	ip, r7
 8001956:	4463      	add	r3, ip
 8001958:	4368      	muls	r0, r5
 800195a:	429f      	cmp	r7, r3
 800195c:	d903      	bls.n	8001966 <__aeabi_ddiv+0x25e>
 800195e:	2580      	movs	r5, #128	@ 0x80
 8001960:	026d      	lsls	r5, r5, #9
 8001962:	46ac      	mov	ip, r5
 8001964:	4460      	add	r0, ip
 8001966:	0c1f      	lsrs	r7, r3, #16
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c09      	lsrs	r1, r1, #16
 800196e:	183f      	adds	r7, r7, r0
 8001970:	185b      	adds	r3, r3, r1
 8001972:	42bc      	cmp	r4, r7
 8001974:	d200      	bcs.n	8001978 <__aeabi_ddiv+0x270>
 8001976:	e102      	b.n	8001b7e <__aeabi_ddiv+0x476>
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x274>
 800197a:	e0fd      	b.n	8001b78 <__aeabi_ddiv+0x470>
 800197c:	2301      	movs	r3, #1
 800197e:	431a      	orrs	r2, r3
 8001980:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <__aeabi_ddiv+0x388>)
 8001982:	4453      	add	r3, sl
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_ddiv+0x282>
 8001988:	e0ae      	b.n	8001ae8 <__aeabi_ddiv+0x3e0>
 800198a:	0751      	lsls	r1, r2, #29
 800198c:	d000      	beq.n	8001990 <__aeabi_ddiv+0x288>
 800198e:	e198      	b.n	8001cc2 <__aeabi_ddiv+0x5ba>
 8001990:	4659      	mov	r1, fp
 8001992:	01c9      	lsls	r1, r1, #7
 8001994:	d506      	bpl.n	80019a4 <__aeabi_ddiv+0x29c>
 8001996:	4659      	mov	r1, fp
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <__aeabi_ddiv+0x38c>)
 800199a:	4019      	ands	r1, r3
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	468b      	mov	fp, r1
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4453      	add	r3, sl
 80019a4:	493c      	ldr	r1, [pc, #240]	@ (8001a98 <__aeabi_ddiv+0x390>)
 80019a6:	428b      	cmp	r3, r1
 80019a8:	dd00      	ble.n	80019ac <__aeabi_ddiv+0x2a4>
 80019aa:	e71a      	b.n	80017e2 <__aeabi_ddiv+0xda>
 80019ac:	4659      	mov	r1, fp
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	0749      	lsls	r1, r1, #29
 80019b2:	4311      	orrs	r1, r2
 80019b4:	465a      	mov	r2, fp
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	0254      	lsls	r4, r2, #9
 80019ba:	4688      	mov	r8, r1
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	0d5b      	lsrs	r3, r3, #21
 80019c0:	e702      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 80019c2:	465a      	mov	r2, fp
 80019c4:	9b00      	ldr	r3, [sp, #0]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x2c4>
 80019ca:	e07e      	b.n	8001aca <__aeabi_ddiv+0x3c2>
 80019cc:	465b      	mov	r3, fp
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_ddiv+0x2cc>
 80019d2:	e100      	b.n	8001bd6 <__aeabi_ddiv+0x4ce>
 80019d4:	4658      	mov	r0, fp
 80019d6:	f001 fabb 	bl	8002f50 <__clzsi2>
 80019da:	0002      	movs	r2, r0
 80019dc:	0003      	movs	r3, r0
 80019de:	3a0b      	subs	r2, #11
 80019e0:	271d      	movs	r7, #29
 80019e2:	9e00      	ldr	r6, [sp, #0]
 80019e4:	1aba      	subs	r2, r7, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	4658      	mov	r0, fp
 80019ea:	40d6      	lsrs	r6, r2
 80019ec:	3908      	subs	r1, #8
 80019ee:	4088      	lsls	r0, r1
 80019f0:	0032      	movs	r2, r6
 80019f2:	4302      	orrs	r2, r0
 80019f4:	4693      	mov	fp, r2
 80019f6:	9a00      	ldr	r2, [sp, #0]
 80019f8:	408a      	lsls	r2, r1
 80019fa:	4928      	ldr	r1, [pc, #160]	@ (8001a9c <__aeabi_ddiv+0x394>)
 80019fc:	4453      	add	r3, sl
 80019fe:	468a      	mov	sl, r1
 8001a00:	449a      	add	sl, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	e6c8      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001a06:	465b      	mov	r3, fp
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	4699      	mov	r9, r3
 8001a0c:	d056      	beq.n	8001abc <__aeabi_ddiv+0x3b4>
 8001a0e:	465b      	mov	r3, fp
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_ddiv+0x30e>
 8001a14:	e0cd      	b.n	8001bb2 <__aeabi_ddiv+0x4aa>
 8001a16:	4658      	mov	r0, fp
 8001a18:	f001 fa9a 	bl	8002f50 <__clzsi2>
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	425b      	negs	r3, r3
 8001a20:	469c      	mov	ip, r3
 8001a22:	0002      	movs	r2, r0
 8001a24:	4484      	add	ip, r0
 8001a26:	4666      	mov	r6, ip
 8001a28:	231d      	movs	r3, #29
 8001a2a:	1b9b      	subs	r3, r3, r6
 8001a2c:	0026      	movs	r6, r4
 8001a2e:	0011      	movs	r1, r2
 8001a30:	4658      	mov	r0, fp
 8001a32:	40de      	lsrs	r6, r3
 8001a34:	3908      	subs	r1, #8
 8001a36:	4088      	lsls	r0, r1
 8001a38:	0033      	movs	r3, r6
 8001a3a:	4303      	orrs	r3, r0
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	0023      	movs	r3, r4
 8001a40:	408b      	lsls	r3, r1
 8001a42:	4698      	mov	r8, r3
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <__aeabi_ddiv+0x398>)
 8001a46:	2400      	movs	r4, #0
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	469a      	mov	sl, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9303      	str	r3, [sp, #12]
 8001a50:	e682      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001a52:	465a      	mov	r2, fp
 8001a54:	4302      	orrs	r2, r0
 8001a56:	4691      	mov	r9, r2
 8001a58:	d12a      	bne.n	8001ab0 <__aeabi_ddiv+0x3a8>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	2302      	movs	r3, #2
 8001a60:	4690      	mov	r8, r2
 8001a62:	2408      	movs	r4, #8
 8001a64:	9303      	str	r3, [sp, #12]
 8001a66:	e677      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001a68:	465a      	mov	r2, fp
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <__aeabi_ddiv+0x39c>)
 8001a70:	469c      	mov	ip, r3
 8001a72:	44e2      	add	sl, ip
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d117      	bne.n	8001aa8 <__aeabi_ddiv+0x3a0>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	431c      	orrs	r4, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	469b      	mov	fp, r3
 8001a80:	3302      	adds	r3, #2
 8001a82:	e689      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001a84:	000007ff 	.word	0x000007ff
 8001a88:	fffffc01 	.word	0xfffffc01
 8001a8c:	0800bc70 	.word	0x0800bc70
 8001a90:	000003ff 	.word	0x000003ff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	000007fe 	.word	0x000007fe
 8001a9c:	000003f3 	.word	0x000003f3
 8001aa0:	fffffc0d 	.word	0xfffffc0d
 8001aa4:	fffff801 	.word	0xfffff801
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	0032      	movs	r2, r6
 8001aac:	431c      	orrs	r4, r3
 8001aae:	e673      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001ab0:	469a      	mov	sl, r3
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	46d9      	mov	r9, fp
 8001ab6:	240c      	movs	r4, #12
 8001ab8:	9303      	str	r3, [sp, #12]
 8001aba:	e64d      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001abc:	2300      	movs	r3, #0
 8001abe:	4698      	mov	r8, r3
 8001ac0:	469a      	mov	sl, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2404      	movs	r4, #4
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	e646      	b.n	8001758 <__aeabi_ddiv+0x50>
 8001aca:	2301      	movs	r3, #1
 8001acc:	431c      	orrs	r4, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	469b      	mov	fp, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	e660      	b.n	8001798 <__aeabi_ddiv+0x90>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2480      	movs	r4, #128	@ 0x80
 8001ada:	4698      	mov	r8, r3
 8001adc:	2600      	movs	r6, #0
 8001ade:	4b92      	ldr	r3, [pc, #584]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	e671      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	2101      	movs	r1, #1
 8001aea:	1ac9      	subs	r1, r1, r3
 8001aec:	2938      	cmp	r1, #56	@ 0x38
 8001aee:	dd00      	ble.n	8001af2 <__aeabi_ddiv+0x3ea>
 8001af0:	e666      	b.n	80017c0 <__aeabi_ddiv+0xb8>
 8001af2:	291f      	cmp	r1, #31
 8001af4:	dc00      	bgt.n	8001af8 <__aeabi_ddiv+0x3f0>
 8001af6:	e0ab      	b.n	8001c50 <__aeabi_ddiv+0x548>
 8001af8:	201f      	movs	r0, #31
 8001afa:	4240      	negs	r0, r0
 8001afc:	1ac3      	subs	r3, r0, r3
 8001afe:	4658      	mov	r0, fp
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	2920      	cmp	r1, #32
 8001b06:	d004      	beq.n	8001b12 <__aeabi_ddiv+0x40a>
 8001b08:	4658      	mov	r0, fp
 8001b0a:	4988      	ldr	r1, [pc, #544]	@ (8001d2c <__aeabi_ddiv+0x624>)
 8001b0c:	4451      	add	r1, sl
 8001b0e:	4088      	lsls	r0, r1
 8001b10:	4302      	orrs	r2, r0
 8001b12:	1e51      	subs	r1, r2, #1
 8001b14:	418a      	sbcs	r2, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	2307      	movs	r3, #7
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	4011      	ands	r1, r2
 8001b20:	4213      	tst	r3, r2
 8001b22:	d00c      	beq.n	8001b3e <__aeabi_ddiv+0x436>
 8001b24:	230f      	movs	r3, #15
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_ddiv+0x426>
 8001b2c:	e0f9      	b.n	8001d22 <__aeabi_ddiv+0x61a>
 8001b2e:	1d11      	adds	r1, r2, #4
 8001b30:	4291      	cmp	r1, r2
 8001b32:	419b      	sbcs	r3, r3
 8001b34:	000a      	movs	r2, r1
 8001b36:	425b      	negs	r3, r3
 8001b38:	0759      	lsls	r1, r3, #29
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	0b1c      	lsrs	r4, r3, #12
 8001b3e:	08d2      	lsrs	r2, r2, #3
 8001b40:	430a      	orrs	r2, r1
 8001b42:	4690      	mov	r8, r2
 8001b44:	2300      	movs	r3, #0
 8001b46:	e63f      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b48:	2480      	movs	r4, #128	@ 0x80
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	4223      	tst	r3, r4
 8001b50:	d009      	beq.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b52:	465b      	mov	r3, fp
 8001b54:	4223      	tst	r3, r4
 8001b56:	d106      	bne.n	8001b66 <__aeabi_ddiv+0x45e>
 8001b58:	431c      	orrs	r4, r3
 8001b5a:	0324      	lsls	r4, r4, #12
 8001b5c:	002e      	movs	r6, r5
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4b71      	ldr	r3, [pc, #452]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	e630      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b66:	2480      	movs	r4, #128	@ 0x80
 8001b68:	464b      	mov	r3, r9
 8001b6a:	0324      	lsls	r4, r4, #12
 8001b6c:	431c      	orrs	r4, r3
 8001b6e:	0324      	lsls	r4, r4, #12
 8001b70:	9e02      	ldr	r6, [sp, #8]
 8001b72:	4b6d      	ldr	r3, [pc, #436]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001b74:	0b24      	lsrs	r4, r4, #12
 8001b76:	e627      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0x476>
 8001b7c:	e700      	b.n	8001980 <__aeabi_ddiv+0x278>
 8001b7e:	9800      	ldr	r0, [sp, #0]
 8001b80:	1e51      	subs	r1, r2, #1
 8001b82:	4684      	mov	ip, r0
 8001b84:	4464      	add	r4, ip
 8001b86:	4284      	cmp	r4, r0
 8001b88:	d200      	bcs.n	8001b8c <__aeabi_ddiv+0x484>
 8001b8a:	e084      	b.n	8001c96 <__aeabi_ddiv+0x58e>
 8001b8c:	42bc      	cmp	r4, r7
 8001b8e:	d200      	bcs.n	8001b92 <__aeabi_ddiv+0x48a>
 8001b90:	e0ae      	b.n	8001cf0 <__aeabi_ddiv+0x5e8>
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x48e>
 8001b94:	e0c1      	b.n	8001d1a <__aeabi_ddiv+0x612>
 8001b96:	000a      	movs	r2, r1
 8001b98:	e6f0      	b.n	800197c <__aeabi_ddiv+0x274>
 8001b9a:	4542      	cmp	r2, r8
 8001b9c:	d900      	bls.n	8001ba0 <__aeabi_ddiv+0x498>
 8001b9e:	e62c      	b.n	80017fa <__aeabi_ddiv+0xf2>
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	07dc      	lsls	r4, r3, #31
 8001ba4:	0858      	lsrs	r0, r3, #1
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	431c      	orrs	r4, r3
 8001bac:	4643      	mov	r3, r8
 8001bae:	07df      	lsls	r7, r3, #31
 8001bb0:	e62a      	b.n	8001808 <__aeabi_ddiv+0x100>
 8001bb2:	f001 f9cd 	bl	8002f50 <__clzsi2>
 8001bb6:	2315      	movs	r3, #21
 8001bb8:	469c      	mov	ip, r3
 8001bba:	4484      	add	ip, r0
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	4663      	mov	r3, ip
 8001bc0:	3220      	adds	r2, #32
 8001bc2:	2b1c      	cmp	r3, #28
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_ddiv+0x4c0>
 8001bc6:	e72e      	b.n	8001a26 <__aeabi_ddiv+0x31e>
 8001bc8:	0023      	movs	r3, r4
 8001bca:	3808      	subs	r0, #8
 8001bcc:	4083      	lsls	r3, r0
 8001bce:	4699      	mov	r9, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	e736      	b.n	8001a44 <__aeabi_ddiv+0x33c>
 8001bd6:	f001 f9bb 	bl	8002f50 <__clzsi2>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	0003      	movs	r3, r0
 8001bde:	3215      	adds	r2, #21
 8001be0:	3320      	adds	r3, #32
 8001be2:	2a1c      	cmp	r2, #28
 8001be4:	dc00      	bgt.n	8001be8 <__aeabi_ddiv+0x4e0>
 8001be6:	e6fb      	b.n	80019e0 <__aeabi_ddiv+0x2d8>
 8001be8:	9900      	ldr	r1, [sp, #0]
 8001bea:	3808      	subs	r0, #8
 8001bec:	4081      	lsls	r1, r0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	468b      	mov	fp, r1
 8001bf2:	e702      	b.n	80019fa <__aeabi_ddiv+0x2f2>
 8001bf4:	9900      	ldr	r1, [sp, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	468c      	mov	ip, r1
 8001bfa:	4464      	add	r4, ip
 8001bfc:	42a1      	cmp	r1, r4
 8001bfe:	d900      	bls.n	8001c02 <__aeabi_ddiv+0x4fa>
 8001c00:	e69a      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c02:	42a2      	cmp	r2, r4
 8001c04:	d800      	bhi.n	8001c08 <__aeabi_ddiv+0x500>
 8001c06:	e697      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c08:	1e83      	subs	r3, r0, #2
 8001c0a:	4464      	add	r4, ip
 8001c0c:	e694      	b.n	8001938 <__aeabi_ddiv+0x230>
 8001c0e:	46ac      	mov	ip, r5
 8001c10:	4461      	add	r1, ip
 8001c12:	3f01      	subs	r7, #1
 8001c14:	428d      	cmp	r5, r1
 8001c16:	d900      	bls.n	8001c1a <__aeabi_ddiv+0x512>
 8001c18:	e680      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d800      	bhi.n	8001c20 <__aeabi_ddiv+0x518>
 8001c1e:	e67d      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c20:	1e87      	subs	r7, r0, #2
 8001c22:	4461      	add	r1, ip
 8001c24:	e67a      	b.n	800191c <__aeabi_ddiv+0x214>
 8001c26:	4285      	cmp	r5, r0
 8001c28:	d000      	beq.n	8001c2c <__aeabi_ddiv+0x524>
 8001c2a:	e65f      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001c2c:	45b9      	cmp	r9, r7
 8001c2e:	d900      	bls.n	8001c32 <__aeabi_ddiv+0x52a>
 8001c30:	e65c      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001c32:	e656      	b.n	80018e2 <__aeabi_ddiv+0x1da>
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d800      	bhi.n	8001c3a <__aeabi_ddiv+0x532>
 8001c38:	e61a      	b.n	8001870 <__aeabi_ddiv+0x168>
 8001c3a:	1e83      	subs	r3, r0, #2
 8001c3c:	4464      	add	r4, ip
 8001c3e:	e617      	b.n	8001870 <__aeabi_ddiv+0x168>
 8001c40:	428a      	cmp	r2, r1
 8001c42:	d800      	bhi.n	8001c46 <__aeabi_ddiv+0x53e>
 8001c44:	e600      	b.n	8001848 <__aeabi_ddiv+0x140>
 8001c46:	46ac      	mov	ip, r5
 8001c48:	1e83      	subs	r3, r0, #2
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	4461      	add	r1, ip
 8001c4e:	e5fb      	b.n	8001848 <__aeabi_ddiv+0x140>
 8001c50:	4837      	ldr	r0, [pc, #220]	@ (8001d30 <__aeabi_ddiv+0x628>)
 8001c52:	0014      	movs	r4, r2
 8001c54:	4450      	add	r0, sl
 8001c56:	4082      	lsls	r2, r0
 8001c58:	465b      	mov	r3, fp
 8001c5a:	0017      	movs	r7, r2
 8001c5c:	4083      	lsls	r3, r0
 8001c5e:	40cc      	lsrs	r4, r1
 8001c60:	1e7a      	subs	r2, r7, #1
 8001c62:	4197      	sbcs	r7, r2
 8001c64:	4323      	orrs	r3, r4
 8001c66:	433b      	orrs	r3, r7
 8001c68:	001a      	movs	r2, r3
 8001c6a:	465b      	mov	r3, fp
 8001c6c:	40cb      	lsrs	r3, r1
 8001c6e:	0751      	lsls	r1, r2, #29
 8001c70:	d009      	beq.n	8001c86 <__aeabi_ddiv+0x57e>
 8001c72:	210f      	movs	r1, #15
 8001c74:	4011      	ands	r1, r2
 8001c76:	2904      	cmp	r1, #4
 8001c78:	d005      	beq.n	8001c86 <__aeabi_ddiv+0x57e>
 8001c7a:	1d11      	adds	r1, r2, #4
 8001c7c:	4291      	cmp	r1, r2
 8001c7e:	4192      	sbcs	r2, r2
 8001c80:	4252      	negs	r2, r2
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	0219      	lsls	r1, r3, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_ddiv+0x584>
 8001c8a:	e755      	b.n	8001b38 <__aeabi_ddiv+0x430>
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2400      	movs	r4, #0
 8001c92:	4690      	mov	r8, r2
 8001c94:	e598      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001c96:	000a      	movs	r2, r1
 8001c98:	42bc      	cmp	r4, r7
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_ddiv+0x596>
 8001c9c:	e66e      	b.n	800197c <__aeabi_ddiv+0x274>
 8001c9e:	454b      	cmp	r3, r9
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_ddiv+0x59c>
 8001ca2:	e66b      	b.n	800197c <__aeabi_ddiv+0x274>
 8001ca4:	e66c      	b.n	8001980 <__aeabi_ddiv+0x278>
 8001ca6:	4b23      	ldr	r3, [pc, #140]	@ (8001d34 <__aeabi_ddiv+0x62c>)
 8001ca8:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <__aeabi_ddiv+0x630>)
 8001caa:	4453      	add	r3, sl
 8001cac:	4592      	cmp	sl, r2
 8001cae:	da00      	bge.n	8001cb2 <__aeabi_ddiv+0x5aa>
 8001cb0:	e718      	b.n	8001ae4 <__aeabi_ddiv+0x3dc>
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4249      	negs	r1, r1
 8001cb6:	1d0a      	adds	r2, r1, #4
 8001cb8:	428a      	cmp	r2, r1
 8001cba:	4189      	sbcs	r1, r1
 8001cbc:	4249      	negs	r1, r1
 8001cbe:	448b      	add	fp, r1
 8001cc0:	e666      	b.n	8001990 <__aeabi_ddiv+0x288>
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	4011      	ands	r1, r2
 8001cc6:	2904      	cmp	r1, #4
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_ddiv+0x5c4>
 8001cca:	e661      	b.n	8001990 <__aeabi_ddiv+0x288>
 8001ccc:	0011      	movs	r1, r2
 8001cce:	e7f2      	b.n	8001cb6 <__aeabi_ddiv+0x5ae>
 8001cd0:	42bc      	cmp	r4, r7
 8001cd2:	d800      	bhi.n	8001cd6 <__aeabi_ddiv+0x5ce>
 8001cd4:	e60a      	b.n	80018ec <__aeabi_ddiv+0x1e4>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	425b      	negs	r3, r3
 8001cda:	469c      	mov	ip, r3
 8001cdc:	9900      	ldr	r1, [sp, #0]
 8001cde:	444f      	add	r7, r9
 8001ce0:	454f      	cmp	r7, r9
 8001ce2:	419b      	sbcs	r3, r3
 8001ce4:	44e3      	add	fp, ip
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	425b      	negs	r3, r3
 8001cea:	4463      	add	r3, ip
 8001cec:	18c0      	adds	r0, r0, r3
 8001cee:	e5ff      	b.n	80018f0 <__aeabi_ddiv+0x1e8>
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	9d00      	ldr	r5, [sp, #0]
 8001cf4:	0048      	lsls	r0, r1, #1
 8001cf6:	4548      	cmp	r0, r9
 8001cf8:	4189      	sbcs	r1, r1
 8001cfa:	46ac      	mov	ip, r5
 8001cfc:	4249      	negs	r1, r1
 8001cfe:	4461      	add	r1, ip
 8001d00:	4681      	mov	r9, r0
 8001d02:	3a02      	subs	r2, #2
 8001d04:	1864      	adds	r4, r4, r1
 8001d06:	e7c7      	b.n	8001c98 <__aeabi_ddiv+0x590>
 8001d08:	2480      	movs	r4, #128	@ 0x80
 8001d0a:	465b      	mov	r3, fp
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	431c      	orrs	r4, r3
 8001d10:	0324      	lsls	r4, r4, #12
 8001d12:	4690      	mov	r8, r2
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__aeabi_ddiv+0x620>)
 8001d16:	0b24      	lsrs	r4, r4, #12
 8001d18:	e556      	b.n	80017c8 <__aeabi_ddiv+0xc0>
 8001d1a:	4599      	cmp	r9, r3
 8001d1c:	d3e8      	bcc.n	8001cf0 <__aeabi_ddiv+0x5e8>
 8001d1e:	000a      	movs	r2, r1
 8001d20:	e7bd      	b.n	8001c9e <__aeabi_ddiv+0x596>
 8001d22:	2300      	movs	r3, #0
 8001d24:	e708      	b.n	8001b38 <__aeabi_ddiv+0x430>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	0000043e 	.word	0x0000043e
 8001d30:	0000041e 	.word	0x0000041e
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	fffffc02 	.word	0xfffffc02

08001d3c <__eqdf2>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	4657      	mov	r7, sl
 8001d40:	46de      	mov	lr, fp
 8001d42:	464e      	mov	r6, r9
 8001d44:	4645      	mov	r5, r8
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	000d      	movs	r5, r1
 8001d4a:	0004      	movs	r4, r0
 8001d4c:	0fe8      	lsrs	r0, r5, #31
 8001d4e:	4683      	mov	fp, r0
 8001d50:	0309      	lsls	r1, r1, #12
 8001d52:	0fd8      	lsrs	r0, r3, #31
 8001d54:	0b09      	lsrs	r1, r1, #12
 8001d56:	4682      	mov	sl, r0
 8001d58:	4819      	ldr	r0, [pc, #100]	@ (8001dc0 <__eqdf2+0x84>)
 8001d5a:	468c      	mov	ip, r1
 8001d5c:	031f      	lsls	r7, r3, #12
 8001d5e:	0069      	lsls	r1, r5, #1
 8001d60:	005e      	lsls	r6, r3, #1
 8001d62:	0d49      	lsrs	r1, r1, #21
 8001d64:	0b3f      	lsrs	r7, r7, #12
 8001d66:	0d76      	lsrs	r6, r6, #21
 8001d68:	4281      	cmp	r1, r0
 8001d6a:	d018      	beq.n	8001d9e <__eqdf2+0x62>
 8001d6c:	4286      	cmp	r6, r0
 8001d6e:	d00f      	beq.n	8001d90 <__eqdf2+0x54>
 8001d70:	2001      	movs	r0, #1
 8001d72:	42b1      	cmp	r1, r6
 8001d74:	d10d      	bne.n	8001d92 <__eqdf2+0x56>
 8001d76:	45bc      	cmp	ip, r7
 8001d78:	d10b      	bne.n	8001d92 <__eqdf2+0x56>
 8001d7a:	4294      	cmp	r4, r2
 8001d7c:	d109      	bne.n	8001d92 <__eqdf2+0x56>
 8001d7e:	45d3      	cmp	fp, sl
 8001d80:	d01c      	beq.n	8001dbc <__eqdf2+0x80>
 8001d82:	2900      	cmp	r1, #0
 8001d84:	d105      	bne.n	8001d92 <__eqdf2+0x56>
 8001d86:	4660      	mov	r0, ip
 8001d88:	4320      	orrs	r0, r4
 8001d8a:	1e43      	subs	r3, r0, #1
 8001d8c:	4198      	sbcs	r0, r3
 8001d8e:	e000      	b.n	8001d92 <__eqdf2+0x56>
 8001d90:	2001      	movs	r0, #1
 8001d92:	bcf0      	pop	{r4, r5, r6, r7}
 8001d94:	46bb      	mov	fp, r7
 8001d96:	46b2      	mov	sl, r6
 8001d98:	46a9      	mov	r9, r5
 8001d9a:	46a0      	mov	r8, r4
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9e:	2001      	movs	r0, #1
 8001da0:	428e      	cmp	r6, r1
 8001da2:	d1f6      	bne.n	8001d92 <__eqdf2+0x56>
 8001da4:	4661      	mov	r1, ip
 8001da6:	4339      	orrs	r1, r7
 8001da8:	000f      	movs	r7, r1
 8001daa:	4317      	orrs	r7, r2
 8001dac:	4327      	orrs	r7, r4
 8001dae:	d1f0      	bne.n	8001d92 <__eqdf2+0x56>
 8001db0:	465b      	mov	r3, fp
 8001db2:	4652      	mov	r2, sl
 8001db4:	1a98      	subs	r0, r3, r2
 8001db6:	1e43      	subs	r3, r0, #1
 8001db8:	4198      	sbcs	r0, r3
 8001dba:	e7ea      	b.n	8001d92 <__eqdf2+0x56>
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e7e8      	b.n	8001d92 <__eqdf2+0x56>
 8001dc0:	000007ff 	.word	0x000007ff

08001dc4 <__gedf2>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	4657      	mov	r7, sl
 8001dc8:	464e      	mov	r6, r9
 8001dca:	4645      	mov	r5, r8
 8001dcc:	46de      	mov	lr, fp
 8001dce:	b5e0      	push	{r5, r6, r7, lr}
 8001dd0:	000d      	movs	r5, r1
 8001dd2:	030f      	lsls	r7, r1, #12
 8001dd4:	0b39      	lsrs	r1, r7, #12
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	0004      	movs	r4, r0
 8001dda:	4680      	mov	r8, r0
 8001ddc:	9101      	str	r1, [sp, #4]
 8001dde:	0058      	lsls	r0, r3, #1
 8001de0:	0fe9      	lsrs	r1, r5, #31
 8001de2:	4f31      	ldr	r7, [pc, #196]	@ (8001ea8 <__gedf2+0xe4>)
 8001de4:	0d40      	lsrs	r0, r0, #21
 8001de6:	468c      	mov	ip, r1
 8001de8:	006e      	lsls	r6, r5, #1
 8001dea:	0319      	lsls	r1, r3, #12
 8001dec:	4682      	mov	sl, r0
 8001dee:	4691      	mov	r9, r2
 8001df0:	0d76      	lsrs	r6, r6, #21
 8001df2:	0b09      	lsrs	r1, r1, #12
 8001df4:	0fd8      	lsrs	r0, r3, #31
 8001df6:	42be      	cmp	r6, r7
 8001df8:	d01f      	beq.n	8001e3a <__gedf2+0x76>
 8001dfa:	45ba      	cmp	sl, r7
 8001dfc:	d00f      	beq.n	8001e1e <__gedf2+0x5a>
 8001dfe:	2e00      	cmp	r6, #0
 8001e00:	d12f      	bne.n	8001e62 <__gedf2+0x9e>
 8001e02:	4655      	mov	r5, sl
 8001e04:	9e01      	ldr	r6, [sp, #4]
 8001e06:	4334      	orrs	r4, r6
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d127      	bne.n	8001e5c <__gedf2+0x98>
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	d03a      	beq.n	8001e86 <__gedf2+0xc2>
 8001e10:	2c00      	cmp	r4, #0
 8001e12:	d145      	bne.n	8001ea0 <__gedf2+0xdc>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d11a      	bne.n	8001e4e <__gedf2+0x8a>
 8001e18:	2001      	movs	r0, #1
 8001e1a:	4240      	negs	r0, r0
 8001e1c:	e017      	b.n	8001e4e <__gedf2+0x8a>
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	d13b      	bne.n	8001e9a <__gedf2+0xd6>
 8001e22:	2e00      	cmp	r6, #0
 8001e24:	d102      	bne.n	8001e2c <__gedf2+0x68>
 8001e26:	9f01      	ldr	r7, [sp, #4]
 8001e28:	4327      	orrs	r7, r4
 8001e2a:	d0f3      	beq.n	8001e14 <__gedf2+0x50>
 8001e2c:	4584      	cmp	ip, r0
 8001e2e:	d109      	bne.n	8001e44 <__gedf2+0x80>
 8001e30:	4663      	mov	r3, ip
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <__gedf2+0x54>
 8001e36:	4660      	mov	r0, ip
 8001e38:	e009      	b.n	8001e4e <__gedf2+0x8a>
 8001e3a:	9f01      	ldr	r7, [sp, #4]
 8001e3c:	4327      	orrs	r7, r4
 8001e3e:	d12c      	bne.n	8001e9a <__gedf2+0xd6>
 8001e40:	45b2      	cmp	sl, r6
 8001e42:	d024      	beq.n	8001e8e <__gedf2+0xca>
 8001e44:	4663      	mov	r3, ip
 8001e46:	2002      	movs	r0, #2
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4018      	ands	r0, r3
 8001e4c:	3801      	subs	r0, #1
 8001e4e:	b003      	add	sp, #12
 8001e50:	bcf0      	pop	{r4, r5, r6, r7}
 8001e52:	46bb      	mov	fp, r7
 8001e54:	46b2      	mov	sl, r6
 8001e56:	46a9      	mov	r9, r5
 8001e58:	46a0      	mov	r8, r4
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d0d9      	beq.n	8001e14 <__gedf2+0x50>
 8001e60:	e7e4      	b.n	8001e2c <__gedf2+0x68>
 8001e62:	4654      	mov	r4, sl
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d0ed      	beq.n	8001e44 <__gedf2+0x80>
 8001e68:	4584      	cmp	ip, r0
 8001e6a:	d1eb      	bne.n	8001e44 <__gedf2+0x80>
 8001e6c:	4556      	cmp	r6, sl
 8001e6e:	dce9      	bgt.n	8001e44 <__gedf2+0x80>
 8001e70:	dbde      	blt.n	8001e30 <__gedf2+0x6c>
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	428b      	cmp	r3, r1
 8001e76:	d8e5      	bhi.n	8001e44 <__gedf2+0x80>
 8001e78:	d1da      	bne.n	8001e30 <__gedf2+0x6c>
 8001e7a:	45c8      	cmp	r8, r9
 8001e7c:	d8e2      	bhi.n	8001e44 <__gedf2+0x80>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	45c8      	cmp	r8, r9
 8001e82:	d2e4      	bcs.n	8001e4e <__gedf2+0x8a>
 8001e84:	e7d4      	b.n	8001e30 <__gedf2+0x6c>
 8001e86:	2000      	movs	r0, #0
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d0e0      	beq.n	8001e4e <__gedf2+0x8a>
 8001e8c:	e7da      	b.n	8001e44 <__gedf2+0x80>
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	d103      	bne.n	8001e9a <__gedf2+0xd6>
 8001e92:	4584      	cmp	ip, r0
 8001e94:	d1d6      	bne.n	8001e44 <__gedf2+0x80>
 8001e96:	2000      	movs	r0, #0
 8001e98:	e7d9      	b.n	8001e4e <__gedf2+0x8a>
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	4240      	negs	r0, r0
 8001e9e:	e7d6      	b.n	8001e4e <__gedf2+0x8a>
 8001ea0:	4584      	cmp	ip, r0
 8001ea2:	d0e6      	beq.n	8001e72 <__gedf2+0xae>
 8001ea4:	e7ce      	b.n	8001e44 <__gedf2+0x80>
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	000007ff 	.word	0x000007ff

08001eac <__ledf2>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	4657      	mov	r7, sl
 8001eb0:	464e      	mov	r6, r9
 8001eb2:	4645      	mov	r5, r8
 8001eb4:	46de      	mov	lr, fp
 8001eb6:	b5e0      	push	{r5, r6, r7, lr}
 8001eb8:	000d      	movs	r5, r1
 8001eba:	030f      	lsls	r7, r1, #12
 8001ebc:	0004      	movs	r4, r0
 8001ebe:	4680      	mov	r8, r0
 8001ec0:	0fe8      	lsrs	r0, r5, #31
 8001ec2:	0b39      	lsrs	r1, r7, #12
 8001ec4:	4684      	mov	ip, r0
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	0058      	lsls	r0, r3, #1
 8001eca:	4f30      	ldr	r7, [pc, #192]	@ (8001f8c <__ledf2+0xe0>)
 8001ecc:	0d40      	lsrs	r0, r0, #21
 8001ece:	9101      	str	r1, [sp, #4]
 8001ed0:	031e      	lsls	r6, r3, #12
 8001ed2:	0069      	lsls	r1, r5, #1
 8001ed4:	4682      	mov	sl, r0
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	0d49      	lsrs	r1, r1, #21
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0fd8      	lsrs	r0, r3, #31
 8001ede:	42b9      	cmp	r1, r7
 8001ee0:	d020      	beq.n	8001f24 <__ledf2+0x78>
 8001ee2:	45ba      	cmp	sl, r7
 8001ee4:	d00f      	beq.n	8001f06 <__ledf2+0x5a>
 8001ee6:	2900      	cmp	r1, #0
 8001ee8:	d12b      	bne.n	8001f42 <__ledf2+0x96>
 8001eea:	9901      	ldr	r1, [sp, #4]
 8001eec:	430c      	orrs	r4, r1
 8001eee:	4651      	mov	r1, sl
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	d137      	bne.n	8001f64 <__ledf2+0xb8>
 8001ef4:	4332      	orrs	r2, r6
 8001ef6:	d038      	beq.n	8001f6a <__ledf2+0xbe>
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	d144      	bne.n	8001f86 <__ledf2+0xda>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d119      	bne.n	8001f34 <__ledf2+0x88>
 8001f00:	2001      	movs	r0, #1
 8001f02:	4240      	negs	r0, r0
 8001f04:	e016      	b.n	8001f34 <__ledf2+0x88>
 8001f06:	4316      	orrs	r6, r2
 8001f08:	d113      	bne.n	8001f32 <__ledf2+0x86>
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d102      	bne.n	8001f14 <__ledf2+0x68>
 8001f0e:	9f01      	ldr	r7, [sp, #4]
 8001f10:	4327      	orrs	r7, r4
 8001f12:	d0f3      	beq.n	8001efc <__ledf2+0x50>
 8001f14:	4584      	cmp	ip, r0
 8001f16:	d020      	beq.n	8001f5a <__ledf2+0xae>
 8001f18:	4663      	mov	r3, ip
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	4018      	ands	r0, r3
 8001f20:	3801      	subs	r0, #1
 8001f22:	e007      	b.n	8001f34 <__ledf2+0x88>
 8001f24:	9f01      	ldr	r7, [sp, #4]
 8001f26:	4327      	orrs	r7, r4
 8001f28:	d103      	bne.n	8001f32 <__ledf2+0x86>
 8001f2a:	458a      	cmp	sl, r1
 8001f2c:	d1f4      	bne.n	8001f18 <__ledf2+0x6c>
 8001f2e:	4316      	orrs	r6, r2
 8001f30:	d01f      	beq.n	8001f72 <__ledf2+0xc6>
 8001f32:	2002      	movs	r0, #2
 8001f34:	b003      	add	sp, #12
 8001f36:	bcf0      	pop	{r4, r5, r6, r7}
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	46b2      	mov	sl, r6
 8001f3c:	46a9      	mov	r9, r5
 8001f3e:	46a0      	mov	r8, r4
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f42:	4654      	mov	r4, sl
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	d0e7      	beq.n	8001f18 <__ledf2+0x6c>
 8001f48:	4584      	cmp	ip, r0
 8001f4a:	d1e5      	bne.n	8001f18 <__ledf2+0x6c>
 8001f4c:	4551      	cmp	r1, sl
 8001f4e:	dce3      	bgt.n	8001f18 <__ledf2+0x6c>
 8001f50:	db03      	blt.n	8001f5a <__ledf2+0xae>
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	42b3      	cmp	r3, r6
 8001f56:	d8df      	bhi.n	8001f18 <__ledf2+0x6c>
 8001f58:	d00f      	beq.n	8001f7a <__ledf2+0xce>
 8001f5a:	4663      	mov	r3, ip
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0cf      	beq.n	8001f00 <__ledf2+0x54>
 8001f60:	4660      	mov	r0, ip
 8001f62:	e7e7      	b.n	8001f34 <__ledf2+0x88>
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d0c9      	beq.n	8001efc <__ledf2+0x50>
 8001f68:	e7d4      	b.n	8001f14 <__ledf2+0x68>
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d0e1      	beq.n	8001f34 <__ledf2+0x88>
 8001f70:	e7d2      	b.n	8001f18 <__ledf2+0x6c>
 8001f72:	4584      	cmp	ip, r0
 8001f74:	d1d0      	bne.n	8001f18 <__ledf2+0x6c>
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7dc      	b.n	8001f34 <__ledf2+0x88>
 8001f7a:	45c8      	cmp	r8, r9
 8001f7c:	d8cc      	bhi.n	8001f18 <__ledf2+0x6c>
 8001f7e:	2000      	movs	r0, #0
 8001f80:	45c8      	cmp	r8, r9
 8001f82:	d2d7      	bcs.n	8001f34 <__ledf2+0x88>
 8001f84:	e7e9      	b.n	8001f5a <__ledf2+0xae>
 8001f86:	4584      	cmp	ip, r0
 8001f88:	d0e3      	beq.n	8001f52 <__ledf2+0xa6>
 8001f8a:	e7c5      	b.n	8001f18 <__ledf2+0x6c>
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__aeabi_dmul>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	46de      	mov	lr, fp
 8001f96:	464e      	mov	r6, r9
 8001f98:	4645      	mov	r5, r8
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	001f      	movs	r7, r3
 8001f9e:	030b      	lsls	r3, r1, #12
 8001fa0:	0b1b      	lsrs	r3, r3, #12
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	469a      	mov	sl, r3
 8001fa6:	0fca      	lsrs	r2, r1, #31
 8001fa8:	004b      	lsls	r3, r1, #1
 8001faa:	0004      	movs	r4, r0
 8001fac:	4693      	mov	fp, r2
 8001fae:	b087      	sub	sp, #28
 8001fb0:	0d5b      	lsrs	r3, r3, #21
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x26>
 8001fb4:	e0d5      	b.n	8002162 <__aeabi_dmul+0x1d2>
 8001fb6:	4abb      	ldr	r2, [pc, #748]	@ (80022a4 <__aeabi_dmul+0x314>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dmul+0x2e>
 8001fbc:	e0f8      	b.n	80021b0 <__aeabi_dmul+0x220>
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	0f42      	lsrs	r2, r0, #29
 8001fc2:	00c9      	lsls	r1, r1, #3
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	2180      	movs	r1, #128	@ 0x80
 8001fc8:	0409      	lsls	r1, r1, #16
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	00c2      	lsls	r2, r0, #3
 8001fce:	4691      	mov	r9, r2
 8001fd0:	4ab5      	ldr	r2, [pc, #724]	@ (80022a8 <__aeabi_dmul+0x318>)
 8001fd2:	468a      	mov	sl, r1
 8001fd4:	189d      	adds	r5, r3, r2
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4698      	mov	r8, r3
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	033c      	lsls	r4, r7, #12
 8001fde:	007b      	lsls	r3, r7, #1
 8001fe0:	0ffa      	lsrs	r2, r7, #31
 8001fe2:	0030      	movs	r0, r6
 8001fe4:	0b24      	lsrs	r4, r4, #12
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	9200      	str	r2, [sp, #0]
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x5e>
 8001fec:	e096      	b.n	800211c <__aeabi_dmul+0x18c>
 8001fee:	4aad      	ldr	r2, [pc, #692]	@ (80022a4 <__aeabi_dmul+0x314>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <__aeabi_dmul+0xc8>
 8001ff4:	0f72      	lsrs	r2, r6, #29
 8001ff6:	00e4      	lsls	r4, r4, #3
 8001ff8:	4322      	orrs	r2, r4
 8001ffa:	2480      	movs	r4, #128	@ 0x80
 8001ffc:	0424      	lsls	r4, r4, #16
 8001ffe:	4314      	orrs	r4, r2
 8002000:	4aa9      	ldr	r2, [pc, #676]	@ (80022a8 <__aeabi_dmul+0x318>)
 8002002:	00f0      	lsls	r0, r6, #3
 8002004:	4694      	mov	ip, r2
 8002006:	4463      	add	r3, ip
 8002008:	195b      	adds	r3, r3, r5
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	4642      	mov	r2, r8
 8002010:	2600      	movs	r6, #0
 8002012:	2a0a      	cmp	r2, #10
 8002014:	dc42      	bgt.n	800209c <__aeabi_dmul+0x10c>
 8002016:	465a      	mov	r2, fp
 8002018:	9900      	ldr	r1, [sp, #0]
 800201a:	404a      	eors	r2, r1
 800201c:	4693      	mov	fp, r2
 800201e:	4642      	mov	r2, r8
 8002020:	2a02      	cmp	r2, #2
 8002022:	dc32      	bgt.n	800208a <__aeabi_dmul+0xfa>
 8002024:	3a01      	subs	r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d900      	bls.n	800202c <__aeabi_dmul+0x9c>
 800202a:	e149      	b.n	80022c0 <__aeabi_dmul+0x330>
 800202c:	2e02      	cmp	r6, #2
 800202e:	d100      	bne.n	8002032 <__aeabi_dmul+0xa2>
 8002030:	e0ca      	b.n	80021c8 <__aeabi_dmul+0x238>
 8002032:	2e01      	cmp	r6, #1
 8002034:	d13d      	bne.n	80020b2 <__aeabi_dmul+0x122>
 8002036:	2300      	movs	r3, #0
 8002038:	2400      	movs	r4, #0
 800203a:	2200      	movs	r2, #0
 800203c:	0010      	movs	r0, r2
 800203e:	465a      	mov	r2, fp
 8002040:	051b      	lsls	r3, r3, #20
 8002042:	4323      	orrs	r3, r4
 8002044:	07d2      	lsls	r2, r2, #31
 8002046:	4313      	orrs	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	b007      	add	sp, #28
 800204c:	bcf0      	pop	{r4, r5, r6, r7}
 800204e:	46bb      	mov	fp, r7
 8002050:	46b2      	mov	sl, r6
 8002052:	46a9      	mov	r9, r5
 8002054:	46a0      	mov	r8, r4
 8002056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002058:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <__aeabi_dmul+0x314>)
 800205a:	4326      	orrs	r6, r4
 800205c:	18eb      	adds	r3, r5, r3
 800205e:	2e00      	cmp	r6, #0
 8002060:	d100      	bne.n	8002064 <__aeabi_dmul+0xd4>
 8002062:	e0bb      	b.n	80021dc <__aeabi_dmul+0x24c>
 8002064:	2203      	movs	r2, #3
 8002066:	4641      	mov	r1, r8
 8002068:	4311      	orrs	r1, r2
 800206a:	465a      	mov	r2, fp
 800206c:	4688      	mov	r8, r1
 800206e:	9900      	ldr	r1, [sp, #0]
 8002070:	404a      	eors	r2, r1
 8002072:	2180      	movs	r1, #128	@ 0x80
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	468c      	mov	ip, r1
 8002078:	0029      	movs	r1, r5
 800207a:	4461      	add	r1, ip
 800207c:	9101      	str	r1, [sp, #4]
 800207e:	4641      	mov	r1, r8
 8002080:	290a      	cmp	r1, #10
 8002082:	dd00      	ble.n	8002086 <__aeabi_dmul+0xf6>
 8002084:	e233      	b.n	80024ee <__aeabi_dmul+0x55e>
 8002086:	4693      	mov	fp, r2
 8002088:	2603      	movs	r6, #3
 800208a:	4642      	mov	r2, r8
 800208c:	2701      	movs	r7, #1
 800208e:	4097      	lsls	r7, r2
 8002090:	21a6      	movs	r1, #166	@ 0xa6
 8002092:	003a      	movs	r2, r7
 8002094:	00c9      	lsls	r1, r1, #3
 8002096:	400a      	ands	r2, r1
 8002098:	420f      	tst	r7, r1
 800209a:	d031      	beq.n	8002100 <__aeabi_dmul+0x170>
 800209c:	9e02      	ldr	r6, [sp, #8]
 800209e:	2e02      	cmp	r6, #2
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dmul+0x114>
 80020a2:	e235      	b.n	8002510 <__aeabi_dmul+0x580>
 80020a4:	2e03      	cmp	r6, #3
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0x11a>
 80020a8:	e1d2      	b.n	8002450 <__aeabi_dmul+0x4c0>
 80020aa:	4654      	mov	r4, sl
 80020ac:	4648      	mov	r0, r9
 80020ae:	2e01      	cmp	r6, #1
 80020b0:	d0c1      	beq.n	8002036 <__aeabi_dmul+0xa6>
 80020b2:	9a01      	ldr	r2, [sp, #4]
 80020b4:	4b7d      	ldr	r3, [pc, #500]	@ (80022ac <__aeabi_dmul+0x31c>)
 80020b6:	4694      	mov	ip, r2
 80020b8:	4463      	add	r3, ip
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dc00      	bgt.n	80020c0 <__aeabi_dmul+0x130>
 80020be:	e0c0      	b.n	8002242 <__aeabi_dmul+0x2b2>
 80020c0:	0742      	lsls	r2, r0, #29
 80020c2:	d009      	beq.n	80020d8 <__aeabi_dmul+0x148>
 80020c4:	220f      	movs	r2, #15
 80020c6:	4002      	ands	r2, r0
 80020c8:	2a04      	cmp	r2, #4
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dmul+0x148>
 80020cc:	1d02      	adds	r2, r0, #4
 80020ce:	4282      	cmp	r2, r0
 80020d0:	4180      	sbcs	r0, r0
 80020d2:	4240      	negs	r0, r0
 80020d4:	1824      	adds	r4, r4, r0
 80020d6:	0010      	movs	r0, r2
 80020d8:	01e2      	lsls	r2, r4, #7
 80020da:	d506      	bpl.n	80020ea <__aeabi_dmul+0x15a>
 80020dc:	4b74      	ldr	r3, [pc, #464]	@ (80022b0 <__aeabi_dmul+0x320>)
 80020de:	9a01      	ldr	r2, [sp, #4]
 80020e0:	401c      	ands	r4, r3
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	4694      	mov	ip, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4463      	add	r3, ip
 80020ea:	4a72      	ldr	r2, [pc, #456]	@ (80022b4 <__aeabi_dmul+0x324>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	dc6b      	bgt.n	80021c8 <__aeabi_dmul+0x238>
 80020f0:	0762      	lsls	r2, r4, #29
 80020f2:	08c0      	lsrs	r0, r0, #3
 80020f4:	0264      	lsls	r4, r4, #9
 80020f6:	055b      	lsls	r3, r3, #21
 80020f8:	4302      	orrs	r2, r0
 80020fa:	0b24      	lsrs	r4, r4, #12
 80020fc:	0d5b      	lsrs	r3, r3, #21
 80020fe:	e79d      	b.n	800203c <__aeabi_dmul+0xac>
 8002100:	2190      	movs	r1, #144	@ 0x90
 8002102:	0089      	lsls	r1, r1, #2
 8002104:	420f      	tst	r7, r1
 8002106:	d163      	bne.n	80021d0 <__aeabi_dmul+0x240>
 8002108:	2288      	movs	r2, #136	@ 0x88
 800210a:	423a      	tst	r2, r7
 800210c:	d100      	bne.n	8002110 <__aeabi_dmul+0x180>
 800210e:	e0d7      	b.n	80022c0 <__aeabi_dmul+0x330>
 8002110:	9b00      	ldr	r3, [sp, #0]
 8002112:	46a2      	mov	sl, r4
 8002114:	469b      	mov	fp, r3
 8002116:	4681      	mov	r9, r0
 8002118:	9602      	str	r6, [sp, #8]
 800211a:	e7bf      	b.n	800209c <__aeabi_dmul+0x10c>
 800211c:	0023      	movs	r3, r4
 800211e:	4333      	orrs	r3, r6
 8002120:	d100      	bne.n	8002124 <__aeabi_dmul+0x194>
 8002122:	e07f      	b.n	8002224 <__aeabi_dmul+0x294>
 8002124:	2c00      	cmp	r4, #0
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0x19a>
 8002128:	e1ad      	b.n	8002486 <__aeabi_dmul+0x4f6>
 800212a:	0020      	movs	r0, r4
 800212c:	f000 ff10 	bl	8002f50 <__clzsi2>
 8002130:	0002      	movs	r2, r0
 8002132:	0003      	movs	r3, r0
 8002134:	3a0b      	subs	r2, #11
 8002136:	201d      	movs	r0, #29
 8002138:	0019      	movs	r1, r3
 800213a:	1a82      	subs	r2, r0, r2
 800213c:	0030      	movs	r0, r6
 800213e:	3908      	subs	r1, #8
 8002140:	40d0      	lsrs	r0, r2
 8002142:	408c      	lsls	r4, r1
 8002144:	4304      	orrs	r4, r0
 8002146:	0030      	movs	r0, r6
 8002148:	4088      	lsls	r0, r1
 800214a:	4a5b      	ldr	r2, [pc, #364]	@ (80022b8 <__aeabi_dmul+0x328>)
 800214c:	1aeb      	subs	r3, r5, r3
 800214e:	4694      	mov	ip, r2
 8002150:	4463      	add	r3, ip
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	4642      	mov	r2, r8
 8002158:	2600      	movs	r6, #0
 800215a:	2a0a      	cmp	r2, #10
 800215c:	dc00      	bgt.n	8002160 <__aeabi_dmul+0x1d0>
 800215e:	e75a      	b.n	8002016 <__aeabi_dmul+0x86>
 8002160:	e79c      	b.n	800209c <__aeabi_dmul+0x10c>
 8002162:	4653      	mov	r3, sl
 8002164:	4303      	orrs	r3, r0
 8002166:	4699      	mov	r9, r3
 8002168:	d054      	beq.n	8002214 <__aeabi_dmul+0x284>
 800216a:	4653      	mov	r3, sl
 800216c:	2b00      	cmp	r3, #0
 800216e:	d100      	bne.n	8002172 <__aeabi_dmul+0x1e2>
 8002170:	e177      	b.n	8002462 <__aeabi_dmul+0x4d2>
 8002172:	4650      	mov	r0, sl
 8002174:	f000 feec 	bl	8002f50 <__clzsi2>
 8002178:	230b      	movs	r3, #11
 800217a:	425b      	negs	r3, r3
 800217c:	469c      	mov	ip, r3
 800217e:	0002      	movs	r2, r0
 8002180:	4484      	add	ip, r0
 8002182:	0011      	movs	r1, r2
 8002184:	4650      	mov	r0, sl
 8002186:	3908      	subs	r1, #8
 8002188:	4088      	lsls	r0, r1
 800218a:	231d      	movs	r3, #29
 800218c:	4680      	mov	r8, r0
 800218e:	4660      	mov	r0, ip
 8002190:	1a1b      	subs	r3, r3, r0
 8002192:	0020      	movs	r0, r4
 8002194:	40d8      	lsrs	r0, r3
 8002196:	0003      	movs	r3, r0
 8002198:	4640      	mov	r0, r8
 800219a:	4303      	orrs	r3, r0
 800219c:	469a      	mov	sl, r3
 800219e:	0023      	movs	r3, r4
 80021a0:	408b      	lsls	r3, r1
 80021a2:	4699      	mov	r9, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	4d44      	ldr	r5, [pc, #272]	@ (80022b8 <__aeabi_dmul+0x328>)
 80021a8:	4698      	mov	r8, r3
 80021aa:	1aad      	subs	r5, r5, r2
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	e715      	b.n	8001fdc <__aeabi_dmul+0x4c>
 80021b0:	4652      	mov	r2, sl
 80021b2:	4302      	orrs	r2, r0
 80021b4:	4691      	mov	r9, r2
 80021b6:	d126      	bne.n	8002206 <__aeabi_dmul+0x276>
 80021b8:	2200      	movs	r2, #0
 80021ba:	001d      	movs	r5, r3
 80021bc:	2302      	movs	r3, #2
 80021be:	4692      	mov	sl, r2
 80021c0:	3208      	adds	r2, #8
 80021c2:	4690      	mov	r8, r2
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	e709      	b.n	8001fdc <__aeabi_dmul+0x4c>
 80021c8:	2400      	movs	r4, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <__aeabi_dmul+0x314>)
 80021ce:	e735      	b.n	800203c <__aeabi_dmul+0xac>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2480      	movs	r4, #128	@ 0x80
 80021d4:	469b      	mov	fp, r3
 80021d6:	0324      	lsls	r4, r4, #12
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <__aeabi_dmul+0x314>)
 80021da:	e72f      	b.n	800203c <__aeabi_dmul+0xac>
 80021dc:	2202      	movs	r2, #2
 80021de:	4641      	mov	r1, r8
 80021e0:	4311      	orrs	r1, r2
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	4694      	mov	ip, r2
 80021e8:	002a      	movs	r2, r5
 80021ea:	4462      	add	r2, ip
 80021ec:	4688      	mov	r8, r1
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	290a      	cmp	r1, #10
 80021f2:	dd00      	ble.n	80021f6 <__aeabi_dmul+0x266>
 80021f4:	e752      	b.n	800209c <__aeabi_dmul+0x10c>
 80021f6:	465a      	mov	r2, fp
 80021f8:	2000      	movs	r0, #0
 80021fa:	9900      	ldr	r1, [sp, #0]
 80021fc:	0004      	movs	r4, r0
 80021fe:	404a      	eors	r2, r1
 8002200:	4693      	mov	fp, r2
 8002202:	2602      	movs	r6, #2
 8002204:	e70b      	b.n	800201e <__aeabi_dmul+0x8e>
 8002206:	220c      	movs	r2, #12
 8002208:	001d      	movs	r5, r3
 800220a:	2303      	movs	r3, #3
 800220c:	4681      	mov	r9, r0
 800220e:	4690      	mov	r8, r2
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	e6e3      	b.n	8001fdc <__aeabi_dmul+0x4c>
 8002214:	2300      	movs	r3, #0
 8002216:	469a      	mov	sl, r3
 8002218:	3304      	adds	r3, #4
 800221a:	4698      	mov	r8, r3
 800221c:	3b03      	subs	r3, #3
 800221e:	2500      	movs	r5, #0
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	e6db      	b.n	8001fdc <__aeabi_dmul+0x4c>
 8002224:	4642      	mov	r2, r8
 8002226:	3301      	adds	r3, #1
 8002228:	431a      	orrs	r2, r3
 800222a:	002b      	movs	r3, r5
 800222c:	4690      	mov	r8, r2
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	4642      	mov	r2, r8
 8002234:	2400      	movs	r4, #0
 8002236:	2000      	movs	r0, #0
 8002238:	2601      	movs	r6, #1
 800223a:	2a0a      	cmp	r2, #10
 800223c:	dc00      	bgt.n	8002240 <__aeabi_dmul+0x2b0>
 800223e:	e6ea      	b.n	8002016 <__aeabi_dmul+0x86>
 8002240:	e72c      	b.n	800209c <__aeabi_dmul+0x10c>
 8002242:	2201      	movs	r2, #1
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	2a38      	cmp	r2, #56	@ 0x38
 8002248:	dd00      	ble.n	800224c <__aeabi_dmul+0x2bc>
 800224a:	e6f4      	b.n	8002036 <__aeabi_dmul+0xa6>
 800224c:	2a1f      	cmp	r2, #31
 800224e:	dc00      	bgt.n	8002252 <__aeabi_dmul+0x2c2>
 8002250:	e12a      	b.n	80024a8 <__aeabi_dmul+0x518>
 8002252:	211f      	movs	r1, #31
 8002254:	4249      	negs	r1, r1
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	0021      	movs	r1, r4
 800225a:	40d9      	lsrs	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	2a20      	cmp	r2, #32
 8002260:	d005      	beq.n	800226e <__aeabi_dmul+0x2de>
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <__aeabi_dmul+0x32c>)
 8002264:	9d01      	ldr	r5, [sp, #4]
 8002266:	4694      	mov	ip, r2
 8002268:	4465      	add	r5, ip
 800226a:	40ac      	lsls	r4, r5
 800226c:	4320      	orrs	r0, r4
 800226e:	1e42      	subs	r2, r0, #1
 8002270:	4190      	sbcs	r0, r2
 8002272:	4318      	orrs	r0, r3
 8002274:	2307      	movs	r3, #7
 8002276:	0019      	movs	r1, r3
 8002278:	2400      	movs	r4, #0
 800227a:	4001      	ands	r1, r0
 800227c:	4203      	tst	r3, r0
 800227e:	d00c      	beq.n	800229a <__aeabi_dmul+0x30a>
 8002280:	230f      	movs	r3, #15
 8002282:	4003      	ands	r3, r0
 8002284:	2b04      	cmp	r3, #4
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x2fa>
 8002288:	e140      	b.n	800250c <__aeabi_dmul+0x57c>
 800228a:	1d03      	adds	r3, r0, #4
 800228c:	4283      	cmp	r3, r0
 800228e:	41a4      	sbcs	r4, r4
 8002290:	0018      	movs	r0, r3
 8002292:	4264      	negs	r4, r4
 8002294:	0761      	lsls	r1, r4, #29
 8002296:	0264      	lsls	r4, r4, #9
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	08c2      	lsrs	r2, r0, #3
 800229c:	2300      	movs	r3, #0
 800229e:	430a      	orrs	r2, r1
 80022a0:	e6cc      	b.n	800203c <__aeabi_dmul+0xac>
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	000007ff 	.word	0x000007ff
 80022a8:	fffffc01 	.word	0xfffffc01
 80022ac:	000003ff 	.word	0x000003ff
 80022b0:	feffffff 	.word	0xfeffffff
 80022b4:	000007fe 	.word	0x000007fe
 80022b8:	fffffc0d 	.word	0xfffffc0d
 80022bc:	0000043e 	.word	0x0000043e
 80022c0:	4649      	mov	r1, r9
 80022c2:	464a      	mov	r2, r9
 80022c4:	0409      	lsls	r1, r1, #16
 80022c6:	0c09      	lsrs	r1, r1, #16
 80022c8:	000d      	movs	r5, r1
 80022ca:	0c16      	lsrs	r6, r2, #16
 80022cc:	0c02      	lsrs	r2, r0, #16
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c00      	lsrs	r0, r0, #16
 80022d2:	4345      	muls	r5, r0
 80022d4:	46ac      	mov	ip, r5
 80022d6:	0005      	movs	r5, r0
 80022d8:	4375      	muls	r5, r6
 80022da:	46a8      	mov	r8, r5
 80022dc:	0015      	movs	r5, r2
 80022de:	000f      	movs	r7, r1
 80022e0:	4375      	muls	r5, r6
 80022e2:	9200      	str	r2, [sp, #0]
 80022e4:	9502      	str	r5, [sp, #8]
 80022e6:	002a      	movs	r2, r5
 80022e8:	9d00      	ldr	r5, [sp, #0]
 80022ea:	436f      	muls	r7, r5
 80022ec:	4665      	mov	r5, ip
 80022ee:	0c2d      	lsrs	r5, r5, #16
 80022f0:	46a9      	mov	r9, r5
 80022f2:	4447      	add	r7, r8
 80022f4:	444f      	add	r7, r9
 80022f6:	45b8      	cmp	r8, r7
 80022f8:	d905      	bls.n	8002306 <__aeabi_dmul+0x376>
 80022fa:	0015      	movs	r5, r2
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0252      	lsls	r2, r2, #9
 8002300:	4690      	mov	r8, r2
 8002302:	4445      	add	r5, r8
 8002304:	9502      	str	r5, [sp, #8]
 8002306:	0c3d      	lsrs	r5, r7, #16
 8002308:	9503      	str	r5, [sp, #12]
 800230a:	4665      	mov	r5, ip
 800230c:	042d      	lsls	r5, r5, #16
 800230e:	043f      	lsls	r7, r7, #16
 8002310:	0c2d      	lsrs	r5, r5, #16
 8002312:	46ac      	mov	ip, r5
 8002314:	003d      	movs	r5, r7
 8002316:	4465      	add	r5, ip
 8002318:	9504      	str	r5, [sp, #16]
 800231a:	0c25      	lsrs	r5, r4, #16
 800231c:	0424      	lsls	r4, r4, #16
 800231e:	0c24      	lsrs	r4, r4, #16
 8002320:	46ac      	mov	ip, r5
 8002322:	0025      	movs	r5, r4
 8002324:	4375      	muls	r5, r6
 8002326:	46a8      	mov	r8, r5
 8002328:	4665      	mov	r5, ip
 800232a:	000f      	movs	r7, r1
 800232c:	4369      	muls	r1, r5
 800232e:	4441      	add	r1, r8
 8002330:	4689      	mov	r9, r1
 8002332:	4367      	muls	r7, r4
 8002334:	0c39      	lsrs	r1, r7, #16
 8002336:	4449      	add	r1, r9
 8002338:	436e      	muls	r6, r5
 800233a:	4588      	cmp	r8, r1
 800233c:	d903      	bls.n	8002346 <__aeabi_dmul+0x3b6>
 800233e:	2280      	movs	r2, #128	@ 0x80
 8002340:	0252      	lsls	r2, r2, #9
 8002342:	4690      	mov	r8, r2
 8002344:	4446      	add	r6, r8
 8002346:	0c0d      	lsrs	r5, r1, #16
 8002348:	46a8      	mov	r8, r5
 800234a:	0035      	movs	r5, r6
 800234c:	4445      	add	r5, r8
 800234e:	9505      	str	r5, [sp, #20]
 8002350:	9d03      	ldr	r5, [sp, #12]
 8002352:	043f      	lsls	r7, r7, #16
 8002354:	46a8      	mov	r8, r5
 8002356:	0c3f      	lsrs	r7, r7, #16
 8002358:	0409      	lsls	r1, r1, #16
 800235a:	19c9      	adds	r1, r1, r7
 800235c:	4488      	add	r8, r1
 800235e:	4645      	mov	r5, r8
 8002360:	9503      	str	r5, [sp, #12]
 8002362:	4655      	mov	r5, sl
 8002364:	042e      	lsls	r6, r5, #16
 8002366:	0c36      	lsrs	r6, r6, #16
 8002368:	0c2f      	lsrs	r7, r5, #16
 800236a:	0035      	movs	r5, r6
 800236c:	4345      	muls	r5, r0
 800236e:	4378      	muls	r0, r7
 8002370:	4681      	mov	r9, r0
 8002372:	0038      	movs	r0, r7
 8002374:	46a8      	mov	r8, r5
 8002376:	0c2d      	lsrs	r5, r5, #16
 8002378:	46aa      	mov	sl, r5
 800237a:	9a00      	ldr	r2, [sp, #0]
 800237c:	4350      	muls	r0, r2
 800237e:	4372      	muls	r2, r6
 8002380:	444a      	add	r2, r9
 8002382:	4452      	add	r2, sl
 8002384:	4591      	cmp	r9, r2
 8002386:	d903      	bls.n	8002390 <__aeabi_dmul+0x400>
 8002388:	2580      	movs	r5, #128	@ 0x80
 800238a:	026d      	lsls	r5, r5, #9
 800238c:	46a9      	mov	r9, r5
 800238e:	4448      	add	r0, r9
 8002390:	0c15      	lsrs	r5, r2, #16
 8002392:	46a9      	mov	r9, r5
 8002394:	4645      	mov	r5, r8
 8002396:	042d      	lsls	r5, r5, #16
 8002398:	0c2d      	lsrs	r5, r5, #16
 800239a:	46a8      	mov	r8, r5
 800239c:	4665      	mov	r5, ip
 800239e:	437d      	muls	r5, r7
 80023a0:	0412      	lsls	r2, r2, #16
 80023a2:	4448      	add	r0, r9
 80023a4:	4490      	add	r8, r2
 80023a6:	46a9      	mov	r9, r5
 80023a8:	0032      	movs	r2, r6
 80023aa:	4665      	mov	r5, ip
 80023ac:	4362      	muls	r2, r4
 80023ae:	436e      	muls	r6, r5
 80023b0:	437c      	muls	r4, r7
 80023b2:	0c17      	lsrs	r7, r2, #16
 80023b4:	1936      	adds	r6, r6, r4
 80023b6:	19bf      	adds	r7, r7, r6
 80023b8:	42bc      	cmp	r4, r7
 80023ba:	d903      	bls.n	80023c4 <__aeabi_dmul+0x434>
 80023bc:	2480      	movs	r4, #128	@ 0x80
 80023be:	0264      	lsls	r4, r4, #9
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44e1      	add	r9, ip
 80023c4:	9c02      	ldr	r4, [sp, #8]
 80023c6:	9e03      	ldr	r6, [sp, #12]
 80023c8:	46a4      	mov	ip, r4
 80023ca:	9d05      	ldr	r5, [sp, #20]
 80023cc:	4466      	add	r6, ip
 80023ce:	428e      	cmp	r6, r1
 80023d0:	4189      	sbcs	r1, r1
 80023d2:	46ac      	mov	ip, r5
 80023d4:	0412      	lsls	r2, r2, #16
 80023d6:	043c      	lsls	r4, r7, #16
 80023d8:	0c12      	lsrs	r2, r2, #16
 80023da:	18a2      	adds	r2, r4, r2
 80023dc:	4462      	add	r2, ip
 80023de:	4249      	negs	r1, r1
 80023e0:	1854      	adds	r4, r2, r1
 80023e2:	4446      	add	r6, r8
 80023e4:	46a4      	mov	ip, r4
 80023e6:	4546      	cmp	r6, r8
 80023e8:	41a4      	sbcs	r4, r4
 80023ea:	4682      	mov	sl, r0
 80023ec:	4264      	negs	r4, r4
 80023ee:	46a0      	mov	r8, r4
 80023f0:	42aa      	cmp	r2, r5
 80023f2:	4192      	sbcs	r2, r2
 80023f4:	458c      	cmp	ip, r1
 80023f6:	4189      	sbcs	r1, r1
 80023f8:	44e2      	add	sl, ip
 80023fa:	44d0      	add	r8, sl
 80023fc:	4249      	negs	r1, r1
 80023fe:	4252      	negs	r2, r2
 8002400:	430a      	orrs	r2, r1
 8002402:	45a0      	cmp	r8, r4
 8002404:	41a4      	sbcs	r4, r4
 8002406:	4582      	cmp	sl, r0
 8002408:	4189      	sbcs	r1, r1
 800240a:	4264      	negs	r4, r4
 800240c:	4249      	negs	r1, r1
 800240e:	430c      	orrs	r4, r1
 8002410:	4641      	mov	r1, r8
 8002412:	0c3f      	lsrs	r7, r7, #16
 8002414:	19d2      	adds	r2, r2, r7
 8002416:	1912      	adds	r2, r2, r4
 8002418:	0dcc      	lsrs	r4, r1, #23
 800241a:	9904      	ldr	r1, [sp, #16]
 800241c:	0270      	lsls	r0, r6, #9
 800241e:	4308      	orrs	r0, r1
 8002420:	1e41      	subs	r1, r0, #1
 8002422:	4188      	sbcs	r0, r1
 8002424:	4641      	mov	r1, r8
 8002426:	444a      	add	r2, r9
 8002428:	0df6      	lsrs	r6, r6, #23
 800242a:	0252      	lsls	r2, r2, #9
 800242c:	4330      	orrs	r0, r6
 800242e:	0249      	lsls	r1, r1, #9
 8002430:	4314      	orrs	r4, r2
 8002432:	4308      	orrs	r0, r1
 8002434:	01d2      	lsls	r2, r2, #7
 8002436:	d535      	bpl.n	80024a4 <__aeabi_dmul+0x514>
 8002438:	2201      	movs	r2, #1
 800243a:	0843      	lsrs	r3, r0, #1
 800243c:	4002      	ands	r2, r0
 800243e:	4313      	orrs	r3, r2
 8002440:	07e0      	lsls	r0, r4, #31
 8002442:	4318      	orrs	r0, r3
 8002444:	0864      	lsrs	r4, r4, #1
 8002446:	e634      	b.n	80020b2 <__aeabi_dmul+0x122>
 8002448:	9b00      	ldr	r3, [sp, #0]
 800244a:	46a2      	mov	sl, r4
 800244c:	469b      	mov	fp, r3
 800244e:	4681      	mov	r9, r0
 8002450:	2480      	movs	r4, #128	@ 0x80
 8002452:	4653      	mov	r3, sl
 8002454:	0324      	lsls	r4, r4, #12
 8002456:	431c      	orrs	r4, r3
 8002458:	0324      	lsls	r4, r4, #12
 800245a:	464a      	mov	r2, r9
 800245c:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <__aeabi_dmul+0x588>)
 800245e:	0b24      	lsrs	r4, r4, #12
 8002460:	e5ec      	b.n	800203c <__aeabi_dmul+0xac>
 8002462:	f000 fd75 	bl	8002f50 <__clzsi2>
 8002466:	2315      	movs	r3, #21
 8002468:	469c      	mov	ip, r3
 800246a:	4484      	add	ip, r0
 800246c:	0002      	movs	r2, r0
 800246e:	4663      	mov	r3, ip
 8002470:	3220      	adds	r2, #32
 8002472:	2b1c      	cmp	r3, #28
 8002474:	dc00      	bgt.n	8002478 <__aeabi_dmul+0x4e8>
 8002476:	e684      	b.n	8002182 <__aeabi_dmul+0x1f2>
 8002478:	2300      	movs	r3, #0
 800247a:	4699      	mov	r9, r3
 800247c:	0023      	movs	r3, r4
 800247e:	3808      	subs	r0, #8
 8002480:	4083      	lsls	r3, r0
 8002482:	469a      	mov	sl, r3
 8002484:	e68e      	b.n	80021a4 <__aeabi_dmul+0x214>
 8002486:	f000 fd63 	bl	8002f50 <__clzsi2>
 800248a:	0002      	movs	r2, r0
 800248c:	0003      	movs	r3, r0
 800248e:	3215      	adds	r2, #21
 8002490:	3320      	adds	r3, #32
 8002492:	2a1c      	cmp	r2, #28
 8002494:	dc00      	bgt.n	8002498 <__aeabi_dmul+0x508>
 8002496:	e64e      	b.n	8002136 <__aeabi_dmul+0x1a6>
 8002498:	0002      	movs	r2, r0
 800249a:	0034      	movs	r4, r6
 800249c:	3a08      	subs	r2, #8
 800249e:	2000      	movs	r0, #0
 80024a0:	4094      	lsls	r4, r2
 80024a2:	e652      	b.n	800214a <__aeabi_dmul+0x1ba>
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	e604      	b.n	80020b2 <__aeabi_dmul+0x122>
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <__aeabi_dmul+0x58c>)
 80024aa:	0021      	movs	r1, r4
 80024ac:	469c      	mov	ip, r3
 80024ae:	0003      	movs	r3, r0
 80024b0:	9d01      	ldr	r5, [sp, #4]
 80024b2:	40d3      	lsrs	r3, r2
 80024b4:	4465      	add	r5, ip
 80024b6:	40a9      	lsls	r1, r5
 80024b8:	4319      	orrs	r1, r3
 80024ba:	0003      	movs	r3, r0
 80024bc:	40ab      	lsls	r3, r5
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	4183      	sbcs	r3, r0
 80024c2:	4319      	orrs	r1, r3
 80024c4:	0008      	movs	r0, r1
 80024c6:	40d4      	lsrs	r4, r2
 80024c8:	074b      	lsls	r3, r1, #29
 80024ca:	d009      	beq.n	80024e0 <__aeabi_dmul+0x550>
 80024cc:	230f      	movs	r3, #15
 80024ce:	400b      	ands	r3, r1
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d005      	beq.n	80024e0 <__aeabi_dmul+0x550>
 80024d4:	1d0b      	adds	r3, r1, #4
 80024d6:	428b      	cmp	r3, r1
 80024d8:	4180      	sbcs	r0, r0
 80024da:	4240      	negs	r0, r0
 80024dc:	1824      	adds	r4, r4, r0
 80024de:	0018      	movs	r0, r3
 80024e0:	0223      	lsls	r3, r4, #8
 80024e2:	d400      	bmi.n	80024e6 <__aeabi_dmul+0x556>
 80024e4:	e6d6      	b.n	8002294 <__aeabi_dmul+0x304>
 80024e6:	2301      	movs	r3, #1
 80024e8:	2400      	movs	r4, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	e5a6      	b.n	800203c <__aeabi_dmul+0xac>
 80024ee:	290f      	cmp	r1, #15
 80024f0:	d1aa      	bne.n	8002448 <__aeabi_dmul+0x4b8>
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	4652      	mov	r2, sl
 80024f6:	031b      	lsls	r3, r3, #12
 80024f8:	421a      	tst	r2, r3
 80024fa:	d0a9      	beq.n	8002450 <__aeabi_dmul+0x4c0>
 80024fc:	421c      	tst	r4, r3
 80024fe:	d1a7      	bne.n	8002450 <__aeabi_dmul+0x4c0>
 8002500:	431c      	orrs	r4, r3
 8002502:	9b00      	ldr	r3, [sp, #0]
 8002504:	0002      	movs	r2, r0
 8002506:	469b      	mov	fp, r3
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <__aeabi_dmul+0x588>)
 800250a:	e597      	b.n	800203c <__aeabi_dmul+0xac>
 800250c:	2400      	movs	r4, #0
 800250e:	e6c1      	b.n	8002294 <__aeabi_dmul+0x304>
 8002510:	2400      	movs	r4, #0
 8002512:	4b01      	ldr	r3, [pc, #4]	@ (8002518 <__aeabi_dmul+0x588>)
 8002514:	0022      	movs	r2, r4
 8002516:	e591      	b.n	800203c <__aeabi_dmul+0xac>
 8002518:	000007ff 	.word	0x000007ff
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_dsub>:
 8002520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002522:	464e      	mov	r6, r9
 8002524:	4645      	mov	r5, r8
 8002526:	46de      	mov	lr, fp
 8002528:	4657      	mov	r7, sl
 800252a:	b5e0      	push	{r5, r6, r7, lr}
 800252c:	b085      	sub	sp, #20
 800252e:	9000      	str	r0, [sp, #0]
 8002530:	9101      	str	r1, [sp, #4]
 8002532:	030c      	lsls	r4, r1, #12
 8002534:	004f      	lsls	r7, r1, #1
 8002536:	0fce      	lsrs	r6, r1, #31
 8002538:	0a61      	lsrs	r1, r4, #9
 800253a:	9c00      	ldr	r4, [sp, #0]
 800253c:	46b0      	mov	r8, r6
 800253e:	0f64      	lsrs	r4, r4, #29
 8002540:	430c      	orrs	r4, r1
 8002542:	9900      	ldr	r1, [sp, #0]
 8002544:	0d7f      	lsrs	r7, r7, #21
 8002546:	00c8      	lsls	r0, r1, #3
 8002548:	0011      	movs	r1, r2
 800254a:	001a      	movs	r2, r3
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	469c      	mov	ip, r3
 8002550:	9100      	str	r1, [sp, #0]
 8002552:	9201      	str	r2, [sp, #4]
 8002554:	0051      	lsls	r1, r2, #1
 8002556:	0d4b      	lsrs	r3, r1, #21
 8002558:	4699      	mov	r9, r3
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	9d00      	ldr	r5, [sp, #0]
 800255e:	0fd9      	lsrs	r1, r3, #31
 8002560:	4663      	mov	r3, ip
 8002562:	0f6a      	lsrs	r2, r5, #29
 8002564:	0a5b      	lsrs	r3, r3, #9
 8002566:	4313      	orrs	r3, r2
 8002568:	00ea      	lsls	r2, r5, #3
 800256a:	4694      	mov	ip, r2
 800256c:	4693      	mov	fp, r2
 800256e:	4ac1      	ldr	r2, [pc, #772]	@ (8002874 <__aeabi_dsub+0x354>)
 8002570:	9003      	str	r0, [sp, #12]
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	4591      	cmp	r9, r2
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x5a>
 8002578:	e0cd      	b.n	8002716 <__aeabi_dsub+0x1f6>
 800257a:	2501      	movs	r5, #1
 800257c:	4069      	eors	r1, r5
 800257e:	464d      	mov	r5, r9
 8002580:	1b7d      	subs	r5, r7, r5
 8002582:	46aa      	mov	sl, r5
 8002584:	428e      	cmp	r6, r1
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x6a>
 8002588:	e080      	b.n	800268c <__aeabi_dsub+0x16c>
 800258a:	2d00      	cmp	r5, #0
 800258c:	dc00      	bgt.n	8002590 <__aeabi_dsub+0x70>
 800258e:	e335      	b.n	8002bfc <__aeabi_dsub+0x6dc>
 8002590:	4649      	mov	r1, r9
 8002592:	2900      	cmp	r1, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x78>
 8002596:	e0df      	b.n	8002758 <__aeabi_dsub+0x238>
 8002598:	4297      	cmp	r7, r2
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x7e>
 800259c:	e194      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 800259e:	4652      	mov	r2, sl
 80025a0:	2501      	movs	r5, #1
 80025a2:	2a38      	cmp	r2, #56	@ 0x38
 80025a4:	dc19      	bgt.n	80025da <__aeabi_dsub+0xba>
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	9b02      	ldr	r3, [sp, #8]
 80025aa:	0412      	lsls	r2, r2, #16
 80025ac:	4313      	orrs	r3, r2
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	4652      	mov	r2, sl
 80025b2:	2a1f      	cmp	r2, #31
 80025b4:	dd00      	ble.n	80025b8 <__aeabi_dsub+0x98>
 80025b6:	e1e3      	b.n	8002980 <__aeabi_dsub+0x460>
 80025b8:	4653      	mov	r3, sl
 80025ba:	2220      	movs	r2, #32
 80025bc:	4661      	mov	r1, ip
 80025be:	9d02      	ldr	r5, [sp, #8]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	4095      	lsls	r5, r2
 80025c4:	40d9      	lsrs	r1, r3
 80025c6:	430d      	orrs	r5, r1
 80025c8:	4661      	mov	r1, ip
 80025ca:	4091      	lsls	r1, r2
 80025cc:	000a      	movs	r2, r1
 80025ce:	1e51      	subs	r1, r2, #1
 80025d0:	418a      	sbcs	r2, r1
 80025d2:	4315      	orrs	r5, r2
 80025d4:	9a02      	ldr	r2, [sp, #8]
 80025d6:	40da      	lsrs	r2, r3
 80025d8:	1aa4      	subs	r4, r4, r2
 80025da:	1b45      	subs	r5, r0, r5
 80025dc:	42a8      	cmp	r0, r5
 80025de:	4180      	sbcs	r0, r0
 80025e0:	4240      	negs	r0, r0
 80025e2:	1a24      	subs	r4, r4, r0
 80025e4:	0223      	lsls	r3, r4, #8
 80025e6:	d400      	bmi.n	80025ea <__aeabi_dsub+0xca>
 80025e8:	e13d      	b.n	8002866 <__aeabi_dsub+0x346>
 80025ea:	0264      	lsls	r4, r4, #9
 80025ec:	0a64      	lsrs	r4, r4, #9
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0xd4>
 80025f2:	e147      	b.n	8002884 <__aeabi_dsub+0x364>
 80025f4:	0020      	movs	r0, r4
 80025f6:	f000 fcab 	bl	8002f50 <__clzsi2>
 80025fa:	0003      	movs	r3, r0
 80025fc:	3b08      	subs	r3, #8
 80025fe:	2120      	movs	r1, #32
 8002600:	0028      	movs	r0, r5
 8002602:	1aca      	subs	r2, r1, r3
 8002604:	40d0      	lsrs	r0, r2
 8002606:	409c      	lsls	r4, r3
 8002608:	0002      	movs	r2, r0
 800260a:	409d      	lsls	r5, r3
 800260c:	4322      	orrs	r2, r4
 800260e:	429f      	cmp	r7, r3
 8002610:	dd00      	ble.n	8002614 <__aeabi_dsub+0xf4>
 8002612:	e177      	b.n	8002904 <__aeabi_dsub+0x3e4>
 8002614:	1bd8      	subs	r0, r3, r7
 8002616:	3001      	adds	r0, #1
 8002618:	1a09      	subs	r1, r1, r0
 800261a:	002c      	movs	r4, r5
 800261c:	408d      	lsls	r5, r1
 800261e:	40c4      	lsrs	r4, r0
 8002620:	1e6b      	subs	r3, r5, #1
 8002622:	419d      	sbcs	r5, r3
 8002624:	0013      	movs	r3, r2
 8002626:	40c2      	lsrs	r2, r0
 8002628:	408b      	lsls	r3, r1
 800262a:	4325      	orrs	r5, r4
 800262c:	2700      	movs	r7, #0
 800262e:	0014      	movs	r4, r2
 8002630:	431d      	orrs	r5, r3
 8002632:	076b      	lsls	r3, r5, #29
 8002634:	d009      	beq.n	800264a <__aeabi_dsub+0x12a>
 8002636:	230f      	movs	r3, #15
 8002638:	402b      	ands	r3, r5
 800263a:	2b04      	cmp	r3, #4
 800263c:	d005      	beq.n	800264a <__aeabi_dsub+0x12a>
 800263e:	1d2b      	adds	r3, r5, #4
 8002640:	42ab      	cmp	r3, r5
 8002642:	41ad      	sbcs	r5, r5
 8002644:	426d      	negs	r5, r5
 8002646:	1964      	adds	r4, r4, r5
 8002648:	001d      	movs	r5, r3
 800264a:	0223      	lsls	r3, r4, #8
 800264c:	d400      	bmi.n	8002650 <__aeabi_dsub+0x130>
 800264e:	e140      	b.n	80028d2 <__aeabi_dsub+0x3b2>
 8002650:	4a88      	ldr	r2, [pc, #544]	@ (8002874 <__aeabi_dsub+0x354>)
 8002652:	3701      	adds	r7, #1
 8002654:	4297      	cmp	r7, r2
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x13a>
 8002658:	e101      	b.n	800285e <__aeabi_dsub+0x33e>
 800265a:	2601      	movs	r6, #1
 800265c:	4643      	mov	r3, r8
 800265e:	4986      	ldr	r1, [pc, #536]	@ (8002878 <__aeabi_dsub+0x358>)
 8002660:	08ed      	lsrs	r5, r5, #3
 8002662:	4021      	ands	r1, r4
 8002664:	074a      	lsls	r2, r1, #29
 8002666:	432a      	orrs	r2, r5
 8002668:	057c      	lsls	r4, r7, #21
 800266a:	024d      	lsls	r5, r1, #9
 800266c:	0b2d      	lsrs	r5, r5, #12
 800266e:	0d64      	lsrs	r4, r4, #21
 8002670:	401e      	ands	r6, r3
 8002672:	0524      	lsls	r4, r4, #20
 8002674:	432c      	orrs	r4, r5
 8002676:	07f6      	lsls	r6, r6, #31
 8002678:	4334      	orrs	r4, r6
 800267a:	0010      	movs	r0, r2
 800267c:	0021      	movs	r1, r4
 800267e:	b005      	add	sp, #20
 8002680:	bcf0      	pop	{r4, r5, r6, r7}
 8002682:	46bb      	mov	fp, r7
 8002684:	46b2      	mov	sl, r6
 8002686:	46a9      	mov	r9, r5
 8002688:	46a0      	mov	r8, r4
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	2d00      	cmp	r5, #0
 800268e:	dc00      	bgt.n	8002692 <__aeabi_dsub+0x172>
 8002690:	e2d0      	b.n	8002c34 <__aeabi_dsub+0x714>
 8002692:	4649      	mov	r1, r9
 8002694:	2900      	cmp	r1, #0
 8002696:	d000      	beq.n	800269a <__aeabi_dsub+0x17a>
 8002698:	e0d4      	b.n	8002844 <__aeabi_dsub+0x324>
 800269a:	4661      	mov	r1, ip
 800269c:	9b02      	ldr	r3, [sp, #8]
 800269e:	4319      	orrs	r1, r3
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x184>
 80026a2:	e12b      	b.n	80028fc <__aeabi_dsub+0x3dc>
 80026a4:	1e69      	subs	r1, r5, #1
 80026a6:	2d01      	cmp	r5, #1
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x18c>
 80026aa:	e1d9      	b.n	8002a60 <__aeabi_dsub+0x540>
 80026ac:	4295      	cmp	r5, r2
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x192>
 80026b0:	e10a      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 80026b2:	2501      	movs	r5, #1
 80026b4:	2938      	cmp	r1, #56	@ 0x38
 80026b6:	dc17      	bgt.n	80026e8 <__aeabi_dsub+0x1c8>
 80026b8:	468a      	mov	sl, r1
 80026ba:	4653      	mov	r3, sl
 80026bc:	2b1f      	cmp	r3, #31
 80026be:	dd00      	ble.n	80026c2 <__aeabi_dsub+0x1a2>
 80026c0:	e1e7      	b.n	8002a92 <__aeabi_dsub+0x572>
 80026c2:	2220      	movs	r2, #32
 80026c4:	1ad2      	subs	r2, r2, r3
 80026c6:	9b02      	ldr	r3, [sp, #8]
 80026c8:	4661      	mov	r1, ip
 80026ca:	4093      	lsls	r3, r2
 80026cc:	001d      	movs	r5, r3
 80026ce:	4653      	mov	r3, sl
 80026d0:	40d9      	lsrs	r1, r3
 80026d2:	4663      	mov	r3, ip
 80026d4:	4093      	lsls	r3, r2
 80026d6:	001a      	movs	r2, r3
 80026d8:	430d      	orrs	r5, r1
 80026da:	1e51      	subs	r1, r2, #1
 80026dc:	418a      	sbcs	r2, r1
 80026de:	4653      	mov	r3, sl
 80026e0:	4315      	orrs	r5, r2
 80026e2:	9a02      	ldr	r2, [sp, #8]
 80026e4:	40da      	lsrs	r2, r3
 80026e6:	18a4      	adds	r4, r4, r2
 80026e8:	182d      	adds	r5, r5, r0
 80026ea:	4285      	cmp	r5, r0
 80026ec:	4180      	sbcs	r0, r0
 80026ee:	4240      	negs	r0, r0
 80026f0:	1824      	adds	r4, r4, r0
 80026f2:	0223      	lsls	r3, r4, #8
 80026f4:	d400      	bmi.n	80026f8 <__aeabi_dsub+0x1d8>
 80026f6:	e0b6      	b.n	8002866 <__aeabi_dsub+0x346>
 80026f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <__aeabi_dsub+0x354>)
 80026fa:	3701      	adds	r7, #1
 80026fc:	429f      	cmp	r7, r3
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x1e2>
 8002700:	e0ad      	b.n	800285e <__aeabi_dsub+0x33e>
 8002702:	2101      	movs	r1, #1
 8002704:	4b5c      	ldr	r3, [pc, #368]	@ (8002878 <__aeabi_dsub+0x358>)
 8002706:	086a      	lsrs	r2, r5, #1
 8002708:	401c      	ands	r4, r3
 800270a:	4029      	ands	r1, r5
 800270c:	430a      	orrs	r2, r1
 800270e:	07e5      	lsls	r5, r4, #31
 8002710:	4315      	orrs	r5, r2
 8002712:	0864      	lsrs	r4, r4, #1
 8002714:	e78d      	b.n	8002632 <__aeabi_dsub+0x112>
 8002716:	4a59      	ldr	r2, [pc, #356]	@ (800287c <__aeabi_dsub+0x35c>)
 8002718:	9b02      	ldr	r3, [sp, #8]
 800271a:	4692      	mov	sl, r2
 800271c:	4662      	mov	r2, ip
 800271e:	44ba      	add	sl, r7
 8002720:	431a      	orrs	r2, r3
 8002722:	d02c      	beq.n	800277e <__aeabi_dsub+0x25e>
 8002724:	428e      	cmp	r6, r1
 8002726:	d02e      	beq.n	8002786 <__aeabi_dsub+0x266>
 8002728:	4652      	mov	r2, sl
 800272a:	2a00      	cmp	r2, #0
 800272c:	d060      	beq.n	80027f0 <__aeabi_dsub+0x2d0>
 800272e:	2f00      	cmp	r7, #0
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x214>
 8002732:	e0db      	b.n	80028ec <__aeabi_dsub+0x3cc>
 8002734:	4663      	mov	r3, ip
 8002736:	000e      	movs	r6, r1
 8002738:	9c02      	ldr	r4, [sp, #8]
 800273a:	08d8      	lsrs	r0, r3, #3
 800273c:	0762      	lsls	r2, r4, #29
 800273e:	4302      	orrs	r2, r0
 8002740:	08e4      	lsrs	r4, r4, #3
 8002742:	0013      	movs	r3, r2
 8002744:	4323      	orrs	r3, r4
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x22a>
 8002748:	e254      	b.n	8002bf4 <__aeabi_dsub+0x6d4>
 800274a:	2580      	movs	r5, #128	@ 0x80
 800274c:	032d      	lsls	r5, r5, #12
 800274e:	4325      	orrs	r5, r4
 8002750:	032d      	lsls	r5, r5, #12
 8002752:	4c48      	ldr	r4, [pc, #288]	@ (8002874 <__aeabi_dsub+0x354>)
 8002754:	0b2d      	lsrs	r5, r5, #12
 8002756:	e78c      	b.n	8002672 <__aeabi_dsub+0x152>
 8002758:	4661      	mov	r1, ip
 800275a:	9b02      	ldr	r3, [sp, #8]
 800275c:	4319      	orrs	r1, r3
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x242>
 8002760:	e0cc      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002762:	0029      	movs	r1, r5
 8002764:	3901      	subs	r1, #1
 8002766:	2d01      	cmp	r5, #1
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x24c>
 800276a:	e188      	b.n	8002a7e <__aeabi_dsub+0x55e>
 800276c:	4295      	cmp	r5, r2
 800276e:	d100      	bne.n	8002772 <__aeabi_dsub+0x252>
 8002770:	e0aa      	b.n	80028c8 <__aeabi_dsub+0x3a8>
 8002772:	2501      	movs	r5, #1
 8002774:	2938      	cmp	r1, #56	@ 0x38
 8002776:	dd00      	ble.n	800277a <__aeabi_dsub+0x25a>
 8002778:	e72f      	b.n	80025da <__aeabi_dsub+0xba>
 800277a:	468a      	mov	sl, r1
 800277c:	e718      	b.n	80025b0 <__aeabi_dsub+0x90>
 800277e:	2201      	movs	r2, #1
 8002780:	4051      	eors	r1, r2
 8002782:	428e      	cmp	r6, r1
 8002784:	d1d0      	bne.n	8002728 <__aeabi_dsub+0x208>
 8002786:	4653      	mov	r3, sl
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x26e>
 800278c:	e0be      	b.n	800290c <__aeabi_dsub+0x3ec>
 800278e:	2f00      	cmp	r7, #0
 8002790:	d000      	beq.n	8002794 <__aeabi_dsub+0x274>
 8002792:	e138      	b.n	8002a06 <__aeabi_dsub+0x4e6>
 8002794:	46ca      	mov	sl, r9
 8002796:	0022      	movs	r2, r4
 8002798:	4302      	orrs	r2, r0
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x27e>
 800279c:	e1e2      	b.n	8002b64 <__aeabi_dsub+0x644>
 800279e:	4653      	mov	r3, sl
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x288>
 80027a6:	e20d      	b.n	8002bc4 <__aeabi_dsub+0x6a4>
 80027a8:	4a32      	ldr	r2, [pc, #200]	@ (8002874 <__aeabi_dsub+0x354>)
 80027aa:	4592      	cmp	sl, r2
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x290>
 80027ae:	e1d2      	b.n	8002b56 <__aeabi_dsub+0x636>
 80027b0:	2701      	movs	r7, #1
 80027b2:	2938      	cmp	r1, #56	@ 0x38
 80027b4:	dc13      	bgt.n	80027de <__aeabi_dsub+0x2be>
 80027b6:	291f      	cmp	r1, #31
 80027b8:	dd00      	ble.n	80027bc <__aeabi_dsub+0x29c>
 80027ba:	e1ee      	b.n	8002b9a <__aeabi_dsub+0x67a>
 80027bc:	2220      	movs	r2, #32
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	1a52      	subs	r2, r2, r1
 80027c2:	0025      	movs	r5, r4
 80027c4:	0007      	movs	r7, r0
 80027c6:	469a      	mov	sl, r3
 80027c8:	40cc      	lsrs	r4, r1
 80027ca:	4090      	lsls	r0, r2
 80027cc:	4095      	lsls	r5, r2
 80027ce:	40cf      	lsrs	r7, r1
 80027d0:	44a2      	add	sl, r4
 80027d2:	1e42      	subs	r2, r0, #1
 80027d4:	4190      	sbcs	r0, r2
 80027d6:	4653      	mov	r3, sl
 80027d8:	432f      	orrs	r7, r5
 80027da:	4307      	orrs	r7, r0
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	003d      	movs	r5, r7
 80027e0:	4465      	add	r5, ip
 80027e2:	4565      	cmp	r5, ip
 80027e4:	4192      	sbcs	r2, r2
 80027e6:	9b02      	ldr	r3, [sp, #8]
 80027e8:	4252      	negs	r2, r2
 80027ea:	464f      	mov	r7, r9
 80027ec:	18d4      	adds	r4, r2, r3
 80027ee:	e780      	b.n	80026f2 <__aeabi_dsub+0x1d2>
 80027f0:	4a23      	ldr	r2, [pc, #140]	@ (8002880 <__aeabi_dsub+0x360>)
 80027f2:	1c7d      	adds	r5, r7, #1
 80027f4:	4215      	tst	r5, r2
 80027f6:	d000      	beq.n	80027fa <__aeabi_dsub+0x2da>
 80027f8:	e0aa      	b.n	8002950 <__aeabi_dsub+0x430>
 80027fa:	4662      	mov	r2, ip
 80027fc:	0025      	movs	r5, r4
 80027fe:	9b02      	ldr	r3, [sp, #8]
 8002800:	4305      	orrs	r5, r0
 8002802:	431a      	orrs	r2, r3
 8002804:	2f00      	cmp	r7, #0
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x2ea>
 8002808:	e0f5      	b.n	80029f6 <__aeabi_dsub+0x4d6>
 800280a:	2d00      	cmp	r5, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x2f0>
 800280e:	e16b      	b.n	8002ae8 <__aeabi_dsub+0x5c8>
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x2f6>
 8002814:	e152      	b.n	8002abc <__aeabi_dsub+0x59c>
 8002816:	4663      	mov	r3, ip
 8002818:	1ac5      	subs	r5, r0, r3
 800281a:	9b02      	ldr	r3, [sp, #8]
 800281c:	1ae2      	subs	r2, r4, r3
 800281e:	42a8      	cmp	r0, r5
 8002820:	419b      	sbcs	r3, r3
 8002822:	425b      	negs	r3, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	d400      	bmi.n	800282c <__aeabi_dsub+0x30c>
 800282a:	e1d5      	b.n	8002bd8 <__aeabi_dsub+0x6b8>
 800282c:	4663      	mov	r3, ip
 800282e:	1a1d      	subs	r5, r3, r0
 8002830:	45ac      	cmp	ip, r5
 8002832:	4192      	sbcs	r2, r2
 8002834:	2601      	movs	r6, #1
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	4252      	negs	r2, r2
 800283a:	1b1c      	subs	r4, r3, r4
 800283c:	4688      	mov	r8, r1
 800283e:	1aa4      	subs	r4, r4, r2
 8002840:	400e      	ands	r6, r1
 8002842:	e6f6      	b.n	8002632 <__aeabi_dsub+0x112>
 8002844:	4297      	cmp	r7, r2
 8002846:	d03f      	beq.n	80028c8 <__aeabi_dsub+0x3a8>
 8002848:	4652      	mov	r2, sl
 800284a:	2501      	movs	r5, #1
 800284c:	2a38      	cmp	r2, #56	@ 0x38
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x332>
 8002850:	e74a      	b.n	80026e8 <__aeabi_dsub+0x1c8>
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	9b02      	ldr	r3, [sp, #8]
 8002856:	0412      	lsls	r2, r2, #16
 8002858:	4313      	orrs	r3, r2
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	e72d      	b.n	80026ba <__aeabi_dsub+0x19a>
 800285e:	003c      	movs	r4, r7
 8002860:	2500      	movs	r5, #0
 8002862:	2200      	movs	r2, #0
 8002864:	e705      	b.n	8002672 <__aeabi_dsub+0x152>
 8002866:	2307      	movs	r3, #7
 8002868:	402b      	ands	r3, r5
 800286a:	2b00      	cmp	r3, #0
 800286c:	d000      	beq.n	8002870 <__aeabi_dsub+0x350>
 800286e:	e6e2      	b.n	8002636 <__aeabi_dsub+0x116>
 8002870:	e06b      	b.n	800294a <__aeabi_dsub+0x42a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff
 8002878:	ff7fffff 	.word	0xff7fffff
 800287c:	fffff801 	.word	0xfffff801
 8002880:	000007fe 	.word	0x000007fe
 8002884:	0028      	movs	r0, r5
 8002886:	f000 fb63 	bl	8002f50 <__clzsi2>
 800288a:	0003      	movs	r3, r0
 800288c:	3318      	adds	r3, #24
 800288e:	2b1f      	cmp	r3, #31
 8002890:	dc00      	bgt.n	8002894 <__aeabi_dsub+0x374>
 8002892:	e6b4      	b.n	80025fe <__aeabi_dsub+0xde>
 8002894:	002a      	movs	r2, r5
 8002896:	3808      	subs	r0, #8
 8002898:	4082      	lsls	r2, r0
 800289a:	429f      	cmp	r7, r3
 800289c:	dd00      	ble.n	80028a0 <__aeabi_dsub+0x380>
 800289e:	e0b9      	b.n	8002a14 <__aeabi_dsub+0x4f4>
 80028a0:	1bdb      	subs	r3, r3, r7
 80028a2:	1c58      	adds	r0, r3, #1
 80028a4:	281f      	cmp	r0, #31
 80028a6:	dc00      	bgt.n	80028aa <__aeabi_dsub+0x38a>
 80028a8:	e1a0      	b.n	8002bec <__aeabi_dsub+0x6cc>
 80028aa:	0015      	movs	r5, r2
 80028ac:	3b1f      	subs	r3, #31
 80028ae:	40dd      	lsrs	r5, r3
 80028b0:	2820      	cmp	r0, #32
 80028b2:	d005      	beq.n	80028c0 <__aeabi_dsub+0x3a0>
 80028b4:	2340      	movs	r3, #64	@ 0x40
 80028b6:	1a1b      	subs	r3, r3, r0
 80028b8:	409a      	lsls	r2, r3
 80028ba:	1e53      	subs	r3, r2, #1
 80028bc:	419a      	sbcs	r2, r3
 80028be:	4315      	orrs	r5, r2
 80028c0:	2307      	movs	r3, #7
 80028c2:	2700      	movs	r7, #0
 80028c4:	402b      	ands	r3, r5
 80028c6:	e7d0      	b.n	800286a <__aeabi_dsub+0x34a>
 80028c8:	08c0      	lsrs	r0, r0, #3
 80028ca:	0762      	lsls	r2, r4, #29
 80028cc:	4302      	orrs	r2, r0
 80028ce:	08e4      	lsrs	r4, r4, #3
 80028d0:	e737      	b.n	8002742 <__aeabi_dsub+0x222>
 80028d2:	08ea      	lsrs	r2, r5, #3
 80028d4:	0763      	lsls	r3, r4, #29
 80028d6:	431a      	orrs	r2, r3
 80028d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002c28 <__aeabi_dsub+0x708>)
 80028da:	08e4      	lsrs	r4, r4, #3
 80028dc:	429f      	cmp	r7, r3
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x3c2>
 80028e0:	e72f      	b.n	8002742 <__aeabi_dsub+0x222>
 80028e2:	0324      	lsls	r4, r4, #12
 80028e4:	0b25      	lsrs	r5, r4, #12
 80028e6:	057c      	lsls	r4, r7, #21
 80028e8:	0d64      	lsrs	r4, r4, #21
 80028ea:	e6c2      	b.n	8002672 <__aeabi_dsub+0x152>
 80028ec:	46ca      	mov	sl, r9
 80028ee:	0022      	movs	r2, r4
 80028f0:	4302      	orrs	r2, r0
 80028f2:	d158      	bne.n	80029a6 <__aeabi_dsub+0x486>
 80028f4:	4663      	mov	r3, ip
 80028f6:	000e      	movs	r6, r1
 80028f8:	9c02      	ldr	r4, [sp, #8]
 80028fa:	9303      	str	r3, [sp, #12]
 80028fc:	9b03      	ldr	r3, [sp, #12]
 80028fe:	4657      	mov	r7, sl
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	e7e7      	b.n	80028d4 <__aeabi_dsub+0x3b4>
 8002904:	4cc9      	ldr	r4, [pc, #804]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002906:	1aff      	subs	r7, r7, r3
 8002908:	4014      	ands	r4, r2
 800290a:	e692      	b.n	8002632 <__aeabi_dsub+0x112>
 800290c:	4dc8      	ldr	r5, [pc, #800]	@ (8002c30 <__aeabi_dsub+0x710>)
 800290e:	1c7a      	adds	r2, r7, #1
 8002910:	422a      	tst	r2, r5
 8002912:	d000      	beq.n	8002916 <__aeabi_dsub+0x3f6>
 8002914:	e084      	b.n	8002a20 <__aeabi_dsub+0x500>
 8002916:	0022      	movs	r2, r4
 8002918:	4302      	orrs	r2, r0
 800291a:	2f00      	cmp	r7, #0
 800291c:	d000      	beq.n	8002920 <__aeabi_dsub+0x400>
 800291e:	e0ef      	b.n	8002b00 <__aeabi_dsub+0x5e0>
 8002920:	2a00      	cmp	r2, #0
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x406>
 8002924:	e0e5      	b.n	8002af2 <__aeabi_dsub+0x5d2>
 8002926:	4662      	mov	r2, ip
 8002928:	9902      	ldr	r1, [sp, #8]
 800292a:	430a      	orrs	r2, r1
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x410>
 800292e:	e0c5      	b.n	8002abc <__aeabi_dsub+0x59c>
 8002930:	4663      	mov	r3, ip
 8002932:	18c5      	adds	r5, r0, r3
 8002934:	468c      	mov	ip, r1
 8002936:	4285      	cmp	r5, r0
 8002938:	4180      	sbcs	r0, r0
 800293a:	4464      	add	r4, ip
 800293c:	4240      	negs	r0, r0
 800293e:	1824      	adds	r4, r4, r0
 8002940:	0223      	lsls	r3, r4, #8
 8002942:	d502      	bpl.n	800294a <__aeabi_dsub+0x42a>
 8002944:	4bb9      	ldr	r3, [pc, #740]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002946:	3701      	adds	r7, #1
 8002948:	401c      	ands	r4, r3
 800294a:	46ba      	mov	sl, r7
 800294c:	9503      	str	r5, [sp, #12]
 800294e:	e7d5      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002950:	4662      	mov	r2, ip
 8002952:	1a85      	subs	r5, r0, r2
 8002954:	42a8      	cmp	r0, r5
 8002956:	4192      	sbcs	r2, r2
 8002958:	4252      	negs	r2, r2
 800295a:	4691      	mov	r9, r2
 800295c:	9b02      	ldr	r3, [sp, #8]
 800295e:	1ae3      	subs	r3, r4, r3
 8002960:	001a      	movs	r2, r3
 8002962:	464b      	mov	r3, r9
 8002964:	1ad2      	subs	r2, r2, r3
 8002966:	0013      	movs	r3, r2
 8002968:	4691      	mov	r9, r2
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	d46c      	bmi.n	8002a48 <__aeabi_dsub+0x528>
 800296e:	464a      	mov	r2, r9
 8002970:	464c      	mov	r4, r9
 8002972:	432a      	orrs	r2, r5
 8002974:	d000      	beq.n	8002978 <__aeabi_dsub+0x458>
 8002976:	e63a      	b.n	80025ee <__aeabi_dsub+0xce>
 8002978:	2600      	movs	r6, #0
 800297a:	2400      	movs	r4, #0
 800297c:	2500      	movs	r5, #0
 800297e:	e678      	b.n	8002672 <__aeabi_dsub+0x152>
 8002980:	9902      	ldr	r1, [sp, #8]
 8002982:	4653      	mov	r3, sl
 8002984:	000d      	movs	r5, r1
 8002986:	3a20      	subs	r2, #32
 8002988:	40d5      	lsrs	r5, r2
 800298a:	2b20      	cmp	r3, #32
 800298c:	d006      	beq.n	800299c <__aeabi_dsub+0x47c>
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	000b      	movs	r3, r1
 8002994:	4093      	lsls	r3, r2
 8002996:	4662      	mov	r2, ip
 8002998:	431a      	orrs	r2, r3
 800299a:	4693      	mov	fp, r2
 800299c:	465b      	mov	r3, fp
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	4193      	sbcs	r3, r2
 80029a2:	431d      	orrs	r5, r3
 80029a4:	e619      	b.n	80025da <__aeabi_dsub+0xba>
 80029a6:	4653      	mov	r3, sl
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x490>
 80029ae:	e0c6      	b.n	8002b3e <__aeabi_dsub+0x61e>
 80029b0:	4e9d      	ldr	r6, [pc, #628]	@ (8002c28 <__aeabi_dsub+0x708>)
 80029b2:	45b2      	cmp	sl, r6
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x498>
 80029b6:	e6bd      	b.n	8002734 <__aeabi_dsub+0x214>
 80029b8:	4688      	mov	r8, r1
 80029ba:	000e      	movs	r6, r1
 80029bc:	2501      	movs	r5, #1
 80029be:	2a38      	cmp	r2, #56	@ 0x38
 80029c0:	dc10      	bgt.n	80029e4 <__aeabi_dsub+0x4c4>
 80029c2:	2a1f      	cmp	r2, #31
 80029c4:	dc7f      	bgt.n	8002ac6 <__aeabi_dsub+0x5a6>
 80029c6:	2120      	movs	r1, #32
 80029c8:	0025      	movs	r5, r4
 80029ca:	1a89      	subs	r1, r1, r2
 80029cc:	0007      	movs	r7, r0
 80029ce:	4088      	lsls	r0, r1
 80029d0:	408d      	lsls	r5, r1
 80029d2:	40d7      	lsrs	r7, r2
 80029d4:	40d4      	lsrs	r4, r2
 80029d6:	1e41      	subs	r1, r0, #1
 80029d8:	4188      	sbcs	r0, r1
 80029da:	9b02      	ldr	r3, [sp, #8]
 80029dc:	433d      	orrs	r5, r7
 80029de:	1b1b      	subs	r3, r3, r4
 80029e0:	4305      	orrs	r5, r0
 80029e2:	9302      	str	r3, [sp, #8]
 80029e4:	4662      	mov	r2, ip
 80029e6:	1b55      	subs	r5, r2, r5
 80029e8:	45ac      	cmp	ip, r5
 80029ea:	4192      	sbcs	r2, r2
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	4252      	negs	r2, r2
 80029f0:	464f      	mov	r7, r9
 80029f2:	1a9c      	subs	r4, r3, r2
 80029f4:	e5f6      	b.n	80025e4 <__aeabi_dsub+0xc4>
 80029f6:	2d00      	cmp	r5, #0
 80029f8:	d000      	beq.n	80029fc <__aeabi_dsub+0x4dc>
 80029fa:	e0b7      	b.n	8002b6c <__aeabi_dsub+0x64c>
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x4e2>
 8002a00:	e0f0      	b.n	8002be4 <__aeabi_dsub+0x6c4>
 8002a02:	2601      	movs	r6, #1
 8002a04:	400e      	ands	r6, r1
 8002a06:	4663      	mov	r3, ip
 8002a08:	9802      	ldr	r0, [sp, #8]
 8002a0a:	08d9      	lsrs	r1, r3, #3
 8002a0c:	0742      	lsls	r2, r0, #29
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	08c4      	lsrs	r4, r0, #3
 8002a12:	e696      	b.n	8002742 <__aeabi_dsub+0x222>
 8002a14:	4c85      	ldr	r4, [pc, #532]	@ (8002c2c <__aeabi_dsub+0x70c>)
 8002a16:	1aff      	subs	r7, r7, r3
 8002a18:	4014      	ands	r4, r2
 8002a1a:	0762      	lsls	r2, r4, #29
 8002a1c:	08e4      	lsrs	r4, r4, #3
 8002a1e:	e760      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002a20:	4981      	ldr	r1, [pc, #516]	@ (8002c28 <__aeabi_dsub+0x708>)
 8002a22:	428a      	cmp	r2, r1
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x508>
 8002a26:	e0c9      	b.n	8002bbc <__aeabi_dsub+0x69c>
 8002a28:	4663      	mov	r3, ip
 8002a2a:	18c1      	adds	r1, r0, r3
 8002a2c:	4281      	cmp	r1, r0
 8002a2e:	4180      	sbcs	r0, r0
 8002a30:	9b02      	ldr	r3, [sp, #8]
 8002a32:	4240      	negs	r0, r0
 8002a34:	18e3      	adds	r3, r4, r3
 8002a36:	181b      	adds	r3, r3, r0
 8002a38:	07dd      	lsls	r5, r3, #31
 8002a3a:	085c      	lsrs	r4, r3, #1
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	0849      	lsrs	r1, r1, #1
 8002a40:	430d      	orrs	r5, r1
 8002a42:	0017      	movs	r7, r2
 8002a44:	402b      	ands	r3, r5
 8002a46:	e710      	b.n	800286a <__aeabi_dsub+0x34a>
 8002a48:	4663      	mov	r3, ip
 8002a4a:	1a1d      	subs	r5, r3, r0
 8002a4c:	45ac      	cmp	ip, r5
 8002a4e:	4192      	sbcs	r2, r2
 8002a50:	2601      	movs	r6, #1
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	4252      	negs	r2, r2
 8002a56:	1b1c      	subs	r4, r3, r4
 8002a58:	4688      	mov	r8, r1
 8002a5a:	1aa4      	subs	r4, r4, r2
 8002a5c:	400e      	ands	r6, r1
 8002a5e:	e5c6      	b.n	80025ee <__aeabi_dsub+0xce>
 8002a60:	4663      	mov	r3, ip
 8002a62:	18c5      	adds	r5, r0, r3
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	4285      	cmp	r5, r0
 8002a68:	4180      	sbcs	r0, r0
 8002a6a:	469c      	mov	ip, r3
 8002a6c:	4240      	negs	r0, r0
 8002a6e:	4464      	add	r4, ip
 8002a70:	1824      	adds	r4, r4, r0
 8002a72:	2701      	movs	r7, #1
 8002a74:	0223      	lsls	r3, r4, #8
 8002a76:	d400      	bmi.n	8002a7a <__aeabi_dsub+0x55a>
 8002a78:	e6f5      	b.n	8002866 <__aeabi_dsub+0x346>
 8002a7a:	2702      	movs	r7, #2
 8002a7c:	e641      	b.n	8002702 <__aeabi_dsub+0x1e2>
 8002a7e:	4663      	mov	r3, ip
 8002a80:	1ac5      	subs	r5, r0, r3
 8002a82:	42a8      	cmp	r0, r5
 8002a84:	4180      	sbcs	r0, r0
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	4240      	negs	r0, r0
 8002a8a:	1ae4      	subs	r4, r4, r3
 8002a8c:	2701      	movs	r7, #1
 8002a8e:	1a24      	subs	r4, r4, r0
 8002a90:	e5a8      	b.n	80025e4 <__aeabi_dsub+0xc4>
 8002a92:	9d02      	ldr	r5, [sp, #8]
 8002a94:	4652      	mov	r2, sl
 8002a96:	002b      	movs	r3, r5
 8002a98:	3a20      	subs	r2, #32
 8002a9a:	40d3      	lsrs	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	4653      	mov	r3, sl
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d006      	beq.n	8002ab2 <__aeabi_dsub+0x592>
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	1ad2      	subs	r2, r2, r3
 8002aa8:	002b      	movs	r3, r5
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	4662      	mov	r2, ip
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	4693      	mov	fp, r2
 8002ab2:	465d      	mov	r5, fp
 8002ab4:	1e6b      	subs	r3, r5, #1
 8002ab6:	419d      	sbcs	r5, r3
 8002ab8:	430d      	orrs	r5, r1
 8002aba:	e615      	b.n	80026e8 <__aeabi_dsub+0x1c8>
 8002abc:	0762      	lsls	r2, r4, #29
 8002abe:	08c0      	lsrs	r0, r0, #3
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	08e4      	lsrs	r4, r4, #3
 8002ac4:	e70d      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0027      	movs	r7, r4
 8002aca:	3920      	subs	r1, #32
 8002acc:	40cf      	lsrs	r7, r1
 8002ace:	2a20      	cmp	r2, #32
 8002ad0:	d005      	beq.n	8002ade <__aeabi_dsub+0x5be>
 8002ad2:	2140      	movs	r1, #64	@ 0x40
 8002ad4:	1a8a      	subs	r2, r1, r2
 8002ad6:	4094      	lsls	r4, r2
 8002ad8:	0025      	movs	r5, r4
 8002ada:	4305      	orrs	r5, r0
 8002adc:	9503      	str	r5, [sp, #12]
 8002ade:	9d03      	ldr	r5, [sp, #12]
 8002ae0:	1e6a      	subs	r2, r5, #1
 8002ae2:	4195      	sbcs	r5, r2
 8002ae4:	433d      	orrs	r5, r7
 8002ae6:	e77d      	b.n	80029e4 <__aeabi_dsub+0x4c4>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dsub+0x5ce>
 8002aec:	e744      	b.n	8002978 <__aeabi_dsub+0x458>
 8002aee:	2601      	movs	r6, #1
 8002af0:	400e      	ands	r6, r1
 8002af2:	4663      	mov	r3, ip
 8002af4:	08d9      	lsrs	r1, r3, #3
 8002af6:	9b02      	ldr	r3, [sp, #8]
 8002af8:	075a      	lsls	r2, r3, #29
 8002afa:	430a      	orrs	r2, r1
 8002afc:	08dc      	lsrs	r4, r3, #3
 8002afe:	e6f0      	b.n	80028e2 <__aeabi_dsub+0x3c2>
 8002b00:	2a00      	cmp	r2, #0
 8002b02:	d028      	beq.n	8002b56 <__aeabi_dsub+0x636>
 8002b04:	4662      	mov	r2, ip
 8002b06:	9f02      	ldr	r7, [sp, #8]
 8002b08:	08c0      	lsrs	r0, r0, #3
 8002b0a:	433a      	orrs	r2, r7
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x5f0>
 8002b0e:	e6dc      	b.n	80028ca <__aeabi_dsub+0x3aa>
 8002b10:	0762      	lsls	r2, r4, #29
 8002b12:	4310      	orrs	r0, r2
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	08e4      	lsrs	r4, r4, #3
 8002b18:	0312      	lsls	r2, r2, #12
 8002b1a:	4214      	tst	r4, r2
 8002b1c:	d009      	beq.n	8002b32 <__aeabi_dsub+0x612>
 8002b1e:	08fd      	lsrs	r5, r7, #3
 8002b20:	4215      	tst	r5, r2
 8002b22:	d106      	bne.n	8002b32 <__aeabi_dsub+0x612>
 8002b24:	4663      	mov	r3, ip
 8002b26:	2601      	movs	r6, #1
 8002b28:	002c      	movs	r4, r5
 8002b2a:	08d8      	lsrs	r0, r3, #3
 8002b2c:	077b      	lsls	r3, r7, #29
 8002b2e:	4318      	orrs	r0, r3
 8002b30:	400e      	ands	r6, r1
 8002b32:	0f42      	lsrs	r2, r0, #29
 8002b34:	00c0      	lsls	r0, r0, #3
 8002b36:	08c0      	lsrs	r0, r0, #3
 8002b38:	0752      	lsls	r2, r2, #29
 8002b3a:	4302      	orrs	r2, r0
 8002b3c:	e601      	b.n	8002742 <__aeabi_dsub+0x222>
 8002b3e:	4663      	mov	r3, ip
 8002b40:	1a1d      	subs	r5, r3, r0
 8002b42:	45ac      	cmp	ip, r5
 8002b44:	4192      	sbcs	r2, r2
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	4252      	negs	r2, r2
 8002b4a:	1b1c      	subs	r4, r3, r4
 8002b4c:	000e      	movs	r6, r1
 8002b4e:	4688      	mov	r8, r1
 8002b50:	2701      	movs	r7, #1
 8002b52:	1aa4      	subs	r4, r4, r2
 8002b54:	e546      	b.n	80025e4 <__aeabi_dsub+0xc4>
 8002b56:	4663      	mov	r3, ip
 8002b58:	08d9      	lsrs	r1, r3, #3
 8002b5a:	9b02      	ldr	r3, [sp, #8]
 8002b5c:	075a      	lsls	r2, r3, #29
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	08dc      	lsrs	r4, r3, #3
 8002b62:	e5ee      	b.n	8002742 <__aeabi_dsub+0x222>
 8002b64:	4663      	mov	r3, ip
 8002b66:	9c02      	ldr	r4, [sp, #8]
 8002b68:	9303      	str	r3, [sp, #12]
 8002b6a:	e6c7      	b.n	80028fc <__aeabi_dsub+0x3dc>
 8002b6c:	08c0      	lsrs	r0, r0, #3
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x654>
 8002b72:	e6aa      	b.n	80028ca <__aeabi_dsub+0x3aa>
 8002b74:	0762      	lsls	r2, r4, #29
 8002b76:	4310      	orrs	r0, r2
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	08e4      	lsrs	r4, r4, #3
 8002b7c:	0312      	lsls	r2, r2, #12
 8002b7e:	4214      	tst	r4, r2
 8002b80:	d0d7      	beq.n	8002b32 <__aeabi_dsub+0x612>
 8002b82:	9f02      	ldr	r7, [sp, #8]
 8002b84:	08fd      	lsrs	r5, r7, #3
 8002b86:	4215      	tst	r5, r2
 8002b88:	d1d3      	bne.n	8002b32 <__aeabi_dsub+0x612>
 8002b8a:	4663      	mov	r3, ip
 8002b8c:	2601      	movs	r6, #1
 8002b8e:	08d8      	lsrs	r0, r3, #3
 8002b90:	077b      	lsls	r3, r7, #29
 8002b92:	002c      	movs	r4, r5
 8002b94:	4318      	orrs	r0, r3
 8002b96:	400e      	ands	r6, r1
 8002b98:	e7cb      	b.n	8002b32 <__aeabi_dsub+0x612>
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	0027      	movs	r7, r4
 8002b9e:	3a20      	subs	r2, #32
 8002ba0:	40d7      	lsrs	r7, r2
 8002ba2:	2920      	cmp	r1, #32
 8002ba4:	d005      	beq.n	8002bb2 <__aeabi_dsub+0x692>
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	1a52      	subs	r2, r2, r1
 8002baa:	4094      	lsls	r4, r2
 8002bac:	0025      	movs	r5, r4
 8002bae:	4305      	orrs	r5, r0
 8002bb0:	9503      	str	r5, [sp, #12]
 8002bb2:	9d03      	ldr	r5, [sp, #12]
 8002bb4:	1e6a      	subs	r2, r5, #1
 8002bb6:	4195      	sbcs	r5, r2
 8002bb8:	432f      	orrs	r7, r5
 8002bba:	e610      	b.n	80027de <__aeabi_dsub+0x2be>
 8002bbc:	0014      	movs	r4, r2
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	e556      	b.n	8002672 <__aeabi_dsub+0x152>
 8002bc4:	9b02      	ldr	r3, [sp, #8]
 8002bc6:	4460      	add	r0, ip
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4560      	cmp	r0, ip
 8002bcc:	4192      	sbcs	r2, r2
 8002bce:	444c      	add	r4, r9
 8002bd0:	4252      	negs	r2, r2
 8002bd2:	0005      	movs	r5, r0
 8002bd4:	18a4      	adds	r4, r4, r2
 8002bd6:	e74c      	b.n	8002a72 <__aeabi_dsub+0x552>
 8002bd8:	001a      	movs	r2, r3
 8002bda:	001c      	movs	r4, r3
 8002bdc:	432a      	orrs	r2, r5
 8002bde:	d000      	beq.n	8002be2 <__aeabi_dsub+0x6c2>
 8002be0:	e6b3      	b.n	800294a <__aeabi_dsub+0x42a>
 8002be2:	e6c9      	b.n	8002978 <__aeabi_dsub+0x458>
 8002be4:	2480      	movs	r4, #128	@ 0x80
 8002be6:	2600      	movs	r6, #0
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	e5ae      	b.n	800274a <__aeabi_dsub+0x22a>
 8002bec:	2120      	movs	r1, #32
 8002bee:	2500      	movs	r5, #0
 8002bf0:	1a09      	subs	r1, r1, r0
 8002bf2:	e517      	b.n	8002624 <__aeabi_dsub+0x104>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2500      	movs	r5, #0
 8002bf8:	4c0b      	ldr	r4, [pc, #44]	@ (8002c28 <__aeabi_dsub+0x708>)
 8002bfa:	e53a      	b.n	8002672 <__aeabi_dsub+0x152>
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x6e2>
 8002c00:	e5f6      	b.n	80027f0 <__aeabi_dsub+0x2d0>
 8002c02:	464b      	mov	r3, r9
 8002c04:	1bda      	subs	r2, r3, r7
 8002c06:	4692      	mov	sl, r2
 8002c08:	2f00      	cmp	r7, #0
 8002c0a:	d100      	bne.n	8002c0e <__aeabi_dsub+0x6ee>
 8002c0c:	e66f      	b.n	80028ee <__aeabi_dsub+0x3ce>
 8002c0e:	2a38      	cmp	r2, #56	@ 0x38
 8002c10:	dc05      	bgt.n	8002c1e <__aeabi_dsub+0x6fe>
 8002c12:	2680      	movs	r6, #128	@ 0x80
 8002c14:	0436      	lsls	r6, r6, #16
 8002c16:	4334      	orrs	r4, r6
 8002c18:	4688      	mov	r8, r1
 8002c1a:	000e      	movs	r6, r1
 8002c1c:	e6d1      	b.n	80029c2 <__aeabi_dsub+0x4a2>
 8002c1e:	4688      	mov	r8, r1
 8002c20:	000e      	movs	r6, r1
 8002c22:	2501      	movs	r5, #1
 8002c24:	e6de      	b.n	80029e4 <__aeabi_dsub+0x4c4>
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	000007ff 	.word	0x000007ff
 8002c2c:	ff7fffff 	.word	0xff7fffff
 8002c30:	000007fe 	.word	0x000007fe
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	d100      	bne.n	8002c3a <__aeabi_dsub+0x71a>
 8002c38:	e668      	b.n	800290c <__aeabi_dsub+0x3ec>
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1bd9      	subs	r1, r3, r7
 8002c3e:	2f00      	cmp	r7, #0
 8002c40:	d101      	bne.n	8002c46 <__aeabi_dsub+0x726>
 8002c42:	468a      	mov	sl, r1
 8002c44:	e5a7      	b.n	8002796 <__aeabi_dsub+0x276>
 8002c46:	2701      	movs	r7, #1
 8002c48:	2938      	cmp	r1, #56	@ 0x38
 8002c4a:	dd00      	ble.n	8002c4e <__aeabi_dsub+0x72e>
 8002c4c:	e5c7      	b.n	80027de <__aeabi_dsub+0x2be>
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	0412      	lsls	r2, r2, #16
 8002c52:	4314      	orrs	r4, r2
 8002c54:	e5af      	b.n	80027b6 <__aeabi_dsub+0x296>
 8002c56:	46c0      	nop			@ (mov r8, r8)

08002c58 <__aeabi_dcmpun>:
 8002c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5a:	46c6      	mov	lr, r8
 8002c5c:	031e      	lsls	r6, r3, #12
 8002c5e:	0b36      	lsrs	r6, r6, #12
 8002c60:	46b0      	mov	r8, r6
 8002c62:	4e0d      	ldr	r6, [pc, #52]	@ (8002c98 <__aeabi_dcmpun+0x40>)
 8002c64:	030c      	lsls	r4, r1, #12
 8002c66:	004d      	lsls	r5, r1, #1
 8002c68:	005f      	lsls	r7, r3, #1
 8002c6a:	b500      	push	{lr}
 8002c6c:	0b24      	lsrs	r4, r4, #12
 8002c6e:	0d6d      	lsrs	r5, r5, #21
 8002c70:	0d7f      	lsrs	r7, r7, #21
 8002c72:	42b5      	cmp	r5, r6
 8002c74:	d00b      	beq.n	8002c8e <__aeabi_dcmpun+0x36>
 8002c76:	4908      	ldr	r1, [pc, #32]	@ (8002c98 <__aeabi_dcmpun+0x40>)
 8002c78:	2000      	movs	r0, #0
 8002c7a:	428f      	cmp	r7, r1
 8002c7c:	d104      	bne.n	8002c88 <__aeabi_dcmpun+0x30>
 8002c7e:	4646      	mov	r6, r8
 8002c80:	4316      	orrs	r6, r2
 8002c82:	0030      	movs	r0, r6
 8002c84:	1e43      	subs	r3, r0, #1
 8002c86:	4198      	sbcs	r0, r3
 8002c88:	bc80      	pop	{r7}
 8002c8a:	46b8      	mov	r8, r7
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8e:	4304      	orrs	r4, r0
 8002c90:	2001      	movs	r0, #1
 8002c92:	2c00      	cmp	r4, #0
 8002c94:	d1f8      	bne.n	8002c88 <__aeabi_dcmpun+0x30>
 8002c96:	e7ee      	b.n	8002c76 <__aeabi_dcmpun+0x1e>
 8002c98:	000007ff 	.word	0x000007ff

08002c9c <__aeabi_d2iz>:
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d16      	ldr	r5, [pc, #88]	@ (8002cfc <__aeabi_d2iz+0x60>)
 8002ca4:	030c      	lsls	r4, r1, #12
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	0049      	lsls	r1, r1, #1
 8002caa:	2000      	movs	r0, #0
 8002cac:	9200      	str	r2, [sp, #0]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	0b24      	lsrs	r4, r4, #12
 8002cb2:	0d49      	lsrs	r1, r1, #21
 8002cb4:	0fde      	lsrs	r6, r3, #31
 8002cb6:	42a9      	cmp	r1, r5
 8002cb8:	dd04      	ble.n	8002cc4 <__aeabi_d2iz+0x28>
 8002cba:	4811      	ldr	r0, [pc, #68]	@ (8002d00 <__aeabi_d2iz+0x64>)
 8002cbc:	4281      	cmp	r1, r0
 8002cbe:	dd03      	ble.n	8002cc8 <__aeabi_d2iz+0x2c>
 8002cc0:	4b10      	ldr	r3, [pc, #64]	@ (8002d04 <__aeabi_d2iz+0x68>)
 8002cc2:	18f0      	adds	r0, r6, r3
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	2080      	movs	r0, #128	@ 0x80
 8002cca:	0340      	lsls	r0, r0, #13
 8002ccc:	4320      	orrs	r0, r4
 8002cce:	4c0e      	ldr	r4, [pc, #56]	@ (8002d08 <__aeabi_d2iz+0x6c>)
 8002cd0:	1a64      	subs	r4, r4, r1
 8002cd2:	2c1f      	cmp	r4, #31
 8002cd4:	dd08      	ble.n	8002ce8 <__aeabi_d2iz+0x4c>
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d0c <__aeabi_d2iz+0x70>)
 8002cd8:	1a5b      	subs	r3, r3, r1
 8002cda:	40d8      	lsrs	r0, r3
 8002cdc:	0003      	movs	r3, r0
 8002cde:	4258      	negs	r0, r3
 8002ce0:	2e00      	cmp	r6, #0
 8002ce2:	d1ef      	bne.n	8002cc4 <__aeabi_d2iz+0x28>
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	e7ed      	b.n	8002cc4 <__aeabi_d2iz+0x28>
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <__aeabi_d2iz+0x74>)
 8002cea:	9a00      	ldr	r2, [sp, #0]
 8002cec:	469c      	mov	ip, r3
 8002cee:	0003      	movs	r3, r0
 8002cf0:	4461      	add	r1, ip
 8002cf2:	408b      	lsls	r3, r1
 8002cf4:	40e2      	lsrs	r2, r4
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	e7f1      	b.n	8002cde <__aeabi_d2iz+0x42>
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	000003fe 	.word	0x000003fe
 8002d00:	0000041d 	.word	0x0000041d
 8002d04:	7fffffff 	.word	0x7fffffff
 8002d08:	00000433 	.word	0x00000433
 8002d0c:	00000413 	.word	0x00000413
 8002d10:	fffffbed 	.word	0xfffffbed

08002d14 <__aeabi_i2d>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d016      	beq.n	8002d48 <__aeabi_i2d+0x34>
 8002d1a:	17c3      	asrs	r3, r0, #31
 8002d1c:	18c5      	adds	r5, r0, r3
 8002d1e:	405d      	eors	r5, r3
 8002d20:	0fc4      	lsrs	r4, r0, #31
 8002d22:	0028      	movs	r0, r5
 8002d24:	f000 f914 	bl	8002f50 <__clzsi2>
 8002d28:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <__aeabi_i2d+0x58>)
 8002d2a:	1a1b      	subs	r3, r3, r0
 8002d2c:	055b      	lsls	r3, r3, #21
 8002d2e:	0d5b      	lsrs	r3, r3, #21
 8002d30:	280a      	cmp	r0, #10
 8002d32:	dc14      	bgt.n	8002d5e <__aeabi_i2d+0x4a>
 8002d34:	0002      	movs	r2, r0
 8002d36:	002e      	movs	r6, r5
 8002d38:	3215      	adds	r2, #21
 8002d3a:	4096      	lsls	r6, r2
 8002d3c:	220b      	movs	r2, #11
 8002d3e:	1a12      	subs	r2, r2, r0
 8002d40:	40d5      	lsrs	r5, r2
 8002d42:	032d      	lsls	r5, r5, #12
 8002d44:	0b2d      	lsrs	r5, r5, #12
 8002d46:	e003      	b.n	8002d50 <__aeabi_i2d+0x3c>
 8002d48:	2400      	movs	r4, #0
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2500      	movs	r5, #0
 8002d4e:	2600      	movs	r6, #0
 8002d50:	051b      	lsls	r3, r3, #20
 8002d52:	432b      	orrs	r3, r5
 8002d54:	07e4      	lsls	r4, r4, #31
 8002d56:	4323      	orrs	r3, r4
 8002d58:	0030      	movs	r0, r6
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
 8002d5e:	380b      	subs	r0, #11
 8002d60:	4085      	lsls	r5, r0
 8002d62:	032d      	lsls	r5, r5, #12
 8002d64:	2600      	movs	r6, #0
 8002d66:	0b2d      	lsrs	r5, r5, #12
 8002d68:	e7f2      	b.n	8002d50 <__aeabi_i2d+0x3c>
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	0000041e 	.word	0x0000041e

08002d70 <__aeabi_ui2d>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	1e04      	subs	r4, r0, #0
 8002d74:	d010      	beq.n	8002d98 <__aeabi_ui2d+0x28>
 8002d76:	f000 f8eb 	bl	8002f50 <__clzsi2>
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <__aeabi_ui2d+0x44>)
 8002d7c:	1a1b      	subs	r3, r3, r0
 8002d7e:	055b      	lsls	r3, r3, #21
 8002d80:	0d5b      	lsrs	r3, r3, #21
 8002d82:	280a      	cmp	r0, #10
 8002d84:	dc0f      	bgt.n	8002da6 <__aeabi_ui2d+0x36>
 8002d86:	220b      	movs	r2, #11
 8002d88:	0021      	movs	r1, r4
 8002d8a:	1a12      	subs	r2, r2, r0
 8002d8c:	40d1      	lsrs	r1, r2
 8002d8e:	3015      	adds	r0, #21
 8002d90:	030a      	lsls	r2, r1, #12
 8002d92:	4084      	lsls	r4, r0
 8002d94:	0b12      	lsrs	r2, r2, #12
 8002d96:	e001      	b.n	8002d9c <__aeabi_ui2d+0x2c>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	051b      	lsls	r3, r3, #20
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	0020      	movs	r0, r4
 8002da2:	0019      	movs	r1, r3
 8002da4:	bd10      	pop	{r4, pc}
 8002da6:	0022      	movs	r2, r4
 8002da8:	380b      	subs	r0, #11
 8002daa:	4082      	lsls	r2, r0
 8002dac:	0312      	lsls	r2, r2, #12
 8002dae:	2400      	movs	r4, #0
 8002db0:	0b12      	lsrs	r2, r2, #12
 8002db2:	e7f3      	b.n	8002d9c <__aeabi_ui2d+0x2c>
 8002db4:	0000041e 	.word	0x0000041e

08002db8 <__aeabi_f2d>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	0242      	lsls	r2, r0, #9
 8002dbc:	0043      	lsls	r3, r0, #1
 8002dbe:	0fc4      	lsrs	r4, r0, #31
 8002dc0:	20fe      	movs	r0, #254	@ 0xfe
 8002dc2:	0e1b      	lsrs	r3, r3, #24
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	0a55      	lsrs	r5, r2, #9
 8002dc8:	4208      	tst	r0, r1
 8002dca:	d00c      	beq.n	8002de6 <__aeabi_f2d+0x2e>
 8002dcc:	21e0      	movs	r1, #224	@ 0xe0
 8002dce:	0089      	lsls	r1, r1, #2
 8002dd0:	468c      	mov	ip, r1
 8002dd2:	076d      	lsls	r5, r5, #29
 8002dd4:	0b12      	lsrs	r2, r2, #12
 8002dd6:	4463      	add	r3, ip
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	07e4      	lsls	r4, r4, #31
 8002dde:	4323      	orrs	r3, r4
 8002de0:	0028      	movs	r0, r5
 8002de2:	0019      	movs	r1, r3
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d114      	bne.n	8002e14 <__aeabi_f2d+0x5c>
 8002dea:	2d00      	cmp	r5, #0
 8002dec:	d01b      	beq.n	8002e26 <__aeabi_f2d+0x6e>
 8002dee:	0028      	movs	r0, r5
 8002df0:	f000 f8ae 	bl	8002f50 <__clzsi2>
 8002df4:	280a      	cmp	r0, #10
 8002df6:	dc1c      	bgt.n	8002e32 <__aeabi_f2d+0x7a>
 8002df8:	230b      	movs	r3, #11
 8002dfa:	002a      	movs	r2, r5
 8002dfc:	1a1b      	subs	r3, r3, r0
 8002dfe:	40da      	lsrs	r2, r3
 8002e00:	0003      	movs	r3, r0
 8002e02:	3315      	adds	r3, #21
 8002e04:	409d      	lsls	r5, r3
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <__aeabi_f2d+0x88>)
 8002e08:	0312      	lsls	r2, r2, #12
 8002e0a:	1a1b      	subs	r3, r3, r0
 8002e0c:	055b      	lsls	r3, r3, #21
 8002e0e:	0b12      	lsrs	r2, r2, #12
 8002e10:	0d5b      	lsrs	r3, r3, #21
 8002e12:	e7e1      	b.n	8002dd8 <__aeabi_f2d+0x20>
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	d009      	beq.n	8002e2c <__aeabi_f2d+0x74>
 8002e18:	0b13      	lsrs	r3, r2, #12
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	0312      	lsls	r2, r2, #12
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	076d      	lsls	r5, r5, #29
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <__aeabi_f2d+0x8c>)
 8002e24:	e7d8      	b.n	8002dd8 <__aeabi_f2d+0x20>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2200      	movs	r2, #0
 8002e2a:	e7d5      	b.n	8002dd8 <__aeabi_f2d+0x20>
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <__aeabi_f2d+0x8c>)
 8002e30:	e7d2      	b.n	8002dd8 <__aeabi_f2d+0x20>
 8002e32:	0003      	movs	r3, r0
 8002e34:	002a      	movs	r2, r5
 8002e36:	3b0b      	subs	r3, #11
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	e7e3      	b.n	8002e06 <__aeabi_f2d+0x4e>
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	00000389 	.word	0x00000389
 8002e44:	000007ff 	.word	0x000007ff

08002e48 <__aeabi_d2f>:
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	004b      	lsls	r3, r1, #1
 8002e4c:	030f      	lsls	r7, r1, #12
 8002e4e:	0d5b      	lsrs	r3, r3, #21
 8002e50:	4c3b      	ldr	r4, [pc, #236]	@ (8002f40 <__aeabi_d2f+0xf8>)
 8002e52:	0f45      	lsrs	r5, r0, #29
 8002e54:	b083      	sub	sp, #12
 8002e56:	0a7f      	lsrs	r7, r7, #9
 8002e58:	1c5e      	adds	r6, r3, #1
 8002e5a:	432f      	orrs	r7, r5
 8002e5c:	9000      	str	r0, [sp, #0]
 8002e5e:	9101      	str	r1, [sp, #4]
 8002e60:	0fca      	lsrs	r2, r1, #31
 8002e62:	00c5      	lsls	r5, r0, #3
 8002e64:	4226      	tst	r6, r4
 8002e66:	d00b      	beq.n	8002e80 <__aeabi_d2f+0x38>
 8002e68:	4936      	ldr	r1, [pc, #216]	@ (8002f44 <__aeabi_d2f+0xfc>)
 8002e6a:	185c      	adds	r4, r3, r1
 8002e6c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002e6e:	dd13      	ble.n	8002e98 <__aeabi_d2f+0x50>
 8002e70:	20ff      	movs	r0, #255	@ 0xff
 8002e72:	2300      	movs	r3, #0
 8002e74:	05c0      	lsls	r0, r0, #23
 8002e76:	4318      	orrs	r0, r3
 8002e78:	07d2      	lsls	r2, r2, #31
 8002e7a:	4310      	orrs	r0, r2
 8002e7c:	b003      	add	sp, #12
 8002e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <__aeabi_d2f+0x42>
 8002e84:	2000      	movs	r0, #0
 8002e86:	2300      	movs	r3, #0
 8002e88:	e7f4      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002e8a:	433d      	orrs	r5, r7
 8002e8c:	d0f0      	beq.n	8002e70 <__aeabi_d2f+0x28>
 8002e8e:	2380      	movs	r3, #128	@ 0x80
 8002e90:	03db      	lsls	r3, r3, #15
 8002e92:	20ff      	movs	r0, #255	@ 0xff
 8002e94:	433b      	orrs	r3, r7
 8002e96:	e7ed      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	dd14      	ble.n	8002ec6 <__aeabi_d2f+0x7e>
 8002e9c:	9b00      	ldr	r3, [sp, #0]
 8002e9e:	00ff      	lsls	r7, r7, #3
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	4183      	sbcs	r3, r0
 8002ea6:	0f69      	lsrs	r1, r5, #29
 8002ea8:	433b      	orrs	r3, r7
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	0759      	lsls	r1, r3, #29
 8002eae:	d041      	beq.n	8002f34 <__aeabi_d2f+0xec>
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	4019      	ands	r1, r3
 8002eb4:	2904      	cmp	r1, #4
 8002eb6:	d028      	beq.n	8002f0a <__aeabi_d2f+0xc2>
 8002eb8:	3304      	adds	r3, #4
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	d525      	bpl.n	8002f0a <__aeabi_d2f+0xc2>
 8002ebe:	3401      	adds	r4, #1
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	b2e0      	uxtb	r0, r4
 8002ec4:	e7d6      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	3117      	adds	r1, #23
 8002eca:	dbdb      	blt.n	8002e84 <__aeabi_d2f+0x3c>
 8002ecc:	2180      	movs	r1, #128	@ 0x80
 8002ece:	201e      	movs	r0, #30
 8002ed0:	0409      	lsls	r1, r1, #16
 8002ed2:	4339      	orrs	r1, r7
 8002ed4:	1b00      	subs	r0, r0, r4
 8002ed6:	281f      	cmp	r0, #31
 8002ed8:	dd1b      	ble.n	8002f12 <__aeabi_d2f+0xca>
 8002eda:	2602      	movs	r6, #2
 8002edc:	4276      	negs	r6, r6
 8002ede:	1b34      	subs	r4, r6, r4
 8002ee0:	000e      	movs	r6, r1
 8002ee2:	40e6      	lsrs	r6, r4
 8002ee4:	0034      	movs	r4, r6
 8002ee6:	2820      	cmp	r0, #32
 8002ee8:	d004      	beq.n	8002ef4 <__aeabi_d2f+0xac>
 8002eea:	4817      	ldr	r0, [pc, #92]	@ (8002f48 <__aeabi_d2f+0x100>)
 8002eec:	4684      	mov	ip, r0
 8002eee:	4463      	add	r3, ip
 8002ef0:	4099      	lsls	r1, r3
 8002ef2:	430d      	orrs	r5, r1
 8002ef4:	002b      	movs	r3, r5
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	418b      	sbcs	r3, r1
 8002efa:	4323      	orrs	r3, r4
 8002efc:	0759      	lsls	r1, r3, #29
 8002efe:	d015      	beq.n	8002f2c <__aeabi_d2f+0xe4>
 8002f00:	210f      	movs	r1, #15
 8002f02:	2400      	movs	r4, #0
 8002f04:	4019      	ands	r1, r3
 8002f06:	2904      	cmp	r1, #4
 8002f08:	d117      	bne.n	8002f3a <__aeabi_d2f+0xf2>
 8002f0a:	019b      	lsls	r3, r3, #6
 8002f0c:	0a5b      	lsrs	r3, r3, #9
 8002f0e:	b2e0      	uxtb	r0, r4
 8002f10:	e7b0      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002f12:	4c0e      	ldr	r4, [pc, #56]	@ (8002f4c <__aeabi_d2f+0x104>)
 8002f14:	191c      	adds	r4, r3, r4
 8002f16:	002b      	movs	r3, r5
 8002f18:	40a5      	lsls	r5, r4
 8002f1a:	40c3      	lsrs	r3, r0
 8002f1c:	40a1      	lsls	r1, r4
 8002f1e:	1e68      	subs	r0, r5, #1
 8002f20:	4185      	sbcs	r5, r0
 8002f22:	4329      	orrs	r1, r5
 8002f24:	430b      	orrs	r3, r1
 8002f26:	2400      	movs	r4, #0
 8002f28:	0759      	lsls	r1, r3, #29
 8002f2a:	d1c1      	bne.n	8002eb0 <__aeabi_d2f+0x68>
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	2000      	movs	r0, #0
 8002f30:	0a5b      	lsrs	r3, r3, #9
 8002f32:	e79f      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	b2e0      	uxtb	r0, r4
 8002f38:	e79c      	b.n	8002e74 <__aeabi_d2f+0x2c>
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	e7e5      	b.n	8002f0a <__aeabi_d2f+0xc2>
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	000007fe 	.word	0x000007fe
 8002f44:	fffffc80 	.word	0xfffffc80
 8002f48:	fffffca2 	.word	0xfffffca2
 8002f4c:	fffffc82 	.word	0xfffffc82

08002f50 <__clzsi2>:
 8002f50:	211c      	movs	r1, #28
 8002f52:	2301      	movs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	4298      	cmp	r0, r3
 8002f58:	d301      	bcc.n	8002f5e <__clzsi2+0xe>
 8002f5a:	0c00      	lsrs	r0, r0, #16
 8002f5c:	3910      	subs	r1, #16
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	4298      	cmp	r0, r3
 8002f62:	d301      	bcc.n	8002f68 <__clzsi2+0x18>
 8002f64:	0a00      	lsrs	r0, r0, #8
 8002f66:	3908      	subs	r1, #8
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	4298      	cmp	r0, r3
 8002f6c:	d301      	bcc.n	8002f72 <__clzsi2+0x22>
 8002f6e:	0900      	lsrs	r0, r0, #4
 8002f70:	3904      	subs	r1, #4
 8002f72:	a202      	add	r2, pc, #8	@ (adr r2, 8002f7c <__clzsi2+0x2c>)
 8002f74:	5c10      	ldrb	r0, [r2, r0]
 8002f76:	1840      	adds	r0, r0, r1
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	02020304 	.word	0x02020304
 8002f80:	01010101 	.word	0x01010101
	...

08002f8c <__clzdi2>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	2900      	cmp	r1, #0
 8002f90:	d103      	bne.n	8002f9a <__clzdi2+0xe>
 8002f92:	f7ff ffdd 	bl	8002f50 <__clzsi2>
 8002f96:	3020      	adds	r0, #32
 8002f98:	e002      	b.n	8002fa0 <__clzdi2+0x14>
 8002f9a:	0008      	movs	r0, r1
 8002f9c:	f7ff ffd8 	bl	8002f50 <__clzsi2>
 8002fa0:	bd10      	pop	{r4, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)

08002fa4 <AHT_Init>:

uint8_t data2[] = {MEASURE_01, MEASURE_02, MEASURE_03};
uint8_t received_data[7];


void AHT_Init(I2C_HandleTypeDef *hi2c1) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	_AHT_ui2c = hi2c1;
 8002fac:	4b03      	ldr	r3, [pc, #12]	@ (8002fbc <AHT_Init+0x18>)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	200001f4 	.word	0x200001f4

08002fc0 <AHT_GetTemperature>:

float AHT_GetTemperature()
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af02      	add	r7, sp, #8
	  HAL_I2C_Master_Transmit(_AHT_ui2c, SENSOR_ADDR << 1, &data2, sizeof(data2), 1000);
 8002fc6:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <AHT_GetTemperature+0xa8>)
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	4a28      	ldr	r2, [pc, #160]	@ (800306c <AHT_GetTemperature+0xac>)
 8002fcc:	23fa      	movs	r3, #250	@ 0xfa
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	2170      	movs	r1, #112	@ 0x70
 8002fd6:	f001 f95f 	bl	8004298 <HAL_I2C_Master_Transmit>
	  HAL_Delay(1000);
 8002fda:	23fa      	movs	r3, #250	@ 0xfa
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fcca 	bl	8003978 <HAL_Delay>

	  HAL_I2C_Master_Receive(_AHT_ui2c, SENSOR_ADDR << 1, &received_data, 7, 1000);
 8002fe4:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <AHT_GetTemperature+0xa8>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	@ (8003070 <AHT_GetTemperature+0xb0>)
 8002fea:	23fa      	movs	r3, #250	@ 0xfa
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2307      	movs	r3, #7
 8002ff2:	2170      	movs	r1, #112	@ 0x70
 8002ff4:	f001 fa58 	bl	80044a8 <HAL_I2C_Master_Receive>
	  HAL_Delay(1000);
 8002ff8:	23fa      	movs	r3, #250	@ 0xfa
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f000 fcbb 	bl	8003978 <HAL_Delay>


  	  uint32_t temperature   = received_data[3] & 0x0F;
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <AHT_GetTemperature+0xb0>)
 8003004:	78db      	ldrb	r3, [r3, #3]
 8003006:	001a      	movs	r2, r3
 8003008:	230f      	movs	r3, #15
 800300a:	4013      	ands	r3, r2
 800300c:	607b      	str	r3, [r7, #4]
           temperature <<= 8;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	607b      	str	r3, [r7, #4]
           temperature  |= received_data[4];
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <AHT_GetTemperature+0xb0>)
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	001a      	movs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4313      	orrs	r3, r2
 800301e:	607b      	str	r3, [r7, #4]
           temperature <<= 8;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	607b      	str	r3, [r7, #4]
           temperature  |= received_data[5];
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <AHT_GetTemperature+0xb0>)
 8003028:	795b      	ldrb	r3, [r3, #5]
 800302a:	001a      	movs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4313      	orrs	r3, r2
 8003030:	607b      	str	r3, [r7, #4]

  	  float temp = ((float)temperature / 1048576) * 200 - 50;
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ffc2 	bl	8000fbc <__aeabi_ui2f>
 8003038:	1c03      	adds	r3, r0, #0
 800303a:	2193      	movs	r1, #147	@ 0x93
 800303c:	05c9      	lsls	r1, r1, #23
 800303e:	1c18      	adds	r0, r3, #0
 8003040:	f7fd fbba 	bl	80007b8 <__aeabi_fdiv>
 8003044:	1c03      	adds	r3, r0, #0
 8003046:	490b      	ldr	r1, [pc, #44]	@ (8003074 <AHT_GetTemperature+0xb4>)
 8003048:	1c18      	adds	r0, r3, #0
 800304a:	f7fd fcd5 	bl	80009f8 <__aeabi_fmul>
 800304e:	1c03      	adds	r3, r0, #0
 8003050:	4909      	ldr	r1, [pc, #36]	@ (8003078 <AHT_GetTemperature+0xb8>)
 8003052:	1c18      	adds	r0, r3, #0
 8003054:	f7fd fe0e 	bl	8000c74 <__aeabi_fsub>
 8003058:	1c03      	adds	r3, r0, #0
 800305a:	603b      	str	r3, [r7, #0]
  	  return temp;
 800305c:	683b      	ldr	r3, [r7, #0]
}
 800305e:	1c18      	adds	r0, r3, #0
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	200001f4 	.word	0x200001f4
 800306c:	20000000 	.word	0x20000000
 8003070:	200001f8 	.word	0x200001f8
 8003074:	43480000 	.word	0x43480000
 8003078:	42480000 	.word	0x42480000

0800307c <AHT_GetHumidity>:

float AHT_GetHumidity()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af02      	add	r7, sp, #8
	  HAL_I2C_Master_Transmit(_AHT_ui2c, SENSOR_ADDR << 1, &data2, sizeof(data2), 1000);
 8003082:	4b25      	ldr	r3, [pc, #148]	@ (8003118 <AHT_GetHumidity+0x9c>)
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	4a25      	ldr	r2, [pc, #148]	@ (800311c <AHT_GetHumidity+0xa0>)
 8003088:	23fa      	movs	r3, #250	@ 0xfa
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2303      	movs	r3, #3
 8003090:	2170      	movs	r1, #112	@ 0x70
 8003092:	f001 f901 	bl	8004298 <HAL_I2C_Master_Transmit>
	  HAL_Delay(1000);
 8003096:	23fa      	movs	r3, #250	@ 0xfa
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fc6c 	bl	8003978 <HAL_Delay>

	  HAL_I2C_Master_Receive(_AHT_ui2c, SENSOR_ADDR << 1, &received_data, 7, 1000);
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <AHT_GetHumidity+0x9c>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003120 <AHT_GetHumidity+0xa4>)
 80030a6:	23fa      	movs	r3, #250	@ 0xfa
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2307      	movs	r3, #7
 80030ae:	2170      	movs	r1, #112	@ 0x70
 80030b0:	f001 f9fa 	bl	80044a8 <HAL_I2C_Master_Receive>
	  HAL_Delay(1000);
 80030b4:	23fa      	movs	r3, #250	@ 0xfa
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fc5d 	bl	8003978 <HAL_Delay>

  	  uint32_t humidity   = received_data[1];
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <AHT_GetHumidity+0xa4>)
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	607b      	str	r3, [r7, #4]
           humidity <<= 8;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	607b      	str	r3, [r7, #4]
           humidity  |= received_data[2];
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <AHT_GetHumidity+0xa4>)
 80030cc:	789b      	ldrb	r3, [r3, #2]
 80030ce:	001a      	movs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	607b      	str	r3, [r7, #4]
           humidity <<= 4;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	607b      	str	r3, [r7, #4]
           humidity  |= received_data[3] >> 4;
 80030dc:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <AHT_GetHumidity+0xa4>)
 80030de:	78db      	ldrb	r3, [r3, #3]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	001a      	movs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	607b      	str	r3, [r7, #4]

  	  float hum = ((float)humidity / 0x100000) * 100;
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd ff65 	bl	8000fbc <__aeabi_ui2f>
 80030f2:	1c03      	adds	r3, r0, #0
 80030f4:	2193      	movs	r1, #147	@ 0x93
 80030f6:	05c9      	lsls	r1, r1, #23
 80030f8:	1c18      	adds	r0, r3, #0
 80030fa:	f7fd fb5d 	bl	80007b8 <__aeabi_fdiv>
 80030fe:	1c03      	adds	r3, r0, #0
 8003100:	4908      	ldr	r1, [pc, #32]	@ (8003124 <AHT_GetHumidity+0xa8>)
 8003102:	1c18      	adds	r0, r3, #0
 8003104:	f7fd fc78 	bl	80009f8 <__aeabi_fmul>
 8003108:	1c03      	adds	r3, r0, #0
 800310a:	603b      	str	r3, [r7, #0]
  	  return hum;
 800310c:	683b      	ldr	r3, [r7, #0]

}
 800310e:	1c18      	adds	r0, r3, #0
 8003110:	46bd      	mov	sp, r7
 8003112:	b002      	add	sp, #8
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	200001f4 	.word	0x200001f4
 800311c:	20000000 	.word	0x20000000
 8003120:	200001f8 	.word	0x200001f8
 8003124:	42c80000 	.word	0x42c80000

08003128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b09d      	sub	sp, #116	@ 0x74
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800312e:	f000 fbb3 	bl	8003898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003132:	f000 f851 	bl	80031d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003136:	f000 f953 	bl	80033e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800313a:	f000 f933 	bl	80033a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800313e:	f000 f901 	bl	8003344 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003142:	f000 f8bf 	bl	80032c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  AHT_Init(&hi2c1);
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <main+0xa0>)
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff2b 	bl	8002fa4 <AHT_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	float temperature = AHT_GetTemperature();
 800314e:	f7ff ff37 	bl	8002fc0 <AHT_GetTemperature>
 8003152:	1c03      	adds	r3, r0, #0
 8003154:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float humidity = AHT_GetHumidity();
 8003156:	f7ff ff91 	bl	800307c <AHT_GetHumidity>
 800315a:	1c03      	adds	r3, r0, #0
 800315c:	66bb      	str	r3, [r7, #104]	@ 0x68

    char temp_str[50];
    //Print the extracted temperature data over UART
    sprintf(temp_str, "Temperature : %f\n\r", temperature);
 800315e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003160:	f7ff fe2a 	bl	8002db8 <__aeabi_f2d>
 8003164:	0002      	movs	r2, r0
 8003166:	000b      	movs	r3, r1
 8003168:	4918      	ldr	r1, [pc, #96]	@ (80031cc <main+0xa4>)
 800316a:	0038      	movs	r0, r7
 800316c:	f005 f808 	bl	8008180 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)temp_str, strlen(temp_str), 10);
 8003170:	003b      	movs	r3, r7
 8003172:	0018      	movs	r0, r3
 8003174:	f7fc ffc8 	bl	8000108 <strlen>
 8003178:	0003      	movs	r3, r0
 800317a:	b29a      	uxth	r2, r3
 800317c:	0039      	movs	r1, r7
 800317e:	4814      	ldr	r0, [pc, #80]	@ (80031d0 <main+0xa8>)
 8003180:	230a      	movs	r3, #10
 8003182:	f003 fb61 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003186:	23fa      	movs	r3, #250	@ 0xfa
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fbf4 	bl	8003978 <HAL_Delay>

    char hum_str[50];
	//Print the extracted humidity data over UART
	sprintf(hum_str, "Humidity: %f\n\r", humidity);
 8003190:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003192:	f7ff fe11 	bl	8002db8 <__aeabi_f2d>
 8003196:	0002      	movs	r2, r0
 8003198:	000b      	movs	r3, r1
 800319a:	490e      	ldr	r1, [pc, #56]	@ (80031d4 <main+0xac>)
 800319c:	2434      	movs	r4, #52	@ 0x34
 800319e:	1938      	adds	r0, r7, r4
 80031a0:	f004 ffee 	bl	8008180 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)hum_str, strlen(hum_str), 10);
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fc ffae 	bl	8000108 <strlen>
 80031ac:	0003      	movs	r3, r0
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	1939      	adds	r1, r7, r4
 80031b2:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <main+0xa8>)
 80031b4:	230a      	movs	r3, #10
 80031b6:	f003 fb47 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80031ba:	23fa      	movs	r3, #250	@ 0xfa
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fbda 	bl	8003978 <HAL_Delay>
  {
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	e7c2      	b.n	800314e <main+0x26>
 80031c8:	20000200 	.word	0x20000200
 80031cc:	0800bbd0 	.word	0x0800bbd0
 80031d0:	200002e4 	.word	0x200002e4
 80031d4:	0800bbe4 	.word	0x0800bbe4

080031d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b09d      	sub	sp, #116	@ 0x74
 80031dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031de:	2438      	movs	r4, #56	@ 0x38
 80031e0:	193b      	adds	r3, r7, r4
 80031e2:	0018      	movs	r0, r3
 80031e4:	2338      	movs	r3, #56	@ 0x38
 80031e6:	001a      	movs	r2, r3
 80031e8:	2100      	movs	r1, #0
 80031ea:	f005 f835 	bl	8008258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ee:	2324      	movs	r3, #36	@ 0x24
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	0018      	movs	r0, r3
 80031f4:	2314      	movs	r3, #20
 80031f6:	001a      	movs	r2, r3
 80031f8:	2100      	movs	r1, #0
 80031fa:	f005 f82d 	bl	8008258 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031fe:	003b      	movs	r3, r7
 8003200:	0018      	movs	r0, r3
 8003202:	2324      	movs	r3, #36	@ 0x24
 8003204:	001a      	movs	r2, r3
 8003206:	2100      	movs	r1, #0
 8003208:	f005 f826 	bl	8008258 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800320c:	4b2b      	ldr	r3, [pc, #172]	@ (80032bc <SystemClock_Config+0xe4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2b      	ldr	r2, [pc, #172]	@ (80032c0 <SystemClock_Config+0xe8>)
 8003212:	401a      	ands	r2, r3
 8003214:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <SystemClock_Config+0xe4>)
 8003216:	2180      	movs	r1, #128	@ 0x80
 8003218:	0109      	lsls	r1, r1, #4
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800321e:	0021      	movs	r1, r4
 8003220:	187b      	adds	r3, r7, r1
 8003222:	2202      	movs	r2, #2
 8003224:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003226:	187b      	adds	r3, r7, r1
 8003228:	2201      	movs	r2, #1
 800322a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800322c:	187b      	adds	r3, r7, r1
 800322e:	2210      	movs	r2, #16
 8003230:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2202      	movs	r2, #2
 8003236:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2200      	movs	r2, #0
 800323c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	0312      	lsls	r2, r2, #12
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	0412      	lsls	r2, r2, #16
 800324c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800324e:	187b      	adds	r3, r7, r1
 8003250:	0018      	movs	r0, r3
 8003252:	f002 fb51 	bl	80058f8 <HAL_RCC_OscConfig>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800325a:	f000 f8e3 	bl	8003424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325e:	2124      	movs	r1, #36	@ 0x24
 8003260:	187b      	adds	r3, r7, r1
 8003262:	220f      	movs	r2, #15
 8003264:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	2203      	movs	r2, #3
 800326a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003278:	187b      	adds	r3, r7, r1
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800327e:	187b      	adds	r3, r7, r1
 8003280:	2101      	movs	r1, #1
 8003282:	0018      	movs	r0, r3
 8003284:	f002 ff0c 	bl	80060a0 <HAL_RCC_ClockConfig>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d001      	beq.n	8003290 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800328c:	f000 f8ca 	bl	8003424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003290:	003b      	movs	r3, r7
 8003292:	220a      	movs	r2, #10
 8003294:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003296:	003b      	movs	r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800329c:	003b      	movs	r3, r7
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a2:	003b      	movs	r3, r7
 80032a4:	0018      	movs	r0, r3
 80032a6:	f003 f91f 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d001      	beq.n	80032b2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80032ae:	f000 f8b9 	bl	8003424 <Error_Handler>
  }
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b01d      	add	sp, #116	@ 0x74
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	40007000 	.word	0x40007000
 80032c0:	ffffe7ff 	.word	0xffffe7ff

080032c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032ca:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <MX_I2C1_Init+0x78>)
 80032cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80032ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003340 <MX_I2C1_Init+0x7c>)
 80032d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032dc:	2201      	movs	r2, #1
 80032de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032e6:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <MX_I2C1_Init+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <MX_I2C1_Init+0x74>)
 8003300:	0018      	movs	r0, r3
 8003302:	f000 ff33 	bl	800416c <HAL_I2C_Init>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d001      	beq.n	800330e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800330a:	f000 f88b 	bl	8003424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <MX_I2C1_Init+0x74>)
 8003310:	2100      	movs	r1, #0
 8003312:	0018      	movs	r0, r3
 8003314:	f002 fa58 	bl	80057c8 <HAL_I2CEx_ConfigAnalogFilter>
 8003318:	1e03      	subs	r3, r0, #0
 800331a:	d001      	beq.n	8003320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800331c:	f000 f882 	bl	8003424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <MX_I2C1_Init+0x74>)
 8003322:	2100      	movs	r1, #0
 8003324:	0018      	movs	r0, r3
 8003326:	f002 fa9b 	bl	8005860 <HAL_I2CEx_ConfigDigitalFilter>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800332e:	f000 f879 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000200 	.word	0x20000200
 800333c:	40005400 	.word	0x40005400
 8003340:	00707cbb 	.word	0x00707cbb

08003344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003348:	4b14      	ldr	r3, [pc, #80]	@ (800339c <MX_USART2_UART_Init+0x58>)
 800334a:	4a15      	ldr	r2, [pc, #84]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800334c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800334e:	4b13      	ldr	r3, [pc, #76]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003350:	22e1      	movs	r2, #225	@ 0xe1
 8003352:	0252      	lsls	r2, r2, #9
 8003354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <MX_USART2_UART_Init+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <MX_USART2_UART_Init+0x58>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <MX_USART2_UART_Init+0x58>)
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003382:	2200      	movs	r2, #0
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003386:	4b05      	ldr	r3, [pc, #20]	@ (800339c <MX_USART2_UART_Init+0x58>)
 8003388:	0018      	movs	r0, r3
 800338a:	f003 fa09 	bl	80067a0 <HAL_UART_Init>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d001      	beq.n	8003396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003392:	f000 f847 	bl	8003424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200002e4 	.word	0x200002e4
 80033a0:	40004400 	.word	0x40004400

080033a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033aa:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <MX_DMA_Init+0x38>)
 80033ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <MX_DMA_Init+0x38>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	430a      	orrs	r2, r1
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80033b6:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <MX_DMA_Init+0x38>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	200b      	movs	r0, #11
 80033c8:	f000 fba6 	bl	8003b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80033cc:	200b      	movs	r0, #11
 80033ce:	f000 fbb8 	bl	8003b42 <HAL_NVIC_EnableIRQ>

}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b002      	add	sp, #8
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	40021000 	.word	0x40021000

080033e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <MX_GPIO_Init+0x40>)
 80033e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <MX_GPIO_Init+0x40>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <MX_GPIO_Init+0x40>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	2201      	movs	r2, #1
 80033f8:	4013      	ands	r3, r2
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <MX_GPIO_Init+0x40>)
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <MX_GPIO_Init+0x40>)
 8003404:	2102      	movs	r1, #2
 8003406:	430a      	orrs	r2, r1
 8003408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800340a:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <MX_GPIO_Init+0x40>)
 800340c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340e:	2202      	movs	r2, #2
 8003410:	4013      	ands	r3, r2
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	40021000 	.word	0x40021000

08003424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003428:	b672      	cpsid	i
}
 800342a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	e7fd      	b.n	800342c <Error_Handler+0x8>

08003430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003434:	4b07      	ldr	r3, [pc, #28]	@ (8003454 <HAL_MspInit+0x24>)
 8003436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_MspInit+0x24>)
 800343a:	2101      	movs	r1, #1
 800343c:	430a      	orrs	r2, r1
 800343e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <HAL_MspInit+0x24>)
 8003442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <HAL_MspInit+0x24>)
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	0549      	lsls	r1, r1, #21
 800344a:	430a      	orrs	r2, r1
 800344c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b089      	sub	sp, #36	@ 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	240c      	movs	r4, #12
 8003462:	193b      	adds	r3, r7, r4
 8003464:	0018      	movs	r0, r3
 8003466:	2314      	movs	r3, #20
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f004 fef4 	bl	8008258 <memset>
  if(hi2c->Instance==I2C1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a45      	ldr	r2, [pc, #276]	@ (800358c <HAL_I2C_MspInit+0x134>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d000      	beq.n	800347c <HAL_I2C_MspInit+0x24>
 800347a:	e083      	b.n	8003584 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	4b44      	ldr	r3, [pc, #272]	@ (8003590 <HAL_I2C_MspInit+0x138>)
 800347e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003480:	4b43      	ldr	r3, [pc, #268]	@ (8003590 <HAL_I2C_MspInit+0x138>)
 8003482:	2102      	movs	r1, #2
 8003484:	430a      	orrs	r2, r1
 8003486:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003488:	4b41      	ldr	r3, [pc, #260]	@ (8003590 <HAL_I2C_MspInit+0x138>)
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8003494:	193b      	adds	r3, r7, r4
 8003496:	22c0      	movs	r2, #192	@ 0xc0
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349c:	0021      	movs	r1, r4
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2212      	movs	r2, #18
 80034a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2201      	movs	r2, #1
 80034a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2203      	movs	r2, #3
 80034ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2204      	movs	r2, #4
 80034b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	4a36      	ldr	r2, [pc, #216]	@ (8003594 <HAL_I2C_MspInit+0x13c>)
 80034ba:	0019      	movs	r1, r3
 80034bc:	0010      	movs	r0, r2
 80034be:	f000 fcd7 	bl	8003e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034c2:	4b33      	ldr	r3, [pc, #204]	@ (8003590 <HAL_I2C_MspInit+0x138>)
 80034c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c6:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <HAL_I2C_MspInit+0x138>)
 80034c8:	2180      	movs	r1, #128	@ 0x80
 80034ca:	0389      	lsls	r1, r1, #14
 80034cc:	430a      	orrs	r2, r1
 80034ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80034d0:	4b31      	ldr	r3, [pc, #196]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034d2:	4a32      	ldr	r2, [pc, #200]	@ (800359c <HAL_I2C_MspInit+0x144>)
 80034d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80034d6:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034d8:	2206      	movs	r2, #6
 80034da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f4:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80034fa:	4b27      	ldr	r3, [pc, #156]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003500:	4b25      	ldr	r3, [pc, #148]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 8003502:	2200      	movs	r2, #0
 8003504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003506:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 8003508:	0018      	movs	r0, r3
 800350a:	f000 fb37 	bl	8003b7c <HAL_DMA_Init>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_MspInit+0xbe>
    {
      Error_Handler();
 8003512:	f7ff ff87 	bl	8003424 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 800351a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800351c:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <HAL_I2C_MspInit+0x140>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003522:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003524:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_I2C_MspInit+0x14c>)
 8003526:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 800352a:	2206      	movs	r2, #6
 800352c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800352e:	4b1c      	ldr	r3, [pc, #112]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003530:	2210      	movs	r2, #16
 8003532:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003534:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800353a:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 800353c:	2280      	movs	r2, #128	@ 0x80
 800353e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003540:	4b17      	ldr	r3, [pc, #92]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003546:	4b16      	ldr	r3, [pc, #88]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800354c:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003552:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003558:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 800355a:	0018      	movs	r0, r3
 800355c:	f000 fb0e 	bl	8003b7c <HAL_DMA_Init>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8003564:	f7ff ff5e 	bl	8003424 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0d      	ldr	r2, [pc, #52]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38
 800356e:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_I2C_MspInit+0x148>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003574:	2200      	movs	r2, #0
 8003576:	2100      	movs	r1, #0
 8003578:	2017      	movs	r0, #23
 800357a:	f000 facd 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800357e:	2017      	movs	r0, #23
 8003580:	f000 fadf 	bl	8003b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b009      	add	sp, #36	@ 0x24
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	40005400 	.word	0x40005400
 8003590:	40021000 	.word	0x40021000
 8003594:	50000400 	.word	0x50000400
 8003598:	20000254 	.word	0x20000254
 800359c:	40020080 	.word	0x40020080
 80035a0:	2000029c 	.word	0x2000029c
 80035a4:	4002006c 	.word	0x4002006c

080035a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	240c      	movs	r4, #12
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	0018      	movs	r0, r3
 80035b6:	2314      	movs	r3, #20
 80035b8:	001a      	movs	r2, r3
 80035ba:	2100      	movs	r1, #0
 80035bc:	f004 fe4c 	bl	8008258 <memset>
  if(huart->Instance==USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	@ (8003628 <HAL_UART_MspInit+0x80>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d129      	bne.n	800361e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <HAL_UART_MspInit+0x84>)
 80035cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ce:	4b17      	ldr	r3, [pc, #92]	@ (800362c <HAL_UART_MspInit+0x84>)
 80035d0:	2180      	movs	r1, #128	@ 0x80
 80035d2:	0289      	lsls	r1, r1, #10
 80035d4:	430a      	orrs	r2, r1
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <HAL_UART_MspInit+0x84>)
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	4b13      	ldr	r3, [pc, #76]	@ (800362c <HAL_UART_MspInit+0x84>)
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035e4:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_UART_MspInit+0x84>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 80035f0:	0021      	movs	r1, r4
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <HAL_UART_MspInit+0x88>)
 80035f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2202      	movs	r2, #2
 80035fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2203      	movs	r2, #3
 8003608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2204      	movs	r2, #4
 800360e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003610:	187a      	adds	r2, r7, r1
 8003612:	23a0      	movs	r3, #160	@ 0xa0
 8003614:	05db      	lsls	r3, r3, #23
 8003616:	0011      	movs	r1, r2
 8003618:	0018      	movs	r0, r3
 800361a:	f000 fc29 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b009      	add	sp, #36	@ 0x24
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	40004400 	.word	0x40004400
 800362c:	40021000 	.word	0x40021000
 8003630:	00008004 	.word	0x00008004

08003634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	e7fd      	b.n	8003638 <NMI_Handler+0x4>

0800363c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	e7fd      	b.n	8003640 <HardFault_Handler+0x4>

08003644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800365c:	f000 f970 	bl	8003940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003660:	46c0      	nop			@ (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 800366e:	0018      	movs	r0, r3
 8003670:	f000 fb43 	bl	8003cfa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003674:	4b04      	ldr	r3, [pc, #16]	@ (8003688 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8003676:	0018      	movs	r0, r3
 8003678:	f000 fb3f 	bl	8003cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	2000029c 	.word	0x2000029c
 8003688:	20000254 	.word	0x20000254

0800368c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <I2C1_IRQHandler+0x2c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	23e0      	movs	r3, #224	@ 0xe0
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4013      	ands	r3, r2
 800369c:	d004      	beq.n	80036a8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <I2C1_IRQHandler+0x2c>)
 80036a0:	0018      	movs	r0, r3
 80036a2:	f001 f823 	bl	80046ec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80036a6:	e003      	b.n	80036b0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <I2C1_IRQHandler+0x2c>)
 80036aa:	0018      	movs	r0, r3
 80036ac:	f001 f804 	bl	80046b8 <HAL_I2C_EV_IRQHandler>
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000200 	.word	0x20000200

080036bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  return 1;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_kill>:

int _kill(int pid, int sig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036d2:	f004 fe1b 	bl	800830c <__errno>
 80036d6:	0003      	movs	r3, r0
 80036d8:	2216      	movs	r2, #22
 80036da:	601a      	str	r2, [r3, #0]
  return -1;
 80036dc:	2301      	movs	r3, #1
 80036de:	425b      	negs	r3, r3
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_exit>:

void _exit (int status)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036f0:	2301      	movs	r3, #1
 80036f2:	425a      	negs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ffe5 	bl	80036c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	e7fd      	b.n	80036fe <_exit+0x16>

08003702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e00a      	b.n	800372a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003714:	e000      	b.n	8003718 <_read+0x16>
 8003716:	bf00      	nop
 8003718:	0001      	movs	r1, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	60ba      	str	r2, [r7, #8]
 8003720:	b2ca      	uxtb	r2, r1
 8003722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	429a      	cmp	r2, r3
 8003730:	dbf0      	blt.n	8003714 <_read+0x12>
  }

  return len;
 8003732:	687b      	ldr	r3, [r7, #4]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}

0800373c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e009      	b.n	8003762 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	60ba      	str	r2, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	0018      	movs	r0, r3
 8003758:	e000      	b.n	800375c <_write+0x20>
 800375a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	dbf1      	blt.n	800374e <_write+0x12>
  }
  return len;
 800376a:	687b      	ldr	r3, [r7, #4]
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}

08003774 <_close>:

int _close(int file)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800377c:	2301      	movs	r3, #1
 800377e:	425b      	negs	r3, r3
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	0192      	lsls	r2, r2, #6
 8003798:	605a      	str	r2, [r3, #4]
  return 0;
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_isatty>:

int _isatty(int file)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b002      	add	sp, #8
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b004      	add	sp, #16
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d4:	4a14      	ldr	r2, [pc, #80]	@ (8003828 <_sbrk+0x5c>)
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <_sbrk+0x60>)
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <_sbrk+0x64>)
 80037ea:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <_sbrk+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	18d3      	adds	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d207      	bcs.n	800380c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037fc:	f004 fd86 	bl	800830c <__errno>
 8003800:	0003      	movs	r3, r0
 8003802:	220c      	movs	r2, #12
 8003804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003806:	2301      	movs	r3, #1
 8003808:	425b      	negs	r3, r3
 800380a:	e009      	b.n	8003820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <_sbrk+0x64>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	18d2      	adds	r2, r2, r3
 800381a:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <_sbrk+0x64>)
 800381c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20005000 	.word	0x20005000
 800382c:	00000400 	.word	0x00000400
 8003830:	2000036c 	.word	0x2000036c
 8003834:	200004c0 	.word	0x200004c0

08003838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003844:	480d      	ldr	r0, [pc, #52]	@ (800387c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003846:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003848:	f7ff fff6 	bl	8003838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800384c:	480c      	ldr	r0, [pc, #48]	@ (8003880 <LoopForever+0x6>)
  ldr r1, =_edata
 800384e:	490d      	ldr	r1, [pc, #52]	@ (8003884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003850:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <LoopForever+0xe>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003854:	e002      	b.n	800385c <LoopCopyDataInit>

08003856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385a:	3304      	adds	r3, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800385c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800385e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003860:	d3f9      	bcc.n	8003856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003864:	4c0a      	ldr	r4, [pc, #40]	@ (8003890 <LoopForever+0x16>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003868:	e001      	b.n	800386e <LoopFillZerobss>

0800386a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800386c:	3204      	adds	r2, #4

0800386e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800386e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003870:	d3fb      	bcc.n	800386a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003872:	f004 fd51 	bl	8008318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003876:	f7ff fc57 	bl	8003128 <main>

0800387a <LoopForever>:

LoopForever:
    b LoopForever
 800387a:	e7fe      	b.n	800387a <LoopForever>
   ldr   r0, =_estack
 800387c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003884:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003888:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 800388c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003890:	200004c0 	.word	0x200004c0

08003894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003894:	e7fe      	b.n	8003894 <ADC1_COMP_IRQHandler>
	...

08003898 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_Init+0x3c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <HAL_Init+0x3c>)
 80038aa:	2140      	movs	r1, #64	@ 0x40
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038b0:	2000      	movs	r0, #0
 80038b2:	f000 f811 	bl	80038d8 <HAL_InitTick>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e001      	b.n	80038c6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038c2:	f7ff fdb5 	bl	8003430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	40022000 	.word	0x40022000

080038d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e0:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <HAL_InitTick+0x5c>)
 80038e2:	681c      	ldr	r4, [r3, #0]
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <HAL_InitTick+0x60>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	0019      	movs	r1, r3
 80038ea:	23fa      	movs	r3, #250	@ 0xfa
 80038ec:	0098      	lsls	r0, r3, #2
 80038ee:	f7fc fc27 	bl	8000140 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	0019      	movs	r1, r3
 80038f6:	0020      	movs	r0, r4
 80038f8:	f7fc fc22 	bl	8000140 <__udivsi3>
 80038fc:	0003      	movs	r3, r0
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 f92f 	bl	8003b62 <HAL_SYSTICK_Config>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d001      	beq.n	800390c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e00f      	b.n	800392c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d80b      	bhi.n	800392a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	2301      	movs	r3, #1
 8003916:	425b      	negs	r3, r3
 8003918:	2200      	movs	r2, #0
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f8fc 	bl	8003b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_InitTick+0x64>)
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b003      	add	sp, #12
 8003932:	bd90      	pop	{r4, r7, pc}
 8003934:	20000004 	.word	0x20000004
 8003938:	2000000c 	.word	0x2000000c
 800393c:	20000008 	.word	0x20000008

08003940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_IncTick+0x1c>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	001a      	movs	r2, r3
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_IncTick+0x20>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	18d2      	adds	r2, r2, r3
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_IncTick+0x20>)
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	2000000c 	.word	0x2000000c
 8003960:	20000370 	.word	0x20000370

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b02      	ldr	r3, [pc, #8]	@ (8003974 <HAL_GetTick+0x10>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	20000370 	.word	0x20000370

08003978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff fff0 	bl	8003964 <HAL_GetTick>
 8003984:	0003      	movs	r3, r0
 8003986:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	d005      	beq.n	800399e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003992:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_Delay+0x44>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	001a      	movs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	189b      	adds	r3, r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	f7ff ffe0 	bl	8003964 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d8f7      	bhi.n	80039a0 <HAL_Delay+0x28>
  {
  }
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b004      	add	sp, #16
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	0002      	movs	r2, r0
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039cc:	1dfb      	adds	r3, r7, #7
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80039d2:	d809      	bhi.n	80039e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	001a      	movs	r2, r3
 80039da:	231f      	movs	r3, #31
 80039dc:	401a      	ands	r2, r3
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <__NVIC_EnableIRQ+0x30>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	4091      	lsls	r1, r2
 80039e4:	000a      	movs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
  }
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	0002      	movs	r2, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a08:	d828      	bhi.n	8003a5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac8 <__NVIC_SetPriority+0xd4>)
 8003a0c:	1dfb      	adds	r3, r7, #7
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	33c0      	adds	r3, #192	@ 0xc0
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	589b      	ldr	r3, [r3, r2]
 8003a1a:	1dfa      	adds	r2, r7, #7
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	2203      	movs	r2, #3
 8003a22:	400a      	ands	r2, r1
 8003a24:	00d2      	lsls	r2, r2, #3
 8003a26:	21ff      	movs	r1, #255	@ 0xff
 8003a28:	4091      	lsls	r1, r2
 8003a2a:	000a      	movs	r2, r1
 8003a2c:	43d2      	mvns	r2, r2
 8003a2e:	401a      	ands	r2, r3
 8003a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	22ff      	movs	r2, #255	@ 0xff
 8003a38:	401a      	ands	r2, r3
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	2303      	movs	r3, #3
 8003a42:	4003      	ands	r3, r0
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a48:	481f      	ldr	r0, [pc, #124]	@ (8003ac8 <__NVIC_SetPriority+0xd4>)
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	430a      	orrs	r2, r1
 8003a54:	33c0      	adds	r3, #192	@ 0xc0
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a5a:	e031      	b.n	8003ac0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <__NVIC_SetPriority+0xd8>)
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	0019      	movs	r1, r3
 8003a64:	230f      	movs	r3, #15
 8003a66:	400b      	ands	r3, r1
 8003a68:	3b08      	subs	r3, #8
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3306      	adds	r3, #6
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	18d3      	adds	r3, r2, r3
 8003a72:	3304      	adds	r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	1dfa      	adds	r2, r7, #7
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	400a      	ands	r2, r1
 8003a80:	00d2      	lsls	r2, r2, #3
 8003a82:	21ff      	movs	r1, #255	@ 0xff
 8003a84:	4091      	lsls	r1, r2
 8003a86:	000a      	movs	r2, r1
 8003a88:	43d2      	mvns	r2, r2
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	22ff      	movs	r2, #255	@ 0xff
 8003a94:	401a      	ands	r2, r3
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	4003      	ands	r3, r0
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa4:	4809      	ldr	r0, [pc, #36]	@ (8003acc <__NVIC_SetPriority+0xd8>)
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	001c      	movs	r4, r3
 8003aac:	230f      	movs	r3, #15
 8003aae:	4023      	ands	r3, r4
 8003ab0:	3b08      	subs	r3, #8
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	18c3      	adds	r3, r0, r3
 8003abc:	3304      	adds	r3, #4
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b003      	add	sp, #12
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	e000e100 	.word	0xe000e100
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1e5a      	subs	r2, r3, #1
 8003adc:	2380      	movs	r3, #128	@ 0x80
 8003ade:	045b      	lsls	r3, r3, #17
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d301      	bcc.n	8003ae8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e010      	b.n	8003b0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <SysTick_Config+0x44>)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	3a01      	subs	r2, #1
 8003aee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af0:	2301      	movs	r3, #1
 8003af2:	425b      	negs	r3, r3
 8003af4:	2103      	movs	r1, #3
 8003af6:	0018      	movs	r0, r3
 8003af8:	f7ff ff7c 	bl	80039f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <SysTick_Config+0x44>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <SysTick_Config+0x44>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	210f      	movs	r1, #15
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	1c02      	adds	r2, r0, #0
 8003b28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff ff5d 	bl	80039f4 <__NVIC_SetPriority>
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	0002      	movs	r2, r0
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7ff ff33 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7ff ffaf 	bl	8003ad0 <SysTick_Config>
 8003b72:	0003      	movs	r3, r0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e061      	b.n	8003c52 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a32      	ldr	r2, [pc, #200]	@ (8003c5c <HAL_DMA_Init+0xe0>)
 8003b94:	4694      	mov	ip, r2
 8003b96:	4463      	add	r3, ip
 8003b98:	2114      	movs	r1, #20
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f7fc fad0 	bl	8000140 <__udivsi3>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <HAL_DMA_Init+0xe4>)
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2225      	movs	r2, #37	@ 0x25
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a28      	ldr	r2, [pc, #160]	@ (8003c64 <HAL_DMA_Init+0xe8>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	01db      	lsls	r3, r3, #7
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <HAL_DMA_Init+0xec>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	211c      	movs	r1, #28
 8003c12:	400b      	ands	r3, r1
 8003c14:	210f      	movs	r1, #15
 8003c16:	4099      	lsls	r1, r3
 8003c18:	000b      	movs	r3, r1
 8003c1a:	43d9      	mvns	r1, r3
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_DMA_Init+0xec>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c22:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <HAL_DMA_Init+0xec>)
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	201c      	movs	r0, #28
 8003c30:	4003      	ands	r3, r0
 8003c32:	409a      	lsls	r2, r3
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <HAL_DMA_Init+0xec>)
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2225      	movs	r2, #37	@ 0x25
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	bffdfff8 	.word	0xbffdfff8
 8003c60:	40020000 	.word	0x40020000
 8003c64:	ffff800f 	.word	0xffff800f
 8003c68:	400200a8 	.word	0x400200a8

08003c6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	210f      	movs	r1, #15
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2225      	movs	r2, #37	@ 0x25
 8003c80:	5c9b      	ldrb	r3, [r3, r2]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d006      	beq.n	8003c96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e02a      	b.n	8003cec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	210e      	movs	r1, #14
 8003ca2:	438a      	bics	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	438a      	bics	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	221c      	movs	r2, #28
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4091      	lsls	r1, r2
 8003cc6:	000a      	movs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2225      	movs	r2, #37	@ 0x25
 8003cce:	2101      	movs	r1, #1
 8003cd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	@ 0x24
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	0010      	movs	r0, r2
 8003cea:	4798      	blx	r3
    }
  }
  return status;
 8003cec:	230f      	movs	r3, #15
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	221c      	movs	r2, #28
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	0013      	movs	r3, r2
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	d026      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7a>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d107      	bne.n	8003d4a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2104      	movs	r1, #4
 8003d46:	438a      	bics	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4e:	221c      	movs	r2, #28
 8003d50:	401a      	ands	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2104      	movs	r1, #4
 8003d58:	4091      	lsls	r1, r2
 8003d5a:	000a      	movs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d100      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x6e>
 8003d66:	e071      	b.n	8003e4c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	0010      	movs	r0, r2
 8003d70:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003d72:	e06b      	b.n	8003e4c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d78:	221c      	movs	r2, #28
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	0013      	movs	r3, r2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4013      	ands	r3, r2
 8003d86:	d02d      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xea>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d029      	beq.n	8003de4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2220      	movs	r2, #32
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d10b      	bne.n	8003db4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	210a      	movs	r1, #10
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2225      	movs	r2, #37	@ 0x25
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	221c      	movs	r2, #28
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4091      	lsls	r1, r2
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	@ 0x24
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d039      	beq.n	8003e4c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	0010      	movs	r0, r2
 8003de0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003de2:	e033      	b.n	8003e4c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de8:	221c      	movs	r2, #28
 8003dea:	4013      	ands	r3, r2
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	0013      	movs	r3, r2
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	d02a      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x154>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d026      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	210e      	movs	r1, #14
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	221c      	movs	r2, #28
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4091      	lsls	r1, r2
 8003e20:	000a      	movs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2225      	movs	r2, #37	@ 0x25
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2224      	movs	r2, #36	@ 0x24
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	0010      	movs	r0, r2
 8003e4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e4c:	46c0      	nop			@ (mov r8, r8)
 8003e4e:	46c0      	nop			@ (mov r8, r8)
}
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2225      	movs	r2, #37	@ 0x25
 8003e62:	5c9b      	ldrb	r3, [r3, r2]
 8003e64:	b2db      	uxtb	r3, r3
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b002      	add	sp, #8
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e86:	e155      	b.n	8004134 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4091      	lsls	r1, r2
 8003e92:	000a      	movs	r2, r1
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d100      	bne.n	8003ea0 <HAL_GPIO_Init+0x30>
 8003e9e:	e146      	b.n	800412e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d005      	beq.n	8003eb8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d130      	bne.n	8003f1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	0013      	movs	r3, r2
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eee:	2201      	movs	r2, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	2201      	movs	r2, #1
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	4013      	ands	r3, r2
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d017      	beq.n	8003f56 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	409a      	lsls	r2, r3
 8003f34:	0013      	movs	r3, r2
 8003f36:	43da      	mvns	r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d123      	bne.n	8003faa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	08da      	lsrs	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3208      	adds	r2, #8
 8003f6a:	0092      	lsls	r2, r2, #2
 8003f6c:	58d3      	ldr	r3, [r2, r3]
 8003f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2207      	movs	r2, #7
 8003f74:	4013      	ands	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2107      	movs	r1, #7
 8003f8e:	400b      	ands	r3, r1
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	08da      	lsrs	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3208      	adds	r2, #8
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	0013      	movs	r3, r2
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	401a      	ands	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	23c0      	movs	r3, #192	@ 0xc0
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d100      	bne.n	8003fec <HAL_GPIO_Init+0x17c>
 8003fea:	e0a0      	b.n	800412e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fec:	4b57      	ldr	r3, [pc, #348]	@ (800414c <HAL_GPIO_Init+0x2dc>)
 8003fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ff0:	4b56      	ldr	r3, [pc, #344]	@ (800414c <HAL_GPIO_Init+0x2dc>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff8:	4a55      	ldr	r2, [pc, #340]	@ (8004150 <HAL_GPIO_Init+0x2e0>)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	589b      	ldr	r3, [r3, r2]
 8004004:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2203      	movs	r2, #3
 800400a:	4013      	ands	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	409a      	lsls	r2, r3
 8004012:	0013      	movs	r3, r2
 8004014:	43da      	mvns	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	23a0      	movs	r3, #160	@ 0xa0
 8004020:	05db      	lsls	r3, r3, #23
 8004022:	429a      	cmp	r2, r3
 8004024:	d01f      	beq.n	8004066 <HAL_GPIO_Init+0x1f6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4a      	ldr	r2, [pc, #296]	@ (8004154 <HAL_GPIO_Init+0x2e4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d019      	beq.n	8004062 <HAL_GPIO_Init+0x1f2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a49      	ldr	r2, [pc, #292]	@ (8004158 <HAL_GPIO_Init+0x2e8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_GPIO_Init+0x1ee>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a48      	ldr	r2, [pc, #288]	@ (800415c <HAL_GPIO_Init+0x2ec>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00d      	beq.n	800405a <HAL_GPIO_Init+0x1ea>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a47      	ldr	r2, [pc, #284]	@ (8004160 <HAL_GPIO_Init+0x2f0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x1e6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a46      	ldr	r2, [pc, #280]	@ (8004164 <HAL_GPIO_Init+0x2f4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_GPIO_Init+0x1e2>
 800404e:	2305      	movs	r3, #5
 8004050:	e00a      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 8004052:	2306      	movs	r3, #6
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 8004056:	2304      	movs	r3, #4
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x1f8>
 8004066:	2300      	movs	r3, #0
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	2103      	movs	r1, #3
 800406c:	400a      	ands	r2, r1
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	@ (8004150 <HAL_GPIO_Init+0x2e0>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004086:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	43da      	mvns	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	035b      	lsls	r3, r3, #13
 800409e:	4013      	ands	r3, r2
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80040b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43da      	mvns	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	039b      	lsls	r3, r3, #14
 80040c8:	4013      	ands	r3, r2
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040d4:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80040da:	4b23      	ldr	r3, [pc, #140]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	4013      	ands	r3, r2
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004104:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	43da      	mvns	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	025b      	lsls	r3, r3, #9
 800411c:	4013      	ands	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3301      	adds	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	40da      	lsrs	r2, r3
 800413c:	1e13      	subs	r3, r2, #0
 800413e:	d000      	beq.n	8004142 <HAL_GPIO_Init+0x2d2>
 8004140:	e6a2      	b.n	8003e88 <HAL_GPIO_Init+0x18>
  }
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b006      	add	sp, #24
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40010000 	.word	0x40010000
 8004154:	50000400 	.word	0x50000400
 8004158:	50000800 	.word	0x50000800
 800415c:	50000c00 	.word	0x50000c00
 8004160:	50001000 	.word	0x50001000
 8004164:	50001c00 	.word	0x50001c00
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e082      	b.n	8004284 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2241      	movs	r2, #65	@ 0x41
 8004182:	5c9b      	ldrb	r3, [r3, r2]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	2100      	movs	r1, #0
 8004190:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff f95f 	bl	8003458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2241      	movs	r2, #65	@ 0x41
 800419e:	2124      	movs	r1, #36	@ 0x24
 80041a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	438a      	bics	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4934      	ldr	r1, [pc, #208]	@ (800428c <HAL_I2C_Init+0x120>)
 80041bc:	400a      	ands	r2, r1
 80041be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4931      	ldr	r1, [pc, #196]	@ (8004290 <HAL_I2C_Init+0x124>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d108      	bne.n	80041ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2180      	movs	r1, #128	@ 0x80
 80041e2:	0209      	lsls	r1, r1, #8
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	e007      	b.n	80041fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2184      	movs	r1, #132	@ 0x84
 80041f4:	0209      	lsls	r1, r1, #8
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d104      	bne.n	800420c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2280      	movs	r2, #128	@ 0x80
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	491f      	ldr	r1, [pc, #124]	@ (8004294 <HAL_I2C_Init+0x128>)
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	491a      	ldr	r1, [pc, #104]	@ (8004290 <HAL_I2C_Init+0x124>)
 8004228:	400a      	ands	r2, r1
 800422a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	431a      	orrs	r2, r3
 8004236:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69d9      	ldr	r1, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2101      	movs	r1, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2241      	movs	r2, #65	@ 0x41
 8004270:	2120      	movs	r1, #32
 8004272:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2242      	movs	r2, #66	@ 0x42
 800427e:	2100      	movs	r1, #0
 8004280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}
 800428c:	f0ffffff 	.word	0xf0ffffff
 8004290:	ffff7fff 	.word	0xffff7fff
 8004294:	02008000 	.word	0x02008000

08004298 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b089      	sub	sp, #36	@ 0x24
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	0008      	movs	r0, r1
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	0019      	movs	r1, r3
 80042a6:	230a      	movs	r3, #10
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	1c02      	adds	r2, r0, #0
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	2308      	movs	r3, #8
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	1c0a      	adds	r2, r1, #0
 80042b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2241      	movs	r2, #65	@ 0x41
 80042ba:	5c9b      	ldrb	r3, [r3, r2]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d000      	beq.n	80042c4 <HAL_I2C_Master_Transmit+0x2c>
 80042c2:	e0e7      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2240      	movs	r2, #64	@ 0x40
 80042c8:	5c9b      	ldrb	r3, [r3, r2]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Master_Transmit+0x3a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0e1      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2240      	movs	r2, #64	@ 0x40
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042da:	f7ff fb43 	bl	8003964 <HAL_GetTick>
 80042de:	0003      	movs	r3, r0
 80042e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e2:	2380      	movs	r3, #128	@ 0x80
 80042e4:	0219      	lsls	r1, r3, #8
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2319      	movs	r3, #25
 80042ee:	2201      	movs	r2, #1
 80042f0:	f000 ff7a 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	1e03      	subs	r3, r0, #0
 80042f6:	d001      	beq.n	80042fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cc      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2241      	movs	r2, #65	@ 0x41
 8004300:	2121      	movs	r1, #33	@ 0x21
 8004302:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2242      	movs	r2, #66	@ 0x42
 8004308:	2110      	movs	r1, #16
 800430a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2208      	movs	r2, #8
 800431c:	18ba      	adds	r2, r7, r2
 800431e:	8812      	ldrh	r2, [r2, #0]
 8004320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2bff      	cmp	r3, #255	@ 0xff
 8004330:	d911      	bls.n	8004356 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	22ff      	movs	r2, #255	@ 0xff
 8004336:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433c:	b2da      	uxtb	r2, r3
 800433e:	2380      	movs	r3, #128	@ 0x80
 8004340:	045c      	lsls	r4, r3, #17
 8004342:	230a      	movs	r3, #10
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	8819      	ldrh	r1, [r3, #0]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	4b55      	ldr	r3, [pc, #340]	@ (80044a0 <HAL_I2C_Master_Transmit+0x208>)
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	0023      	movs	r3, r4
 8004350:	f001 f99c 	bl	800568c <I2C_TransferConfig>
 8004354:	e075      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004364:	b2da      	uxtb	r2, r3
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	049c      	lsls	r4, r3, #18
 800436a:	230a      	movs	r3, #10
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	8819      	ldrh	r1, [r3, #0]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	4b4b      	ldr	r3, [pc, #300]	@ (80044a0 <HAL_I2C_Master_Transmit+0x208>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	0023      	movs	r3, r4
 8004378:	f001 f988 	bl	800568c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800437c:	e061      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 ff7d 	bl	8005284 <I2C_WaitOnTXISFlagUntilTimeout>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e081      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d03a      	beq.n	8004442 <HAL_I2C_Master_Transmit+0x1aa>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d136      	bne.n	8004442 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	0013      	movs	r3, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	f000 ff01 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 80043e6:	1e03      	subs	r3, r0, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e053      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2bff      	cmp	r3, #255	@ 0xff
 80043f6:	d911      	bls.n	800441c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	22ff      	movs	r2, #255	@ 0xff
 80043fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	045c      	lsls	r4, r3, #17
 8004408:	230a      	movs	r3, #10
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	8819      	ldrh	r1, [r3, #0]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	2300      	movs	r3, #0
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	0023      	movs	r3, r4
 8004416:	f001 f939 	bl	800568c <I2C_TransferConfig>
 800441a:	e012      	b.n	8004442 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442a:	b2da      	uxtb	r2, r3
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	049c      	lsls	r4, r3, #18
 8004430:	230a      	movs	r3, #10
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	8819      	ldrh	r1, [r3, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	2300      	movs	r3, #0
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	0023      	movs	r3, r4
 800443e:	f001 f925 	bl	800568c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d198      	bne.n	800437e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	0018      	movs	r0, r3
 8004454:	f000 ff5c 	bl	8005310 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d001      	beq.n	8004460 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01a      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2220      	movs	r2, #32
 8004466:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	490c      	ldr	r1, [pc, #48]	@ (80044a4 <HAL_I2C_Master_Transmit+0x20c>)
 8004474:	400a      	ands	r2, r1
 8004476:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2241      	movs	r2, #65	@ 0x41
 800447c:	2120      	movs	r1, #32
 800447e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2242      	movs	r2, #66	@ 0x42
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2240      	movs	r2, #64	@ 0x40
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b007      	add	sp, #28
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	80002000 	.word	0x80002000
 80044a4:	fe00e800 	.word	0xfe00e800

080044a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b089      	sub	sp, #36	@ 0x24
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	0008      	movs	r0, r1
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	0019      	movs	r1, r3
 80044b6:	230a      	movs	r3, #10
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	1c02      	adds	r2, r0, #0
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	2308      	movs	r3, #8
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	1c0a      	adds	r2, r1, #0
 80044c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2241      	movs	r2, #65	@ 0x41
 80044ca:	5c9b      	ldrb	r3, [r3, r2]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d000      	beq.n	80044d4 <HAL_I2C_Master_Receive+0x2c>
 80044d2:	e0e8      	b.n	80046a6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	@ 0x40
 80044d8:	5c9b      	ldrb	r3, [r3, r2]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Master_Receive+0x3a>
 80044de:	2302      	movs	r3, #2
 80044e0:	e0e2      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2240      	movs	r2, #64	@ 0x40
 80044e6:	2101      	movs	r1, #1
 80044e8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044ea:	f7ff fa3b 	bl	8003964 <HAL_GetTick>
 80044ee:	0003      	movs	r3, r0
 80044f0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	0219      	lsls	r1, r3, #8
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2319      	movs	r3, #25
 80044fe:	2201      	movs	r2, #1
 8004500:	f000 fe72 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 8004504:	1e03      	subs	r3, r0, #0
 8004506:	d001      	beq.n	800450c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0cd      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2241      	movs	r2, #65	@ 0x41
 8004510:	2122      	movs	r1, #34	@ 0x22
 8004512:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2242      	movs	r2, #66	@ 0x42
 8004518:	2110      	movs	r1, #16
 800451a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2208      	movs	r2, #8
 800452c:	18ba      	adds	r2, r7, r2
 800452e:	8812      	ldrh	r2, [r2, #0]
 8004530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2bff      	cmp	r3, #255	@ 0xff
 8004540:	d911      	bls.n	8004566 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	22ff      	movs	r2, #255	@ 0xff
 8004546:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	b2da      	uxtb	r2, r3
 800454e:	2380      	movs	r3, #128	@ 0x80
 8004550:	045c      	lsls	r4, r3, #17
 8004552:	230a      	movs	r3, #10
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	8819      	ldrh	r1, [r3, #0]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	4b55      	ldr	r3, [pc, #340]	@ (80046b0 <HAL_I2C_Master_Receive+0x208>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	0023      	movs	r3, r4
 8004560:	f001 f894 	bl	800568c <I2C_TransferConfig>
 8004564:	e076      	b.n	8004654 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004574:	b2da      	uxtb	r2, r3
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	049c      	lsls	r4, r3, #18
 800457a:	230a      	movs	r3, #10
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	8819      	ldrh	r1, [r3, #0]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	4b4b      	ldr	r3, [pc, #300]	@ (80046b0 <HAL_I2C_Master_Receive+0x208>)
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	0023      	movs	r3, r4
 8004588:	f001 f880 	bl	800568c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800458c:	e062      	b.n	8004654 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 feff 	bl	8005398 <I2C_WaitOnRXNEFlagUntilTimeout>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e082      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d03a      	beq.n	8004654 <HAL_I2C_Master_Receive+0x1ac>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d136      	bne.n	8004654 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	0013      	movs	r3, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	f000 fdf8 	bl	80051e8 <I2C_WaitOnFlagUntilTimeout>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e053      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2bff      	cmp	r3, #255	@ 0xff
 8004608:	d911      	bls.n	800462e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	22ff      	movs	r2, #255	@ 0xff
 800460e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	b2da      	uxtb	r2, r3
 8004616:	2380      	movs	r3, #128	@ 0x80
 8004618:	045c      	lsls	r4, r3, #17
 800461a:	230a      	movs	r3, #10
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	8819      	ldrh	r1, [r3, #0]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	2300      	movs	r3, #0
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	0023      	movs	r3, r4
 8004628:	f001 f830 	bl	800568c <I2C_TransferConfig>
 800462c:	e012      	b.n	8004654 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	b2da      	uxtb	r2, r3
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	049c      	lsls	r4, r3, #18
 8004642:	230a      	movs	r3, #10
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	8819      	ldrh	r1, [r3, #0]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	2300      	movs	r3, #0
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	0023      	movs	r3, r4
 8004650:	f001 f81c 	bl	800568c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d197      	bne.n	800458e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 fe53 	bl	8005310 <I2C_WaitOnSTOPFlagUntilTimeout>
 800466a:	1e03      	subs	r3, r0, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e01a      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	490b      	ldr	r1, [pc, #44]	@ (80046b4 <HAL_I2C_Master_Receive+0x20c>)
 8004686:	400a      	ands	r2, r1
 8004688:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2241      	movs	r2, #65	@ 0x41
 800468e:	2120      	movs	r1, #32
 8004690:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2242      	movs	r2, #66	@ 0x42
 8004696:	2100      	movs	r1, #0
 8004698:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2240      	movs	r2, #64	@ 0x40
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b007      	add	sp, #28
 80046ae:	bd90      	pop	{r4, r7, pc}
 80046b0:	80002400 	.word	0x80002400
 80046b4:	fe00e800 	.word	0xfe00e800

080046b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
  }
}
 80046e4:	46c0      	nop			@ (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b004      	add	sp, #16
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	2380      	movs	r3, #128	@ 0x80
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4013      	ands	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2280      	movs	r2, #128	@ 0x80
 8004712:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004714:	d00a      	beq.n	800472c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	2201      	movs	r2, #1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2280      	movs	r2, #128	@ 0x80
 8004728:	0052      	lsls	r2, r2, #1
 800472a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4013      	ands	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800473c:	d00a      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	2208      	movs	r2, #8
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2280      	movs	r2, #128	@ 0x80
 8004750:	00d2      	lsls	r2, r2, #3
 8004752:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	2380      	movs	r3, #128	@ 0x80
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4013      	ands	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2280      	movs	r2, #128	@ 0x80
 8004762:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004764:	d00a      	beq.n	800477c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	2202      	movs	r2, #2
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2280      	movs	r2, #128	@ 0x80
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004780:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	220b      	movs	r2, #11
 8004786:	4013      	ands	r3, r2
 8004788:	d005      	beq.n	8004796 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0011      	movs	r1, r2
 8004790:	0018      	movs	r0, r3
 8004792:	f000 fbbd 	bl	8004f10 <I2C_ITError>
  }
}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b006      	add	sp, #24
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b002      	add	sp, #8
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	0008      	movs	r0, r1
 80047c8:	0011      	movs	r1, r2
 80047ca:	1cfb      	adds	r3, r7, #3
 80047cc:	1c02      	adds	r2, r0, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	003b      	movs	r3, r7
 80047d2:	1c0a      	adds	r2, r1, #0
 80047d4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b002      	add	sp, #8
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b002      	add	sp, #8
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2240      	movs	r2, #64	@ 0x40
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <I2C_Slave_ISR_IT+0x24>
 8004830:	2302      	movs	r3, #2
 8004832:	e0e6      	b.n	8004a02 <I2C_Slave_ISR_IT+0x1f2>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2240      	movs	r2, #64	@ 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2220      	movs	r2, #32
 8004840:	4013      	ands	r3, r2
 8004842:	d009      	beq.n	8004858 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800484a:	d005      	beq.n	8004858 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f000 f9e4 	bl	8004c20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2210      	movs	r2, #16
 800485c:	4013      	ands	r3, r2
 800485e:	d052      	beq.n	8004906 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2210      	movs	r2, #16
 8004864:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004866:	d04e      	beq.n	8004906 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d12d      	bne.n	80048ce <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2241      	movs	r2, #65	@ 0x41
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b28      	cmp	r3, #40	@ 0x28
 800487c:	d10b      	bne.n	8004896 <I2C_Slave_ISR_IT+0x86>
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	049b      	lsls	r3, r3, #18
 8004884:	429a      	cmp	r2, r3
 8004886:	d106      	bne.n	8004896 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fae6 	bl	8004e60 <I2C_ITListenCplt>
 8004894:	e036      	b.n	8004904 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2241      	movs	r2, #65	@ 0x41
 800489a:	5c9b      	ldrb	r3, [r3, r2]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b29      	cmp	r3, #41	@ 0x29
 80048a0:	d110      	bne.n	80048c4 <I2C_Slave_ISR_IT+0xb4>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4a59      	ldr	r2, [pc, #356]	@ (8004a0c <I2C_Slave_ISR_IT+0x1fc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00c      	beq.n	80048c4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2210      	movs	r2, #16
 80048b0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fc56 	bl	8005166 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 f94b 	bl	8004b58 <I2C_ITSlaveSeqCplt>
 80048c2:	e01f      	b.n	8004904 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2210      	movs	r2, #16
 80048ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80048cc:	e091      	b.n	80049f2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	2204      	movs	r2, #4
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <I2C_Slave_ISR_IT+0xe4>
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	045b      	lsls	r3, r3, #17
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d000      	beq.n	80048f4 <I2C_Slave_ISR_IT+0xe4>
 80048f2:	e07e      	b.n	80049f2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	0011      	movs	r1, r2
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 fb07 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004902:	e076      	b.n	80049f2 <I2C_Slave_ISR_IT+0x1e2>
 8004904:	e075      	b.n	80049f2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2204      	movs	r2, #4
 800490a:	4013      	ands	r3, r2
 800490c:	d02f      	beq.n	800496e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004914:	d02b      	beq.n	800496e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d14c      	bne.n	80049f6 <I2C_Slave_ISR_IT+0x1e6>
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a0c <I2C_Slave_ISR_IT+0x1fc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d048      	beq.n	80049f6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	0018      	movs	r0, r3
 8004968:	f000 f8f6 	bl	8004b58 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800496c:	e043      	b.n	80049f6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2208      	movs	r2, #8
 8004972:	4013      	ands	r3, r2
 8004974:	d00a      	beq.n	800498c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2208      	movs	r2, #8
 800497a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800497c:	d006      	beq.n	800498c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0011      	movs	r1, r2
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f843 	bl	8004a10 <I2C_ITAddrCplt>
 800498a:	e035      	b.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2202      	movs	r2, #2
 8004990:	4013      	ands	r3, r2
 8004992:	d031      	beq.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800499a:	d02d      	beq.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049d6:	e00f      	b.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	045b      	lsls	r3, r3, #17
 80049de:	429a      	cmp	r2, r3
 80049e0:	d002      	beq.n	80049e8 <I2C_Slave_ISR_IT+0x1d8>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f8b4 	bl	8004b58 <I2C_ITSlaveSeqCplt>
 80049f0:	e002      	b.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	e000      	b.n	80049f8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80049f6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	@ 0x40
 80049fc:	2100      	movs	r1, #0
 80049fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b006      	add	sp, #24
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	ffff0000 	.word	0xffff0000

08004a10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2241      	movs	r2, #65	@ 0x41
 8004a1e:	5c9b      	ldrb	r3, [r3, r2]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	001a      	movs	r2, r3
 8004a24:	2328      	movs	r3, #40	@ 0x28
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b28      	cmp	r3, #40	@ 0x28
 8004a2a:	d000      	beq.n	8004a2e <I2C_ITAddrCplt+0x1e>
 8004a2c:	e088      	b.n	8004b40 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	250f      	movs	r5, #15
 8004a3a:	197b      	adds	r3, r7, r5
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	400a      	ands	r2, r1
 8004a40:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	200c      	movs	r0, #12
 8004a4e:	183b      	adds	r3, r7, r0
 8004a50:	21fe      	movs	r1, #254	@ 0xfe
 8004a52:	400a      	ands	r2, r1
 8004a54:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	240a      	movs	r4, #10
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	0592      	lsls	r2, r2, #22
 8004a64:	0d92      	lsrs	r2, r2, #22
 8004a66:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	2308      	movs	r3, #8
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	21fe      	movs	r1, #254	@ 0xfe
 8004a76:	400a      	ands	r2, r1
 8004a78:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d148      	bne.n	8004b14 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a82:	0021      	movs	r1, r4
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	09db      	lsrs	r3, r3, #7
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	183b      	adds	r3, r7, r0
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	4053      	eors	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	001a      	movs	r2, r3
 8004a96:	2306      	movs	r3, #6
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d120      	bne.n	8004ade <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004a9c:	183b      	adds	r3, r7, r0
 8004a9e:	187a      	adds	r2, r7, r1
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d14c      	bne.n	8004b50 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2240      	movs	r2, #64	@ 0x40
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004acc:	183b      	adds	r3, r7, r0
 8004ace:	881a      	ldrh	r2, [r3, #0]
 8004ad0:	197b      	adds	r3, r7, r5
 8004ad2:	7819      	ldrb	r1, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7ff fe71 	bl	80047be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004adc:	e038      	b.n	8004b50 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004ade:	240c      	movs	r4, #12
 8004ae0:	193b      	adds	r3, r7, r4
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	18ba      	adds	r2, r7, r2
 8004ae6:	8812      	ldrh	r2, [r2, #0]
 8004ae8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	021a      	lsls	r2, r3, #8
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f000 fe04 	bl	8005700 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2240      	movs	r2, #64	@ 0x40
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	881a      	ldrh	r2, [r3, #0]
 8004b04:	230f      	movs	r3, #15
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	7819      	ldrb	r1, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff fe56 	bl	80047be <HAL_I2C_AddrCallback>
}
 8004b12:	e01d      	b.n	8004b50 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	021a      	lsls	r2, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 fdef 	bl	8005700 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2240      	movs	r2, #64	@ 0x40
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	7819      	ldrb	r1, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fe40 	bl	80047be <HAL_I2C_AddrCallback>
}
 8004b3e:	e007      	b.n	8004b50 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2208      	movs	r2, #8
 8004b46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2240      	movs	r2, #64	@ 0x40
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]
}
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b004      	add	sp, #16
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}

08004b58 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2242      	movs	r2, #66	@ 0x42
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	01db      	lsls	r3, r3, #7
 8004b76:	4013      	ands	r3, r2
 8004b78:	d008      	beq.n	8004b8c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4924      	ldr	r1, [pc, #144]	@ (8004c18 <I2C_ITSlaveSeqCplt+0xc0>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e00c      	b.n	8004ba6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	2380      	movs	r3, #128	@ 0x80
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	4013      	ands	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	491e      	ldr	r1, [pc, #120]	@ (8004c1c <I2C_ITSlaveSeqCplt+0xc4>)
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2241      	movs	r2, #65	@ 0x41
 8004baa:	5c9b      	ldrb	r3, [r3, r2]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b29      	cmp	r3, #41	@ 0x29
 8004bb0:	d114      	bne.n	8004bdc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2241      	movs	r2, #65	@ 0x41
 8004bb6:	2128      	movs	r1, #40	@ 0x28
 8004bb8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2221      	movs	r2, #33	@ 0x21
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 fd9b 	bl	8005700 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2240      	movs	r2, #64	@ 0x40
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff fde2 	bl	800479e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bda:	e019      	b.n	8004c10 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2241      	movs	r2, #65	@ 0x41
 8004be0:	5c9b      	ldrb	r3, [r3, r2]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004be6:	d113      	bne.n	8004c10 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2241      	movs	r2, #65	@ 0x41
 8004bec:	2128      	movs	r1, #40	@ 0x28
 8004bee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2222      	movs	r2, #34	@ 0x22
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 fd80 	bl	8005700 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2240      	movs	r2, #64	@ 0x40
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff fdcf 	bl	80047ae <HAL_I2C_SlaveRxCpltCallback>
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b004      	add	sp, #16
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	ffffbfff 	.word	0xffffbfff
 8004c1c:	ffff7fff 	.word	0xffff7fff

08004c20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c36:	200f      	movs	r0, #15
 8004c38:	183b      	adds	r3, r7, r0
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	2141      	movs	r1, #65	@ 0x41
 8004c3e:	5c52      	ldrb	r2, [r2, r1]
 8004c40:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2220      	movs	r2, #32
 8004c48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c4a:	183b      	adds	r3, r7, r0
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b21      	cmp	r3, #33	@ 0x21
 8004c50:	d003      	beq.n	8004c5a <I2C_ITSlaveCplt+0x3a>
 8004c52:	183b      	adds	r3, r7, r0
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b29      	cmp	r3, #41	@ 0x29
 8004c58:	d109      	bne.n	8004c6e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8004e48 <I2C_ITSlaveCplt+0x228>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0011      	movs	r1, r2
 8004c60:	0018      	movs	r0, r3
 8004c62:	f000 fd4d 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2221      	movs	r2, #33	@ 0x21
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c6c:	e011      	b.n	8004c92 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c6e:	220f      	movs	r2, #15
 8004c70:	18bb      	adds	r3, r7, r2
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b22      	cmp	r3, #34	@ 0x22
 8004c76:	d003      	beq.n	8004c80 <I2C_ITSlaveCplt+0x60>
 8004c78:	18bb      	adds	r3, r7, r2
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c7e:	d108      	bne.n	8004c92 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c80:	4a72      	ldr	r2, [pc, #456]	@ (8004e4c <I2C_ITSlaveCplt+0x22c>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0011      	movs	r1, r2
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 fd3a 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2222      	movs	r2, #34	@ 0x22
 8004c90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2180      	movs	r1, #128	@ 0x80
 8004c9e:	0209      	lsls	r1, r1, #8
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4968      	ldr	r1, [pc, #416]	@ (8004e50 <I2C_ITSlaveCplt+0x230>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 fa55 	bl	8005166 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	01db      	lsls	r3, r3, #7
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d013      	beq.n	8004cee <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4960      	ldr	r1, [pc, #384]	@ (8004e54 <I2C_ITSlaveCplt+0x234>)
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01f      	beq.n	8004d1e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cec:	e017      	b.n	8004d1e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d012      	beq.n	8004d1e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4955      	ldr	r1, [pc, #340]	@ (8004e58 <I2C_ITSlaveCplt+0x238>)
 8004d04:	400a      	ands	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2204      	movs	r2, #4
 8004d22:	4013      	ands	r3, r2
 8004d24:	d020      	beq.n	8004d68 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	4393      	bics	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	2204      	movs	r2, #4
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2242      	movs	r2, #66	@ 0x42
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 f8b7 	bl	8004f10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2241      	movs	r2, #65	@ 0x41
 8004da6:	5c9b      	ldrb	r3, [r3, r2]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b28      	cmp	r3, #40	@ 0x28
 8004dac:	d147      	bne.n	8004e3e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0011      	movs	r1, r2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 f853 	bl	8004e60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dba:	e040      	b.n	8004e3e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <I2C_ITSlaveCplt+0x23c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d016      	beq.n	8004df4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff fec5 	bl	8004b58 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a22      	ldr	r2, [pc, #136]	@ (8004e5c <I2C_ITSlaveCplt+0x23c>)
 8004dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2241      	movs	r2, #65	@ 0x41
 8004dd8:	2120      	movs	r1, #32
 8004dda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2240      	movs	r2, #64	@ 0x40
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fcf6 	bl	80047de <HAL_I2C_ListenCpltCallback>
}
 8004df2:	e024      	b.n	8004e3e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2241      	movs	r2, #65	@ 0x41
 8004df8:	5c9b      	ldrb	r3, [r3, r2]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b22      	cmp	r3, #34	@ 0x22
 8004dfe:	d10f      	bne.n	8004e20 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2241      	movs	r2, #65	@ 0x41
 8004e04:	2120      	movs	r1, #32
 8004e06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2240      	movs	r2, #64	@ 0x40
 8004e12:	2100      	movs	r1, #0
 8004e14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff fcc8 	bl	80047ae <HAL_I2C_SlaveRxCpltCallback>
}
 8004e1e:	e00e      	b.n	8004e3e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2241      	movs	r2, #65	@ 0x41
 8004e24:	2120      	movs	r1, #32
 8004e26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2240      	movs	r2, #64	@ 0x40
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff fcb0 	bl	800479e <HAL_I2C_SlaveTxCpltCallback>
}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b006      	add	sp, #24
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	00008001 	.word	0x00008001
 8004e4c:	00008002 	.word	0x00008002
 8004e50:	fe00e800 	.word	0xfe00e800
 8004e54:	ffffbfff 	.word	0xffffbfff
 8004e58:	ffff7fff 	.word	0xffff7fff
 8004e5c:	ffff0000 	.word	0xffff0000

08004e60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <I2C_ITListenCplt+0xa8>)
 8004e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2241      	movs	r2, #65	@ 0x41
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2242      	movs	r2, #66	@ 0x42
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	4013      	ands	r3, r2
 8004e92:	d022      	beq.n	8004eda <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eda:	4a0c      	ldr	r2, [pc, #48]	@ (8004f0c <I2C_ITListenCplt+0xac>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fc0d 	bl	8005700 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2210      	movs	r2, #16
 8004eec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2240      	movs	r2, #64	@ 0x40
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff fc70 	bl	80047de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	ffff0000 	.word	0xffff0000
 8004f0c:	00008003 	.word	0x00008003

08004f10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f1a:	200f      	movs	r0, #15
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	2141      	movs	r1, #65	@ 0x41
 8004f22:	5c52      	ldrb	r2, [r2, r1]
 8004f24:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2242      	movs	r2, #66	@ 0x42
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a72      	ldr	r2, [pc, #456]	@ (80050fc <I2C_ITError+0x1ec>)
 8004f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f46:	183b      	adds	r3, r7, r0
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b28      	cmp	r3, #40	@ 0x28
 8004f4c:	d007      	beq.n	8004f5e <I2C_ITError+0x4e>
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b29      	cmp	r3, #41	@ 0x29
 8004f54:	d003      	beq.n	8004f5e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f5c:	d10c      	bne.n	8004f78 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2103      	movs	r1, #3
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 fbcc 	bl	8005700 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2241      	movs	r2, #65	@ 0x41
 8004f6c:	2128      	movs	r1, #40	@ 0x28
 8004f6e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a63      	ldr	r2, [pc, #396]	@ (8005100 <I2C_ITError+0x1f0>)
 8004f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f76:	e032      	b.n	8004fde <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f78:	4a62      	ldr	r2, [pc, #392]	@ (8005104 <I2C_ITError+0x1f4>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	0011      	movs	r1, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 fbbe 	bl	8005700 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f8ed 	bl	8005166 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2241      	movs	r2, #65	@ 0x41
 8004f90:	5c9b      	ldrb	r3, [r3, r2]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b60      	cmp	r3, #96	@ 0x60
 8004f96:	d01f      	beq.n	8004fd8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2241      	movs	r2, #65	@ 0x41
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d114      	bne.n	8004fd8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d109      	bne.n	8004fd0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc8:	2204      	movs	r2, #4
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d03b      	beq.n	8005064 <I2C_ITError+0x154>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b11      	cmp	r3, #17
 8004ff0:	d002      	beq.n	8004ff8 <I2C_ITError+0xe8>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b21      	cmp	r3, #33	@ 0x21
 8004ff6:	d135      	bne.n	8005064 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	401a      	ands	r2, r3
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	01db      	lsls	r3, r3, #7
 8005008:	429a      	cmp	r2, r3
 800500a:	d107      	bne.n	800501c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	493c      	ldr	r1, [pc, #240]	@ (8005108 <I2C_ITError+0x1f8>)
 8005018:	400a      	ands	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	0018      	movs	r0, r3
 8005022:	f7fe ff18 	bl	8003e56 <HAL_DMA_GetState>
 8005026:	0003      	movs	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d016      	beq.n	800505a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	4a36      	ldr	r2, [pc, #216]	@ (800510c <I2C_ITError+0x1fc>)
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2240      	movs	r2, #64	@ 0x40
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	0018      	movs	r0, r3
 8005042:	f7fe fe13 	bl	8003c6c <HAL_DMA_Abort_IT>
 8005046:	1e03      	subs	r3, r0, #0
 8005048:	d051      	beq.n	80050ee <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005054:	0018      	movs	r0, r3
 8005056:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005058:	e049      	b.n	80050ee <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0018      	movs	r0, r3
 800505e:	f000 f859 	bl	8005114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005062:	e044      	b.n	80050ee <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03b      	beq.n	80050e4 <I2C_ITError+0x1d4>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b12      	cmp	r3, #18
 8005070:	d002      	beq.n	8005078 <I2C_ITError+0x168>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b22      	cmp	r3, #34	@ 0x22
 8005076:	d135      	bne.n	80050e4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	@ 0x80
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	401a      	ands	r2, r3
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	429a      	cmp	r2, r3
 800508a:	d107      	bne.n	800509c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	491e      	ldr	r1, [pc, #120]	@ (8005110 <I2C_ITError+0x200>)
 8005098:	400a      	ands	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe fed8 	bl	8003e56 <HAL_DMA_GetState>
 80050a6:	0003      	movs	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d016      	beq.n	80050da <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	4a16      	ldr	r2, [pc, #88]	@ (800510c <I2C_ITError+0x1fc>)
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2240      	movs	r2, #64	@ 0x40
 80050b8:	2100      	movs	r1, #0
 80050ba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fe fdd3 	bl	8003c6c <HAL_DMA_Abort_IT>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d013      	beq.n	80050f2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d4:	0018      	movs	r0, r3
 80050d6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050d8:	e00b      	b.n	80050f2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f819 	bl	8005114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050e2:	e006      	b.n	80050f2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f814 	bl	8005114 <I2C_TreatErrorCallback>
  }
}
 80050ec:	e002      	b.n	80050f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	e000      	b.n	80050f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050f2:	46c0      	nop			@ (mov r8, r8)
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b004      	add	sp, #16
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	ffff0000 	.word	0xffff0000
 8005100:	08004811 	.word	0x08004811
 8005104:	00008003 	.word	0x00008003
 8005108:	ffffbfff 	.word	0xffffbfff
 800510c:	080051ab 	.word	0x080051ab
 8005110:	ffff7fff 	.word	0xffff7fff

08005114 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2241      	movs	r2, #65	@ 0x41
 8005120:	5c9b      	ldrb	r3, [r3, r2]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b60      	cmp	r3, #96	@ 0x60
 8005126:	d10f      	bne.n	8005148 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2241      	movs	r2, #65	@ 0x41
 800512c:	2120      	movs	r1, #32
 800512e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2240      	movs	r2, #64	@ 0x40
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fb5c 	bl	80047fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005146:	e00a      	b.n	800515e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2240      	movs	r2, #64	@ 0x40
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff fb48 	bl	80047ee <HAL_I2C_ErrorCallback>
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d103      	bne.n	8005184 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2201      	movs	r2, #1
 800518c:	4013      	ands	r3, r2
 800518e:	2b01      	cmp	r3, #1
 8005190:	d007      	beq.n	80051a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2101      	movs	r1, #1
 800519e:	430a      	orrs	r2, r1
 80051a0:	619a      	str	r2, [r3, #24]
  }
}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b002      	add	sp, #8
 80051a8:	bd80      	pop	{r7, pc}

080051aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f7ff ff9a 	bl	8005114 <I2C_TreatErrorCallback>
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b004      	add	sp, #16
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f8:	e030      	b.n	800525c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	d02d      	beq.n	800525c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fe fbb0 	bl	8003964 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d122      	bne.n	800525c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	425a      	negs	r2, r3
 8005226:	4153      	adcs	r3, r2
 8005228:	b2db      	uxtb	r3, r3
 800522a:	001a      	movs	r2, r3
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d113      	bne.n	800525c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	2220      	movs	r2, #32
 800523a:	431a      	orrs	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2241      	movs	r2, #65	@ 0x41
 8005244:	2120      	movs	r1, #32
 8005246:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2242      	movs	r2, #66	@ 0x42
 800524c:	2100      	movs	r1, #0
 800524e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2240      	movs	r2, #64	@ 0x40
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e00f      	b.n	800527c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	425a      	negs	r2, r3
 800526c:	4153      	adcs	r3, r2
 800526e:	b2db      	uxtb	r3, r3
 8005270:	001a      	movs	r2, r3
 8005272:	1dfb      	adds	r3, r7, #7
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d0bf      	beq.n	80051fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	0018      	movs	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	b004      	add	sp, #16
 8005282:	bd80      	pop	{r7, pc}

08005284 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005290:	e032      	b.n	80052f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 f8ff 	bl	800549c <I2C_IsErrorOccurred>
 800529e:	1e03      	subs	r3, r0, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e030      	b.n	8005308 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3301      	adds	r3, #1
 80052aa:	d025      	beq.n	80052f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ac:	f7fe fb5a 	bl	8003964 <HAL_GetTick>
 80052b0:	0002      	movs	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d302      	bcc.n	80052c2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11a      	bne.n	80052f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2202      	movs	r2, #2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d013      	beq.n	80052f8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d4:	2220      	movs	r2, #32
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2241      	movs	r2, #65	@ 0x41
 80052e0:	2120      	movs	r1, #32
 80052e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2242      	movs	r2, #66	@ 0x42
 80052e8:	2100      	movs	r1, #0
 80052ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2240      	movs	r2, #64	@ 0x40
 80052f0:	2100      	movs	r1, #0
 80052f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e007      	b.n	8005308 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2202      	movs	r2, #2
 8005300:	4013      	ands	r3, r2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d1c5      	bne.n	8005292 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b004      	add	sp, #16
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800531c:	e02f      	b.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0018      	movs	r0, r3
 8005326:	f000 f8b9 	bl	800549c <I2C_IsErrorOccurred>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d001      	beq.n	8005332 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e02d      	b.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fe fb17 	bl	8003964 <HAL_GetTick>
 8005336:	0002      	movs	r2, r0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d11a      	bne.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2220      	movs	r2, #32
 8005350:	4013      	ands	r3, r2
 8005352:	2b20      	cmp	r3, #32
 8005354:	d013      	beq.n	800537e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535a:	2220      	movs	r2, #32
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2241      	movs	r2, #65	@ 0x41
 8005366:	2120      	movs	r1, #32
 8005368:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2242      	movs	r2, #66	@ 0x42
 800536e:	2100      	movs	r1, #0
 8005370:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2240      	movs	r2, #64	@ 0x40
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e007      	b.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	2220      	movs	r2, #32
 8005386:	4013      	ands	r3, r2
 8005388:	2b20      	cmp	r3, #32
 800538a:	d1c8      	bne.n	800531e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053a4:	e06b      	b.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 f875 	bl	800549c <I2C_IsErrorOccurred>
 80053b2:	1e03      	subs	r3, r0, #0
 80053b4:	d001      	beq.n	80053ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e069      	b.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2220      	movs	r2, #32
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d138      	bne.n	800543a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2204      	movs	r2, #4
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d105      	bne.n	80053e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e055      	b.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2210      	movs	r2, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d107      	bne.n	8005400 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2204      	movs	r2, #4
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80053fe:	e002      	b.n	8005406 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2220      	movs	r2, #32
 800540c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	491f      	ldr	r1, [pc, #124]	@ (8005498 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800541a:	400a      	ands	r2, r1
 800541c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2241      	movs	r2, #65	@ 0x41
 8005422:	2120      	movs	r1, #32
 8005424:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2242      	movs	r2, #66	@ 0x42
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2240      	movs	r2, #64	@ 0x40
 8005432:	2100      	movs	r1, #0
 8005434:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e029      	b.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543a:	f7fe fa93 	bl	8003964 <HAL_GetTick>
 800543e:	0002      	movs	r2, r0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d302      	bcc.n	8005450 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d116      	bne.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2204      	movs	r2, #4
 8005458:	4013      	ands	r3, r2
 800545a:	2b04      	cmp	r3, #4
 800545c:	d00f      	beq.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	2220      	movs	r2, #32
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2241      	movs	r2, #65	@ 0x41
 800546e:	2120      	movs	r1, #32
 8005470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2240      	movs	r2, #64	@ 0x40
 8005476:	2100      	movs	r1, #0
 8005478:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e007      	b.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2204      	movs	r2, #4
 8005486:	4013      	ands	r3, r2
 8005488:	2b04      	cmp	r3, #4
 800548a:	d18c      	bne.n	80053a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	fe00e800 	.word	0xfe00e800

0800549c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	@ 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a8:	2327      	movs	r3, #39	@ 0x27
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2210      	movs	r2, #16
 80054c4:	4013      	ands	r3, r2
 80054c6:	d100      	bne.n	80054ca <I2C_IsErrorOccurred+0x2e>
 80054c8:	e079      	b.n	80055be <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2210      	movs	r2, #16
 80054d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054d2:	e057      	b.n	8005584 <I2C_IsErrorOccurred+0xe8>
 80054d4:	2227      	movs	r2, #39	@ 0x27
 80054d6:	18bb      	adds	r3, r7, r2
 80054d8:	18ba      	adds	r2, r7, r2
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3301      	adds	r3, #1
 80054e2:	d04f      	beq.n	8005584 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fe fa3e 	bl	8003964 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_IsErrorOccurred+0x5e>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d144      	bne.n	8005584 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	2380      	movs	r3, #128	@ 0x80
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	4013      	ands	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005508:	2013      	movs	r0, #19
 800550a:	183b      	adds	r3, r7, r0
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	2142      	movs	r1, #66	@ 0x42
 8005510:	5c52      	ldrb	r2, [r2, r1]
 8005512:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	401a      	ands	r2, r3
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	429a      	cmp	r2, r3
 8005526:	d126      	bne.n	8005576 <I2C_IsErrorOccurred+0xda>
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	2380      	movs	r3, #128	@ 0x80
 800552c:	01db      	lsls	r3, r3, #7
 800552e:	429a      	cmp	r2, r3
 8005530:	d021      	beq.n	8005576 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005532:	183b      	adds	r3, r7, r0
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b20      	cmp	r3, #32
 8005538:	d01d      	beq.n	8005576 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	01c9      	lsls	r1, r1, #7
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800554c:	f7fe fa0a 	bl	8003964 <HAL_GetTick>
 8005550:	0003      	movs	r3, r0
 8005552:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005554:	e00f      	b.n	8005576 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005556:	f7fe fa05 	bl	8003964 <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b19      	cmp	r3, #25
 8005562:	d908      	bls.n	8005576 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2220      	movs	r2, #32
 8005568:	4313      	orrs	r3, r2
 800556a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800556c:	2327      	movs	r3, #39	@ 0x27
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	2201      	movs	r2, #1
 8005572:	701a      	strb	r2, [r3, #0]

              break;
 8005574:	e006      	b.n	8005584 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	2b20      	cmp	r3, #32
 8005582:	d1e8      	bne.n	8005556 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	2b20      	cmp	r3, #32
 8005590:	d004      	beq.n	800559c <I2C_IsErrorOccurred+0x100>
 8005592:	2327      	movs	r3, #39	@ 0x27
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d09b      	beq.n	80054d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800559c:	2327      	movs	r3, #39	@ 0x27
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2220      	movs	r2, #32
 80055ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2204      	movs	r2, #4
 80055b2:	4313      	orrs	r3, r2
 80055b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055b6:	2327      	movs	r3, #39	@ 0x27
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	d00c      	beq.n	80055ea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2201      	movs	r2, #1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2280      	movs	r2, #128	@ 0x80
 80055de:	0052      	lsls	r2, r2, #1
 80055e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055e2:	2327      	movs	r3, #39	@ 0x27
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	2380      	movs	r3, #128	@ 0x80
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00c      	beq.n	800560e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	2208      	movs	r2, #8
 80055f8:	4313      	orrs	r3, r2
 80055fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	00d2      	lsls	r2, r2, #3
 8005604:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005606:	2327      	movs	r3, #39	@ 0x27
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	2380      	movs	r3, #128	@ 0x80
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4013      	ands	r3, r2
 8005616:	d00c      	beq.n	8005632 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2202      	movs	r2, #2
 800561c:	4313      	orrs	r3, r2
 800561e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2280      	movs	r2, #128	@ 0x80
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800562a:	2327      	movs	r3, #39	@ 0x27
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005632:	2327      	movs	r3, #39	@ 0x27
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01d      	beq.n	8005678 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fd91 	bl	8005166 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	490e      	ldr	r1, [pc, #56]	@ (8005688 <I2C_IsErrorOccurred+0x1ec>)
 8005650:	400a      	ands	r2, r1
 8005652:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	431a      	orrs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2241      	movs	r2, #65	@ 0x41
 8005664:	2120      	movs	r1, #32
 8005666:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2242      	movs	r2, #66	@ 0x42
 800566c:	2100      	movs	r1, #0
 800566e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2240      	movs	r2, #64	@ 0x40
 8005674:	2100      	movs	r1, #0
 8005676:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005678:	2327      	movs	r3, #39	@ 0x27
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	781b      	ldrb	r3, [r3, #0]
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b00a      	add	sp, #40	@ 0x28
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	fe00e800 	.word	0xfe00e800

0800568c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	0008      	movs	r0, r1
 8005696:	0011      	movs	r1, r2
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	240a      	movs	r4, #10
 800569c:	193b      	adds	r3, r7, r4
 800569e:	1c02      	adds	r2, r0, #0
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	2009      	movs	r0, #9
 80056a4:	183b      	adds	r3, r7, r0
 80056a6:	1c0a      	adds	r2, r1, #0
 80056a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056aa:	193b      	adds	r3, r7, r4
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	059b      	lsls	r3, r3, #22
 80056b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056b2:	183b      	adds	r3, r7, r0
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	0419      	lsls	r1, r3, #16
 80056b8:	23ff      	movs	r3, #255	@ 0xff
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	4313      	orrs	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d6:	0d51      	lsrs	r1, r2, #21
 80056d8:	2280      	movs	r2, #128	@ 0x80
 80056da:	00d2      	lsls	r2, r2, #3
 80056dc:	400a      	ands	r2, r1
 80056de:	4907      	ldr	r1, [pc, #28]	@ (80056fc <I2C_TransferConfig+0x70>)
 80056e0:	430a      	orrs	r2, r1
 80056e2:	43d2      	mvns	r2, r2
 80056e4:	401a      	ands	r2, r3
 80056e6:	0011      	movs	r1, r2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b007      	add	sp, #28
 80056f8:	bd90      	pop	{r4, r7, pc}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	03ff63ff 	.word	0x03ff63ff

08005700 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	000a      	movs	r2, r1
 800570a:	1cbb      	adds	r3, r7, #2
 800570c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005712:	1cbb      	adds	r3, r7, #2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	2201      	movs	r2, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d010      	beq.n	800573e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2242      	movs	r2, #66	@ 0x42
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2241      	movs	r2, #65	@ 0x41
 8005728:	5c9b      	ldrb	r3, [r3, r2]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	001a      	movs	r2, r3
 800572e:	2328      	movs	r3, #40	@ 0x28
 8005730:	4013      	ands	r3, r2
 8005732:	2b28      	cmp	r3, #40	@ 0x28
 8005734:	d003      	beq.n	800573e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22b0      	movs	r2, #176	@ 0xb0
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800573e:	1cbb      	adds	r3, r7, #2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	2202      	movs	r2, #2
 8005744:	4013      	ands	r3, r2
 8005746:	d010      	beq.n	800576a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2244      	movs	r2, #68	@ 0x44
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2241      	movs	r2, #65	@ 0x41
 8005754:	5c9b      	ldrb	r3, [r3, r2]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	001a      	movs	r2, r3
 800575a:	2328      	movs	r3, #40	@ 0x28
 800575c:	4013      	ands	r3, r2
 800575e:	2b28      	cmp	r3, #40	@ 0x28
 8005760:	d003      	beq.n	800576a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	22b0      	movs	r2, #176	@ 0xb0
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800576a:	1cbb      	adds	r3, r7, #2
 800576c:	2200      	movs	r2, #0
 800576e:	5e9b      	ldrsh	r3, [r3, r2]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da03      	bge.n	800577c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22b8      	movs	r2, #184	@ 0xb8
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800577c:	1cbb      	adds	r3, r7, #2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	2b10      	cmp	r3, #16
 8005782:	d103      	bne.n	800578c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2290      	movs	r2, #144	@ 0x90
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800578c:	1cbb      	adds	r3, r7, #2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	2b20      	cmp	r3, #32
 8005792:	d103      	bne.n	800579c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800579c:	1cbb      	adds	r3, r7, #2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	d103      	bne.n	80057ac <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2240      	movs	r2, #64	@ 0x40
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	43d9      	mvns	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	400a      	ands	r2, r1
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b004      	add	sp, #16
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2241      	movs	r2, #65	@ 0x41
 80057d6:	5c9b      	ldrb	r3, [r3, r2]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d138      	bne.n	8005850 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2240      	movs	r2, #64	@ 0x40
 80057e2:	5c9b      	ldrb	r3, [r3, r2]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e032      	b.n	8005852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2240      	movs	r2, #64	@ 0x40
 80057f0:	2101      	movs	r1, #1
 80057f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2241      	movs	r2, #65	@ 0x41
 80057f8:	2124      	movs	r1, #36	@ 0x24
 80057fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2101      	movs	r1, #1
 8005808:	438a      	bics	r2, r1
 800580a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4911      	ldr	r1, [pc, #68]	@ (800585c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005818:	400a      	ands	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2101      	movs	r1, #1
 8005838:	430a      	orrs	r2, r1
 800583a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2241      	movs	r2, #65	@ 0x41
 8005840:	2120      	movs	r1, #32
 8005842:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005850:	2302      	movs	r3, #2
  }
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	ffffefff 	.word	0xffffefff

08005860 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2241      	movs	r2, #65	@ 0x41
 800586e:	5c9b      	ldrb	r3, [r3, r2]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b20      	cmp	r3, #32
 8005874:	d139      	bne.n	80058ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2240      	movs	r2, #64	@ 0x40
 800587a:	5c9b      	ldrb	r3, [r3, r2]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005880:	2302      	movs	r3, #2
 8005882:	e033      	b.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2240      	movs	r2, #64	@ 0x40
 8005888:	2101      	movs	r1, #1
 800588a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2241      	movs	r2, #65	@ 0x41
 8005890:	2124      	movs	r1, #36	@ 0x24
 8005892:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2101      	movs	r1, #1
 80058a0:	438a      	bics	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a11      	ldr	r2, [pc, #68]	@ (80058f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2241      	movs	r2, #65	@ 0x41
 80058da:	2120      	movs	r1, #32
 80058dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2240      	movs	r2, #64	@ 0x40
 80058e2:	2100      	movs	r1, #0
 80058e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b004      	add	sp, #16
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	fffff0ff 	.word	0xfffff0ff

080058f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f8:	b5b0      	push	{r4, r5, r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f000 fbbf 	bl	800608a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590c:	4bc9      	ldr	r3, [pc, #804]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	220c      	movs	r2, #12
 8005912:	4013      	ands	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005916:	4bc7      	ldr	r3, [pc, #796]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	025b      	lsls	r3, r3, #9
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4013      	ands	r3, r2
 800592a:	d100      	bne.n	800592e <HAL_RCC_OscConfig+0x36>
 800592c:	e07e      	b.n	8005a2c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d007      	beq.n	8005944 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d112      	bne.n	8005960 <HAL_RCC_OscConfig+0x68>
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	429a      	cmp	r2, r3
 8005942:	d10d      	bne.n	8005960 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	4bbb      	ldr	r3, [pc, #748]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	4013      	ands	r3, r2
 800594e:	d100      	bne.n	8005952 <HAL_RCC_OscConfig+0x5a>
 8005950:	e06b      	b.n	8005a2a <HAL_RCC_OscConfig+0x132>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d167      	bne.n	8005a2a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f000 fb95 	bl	800608a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	2380      	movs	r3, #128	@ 0x80
 8005966:	025b      	lsls	r3, r3, #9
 8005968:	429a      	cmp	r2, r3
 800596a:	d107      	bne.n	800597c <HAL_RCC_OscConfig+0x84>
 800596c:	4bb1      	ldr	r3, [pc, #708]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4bb0      	ldr	r3, [pc, #704]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005972:	2180      	movs	r1, #128	@ 0x80
 8005974:	0249      	lsls	r1, r1, #9
 8005976:	430a      	orrs	r2, r1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e027      	b.n	80059cc <HAL_RCC_OscConfig+0xd4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	23a0      	movs	r3, #160	@ 0xa0
 8005982:	02db      	lsls	r3, r3, #11
 8005984:	429a      	cmp	r2, r3
 8005986:	d10e      	bne.n	80059a6 <HAL_RCC_OscConfig+0xae>
 8005988:	4baa      	ldr	r3, [pc, #680]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	4ba9      	ldr	r3, [pc, #676]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 800598e:	2180      	movs	r1, #128	@ 0x80
 8005990:	02c9      	lsls	r1, r1, #11
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	4ba7      	ldr	r3, [pc, #668]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4ba6      	ldr	r3, [pc, #664]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 800599c:	2180      	movs	r1, #128	@ 0x80
 800599e:	0249      	lsls	r1, r1, #9
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e012      	b.n	80059cc <HAL_RCC_OscConfig+0xd4>
 80059a6:	4ba3      	ldr	r3, [pc, #652]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4ba2      	ldr	r3, [pc, #648]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059ac:	49a2      	ldr	r1, [pc, #648]	@ (8005c38 <HAL_RCC_OscConfig+0x340>)
 80059ae:	400a      	ands	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	4ba0      	ldr	r3, [pc, #640]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	2380      	movs	r3, #128	@ 0x80
 80059b8:	025b      	lsls	r3, r3, #9
 80059ba:	4013      	ands	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4b9c      	ldr	r3, [pc, #624]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059c6:	499d      	ldr	r1, [pc, #628]	@ (8005c3c <HAL_RCC_OscConfig+0x344>)
 80059c8:	400a      	ands	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fd ffc6 	bl	8003964 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059dc:	e009      	b.n	80059f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059de:	f7fd ffc1 	bl	8003964 <HAL_GetTick>
 80059e2:	0002      	movs	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b64      	cmp	r3, #100	@ 0x64
 80059ea:	d902      	bls.n	80059f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	f000 fb4c 	bl	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059f2:	4b90      	ldr	r3, [pc, #576]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	4013      	ands	r3, r2
 80059fc:	d0ef      	beq.n	80059de <HAL_RCC_OscConfig+0xe6>
 80059fe:	e015      	b.n	8005a2c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fd ffb0 	bl	8003964 <HAL_GetTick>
 8005a04:	0003      	movs	r3, r0
 8005a06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a0a:	f7fd ffab 	bl	8003964 <HAL_GetTick>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b64      	cmp	r3, #100	@ 0x64
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e336      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a1c:	4b85      	ldr	r3, [pc, #532]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	4013      	ands	r3, r2
 8005a26:	d1f0      	bne.n	8005a0a <HAL_RCC_OscConfig+0x112>
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2202      	movs	r2, #2
 8005a32:	4013      	ands	r3, r2
 8005a34:	d100      	bne.n	8005a38 <HAL_RCC_OscConfig+0x140>
 8005a36:	e099      	b.n	8005b6c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	2220      	movs	r2, #32
 8005a42:	4013      	ands	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005a46:	4b7b      	ldr	r3, [pc, #492]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a4c:	2120      	movs	r1, #32
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2220      	movs	r2, #32
 8005a56:	4393      	bics	r3, r2
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d13e      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1ec>
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d13b      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005a6c:	4b71      	ldr	r3, [pc, #452]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2204      	movs	r2, #4
 8005a72:	4013      	ands	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_RCC_OscConfig+0x188>
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e304      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a80:	4b6c      	ldr	r3, [pc, #432]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a6e      	ldr	r2, [pc, #440]	@ (8005c40 <HAL_RCC_OscConfig+0x348>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	4b68      	ldr	r3, [pc, #416]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005a96:	4b67      	ldr	r3, [pc, #412]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2209      	movs	r2, #9
 8005a9c:	4393      	bics	r3, r2
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	4b64      	ldr	r3, [pc, #400]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aa8:	f000 fc42 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8005aac:	0001      	movs	r1, r0
 8005aae:	4b61      	ldr	r3, [pc, #388]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	220f      	movs	r2, #15
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	4a62      	ldr	r2, [pc, #392]	@ (8005c44 <HAL_RCC_OscConfig+0x34c>)
 8005aba:	5cd3      	ldrb	r3, [r2, r3]
 8005abc:	000a      	movs	r2, r1
 8005abe:	40da      	lsrs	r2, r3
 8005ac0:	4b61      	ldr	r3, [pc, #388]	@ (8005c48 <HAL_RCC_OscConfig+0x350>)
 8005ac2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ac4:	4b61      	ldr	r3, [pc, #388]	@ (8005c4c <HAL_RCC_OscConfig+0x354>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2513      	movs	r5, #19
 8005aca:	197c      	adds	r4, r7, r5
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7fd ff03 	bl	80038d8 <HAL_InitTick>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005ad6:	197b      	adds	r3, r7, r5
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d046      	beq.n	8005b6c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005ade:	197b      	adds	r3, r7, r5
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	e2d2      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d027      	beq.n	8005b3a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005aea:	4b52      	ldr	r3, [pc, #328]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2209      	movs	r2, #9
 8005af0:	4393      	bics	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af8:	430a      	orrs	r2, r1
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd ff32 	bl	8003964 <HAL_GetTick>
 8005b00:	0003      	movs	r3, r0
 8005b02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b06:	f7fd ff2d 	bl	8003964 <HAL_GetTick>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e2b8      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b18:	4b46      	ldr	r3, [pc, #280]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d0f1      	beq.n	8005b06 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b44      	ldr	r3, [pc, #272]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a46      	ldr	r2, [pc, #280]	@ (8005c40 <HAL_RCC_OscConfig+0x348>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	4b40      	ldr	r3, [pc, #256]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	e018      	b.n	8005b6c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b40:	2101      	movs	r1, #1
 8005b42:	438a      	bics	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b46:	f7fd ff0d 	bl	8003964 <HAL_GetTick>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b50:	f7fd ff08 	bl	8003964 <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e293      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b62:	4b34      	ldr	r3, [pc, #208]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2204      	movs	r2, #4
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d1f1      	bne.n	8005b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2210      	movs	r2, #16
 8005b72:	4013      	ands	r3, r2
 8005b74:	d100      	bne.n	8005b78 <HAL_RCC_OscConfig+0x280>
 8005b76:	e0a2      	b.n	8005cbe <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d140      	bne.n	8005c00 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	d005      	beq.n	8005b96 <HAL_RCC_OscConfig+0x29e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e279      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b96:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_RCC_OscConfig+0x358>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ba4:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005baa:	4b22      	ldr	r3, [pc, #136]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	0a19      	lsrs	r1, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	061a      	lsls	r2, r3, #24
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	0b5b      	lsrs	r3, r3, #13
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	2280      	movs	r2, #128	@ 0x80
 8005bc8:	0212      	lsls	r2, r2, #8
 8005bca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005bcc:	4b19      	ldr	r3, [pc, #100]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	210f      	movs	r1, #15
 8005bd4:	400b      	ands	r3, r1
 8005bd6:	491b      	ldr	r1, [pc, #108]	@ (8005c44 <HAL_RCC_OscConfig+0x34c>)
 8005bd8:	5ccb      	ldrb	r3, [r1, r3]
 8005bda:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c48 <HAL_RCC_OscConfig+0x350>)
 8005bde:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005be0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c4c <HAL_RCC_OscConfig+0x354>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2513      	movs	r5, #19
 8005be6:	197c      	adds	r4, r7, r5
 8005be8:	0018      	movs	r0, r3
 8005bea:	f7fd fe75 	bl	80038d8 <HAL_InitTick>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005bf2:	197b      	adds	r3, r7, r5
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d061      	beq.n	8005cbe <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005bfa:	197b      	adds	r3, r7, r5
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	e244      	b.n	800608a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d040      	beq.n	8005c8a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c08:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <HAL_RCC_OscConfig+0x33c>)
 8005c0e:	2180      	movs	r1, #128	@ 0x80
 8005c10:	0049      	lsls	r1, r1, #1
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fd fea5 	bl	8003964 <HAL_GetTick>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c1e:	e019      	b.n	8005c54 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c20:	f7fd fea0 	bl	8003964 <HAL_GetTick>
 8005c24:	0002      	movs	r2, r0
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d912      	bls.n	8005c54 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e22b      	b.n	800608a <HAL_RCC_OscConfig+0x792>
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	40021000 	.word	0x40021000
 8005c38:	fffeffff 	.word	0xfffeffff
 8005c3c:	fffbffff 	.word	0xfffbffff
 8005c40:	ffffe0ff 	.word	0xffffe0ff
 8005c44:	0800bcb0 	.word	0x0800bcb0
 8005c48:	20000004 	.word	0x20000004
 8005c4c:	20000008 	.word	0x20000008
 8005c50:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c54:	4bca      	ldr	r3, [pc, #808]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2380      	movs	r3, #128	@ 0x80
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d0df      	beq.n	8005c20 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c60:	4bc7      	ldr	r3, [pc, #796]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4ac7      	ldr	r2, [pc, #796]	@ (8005f84 <HAL_RCC_OscConfig+0x68c>)
 8005c66:	4013      	ands	r3, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c6e:	4bc4      	ldr	r3, [pc, #784]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c74:	4bc2      	ldr	r3, [pc, #776]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	0a19      	lsrs	r1, r3, #8
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	061a      	lsls	r2, r3, #24
 8005c82:	4bbf      	ldr	r3, [pc, #764]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	e019      	b.n	8005cbe <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c8a:	4bbd      	ldr	r3, [pc, #756]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4bbc      	ldr	r3, [pc, #752]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005c90:	49bd      	ldr	r1, [pc, #756]	@ (8005f88 <HAL_RCC_OscConfig+0x690>)
 8005c92:	400a      	ands	r2, r1
 8005c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fd fe65 	bl	8003964 <HAL_GetTick>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ca0:	f7fd fe60 	bl	8003964 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1eb      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005cb2:	4bb3      	ldr	r3, [pc, #716]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d036      	beq.n	8005d36 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d019      	beq.n	8005d04 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd0:	4bab      	ldr	r3, [pc, #684]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd4:	4baa      	ldr	r3, [pc, #680]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cdc:	f7fd fe42 	bl	8003964 <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce6:	f7fd fe3d 	bl	8003964 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1c8      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cf8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d0f1      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x3ee>
 8005d02:	e018      	b.n	8005d36 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d04:	4b9e      	ldr	r3, [pc, #632]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d08:	4b9d      	ldr	r3, [pc, #628]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	438a      	bics	r2, r1
 8005d0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d10:	f7fd fe28 	bl	8003964 <HAL_GetTick>
 8005d14:	0003      	movs	r3, r0
 8005d16:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7fd fe23 	bl	8003964 <HAL_GetTick>
 8005d1e:	0002      	movs	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e1ae      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d2c:	4b94      	ldr	r3, [pc, #592]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	2202      	movs	r2, #2
 8005d32:	4013      	ands	r3, r2
 8005d34:	d1f1      	bne.n	8005d1a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d100      	bne.n	8005d42 <HAL_RCC_OscConfig+0x44a>
 8005d40:	e0ae      	b.n	8005ea0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d42:	2023      	movs	r0, #35	@ 0x23
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d4e:	2380      	movs	r3, #128	@ 0x80
 8005d50:	055b      	lsls	r3, r3, #21
 8005d52:	4013      	ands	r3, r2
 8005d54:	d109      	bne.n	8005d6a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d56:	4b8a      	ldr	r3, [pc, #552]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d5a:	4b89      	ldr	r3, [pc, #548]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005d5c:	2180      	movs	r1, #128	@ 0x80
 8005d5e:	0549      	lsls	r1, r1, #21
 8005d60:	430a      	orrs	r2, r1
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005d64:	183b      	adds	r3, r7, r0
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6a:	4b88      	ldr	r3, [pc, #544]	@ (8005f8c <HAL_RCC_OscConfig+0x694>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	2380      	movs	r3, #128	@ 0x80
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	4013      	ands	r3, r2
 8005d74:	d11a      	bne.n	8005dac <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d76:	4b85      	ldr	r3, [pc, #532]	@ (8005f8c <HAL_RCC_OscConfig+0x694>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b84      	ldr	r3, [pc, #528]	@ (8005f8c <HAL_RCC_OscConfig+0x694>)
 8005d7c:	2180      	movs	r1, #128	@ 0x80
 8005d7e:	0049      	lsls	r1, r1, #1
 8005d80:	430a      	orrs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d84:	f7fd fdee 	bl	8003964 <HAL_GetTick>
 8005d88:	0003      	movs	r3, r0
 8005d8a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8e:	f7fd fde9 	bl	8003964 <HAL_GetTick>
 8005d92:	0002      	movs	r2, r0
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b64      	cmp	r3, #100	@ 0x64
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e174      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	4b7a      	ldr	r3, [pc, #488]	@ (8005f8c <HAL_RCC_OscConfig+0x694>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	2380      	movs	r3, #128	@ 0x80
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	2380      	movs	r3, #128	@ 0x80
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4d0>
 8005db8:	4b71      	ldr	r3, [pc, #452]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dbc:	4b70      	ldr	r3, [pc, #448]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dbe:	2180      	movs	r1, #128	@ 0x80
 8005dc0:	0049      	lsls	r1, r1, #1
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dc6:	e031      	b.n	8005e2c <HAL_RCC_OscConfig+0x534>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0x4f2>
 8005dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dd6:	496c      	ldr	r1, [pc, #432]	@ (8005f88 <HAL_RCC_OscConfig+0x690>)
 8005dd8:	400a      	ands	r2, r1
 8005dda:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ddc:	4b68      	ldr	r3, [pc, #416]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005de0:	4b67      	ldr	r3, [pc, #412]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005de2:	496b      	ldr	r1, [pc, #428]	@ (8005f90 <HAL_RCC_OscConfig+0x698>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005de8:	e020      	b.n	8005e2c <HAL_RCC_OscConfig+0x534>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	23a0      	movs	r3, #160	@ 0xa0
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d10e      	bne.n	8005e14 <HAL_RCC_OscConfig+0x51c>
 8005df6:	4b62      	ldr	r3, [pc, #392]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005df8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfa:	4b61      	ldr	r3, [pc, #388]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005dfc:	2180      	movs	r1, #128	@ 0x80
 8005dfe:	00c9      	lsls	r1, r1, #3
 8005e00:	430a      	orrs	r2, r1
 8005e02:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e04:	4b5e      	ldr	r3, [pc, #376]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e08:	4b5d      	ldr	r3, [pc, #372]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e0a:	2180      	movs	r1, #128	@ 0x80
 8005e0c:	0049      	lsls	r1, r1, #1
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e12:	e00b      	b.n	8005e2c <HAL_RCC_OscConfig+0x534>
 8005e14:	4b5a      	ldr	r3, [pc, #360]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e18:	4b59      	ldr	r3, [pc, #356]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e1a:	495b      	ldr	r1, [pc, #364]	@ (8005f88 <HAL_RCC_OscConfig+0x690>)
 8005e1c:	400a      	ands	r2, r1
 8005e1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e20:	4b57      	ldr	r3, [pc, #348]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e24:	4b56      	ldr	r3, [pc, #344]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e26:	495a      	ldr	r1, [pc, #360]	@ (8005f90 <HAL_RCC_OscConfig+0x698>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e34:	f7fd fd96 	bl	8003964 <HAL_GetTick>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3c:	e009      	b.n	8005e52 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fd fd91 	bl	8003964 <HAL_GetTick>
 8005e42:	0002      	movs	r2, r0
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	4a52      	ldr	r2, [pc, #328]	@ (8005f94 <HAL_RCC_OscConfig+0x69c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e11b      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e52:	4b4b      	ldr	r3, [pc, #300]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e56:	2380      	movs	r3, #128	@ 0x80
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d0ef      	beq.n	8005e3e <HAL_RCC_OscConfig+0x546>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e60:	f7fd fd80 	bl	8003964 <HAL_GetTick>
 8005e64:	0003      	movs	r3, r0
 8005e66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e68:	e009      	b.n	8005e7e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fd fd7b 	bl	8003964 <HAL_GetTick>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	4a47      	ldr	r2, [pc, #284]	@ (8005f94 <HAL_RCC_OscConfig+0x69c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e105      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e7e:	4b40      	ldr	r3, [pc, #256]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e82:	2380      	movs	r3, #128	@ 0x80
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4013      	ands	r3, r2
 8005e88:	d1ef      	bne.n	8005e6a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e8a:	2323      	movs	r3, #35	@ 0x23
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b3a      	ldr	r3, [pc, #232]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e98:	4b39      	ldr	r3, [pc, #228]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005e9a:	493f      	ldr	r1, [pc, #252]	@ (8005f98 <HAL_RCC_OscConfig+0x6a0>)
 8005e9c:	400a      	ands	r2, r1
 8005e9e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d049      	beq.n	8005f3e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d026      	beq.n	8005f00 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005eb2:	4b33      	ldr	r3, [pc, #204]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	4b32      	ldr	r3, [pc, #200]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005eb8:	2101      	movs	r1, #1
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	609a      	str	r2, [r3, #8]
 8005ebe:	4b30      	ldr	r3, [pc, #192]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005eca:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <HAL_RCC_OscConfig+0x6a4>)
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	4b33      	ldr	r3, [pc, #204]	@ (8005f9c <HAL_RCC_OscConfig+0x6a4>)
 8005ed0:	2180      	movs	r1, #128	@ 0x80
 8005ed2:	0189      	lsls	r1, r1, #6
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fd fd44 	bl	8003964 <HAL_GetTick>
 8005edc:	0003      	movs	r3, r0
 8005ede:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ee2:	f7fd fd3f 	bl	8003964 <HAL_GetTick>
 8005ee6:	0002      	movs	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0ca      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ef4:	4b22      	ldr	r3, [pc, #136]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	4013      	ands	r3, r2
 8005efc:	d0f1      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x5ea>
 8005efe:	e01e      	b.n	8005f3e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005f00:	4b1f      	ldr	r3, [pc, #124]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	4b1e      	ldr	r3, [pc, #120]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005f06:	2101      	movs	r1, #1
 8005f08:	438a      	bics	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	4b23      	ldr	r3, [pc, #140]	@ (8005f9c <HAL_RCC_OscConfig+0x6a4>)
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	4b22      	ldr	r3, [pc, #136]	@ (8005f9c <HAL_RCC_OscConfig+0x6a4>)
 8005f12:	4923      	ldr	r1, [pc, #140]	@ (8005fa0 <HAL_RCC_OscConfig+0x6a8>)
 8005f14:	400a      	ands	r2, r1
 8005f16:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f18:	f7fd fd24 	bl	8003964 <HAL_GetTick>
 8005f1c:	0003      	movs	r3, r0
 8005f1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f22:	f7fd fd1f 	bl	8003964 <HAL_GetTick>
 8005f26:	0002      	movs	r2, r0
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0aa      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f34:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d1f1      	bne.n	8005f22 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d100      	bne.n	8005f48 <HAL_RCC_OscConfig+0x650>
 8005f46:	e09f      	b.n	8006088 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b0c      	cmp	r3, #12
 8005f4c:	d100      	bne.n	8005f50 <HAL_RCC_OscConfig+0x658>
 8005f4e:	e078      	b.n	8006042 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d159      	bne.n	800600c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b08      	ldr	r3, [pc, #32]	@ (8005f80 <HAL_RCC_OscConfig+0x688>)
 8005f5e:	4911      	ldr	r1, [pc, #68]	@ (8005fa4 <HAL_RCC_OscConfig+0x6ac>)
 8005f60:	400a      	ands	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fd fcfe 	bl	8003964 <HAL_GetTick>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f6c:	e01c      	b.n	8005fa8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fd fcf9 	bl	8003964 <HAL_GetTick>
 8005f72:	0002      	movs	r2, r0
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d915      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e084      	b.n	800608a <HAL_RCC_OscConfig+0x792>
 8005f80:	40021000 	.word	0x40021000
 8005f84:	ffff1fff 	.word	0xffff1fff
 8005f88:	fffffeff 	.word	0xfffffeff
 8005f8c:	40007000 	.word	0x40007000
 8005f90:	fffffbff 	.word	0xfffffbff
 8005f94:	00001388 	.word	0x00001388
 8005f98:	efffffff 	.word	0xefffffff
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	ffffdfff 	.word	0xffffdfff
 8005fa4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	049b      	lsls	r3, r3, #18
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d1dc      	bne.n	8005f6e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fb4:	4b37      	ldr	r3, [pc, #220]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a37      	ldr	r2, [pc, #220]	@ (8006098 <HAL_RCC_OscConfig+0x7a0>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	0449      	lsls	r1, r1, #17
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe2:	f7fd fcbf 	bl	8003964 <HAL_GetTick>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fec:	f7fd fcba 	bl	8003964 <HAL_GetTick>
 8005ff0:	0002      	movs	r2, r0
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e045      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ffe:	4b25      	ldr	r3, [pc, #148]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	049b      	lsls	r3, r3, #18
 8006006:	4013      	ands	r3, r2
 8006008:	d0f0      	beq.n	8005fec <HAL_RCC_OscConfig+0x6f4>
 800600a:	e03d      	b.n	8006088 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600c:	4b21      	ldr	r3, [pc, #132]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b20      	ldr	r3, [pc, #128]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8006012:	4922      	ldr	r1, [pc, #136]	@ (800609c <HAL_RCC_OscConfig+0x7a4>)
 8006014:	400a      	ands	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006018:	f7fd fca4 	bl	8003964 <HAL_GetTick>
 800601c:	0003      	movs	r3, r0
 800601e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006022:	f7fd fc9f 	bl	8003964 <HAL_GetTick>
 8006026:	0002      	movs	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e02a      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006034:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	049b      	lsls	r3, r3, #18
 800603c:	4013      	ands	r3, r2
 800603e:	d1f0      	bne.n	8006022 <HAL_RCC_OscConfig+0x72a>
 8006040:	e022      	b.n	8006088 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e01d      	b.n	800608a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800604e:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <HAL_RCC_OscConfig+0x79c>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	2380      	movs	r3, #128	@ 0x80
 8006058:	025b      	lsls	r3, r3, #9
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d10f      	bne.n	8006084 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	23f0      	movs	r3, #240	@ 0xf0
 8006068:	039b      	lsls	r3, r3, #14
 800606a:	401a      	ands	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d107      	bne.n	8006084 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	23c0      	movs	r3, #192	@ 0xc0
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	401a      	ands	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006080:	429a      	cmp	r2, r3
 8006082:	d001      	beq.n	8006088 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b00a      	add	sp, #40	@ 0x28
 8006090:	bdb0      	pop	{r4, r5, r7, pc}
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	40021000 	.word	0x40021000
 8006098:	ff02ffff 	.word	0xff02ffff
 800609c:	feffffff 	.word	0xfeffffff

080060a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e128      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060b4:	4b96      	ldr	r3, [pc, #600]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2201      	movs	r2, #1
 80060ba:	4013      	ands	r3, r2
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d91e      	bls.n	8006100 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c2:	4b93      	ldr	r3, [pc, #588]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2201      	movs	r2, #1
 80060c8:	4393      	bics	r3, r2
 80060ca:	0019      	movs	r1, r3
 80060cc:	4b90      	ldr	r3, [pc, #576]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060d4:	f7fd fc46 	bl	8003964 <HAL_GetTick>
 80060d8:	0003      	movs	r3, r0
 80060da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060dc:	e009      	b.n	80060f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060de:	f7fd fc41 	bl	8003964 <HAL_GetTick>
 80060e2:	0002      	movs	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	4a8a      	ldr	r2, [pc, #552]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e109      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b87      	ldr	r3, [pc, #540]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4013      	ands	r3, r2
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d1ee      	bne.n	80060de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2202      	movs	r2, #2
 8006106:	4013      	ands	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800610a:	4b83      	ldr	r3, [pc, #524]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	22f0      	movs	r2, #240	@ 0xf0
 8006110:	4393      	bics	r3, r2
 8006112:	0019      	movs	r1, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	4b7f      	ldr	r3, [pc, #508]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 800611a:	430a      	orrs	r2, r1
 800611c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2201      	movs	r2, #1
 8006124:	4013      	ands	r3, r2
 8006126:	d100      	bne.n	800612a <HAL_RCC_ClockConfig+0x8a>
 8006128:	e089      	b.n	800623e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d107      	bne.n	8006142 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006132:	4b79      	ldr	r3, [pc, #484]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	029b      	lsls	r3, r3, #10
 800613a:	4013      	ands	r3, r2
 800613c:	d120      	bne.n	8006180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e0e1      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800614a:	4b73      	ldr	r3, [pc, #460]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	2380      	movs	r3, #128	@ 0x80
 8006150:	049b      	lsls	r3, r3, #18
 8006152:	4013      	ands	r3, r2
 8006154:	d114      	bne.n	8006180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0d5      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d106      	bne.n	8006170 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006162:	4b6d      	ldr	r3, [pc, #436]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2204      	movs	r2, #4
 8006168:	4013      	ands	r3, r2
 800616a:	d109      	bne.n	8006180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0ca      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006170:	4b69      	ldr	r3, [pc, #420]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	2380      	movs	r3, #128	@ 0x80
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4013      	ands	r3, r2
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0c2      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006180:	4b65      	ldr	r3, [pc, #404]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2203      	movs	r2, #3
 8006186:	4393      	bics	r3, r2
 8006188:	0019      	movs	r1, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b62      	ldr	r3, [pc, #392]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006190:	430a      	orrs	r2, r1
 8006192:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006194:	f7fd fbe6 	bl	8003964 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d111      	bne.n	80061c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a4:	e009      	b.n	80061ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a6:	f7fd fbdd 	bl	8003964 <HAL_GetTick>
 80061aa:	0002      	movs	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	4a58      	ldr	r2, [pc, #352]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e0a5      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80061ba:	4b57      	ldr	r3, [pc, #348]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	220c      	movs	r2, #12
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d1ef      	bne.n	80061a6 <HAL_RCC_ClockConfig+0x106>
 80061c6:	e03a      	b.n	800623e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d111      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061d0:	e009      	b.n	80061e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d2:	f7fd fbc7 	bl	8003964 <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e08f      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	220c      	movs	r2, #12
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d1ef      	bne.n	80061d2 <HAL_RCC_ClockConfig+0x132>
 80061f2:	e024      	b.n	800623e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d11b      	bne.n	8006234 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061fc:	e009      	b.n	8006212 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fe:	f7fd fbb1 	bl	8003964 <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	4a42      	ldr	r2, [pc, #264]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e079      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006212:	4b41      	ldr	r3, [pc, #260]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	220c      	movs	r2, #12
 8006218:	4013      	ands	r3, r2
 800621a:	2b04      	cmp	r3, #4
 800621c:	d1ef      	bne.n	80061fe <HAL_RCC_ClockConfig+0x15e>
 800621e:	e00e      	b.n	800623e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006220:	f7fd fba0 	bl	8003964 <HAL_GetTick>
 8006224:	0002      	movs	r2, r0
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	4a3a      	ldr	r2, [pc, #232]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e068      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006234:	4b38      	ldr	r3, [pc, #224]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	220c      	movs	r2, #12
 800623a:	4013      	ands	r3, r2
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800623e:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	4013      	ands	r3, r2
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d21e      	bcs.n	800628a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624c:	4b30      	ldr	r3, [pc, #192]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2201      	movs	r2, #1
 8006252:	4393      	bics	r3, r2
 8006254:	0019      	movs	r1, r3
 8006256:	4b2e      	ldr	r3, [pc, #184]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800625e:	f7fd fb81 	bl	8003964 <HAL_GetTick>
 8006262:	0003      	movs	r3, r0
 8006264:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	e009      	b.n	800627c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006268:	f7fd fb7c 	bl	8003964 <HAL_GetTick>
 800626c:	0002      	movs	r2, r0
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	4a28      	ldr	r2, [pc, #160]	@ (8006314 <HAL_RCC_ClockConfig+0x274>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d901      	bls.n	800627c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e044      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627c:	4b24      	ldr	r3, [pc, #144]	@ (8006310 <HAL_RCC_ClockConfig+0x270>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2201      	movs	r2, #1
 8006282:	4013      	ands	r3, r2
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d1ee      	bne.n	8006268 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2204      	movs	r2, #4
 8006290:	4013      	ands	r3, r2
 8006292:	d009      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006294:	4b20      	ldr	r3, [pc, #128]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4a20      	ldr	r2, [pc, #128]	@ (800631c <HAL_RCC_ClockConfig+0x27c>)
 800629a:	4013      	ands	r3, r2
 800629c:	0019      	movs	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80062a4:	430a      	orrs	r2, r1
 80062a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2208      	movs	r2, #8
 80062ae:	4013      	ands	r3, r2
 80062b0:	d00a      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062b2:	4b19      	ldr	r3, [pc, #100]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006320 <HAL_RCC_ClockConfig+0x280>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	0019      	movs	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	4b15      	ldr	r3, [pc, #84]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062c8:	f000 f832 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 80062cc:	0001      	movs	r1, r0
 80062ce:	4b12      	ldr	r3, [pc, #72]	@ (8006318 <HAL_RCC_ClockConfig+0x278>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	220f      	movs	r2, #15
 80062d6:	4013      	ands	r3, r2
 80062d8:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <HAL_RCC_ClockConfig+0x284>)
 80062da:	5cd3      	ldrb	r3, [r2, r3]
 80062dc:	000a      	movs	r2, r1
 80062de:	40da      	lsrs	r2, r3
 80062e0:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <HAL_RCC_ClockConfig+0x288>)
 80062e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <HAL_RCC_ClockConfig+0x28c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	250b      	movs	r5, #11
 80062ea:	197c      	adds	r4, r7, r5
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7fd faf3 	bl	80038d8 <HAL_InitTick>
 80062f2:	0003      	movs	r3, r0
 80062f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80062f6:	197b      	adds	r3, r7, r5
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80062fe:	197b      	adds	r3, r7, r5
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	e000      	b.n	8006306 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bdb0      	pop	{r4, r5, r7, pc}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	40022000 	.word	0x40022000
 8006314:	00001388 	.word	0x00001388
 8006318:	40021000 	.word	0x40021000
 800631c:	fffff8ff 	.word	0xfffff8ff
 8006320:	ffffc7ff 	.word	0xffffc7ff
 8006324:	0800bcb0 	.word	0x0800bcb0
 8006328:	20000004 	.word	0x20000004
 800632c:	20000008 	.word	0x20000008

08006330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006330:	b5b0      	push	{r4, r5, r7, lr}
 8006332:	b08e      	sub	sp, #56	@ 0x38
 8006334:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006336:	4b4c      	ldr	r3, [pc, #304]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x138>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800633c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800633e:	230c      	movs	r3, #12
 8006340:	4013      	ands	r3, r2
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d014      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x40>
 8006346:	d900      	bls.n	800634a <HAL_RCC_GetSysClockFreq+0x1a>
 8006348:	e07b      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0x112>
 800634a:	2b04      	cmp	r3, #4
 800634c:	d002      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x24>
 800634e:	2b08      	cmp	r3, #8
 8006350:	d00b      	beq.n	800636a <HAL_RCC_GetSysClockFreq+0x3a>
 8006352:	e076      	b.n	8006442 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006354:	4b44      	ldr	r3, [pc, #272]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x138>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2210      	movs	r2, #16
 800635a:	4013      	ands	r3, r2
 800635c:	d002      	beq.n	8006364 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800635e:	4b43      	ldr	r3, [pc, #268]	@ (800646c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006360:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006362:	e07c      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006364:	4b42      	ldr	r3, [pc, #264]	@ (8006470 <HAL_RCC_GetSysClockFreq+0x140>)
 8006366:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006368:	e079      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800636a:	4b42      	ldr	r3, [pc, #264]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x144>)
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800636e:	e076      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	0c9a      	lsrs	r2, r3, #18
 8006374:	230f      	movs	r3, #15
 8006376:	401a      	ands	r2, r3
 8006378:	4b3f      	ldr	r3, [pc, #252]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x148>)
 800637a:	5c9b      	ldrb	r3, [r3, r2]
 800637c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	0d9a      	lsrs	r2, r3, #22
 8006382:	2303      	movs	r3, #3
 8006384:	4013      	ands	r3, r2
 8006386:	3301      	adds	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800638a:	4b37      	ldr	r3, [pc, #220]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x138>)
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	2380      	movs	r3, #128	@ 0x80
 8006390:	025b      	lsls	r3, r3, #9
 8006392:	4013      	ands	r3, r2
 8006394:	d01a      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	4a35      	ldr	r2, [pc, #212]	@ (8006474 <HAL_RCC_GetSysClockFreq+0x144>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	69b8      	ldr	r0, [r7, #24]
 80063a4:	69f9      	ldr	r1, [r7, #28]
 80063a6:	f7fa f89f 	bl	80004e8 <__aeabi_lmul>
 80063aa:	0002      	movs	r2, r0
 80063ac:	000b      	movs	r3, r1
 80063ae:	0010      	movs	r0, r2
 80063b0:	0019      	movs	r1, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f7fa f873 	bl	80004a8 <__aeabi_uldivmod>
 80063c2:	0002      	movs	r2, r0
 80063c4:	000b      	movs	r3, r1
 80063c6:	0013      	movs	r3, r2
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ca:	e037      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80063cc:	4b26      	ldr	r3, [pc, #152]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x138>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2210      	movs	r2, #16
 80063d2:	4013      	ands	r3, r2
 80063d4:	d01a      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80063d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	4a23      	ldr	r2, [pc, #140]	@ (800646c <HAL_RCC_GetSysClockFreq+0x13c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	68b8      	ldr	r0, [r7, #8]
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	f7fa f87f 	bl	80004e8 <__aeabi_lmul>
 80063ea:	0002      	movs	r2, r0
 80063ec:	000b      	movs	r3, r1
 80063ee:	0010      	movs	r0, r2
 80063f0:	0019      	movs	r1, r3
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f7fa f853 	bl	80004a8 <__aeabi_uldivmod>
 8006402:	0002      	movs	r2, r0
 8006404:	000b      	movs	r3, r1
 8006406:	0013      	movs	r3, r2
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
 800640a:	e017      	b.n	800643c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	0018      	movs	r0, r3
 8006410:	2300      	movs	r3, #0
 8006412:	0019      	movs	r1, r3
 8006414:	4a16      	ldr	r2, [pc, #88]	@ (8006470 <HAL_RCC_GetSysClockFreq+0x140>)
 8006416:	2300      	movs	r3, #0
 8006418:	f7fa f866 	bl	80004e8 <__aeabi_lmul>
 800641c:	0002      	movs	r2, r0
 800641e:	000b      	movs	r3, r1
 8006420:	0010      	movs	r0, r2
 8006422:	0019      	movs	r1, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	001c      	movs	r4, r3
 8006428:	2300      	movs	r3, #0
 800642a:	001d      	movs	r5, r3
 800642c:	0022      	movs	r2, r4
 800642e:	002b      	movs	r3, r5
 8006430:	f7fa f83a 	bl	80004a8 <__aeabi_uldivmod>
 8006434:	0002      	movs	r2, r0
 8006436:	000b      	movs	r3, r1
 8006438:	0013      	movs	r3, r2
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800643c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8006440:	e00d      	b.n	800645e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <HAL_RCC_GetSysClockFreq+0x138>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	0b5b      	lsrs	r3, r3, #13
 8006448:	2207      	movs	r2, #7
 800644a:	4013      	ands	r3, r2
 800644c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	3301      	adds	r3, #1
 8006452:	2280      	movs	r2, #128	@ 0x80
 8006454:	0212      	lsls	r2, r2, #8
 8006456:	409a      	lsls	r2, r3
 8006458:	0013      	movs	r3, r2
 800645a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800645c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b00e      	add	sp, #56	@ 0x38
 8006466:	bdb0      	pop	{r4, r5, r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	003d0900 	.word	0x003d0900
 8006470:	00f42400 	.word	0x00f42400
 8006474:	007a1200 	.word	0x007a1200
 8006478:	0800bcc8 	.word	0x0800bcc8

0800647c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006480:	4b02      	ldr	r3, [pc, #8]	@ (800648c <HAL_RCC_GetHCLKFreq+0x10>)
 8006482:	681b      	ldr	r3, [r3, #0]
}
 8006484:	0018      	movs	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	20000004 	.word	0x20000004

08006490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006494:	f7ff fff2 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8006498:	0001      	movs	r1, r0
 800649a:	4b06      	ldr	r3, [pc, #24]	@ (80064b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	2207      	movs	r2, #7
 80064a2:	4013      	ands	r3, r2
 80064a4:	4a04      	ldr	r2, [pc, #16]	@ (80064b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064a6:	5cd3      	ldrb	r3, [r2, r3]
 80064a8:	40d9      	lsrs	r1, r3
 80064aa:	000b      	movs	r3, r1
}
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800bcc0 	.word	0x0800bcc0

080064bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064c0:	f7ff ffdc 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064c4:	0001      	movs	r1, r0
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	0adb      	lsrs	r3, r3, #11
 80064cc:	2207      	movs	r2, #7
 80064ce:	4013      	ands	r3, r2
 80064d0:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	40d9      	lsrs	r1, r3
 80064d6:	000b      	movs	r3, r1
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800bcc0 	.word	0x0800bcc0

080064e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80064f0:	2017      	movs	r0, #23
 80064f2:	183b      	adds	r3, r7, r0
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2220      	movs	r2, #32
 80064fe:	4013      	ands	r3, r2
 8006500:	d100      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006502:	e0c7      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006504:	4b9b      	ldr	r3, [pc, #620]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006508:	2380      	movs	r3, #128	@ 0x80
 800650a:	055b      	lsls	r3, r3, #21
 800650c:	4013      	ands	r3, r2
 800650e:	d109      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006510:	4b98      	ldr	r3, [pc, #608]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006514:	4b97      	ldr	r3, [pc, #604]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006516:	2180      	movs	r1, #128	@ 0x80
 8006518:	0549      	lsls	r1, r1, #21
 800651a:	430a      	orrs	r2, r1
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800651e:	183b      	adds	r3, r7, r0
 8006520:	2201      	movs	r2, #1
 8006522:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006524:	4b94      	ldr	r3, [pc, #592]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4013      	ands	r3, r2
 800652e:	d11a      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006530:	4b91      	ldr	r3, [pc, #580]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b90      	ldr	r3, [pc, #576]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006536:	2180      	movs	r1, #128	@ 0x80
 8006538:	0049      	lsls	r1, r1, #1
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653e:	f7fd fa11 	bl	8003964 <HAL_GetTick>
 8006542:	0003      	movs	r3, r0
 8006544:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006546:	e008      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006548:	f7fd fa0c 	bl	8003964 <HAL_GetTick>
 800654c:	0002      	movs	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b64      	cmp	r3, #100	@ 0x64
 8006554:	d901      	bls.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e107      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b87      	ldr	r3, [pc, #540]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4013      	ands	r3, r2
 8006564:	d0f0      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006566:	4b83      	ldr	r3, [pc, #524]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	23c0      	movs	r3, #192	@ 0xc0
 800656c:	039b      	lsls	r3, r3, #14
 800656e:	4013      	ands	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	23c0      	movs	r3, #192	@ 0xc0
 8006578:	039b      	lsls	r3, r3, #14
 800657a:	4013      	ands	r3, r2
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	429a      	cmp	r2, r3
 8006580:	d013      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	23c0      	movs	r3, #192	@ 0xc0
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	401a      	ands	r2, r3
 800658c:	23c0      	movs	r3, #192	@ 0xc0
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	429a      	cmp	r2, r3
 8006592:	d10a      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006594:	4b77      	ldr	r3, [pc, #476]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	2380      	movs	r3, #128	@ 0x80
 800659a:	029b      	lsls	r3, r3, #10
 800659c:	401a      	ands	r2, r3
 800659e:	2380      	movs	r3, #128	@ 0x80
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d101      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e0df      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80065aa:	4b72      	ldr	r3, [pc, #456]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065ae:	23c0      	movs	r3, #192	@ 0xc0
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	4013      	ands	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03b      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	23c0      	movs	r3, #192	@ 0xc0
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	4013      	ands	r3, r2
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d033      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2220      	movs	r2, #32
 80065d2:	4013      	ands	r3, r2
 80065d4:	d02e      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80065d6:	4b67      	ldr	r3, [pc, #412]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065da:	4a68      	ldr	r2, [pc, #416]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80065dc:	4013      	ands	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065e0:	4b64      	ldr	r3, [pc, #400]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065e4:	4b63      	ldr	r3, [pc, #396]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065e6:	2180      	movs	r1, #128	@ 0x80
 80065e8:	0309      	lsls	r1, r1, #12
 80065ea:	430a      	orrs	r2, r1
 80065ec:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065ee:	4b61      	ldr	r3, [pc, #388]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065f2:	4b60      	ldr	r3, [pc, #384]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065f4:	4962      	ldr	r1, [pc, #392]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80065f6:	400a      	ands	r2, r1
 80065f8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80065fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4013      	ands	r3, r2
 8006608:	d014      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fd f9ab 	bl	8003964 <HAL_GetTick>
 800660e:	0003      	movs	r3, r0
 8006610:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006612:	e009      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006614:	f7fd f9a6 	bl	8003964 <HAL_GetTick>
 8006618:	0002      	movs	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	4a59      	ldr	r2, [pc, #356]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d901      	bls.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e0a0      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006628:	4b52      	ldr	r3, [pc, #328]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800662a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4013      	ands	r3, r2
 8006632:	d0ef      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2220      	movs	r2, #32
 800663a:	4013      	ands	r3, r2
 800663c:	d01f      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	23c0      	movs	r3, #192	@ 0xc0
 8006644:	029b      	lsls	r3, r3, #10
 8006646:	401a      	ands	r2, r3
 8006648:	23c0      	movs	r3, #192	@ 0xc0
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	429a      	cmp	r2, r3
 800664e:	d10c      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8006650:	4b48      	ldr	r3, [pc, #288]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a4c      	ldr	r2, [pc, #304]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006656:	4013      	ands	r3, r2
 8006658:	0019      	movs	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	23c0      	movs	r3, #192	@ 0xc0
 8006660:	039b      	lsls	r3, r3, #14
 8006662:	401a      	ands	r2, r3
 8006664:	4b43      	ldr	r3, [pc, #268]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006666:	430a      	orrs	r2, r1
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	4b42      	ldr	r3, [pc, #264]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800666c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	23c0      	movs	r3, #192	@ 0xc0
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	401a      	ands	r2, r3
 8006678:	4b3e      	ldr	r3, [pc, #248]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800667a:	430a      	orrs	r2, r1
 800667c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800667e:	2317      	movs	r3, #23
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006688:	4b3a      	ldr	r3, [pc, #232]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800668a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800668c:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800668e:	493f      	ldr	r1, [pc, #252]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006690:	400a      	ands	r2, r1
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800669e:	4b35      	ldr	r3, [pc, #212]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a2:	2203      	movs	r2, #3
 80066a4:	4393      	bics	r3, r2
 80066a6:	0019      	movs	r1, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066ae:	430a      	orrs	r2, r1
 80066b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2202      	movs	r2, #2
 80066b8:	4013      	ands	r3, r2
 80066ba:	d009      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c0:	220c      	movs	r2, #12
 80066c2:	4393      	bics	r3, r2
 80066c4:	0019      	movs	r1, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066cc:	430a      	orrs	r2, r1
 80066ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2204      	movs	r2, #4
 80066d6:	4013      	ands	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066da:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066de:	4a2c      	ldr	r2, [pc, #176]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	0019      	movs	r1, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	4b22      	ldr	r3, [pc, #136]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066ea:	430a      	orrs	r2, r1
 80066ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2208      	movs	r2, #8
 80066f4:	4013      	ands	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80066fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fc:	4a25      	ldr	r2, [pc, #148]	@ (8006794 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	4b1b      	ldr	r3, [pc, #108]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006708:	430a      	orrs	r2, r1
 800670a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4013      	ands	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006718:	4b16      	ldr	r3, [pc, #88]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800671a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671c:	4a17      	ldr	r2, [pc, #92]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006728:	430a      	orrs	r2, r1
 800672a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2240      	movs	r2, #64	@ 0x40
 8006732:	4013      	ands	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006736:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673a:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006746:	430a      	orrs	r2, r1
 8006748:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2280      	movs	r2, #128	@ 0x80
 8006750:	4013      	ands	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006754:	4b07      	ldr	r3, [pc, #28]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006758:	4a10      	ldr	r2, [pc, #64]	@ (800679c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800675a:	4013      	ands	r3, r2
 800675c:	0019      	movs	r1, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006764:	430a      	orrs	r2, r1
 8006766:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	0018      	movs	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	b006      	add	sp, #24
 8006770:	bd80      	pop	{r7, pc}
 8006772:	46c0      	nop			@ (mov r8, r8)
 8006774:	40021000 	.word	0x40021000
 8006778:	40007000 	.word	0x40007000
 800677c:	fffcffff 	.word	0xfffcffff
 8006780:	fff7ffff 	.word	0xfff7ffff
 8006784:	00001388 	.word	0x00001388
 8006788:	ffcfffff 	.word	0xffcfffff
 800678c:	efffffff 	.word	0xefffffff
 8006790:	fffff3ff 	.word	0xfffff3ff
 8006794:	ffffcfff 	.word	0xffffcfff
 8006798:	fbffffff 	.word	0xfbffffff
 800679c:	fff3ffff 	.word	0xfff3ffff

080067a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e044      	b.n	800683c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d107      	bne.n	80067ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2278      	movs	r2, #120	@ 0x78
 80067be:	2100      	movs	r1, #0
 80067c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7fc feef 	bl	80035a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2224      	movs	r2, #36	@ 0x24
 80067ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2101      	movs	r1, #1
 80067dc:	438a      	bics	r2, r1
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f8d0 	bl	8006988 <UART_SetConfig>
 80067e8:	0003      	movs	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e024      	b.n	800683c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fb61 	bl	8006ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	490d      	ldr	r1, [pc, #52]	@ (8006844 <HAL_UART_Init+0xa4>)
 800680e:	400a      	ands	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	212a      	movs	r1, #42	@ 0x2a
 800681e:	438a      	bics	r2, r1
 8006820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2101      	movs	r1, #1
 800682e:	430a      	orrs	r2, r1
 8006830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fbf9 	bl	800702c <UART_CheckIdleState>
 800683a:	0003      	movs	r3, r0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	ffffb7ff 	.word	0xffffb7ff

08006848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	@ 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800685c:	2b20      	cmp	r3, #32
 800685e:	d000      	beq.n	8006862 <HAL_UART_Transmit+0x1a>
 8006860:	e08c      	b.n	800697c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_UART_Transmit+0x28>
 8006868:	1dbb      	adds	r3, r7, #6
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e084      	b.n	800697e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	2380      	movs	r3, #128	@ 0x80
 800687a:	015b      	lsls	r3, r3, #5
 800687c:	429a      	cmp	r2, r3
 800687e:	d109      	bne.n	8006894 <HAL_UART_Transmit+0x4c>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2201      	movs	r2, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d001      	beq.n	8006894 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e074      	b.n	800697e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2284      	movs	r2, #132	@ 0x84
 8006898:	2100      	movs	r1, #0
 800689a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2221      	movs	r2, #33	@ 0x21
 80068a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068a2:	f7fd f85f 	bl	8003964 <HAL_GetTick>
 80068a6:	0003      	movs	r3, r0
 80068a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1dba      	adds	r2, r7, #6
 80068ae:	2150      	movs	r1, #80	@ 0x50
 80068b0:	8812      	ldrh	r2, [r2, #0]
 80068b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	1dba      	adds	r2, r7, #6
 80068b8:	2152      	movs	r1, #82	@ 0x52
 80068ba:	8812      	ldrh	r2, [r2, #0]
 80068bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	015b      	lsls	r3, r3, #5
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d108      	bne.n	80068dc <HAL_UART_Transmit+0x94>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e003      	b.n	80068e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068e4:	e02f      	b.n	8006946 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	0013      	movs	r3, r2
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	@ 0x80
 80068f4:	f000 fc42 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d004      	beq.n	8006906 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e03b      	b.n	800697e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	001a      	movs	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	05d2      	lsls	r2, r2, #23
 8006918:	0dd2      	lsrs	r2, r2, #23
 800691a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	3302      	adds	r3, #2
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	e007      	b.n	8006934 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2252      	movs	r2, #82	@ 0x52
 8006938:	5a9b      	ldrh	r3, [r3, r2]
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b299      	uxth	r1, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2252      	movs	r2, #82	@ 0x52
 8006944:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2252      	movs	r2, #82	@ 0x52
 800694a:	5a9b      	ldrh	r3, [r3, r2]
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1c9      	bne.n	80068e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	0013      	movs	r3, r2
 800695c:	2200      	movs	r2, #0
 800695e:	2140      	movs	r1, #64	@ 0x40
 8006960:	f000 fc0c 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 8006964:	1e03      	subs	r3, r0, #0
 8006966:	d004      	beq.n	8006972 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e005      	b.n	800697e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e000      	b.n	800697e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800697c:	2302      	movs	r3, #2
  }
}
 800697e:	0018      	movs	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	b008      	add	sp, #32
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006988:	b5b0      	push	{r4, r5, r7, lr}
 800698a:	b08e      	sub	sp, #56	@ 0x38
 800698c:	af00      	add	r7, sp, #0
 800698e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006990:	231a      	movs	r3, #26
 8006992:	2218      	movs	r2, #24
 8006994:	189b      	adds	r3, r3, r2
 8006996:	19db      	adds	r3, r3, r7
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4ac3      	ldr	r2, [pc, #780]	@ (8006cc8 <UART_SetConfig+0x340>)
 80069bc:	4013      	ands	r3, r2
 80069be:	0019      	movs	r1, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4abe      	ldr	r2, [pc, #760]	@ (8006ccc <UART_SetConfig+0x344>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	0019      	movs	r1, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4ab8      	ldr	r2, [pc, #736]	@ (8006cd0 <UART_SetConfig+0x348>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069f8:	4313      	orrs	r3, r2
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	4ab4      	ldr	r2, [pc, #720]	@ (8006cd4 <UART_SetConfig+0x34c>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4ab0      	ldr	r2, [pc, #704]	@ (8006cd8 <UART_SetConfig+0x350>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d131      	bne.n	8006a80 <UART_SetConfig+0xf8>
 8006a1c:	4baf      	ldr	r3, [pc, #700]	@ (8006cdc <UART_SetConfig+0x354>)
 8006a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a20:	2203      	movs	r2, #3
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d01d      	beq.n	8006a64 <UART_SetConfig+0xdc>
 8006a28:	d823      	bhi.n	8006a72 <UART_SetConfig+0xea>
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d00c      	beq.n	8006a48 <UART_SetConfig+0xc0>
 8006a2e:	d820      	bhi.n	8006a72 <UART_SetConfig+0xea>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <UART_SetConfig+0xb2>
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d00e      	beq.n	8006a56 <UART_SetConfig+0xce>
 8006a38:	e01b      	b.n	8006a72 <UART_SetConfig+0xea>
 8006a3a:	231b      	movs	r3, #27
 8006a3c:	2218      	movs	r2, #24
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	19db      	adds	r3, r3, r7
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e0b4      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006a48:	231b      	movs	r3, #27
 8006a4a:	2218      	movs	r2, #24
 8006a4c:	189b      	adds	r3, r3, r2
 8006a4e:	19db      	adds	r3, r3, r7
 8006a50:	2202      	movs	r2, #2
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e0ad      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006a56:	231b      	movs	r3, #27
 8006a58:	2218      	movs	r2, #24
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	19db      	adds	r3, r3, r7
 8006a5e:	2204      	movs	r2, #4
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e0a6      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006a64:	231b      	movs	r3, #27
 8006a66:	2218      	movs	r2, #24
 8006a68:	189b      	adds	r3, r3, r2
 8006a6a:	19db      	adds	r3, r3, r7
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	e09f      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006a72:	231b      	movs	r3, #27
 8006a74:	2218      	movs	r2, #24
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	19db      	adds	r3, r3, r7
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e098      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a96      	ldr	r2, [pc, #600]	@ (8006ce0 <UART_SetConfig+0x358>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d131      	bne.n	8006aee <UART_SetConfig+0x166>
 8006a8a:	4b94      	ldr	r3, [pc, #592]	@ (8006cdc <UART_SetConfig+0x354>)
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8e:	220c      	movs	r2, #12
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b0c      	cmp	r3, #12
 8006a94:	d01d      	beq.n	8006ad2 <UART_SetConfig+0x14a>
 8006a96:	d823      	bhi.n	8006ae0 <UART_SetConfig+0x158>
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d00c      	beq.n	8006ab6 <UART_SetConfig+0x12e>
 8006a9c:	d820      	bhi.n	8006ae0 <UART_SetConfig+0x158>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <UART_SetConfig+0x120>
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00e      	beq.n	8006ac4 <UART_SetConfig+0x13c>
 8006aa6:	e01b      	b.n	8006ae0 <UART_SetConfig+0x158>
 8006aa8:	231b      	movs	r3, #27
 8006aaa:	2218      	movs	r2, #24
 8006aac:	189b      	adds	r3, r3, r2
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e07d      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006ab6:	231b      	movs	r3, #27
 8006ab8:	2218      	movs	r2, #24
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	19db      	adds	r3, r3, r7
 8006abe:	2202      	movs	r2, #2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e076      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006ac4:	231b      	movs	r3, #27
 8006ac6:	2218      	movs	r2, #24
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	19db      	adds	r3, r3, r7
 8006acc:	2204      	movs	r2, #4
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	e06f      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006ad2:	231b      	movs	r3, #27
 8006ad4:	2218      	movs	r2, #24
 8006ad6:	189b      	adds	r3, r3, r2
 8006ad8:	19db      	adds	r3, r3, r7
 8006ada:	2208      	movs	r2, #8
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e068      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006ae0:	231b      	movs	r3, #27
 8006ae2:	2218      	movs	r2, #24
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	19db      	adds	r3, r3, r7
 8006ae8:	2210      	movs	r2, #16
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	e061      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ce4 <UART_SetConfig+0x35c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d106      	bne.n	8006b06 <UART_SetConfig+0x17e>
 8006af8:	231b      	movs	r3, #27
 8006afa:	2218      	movs	r2, #24
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	19db      	adds	r3, r3, r7
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	e055      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a77      	ldr	r2, [pc, #476]	@ (8006ce8 <UART_SetConfig+0x360>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d106      	bne.n	8006b1e <UART_SetConfig+0x196>
 8006b10:	231b      	movs	r3, #27
 8006b12:	2218      	movs	r2, #24
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	19db      	adds	r3, r3, r7
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e049      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6b      	ldr	r2, [pc, #428]	@ (8006cd0 <UART_SetConfig+0x348>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d13e      	bne.n	8006ba6 <UART_SetConfig+0x21e>
 8006b28:	4b6c      	ldr	r3, [pc, #432]	@ (8006cdc <UART_SetConfig+0x354>)
 8006b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b2c:	23c0      	movs	r3, #192	@ 0xc0
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	4013      	ands	r3, r2
 8006b32:	22c0      	movs	r2, #192	@ 0xc0
 8006b34:	0112      	lsls	r2, r2, #4
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d027      	beq.n	8006b8a <UART_SetConfig+0x202>
 8006b3a:	22c0      	movs	r2, #192	@ 0xc0
 8006b3c:	0112      	lsls	r2, r2, #4
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d82a      	bhi.n	8006b98 <UART_SetConfig+0x210>
 8006b42:	2280      	movs	r2, #128	@ 0x80
 8006b44:	0112      	lsls	r2, r2, #4
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d011      	beq.n	8006b6e <UART_SetConfig+0x1e6>
 8006b4a:	2280      	movs	r2, #128	@ 0x80
 8006b4c:	0112      	lsls	r2, r2, #4
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d822      	bhi.n	8006b98 <UART_SetConfig+0x210>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <UART_SetConfig+0x1d8>
 8006b56:	2280      	movs	r2, #128	@ 0x80
 8006b58:	00d2      	lsls	r2, r2, #3
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <UART_SetConfig+0x1f4>
 8006b5e:	e01b      	b.n	8006b98 <UART_SetConfig+0x210>
 8006b60:	231b      	movs	r3, #27
 8006b62:	2218      	movs	r2, #24
 8006b64:	189b      	adds	r3, r3, r2
 8006b66:	19db      	adds	r3, r3, r7
 8006b68:	2200      	movs	r2, #0
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e021      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b6e:	231b      	movs	r3, #27
 8006b70:	2218      	movs	r2, #24
 8006b72:	189b      	adds	r3, r3, r2
 8006b74:	19db      	adds	r3, r3, r7
 8006b76:	2202      	movs	r2, #2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e01a      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b7c:	231b      	movs	r3, #27
 8006b7e:	2218      	movs	r2, #24
 8006b80:	189b      	adds	r3, r3, r2
 8006b82:	19db      	adds	r3, r3, r7
 8006b84:	2204      	movs	r2, #4
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e013      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b8a:	231b      	movs	r3, #27
 8006b8c:	2218      	movs	r2, #24
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	19db      	adds	r3, r3, r7
 8006b92:	2208      	movs	r2, #8
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e00c      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006b98:	231b      	movs	r3, #27
 8006b9a:	2218      	movs	r2, #24
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e005      	b.n	8006bb2 <UART_SetConfig+0x22a>
 8006ba6:	231b      	movs	r3, #27
 8006ba8:	2218      	movs	r2, #24
 8006baa:	189b      	adds	r3, r3, r2
 8006bac:	19db      	adds	r3, r3, r7
 8006bae:	2210      	movs	r2, #16
 8006bb0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a46      	ldr	r2, [pc, #280]	@ (8006cd0 <UART_SetConfig+0x348>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d000      	beq.n	8006bbe <UART_SetConfig+0x236>
 8006bbc:	e09a      	b.n	8006cf4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bbe:	231b      	movs	r3, #27
 8006bc0:	2218      	movs	r2, #24
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	19db      	adds	r3, r3, r7
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d01d      	beq.n	8006c08 <UART_SetConfig+0x280>
 8006bcc:	dc20      	bgt.n	8006c10 <UART_SetConfig+0x288>
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d015      	beq.n	8006bfe <UART_SetConfig+0x276>
 8006bd2:	dc1d      	bgt.n	8006c10 <UART_SetConfig+0x288>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <UART_SetConfig+0x256>
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d005      	beq.n	8006be8 <UART_SetConfig+0x260>
 8006bdc:	e018      	b.n	8006c10 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bde:	f7ff fc57 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8006be2:	0003      	movs	r3, r0
 8006be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006be6:	e01c      	b.n	8006c22 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be8:	4b3c      	ldr	r3, [pc, #240]	@ (8006cdc <UART_SetConfig+0x354>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2210      	movs	r2, #16
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d002      	beq.n	8006bf8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8006cec <UART_SetConfig+0x364>)
 8006bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bf6:	e014      	b.n	8006c22 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf0 <UART_SetConfig+0x368>)
 8006bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bfc:	e011      	b.n	8006c22 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfe:	f7ff fb97 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8006c02:	0003      	movs	r3, r0
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006c06:	e00c      	b.n	8006c22 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006c0e:	e008      	b.n	8006c22 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006c14:	231a      	movs	r3, #26
 8006c16:	2218      	movs	r2, #24
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	19db      	adds	r3, r3, r7
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
        break;
 8006c20:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d100      	bne.n	8006c2a <UART_SetConfig+0x2a2>
 8006c28:	e133      	b.n	8006e92 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	0013      	movs	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	189b      	adds	r3, r3, r2
 8006c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d305      	bcc.n	8006c46 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d906      	bls.n	8006c54 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006c46:	231a      	movs	r3, #26
 8006c48:	2218      	movs	r2, #24
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	19db      	adds	r3, r3, r7
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e11e      	b.n	8006e92 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	6939      	ldr	r1, [r7, #16]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	000b      	movs	r3, r1
 8006c62:	0e1b      	lsrs	r3, r3, #24
 8006c64:	0010      	movs	r0, r2
 8006c66:	0205      	lsls	r5, r0, #8
 8006c68:	431d      	orrs	r5, r3
 8006c6a:	000b      	movs	r3, r1
 8006c6c:	021c      	lsls	r4, r3, #8
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	68f9      	ldr	r1, [r7, #12]
 8006c7e:	1900      	adds	r0, r0, r4
 8006c80:	4169      	adcs	r1, r5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	607b      	str	r3, [r7, #4]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f7f9 fc0a 	bl	80004a8 <__aeabi_uldivmod>
 8006c94:	0002      	movs	r2, r0
 8006c96:	000b      	movs	r3, r1
 8006c98:	0013      	movs	r3, r2
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c9e:	23c0      	movs	r3, #192	@ 0xc0
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d309      	bcc.n	8006cba <UART_SetConfig+0x332>
 8006ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca8:	2380      	movs	r3, #128	@ 0x80
 8006caa:	035b      	lsls	r3, r3, #13
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d204      	bcs.n	8006cba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb6:	60da      	str	r2, [r3, #12]
 8006cb8:	e0eb      	b.n	8006e92 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006cba:	231a      	movs	r3, #26
 8006cbc:	2218      	movs	r2, #24
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	19db      	adds	r3, r3, r7
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e0e4      	b.n	8006e92 <UART_SetConfig+0x50a>
 8006cc8:	efff69f3 	.word	0xefff69f3
 8006ccc:	ffffcfff 	.word	0xffffcfff
 8006cd0:	40004800 	.word	0x40004800
 8006cd4:	fffff4ff 	.word	0xfffff4ff
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	40004400 	.word	0x40004400
 8006ce4:	40004c00 	.word	0x40004c00
 8006ce8:	40005000 	.word	0x40005000
 8006cec:	003d0900 	.word	0x003d0900
 8006cf0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	2380      	movs	r3, #128	@ 0x80
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d000      	beq.n	8006d02 <UART_SetConfig+0x37a>
 8006d00:	e070      	b.n	8006de4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006d02:	231b      	movs	r3, #27
 8006d04:	2218      	movs	r2, #24
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	19db      	adds	r3, r3, r7
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d822      	bhi.n	8006d56 <UART_SetConfig+0x3ce>
 8006d10:	009a      	lsls	r2, r3, #2
 8006d12:	4b67      	ldr	r3, [pc, #412]	@ (8006eb0 <UART_SetConfig+0x528>)
 8006d14:	18d3      	adds	r3, r2, r3
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d1a:	f7ff fbb9 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d22:	e021      	b.n	8006d68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7ff fbca 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d2c:	e01c      	b.n	8006d68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d2e:	4b61      	ldr	r3, [pc, #388]	@ (8006eb4 <UART_SetConfig+0x52c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	4013      	ands	r3, r2
 8006d36:	d002      	beq.n	8006d3e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d38:	4b5f      	ldr	r3, [pc, #380]	@ (8006eb8 <UART_SetConfig+0x530>)
 8006d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d3c:	e014      	b.n	8006d68 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8006ebc <UART_SetConfig+0x534>)
 8006d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d42:	e011      	b.n	8006d68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d44:	f7ff faf4 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d4c:	e00c      	b.n	8006d68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d54:	e008      	b.n	8006d68 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006d5a:	231a      	movs	r3, #26
 8006d5c:	2218      	movs	r2, #24
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	19db      	adds	r3, r3, r7
 8006d62:	2201      	movs	r2, #1
 8006d64:	701a      	strb	r2, [r3, #0]
        break;
 8006d66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d100      	bne.n	8006d70 <UART_SetConfig+0x3e8>
 8006d6e:	e090      	b.n	8006e92 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	005a      	lsls	r2, r3, #1
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	18d2      	adds	r2, r2, r3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	0019      	movs	r1, r3
 8006d82:	0010      	movs	r0, r2
 8006d84:	f7f9 f9dc 	bl	8000140 <__udivsi3>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d921      	bls.n	8006dd6 <UART_SetConfig+0x44e>
 8006d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d94:	2380      	movs	r3, #128	@ 0x80
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d21c      	bcs.n	8006dd6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	200e      	movs	r0, #14
 8006da2:	2418      	movs	r4, #24
 8006da4:	1903      	adds	r3, r0, r4
 8006da6:	19db      	adds	r3, r3, r7
 8006da8:	210f      	movs	r1, #15
 8006daa:	438a      	bics	r2, r1
 8006dac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2207      	movs	r2, #7
 8006db6:	4013      	ands	r3, r2
 8006db8:	b299      	uxth	r1, r3
 8006dba:	1903      	adds	r3, r0, r4
 8006dbc:	19db      	adds	r3, r3, r7
 8006dbe:	1902      	adds	r2, r0, r4
 8006dc0:	19d2      	adds	r2, r2, r7
 8006dc2:	8812      	ldrh	r2, [r2, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	1902      	adds	r2, r0, r4
 8006dce:	19d2      	adds	r2, r2, r7
 8006dd0:	8812      	ldrh	r2, [r2, #0]
 8006dd2:	60da      	str	r2, [r3, #12]
 8006dd4:	e05d      	b.n	8006e92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd6:	231a      	movs	r3, #26
 8006dd8:	2218      	movs	r2, #24
 8006dda:	189b      	adds	r3, r3, r2
 8006ddc:	19db      	adds	r3, r3, r7
 8006dde:	2201      	movs	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	e056      	b.n	8006e92 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006de4:	231b      	movs	r3, #27
 8006de6:	2218      	movs	r2, #24
 8006de8:	189b      	adds	r3, r3, r2
 8006dea:	19db      	adds	r3, r3, r7
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d822      	bhi.n	8006e38 <UART_SetConfig+0x4b0>
 8006df2:	009a      	lsls	r2, r3, #2
 8006df4:	4b32      	ldr	r3, [pc, #200]	@ (8006ec0 <UART_SetConfig+0x538>)
 8006df6:	18d3      	adds	r3, r2, r3
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f7ff fb48 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8006e00:	0003      	movs	r3, r0
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e04:	e021      	b.n	8006e4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e06:	f7ff fb59 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e0e:	e01c      	b.n	8006e4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e10:	4b28      	ldr	r3, [pc, #160]	@ (8006eb4 <UART_SetConfig+0x52c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2210      	movs	r2, #16
 8006e16:	4013      	ands	r3, r2
 8006e18:	d002      	beq.n	8006e20 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e1a:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <UART_SetConfig+0x530>)
 8006e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e1e:	e014      	b.n	8006e4a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006e20:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <UART_SetConfig+0x534>)
 8006e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e24:	e011      	b.n	8006e4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e26:	f7ff fa83 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e30:	2380      	movs	r3, #128	@ 0x80
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e36:	e008      	b.n	8006e4a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006e3c:	231a      	movs	r3, #26
 8006e3e:	2218      	movs	r2, #24
 8006e40:	189b      	adds	r3, r3, r2
 8006e42:	19db      	adds	r3, r3, r7
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
        break;
 8006e48:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d020      	beq.n	8006e92 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	085a      	lsrs	r2, r3, #1
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	18d2      	adds	r2, r2, r3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	0019      	movs	r1, r3
 8006e60:	0010      	movs	r0, r2
 8006e62:	f7f9 f96d 	bl	8000140 <__udivsi3>
 8006e66:	0003      	movs	r3, r0
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6c:	2b0f      	cmp	r3, #15
 8006e6e:	d90a      	bls.n	8006e86 <UART_SetConfig+0x4fe>
 8006e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e72:	2380      	movs	r3, #128	@ 0x80
 8006e74:	025b      	lsls	r3, r3, #9
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d205      	bcs.n	8006e86 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60da      	str	r2, [r3, #12]
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006e86:	231a      	movs	r3, #26
 8006e88:	2218      	movs	r2, #24
 8006e8a:	189b      	adds	r3, r3, r2
 8006e8c:	19db      	adds	r3, r3, r7
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	2200      	movs	r2, #0
 8006e96:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e9e:	231a      	movs	r3, #26
 8006ea0:	2218      	movs	r2, #24
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	19db      	adds	r3, r3, r7
 8006ea6:	781b      	ldrb	r3, [r3, #0]
}
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	b00e      	add	sp, #56	@ 0x38
 8006eae:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb0:	0800bcd4 	.word	0x0800bcd4
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	00f42400 	.word	0x00f42400
 8006ec0:	0800bcf8 	.word	0x0800bcf8

08006ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d00b      	beq.n	8006eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4a4a      	ldr	r2, [pc, #296]	@ (8007008 <UART_AdvFeatureConfig+0x144>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	4a43      	ldr	r2, [pc, #268]	@ (800700c <UART_AdvFeatureConfig+0x148>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	0019      	movs	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	2204      	movs	r2, #4
 8006f16:	4013      	ands	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a3b      	ldr	r2, [pc, #236]	@ (8007010 <UART_AdvFeatureConfig+0x14c>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	0019      	movs	r1, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	2208      	movs	r2, #8
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4a34      	ldr	r2, [pc, #208]	@ (8007014 <UART_AdvFeatureConfig+0x150>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f58:	2210      	movs	r2, #16
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <UART_AdvFeatureConfig+0x154>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	0019      	movs	r1, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	4a25      	ldr	r2, [pc, #148]	@ (800701c <UART_AdvFeatureConfig+0x158>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	2240      	movs	r2, #64	@ 0x40
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d01d      	beq.n	8006fde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <UART_AdvFeatureConfig+0x15c>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	0019      	movs	r1, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fbe:	2380      	movs	r3, #128	@ 0x80
 8006fc0:	035b      	lsls	r3, r3, #13
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d10b      	bne.n	8006fde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	@ (8007024 <UART_AdvFeatureConfig+0x160>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	2280      	movs	r2, #128	@ 0x80
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4a0e      	ldr	r2, [pc, #56]	@ (8007028 <UART_AdvFeatureConfig+0x164>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	0019      	movs	r1, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	fffdffff 	.word	0xfffdffff
 800700c:	fffeffff 	.word	0xfffeffff
 8007010:	fffbffff 	.word	0xfffbffff
 8007014:	ffff7fff 	.word	0xffff7fff
 8007018:	ffffefff 	.word	0xffffefff
 800701c:	ffffdfff 	.word	0xffffdfff
 8007020:	ffefffff 	.word	0xffefffff
 8007024:	ff9fffff 	.word	0xff9fffff
 8007028:	fff7ffff 	.word	0xfff7ffff

0800702c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b092      	sub	sp, #72	@ 0x48
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2284      	movs	r2, #132	@ 0x84
 8007038:	2100      	movs	r1, #0
 800703a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800703c:	f7fc fc92 	bl	8003964 <HAL_GetTick>
 8007040:	0003      	movs	r3, r0
 8007042:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2208      	movs	r2, #8
 800704c:	4013      	ands	r3, r2
 800704e:	2b08      	cmp	r3, #8
 8007050:	d12c      	bne.n	80070ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007054:	2280      	movs	r2, #128	@ 0x80
 8007056:	0391      	lsls	r1, r2, #14
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4a46      	ldr	r2, [pc, #280]	@ (8007174 <UART_CheckIdleState+0x148>)
 800705c:	9200      	str	r2, [sp, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	f000 f88c 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 8007064:	1e03      	subs	r3, r0, #0
 8007066:	d021      	beq.n	80070ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007068:	f3ef 8310 	mrs	r3, PRIMASK
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007072:	2301      	movs	r3, #1
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	f383 8810 	msr	PRIMASK, r3
}
 800707c:	46c0      	nop			@ (mov r8, r8)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2180      	movs	r1, #128	@ 0x80
 800708a:	438a      	bics	r2, r1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	f383 8810 	msr	PRIMASK, r3
}
 8007098:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2278      	movs	r2, #120	@ 0x78
 80070a4:	2100      	movs	r1, #0
 80070a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e05f      	b.n	800716c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d146      	bne.n	8007148 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070bc:	2280      	movs	r2, #128	@ 0x80
 80070be:	03d1      	lsls	r1, r2, #15
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007174 <UART_CheckIdleState+0x148>)
 80070c4:	9200      	str	r2, [sp, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f000 f858 	bl	800717c <UART_WaitOnFlagUntilTimeout>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d03b      	beq.n	8007148 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d0:	f3ef 8310 	mrs	r3, PRIMASK
 80070d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80070d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070da:	2301      	movs	r3, #1
 80070dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f383 8810 	msr	PRIMASK, r3
}
 80070e4:	46c0      	nop			@ (mov r8, r8)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4921      	ldr	r1, [pc, #132]	@ (8007178 <UART_CheckIdleState+0x14c>)
 80070f2:	400a      	ands	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f383 8810 	msr	PRIMASK, r3
}
 8007100:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007102:	f3ef 8310 	mrs	r3, PRIMASK
 8007106:	61bb      	str	r3, [r7, #24]
  return(result);
 8007108:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	633b      	str	r3, [r7, #48]	@ 0x30
 800710c:	2301      	movs	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f383 8810 	msr	PRIMASK, r3
}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2101      	movs	r1, #1
 8007124:	438a      	bics	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f383 8810 	msr	PRIMASK, r3
}
 8007132:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2280      	movs	r2, #128	@ 0x80
 8007138:	2120      	movs	r1, #32
 800713a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2278      	movs	r2, #120	@ 0x78
 8007140:	2100      	movs	r1, #0
 8007142:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e011      	b.n	800716c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2280      	movs	r2, #128	@ 0x80
 8007152:	2120      	movs	r1, #32
 8007154:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2278      	movs	r2, #120	@ 0x78
 8007166:	2100      	movs	r1, #0
 8007168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	0018      	movs	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	b010      	add	sp, #64	@ 0x40
 8007172:	bd80      	pop	{r7, pc}
 8007174:	01ffffff 	.word	0x01ffffff
 8007178:	fffffedf 	.word	0xfffffedf

0800717c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	1dfb      	adds	r3, r7, #7
 800718a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	e04b      	b.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	3301      	adds	r3, #1
 8007192:	d048      	beq.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007194:	f7fc fbe6 	bl	8003964 <HAL_GetTick>
 8007198:	0002      	movs	r2, r0
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d302      	bcc.n	80071aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e04b      	b.n	8007246 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2204      	movs	r2, #4
 80071b6:	4013      	ands	r3, r2
 80071b8:	d035      	beq.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	2208      	movs	r2, #8
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d111      	bne.n	80071ec <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2208      	movs	r2, #8
 80071ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	0018      	movs	r0, r3
 80071d4:	f000 f83c 	bl	8007250 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2284      	movs	r2, #132	@ 0x84
 80071dc:	2108      	movs	r1, #8
 80071de:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2278      	movs	r2, #120	@ 0x78
 80071e4:	2100      	movs	r1, #0
 80071e6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e02c      	b.n	8007246 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	2380      	movs	r3, #128	@ 0x80
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	401a      	ands	r2, r3
 80071f8:	2380      	movs	r3, #128	@ 0x80
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d112      	bne.n	8007226 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2280      	movs	r2, #128	@ 0x80
 8007206:	0112      	lsls	r2, r2, #4
 8007208:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	0018      	movs	r0, r3
 800720e:	f000 f81f 	bl	8007250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2284      	movs	r2, #132	@ 0x84
 8007216:	2120      	movs	r1, #32
 8007218:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2278      	movs	r2, #120	@ 0x78
 800721e:	2100      	movs	r1, #0
 8007220:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e00f      	b.n	8007246 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	4013      	ands	r3, r2
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	425a      	negs	r2, r3
 8007236:	4153      	adcs	r3, r2
 8007238:	b2db      	uxtb	r3, r3
 800723a:	001a      	movs	r2, r3
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d0a4      	beq.n	800718e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	0018      	movs	r0, r3
 8007248:	46bd      	mov	sp, r7
 800724a:	b004      	add	sp, #16
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08e      	sub	sp, #56	@ 0x38
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007258:	f3ef 8310 	mrs	r3, PRIMASK
 800725c:	617b      	str	r3, [r7, #20]
  return(result);
 800725e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
 8007262:	2301      	movs	r3, #1
 8007264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f383 8810 	msr	PRIMASK, r3
}
 800726c:	46c0      	nop			@ (mov r8, r8)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4926      	ldr	r1, [pc, #152]	@ (8007314 <UART_EndRxTransfer+0xc4>)
 800727a:	400a      	ands	r2, r1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728a:	f3ef 8310 	mrs	r3, PRIMASK
 800728e:	623b      	str	r3, [r7, #32]
  return(result);
 8007290:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	633b      	str	r3, [r7, #48]	@ 0x30
 8007294:	2301      	movs	r3, #1
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	46c0      	nop			@ (mov r8, r8)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2101      	movs	r1, #1
 80072ac:	438a      	bics	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d118      	bne.n	80072f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c4:	f3ef 8310 	mrs	r3, PRIMASK
 80072c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ce:	2301      	movs	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f383 8810 	msr	PRIMASK, r3
}
 80072d8:	46c0      	nop			@ (mov r8, r8)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2110      	movs	r1, #16
 80072e6:	438a      	bics	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f383 8810 	msr	PRIMASK, r3
}
 80072f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2280      	movs	r2, #128	@ 0x80
 80072fa:	2120      	movs	r1, #32
 80072fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b00e      	add	sp, #56	@ 0x38
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	fffffedf 	.word	0xfffffedf

08007318 <__cvt>:
 8007318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731a:	001f      	movs	r7, r3
 800731c:	2300      	movs	r3, #0
 800731e:	0016      	movs	r6, r2
 8007320:	b08b      	sub	sp, #44	@ 0x2c
 8007322:	429f      	cmp	r7, r3
 8007324:	da04      	bge.n	8007330 <__cvt+0x18>
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	0609      	lsls	r1, r1, #24
 800732a:	187b      	adds	r3, r7, r1
 800732c:	001f      	movs	r7, r3
 800732e:	232d      	movs	r3, #45	@ 0x2d
 8007330:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007332:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007334:	7013      	strb	r3, [r2, #0]
 8007336:	2320      	movs	r3, #32
 8007338:	2203      	movs	r2, #3
 800733a:	439d      	bics	r5, r3
 800733c:	2d46      	cmp	r5, #70	@ 0x46
 800733e:	d007      	beq.n	8007350 <__cvt+0x38>
 8007340:	002b      	movs	r3, r5
 8007342:	3b45      	subs	r3, #69	@ 0x45
 8007344:	4259      	negs	r1, r3
 8007346:	414b      	adcs	r3, r1
 8007348:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800734a:	3a01      	subs	r2, #1
 800734c:	18cb      	adds	r3, r1, r3
 800734e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007350:	ab09      	add	r3, sp, #36	@ 0x24
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	ab08      	add	r3, sp, #32
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800735a:	9200      	str	r2, [sp, #0]
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007360:	0032      	movs	r2, r6
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	003b      	movs	r3, r7
 8007366:	f001 f89b 	bl	80084a0 <_dtoa_r>
 800736a:	0004      	movs	r4, r0
 800736c:	2d47      	cmp	r5, #71	@ 0x47
 800736e:	d11b      	bne.n	80073a8 <__cvt+0x90>
 8007370:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007372:	07db      	lsls	r3, r3, #31
 8007374:	d511      	bpl.n	800739a <__cvt+0x82>
 8007376:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007378:	18c3      	adds	r3, r0, r3
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	0030      	movs	r0, r6
 8007382:	0039      	movs	r1, r7
 8007384:	f7f9 f862 	bl	800044c <__aeabi_dcmpeq>
 8007388:	2800      	cmp	r0, #0
 800738a:	d001      	beq.n	8007390 <__cvt+0x78>
 800738c:	9b07      	ldr	r3, [sp, #28]
 800738e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007390:	2230      	movs	r2, #48	@ 0x30
 8007392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007394:	9907      	ldr	r1, [sp, #28]
 8007396:	428b      	cmp	r3, r1
 8007398:	d320      	bcc.n	80073dc <__cvt+0xc4>
 800739a:	0020      	movs	r0, r4
 800739c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80073a0:	1b1b      	subs	r3, r3, r4
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	b00b      	add	sp, #44	@ 0x2c
 80073a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073aa:	18c3      	adds	r3, r0, r3
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	2d46      	cmp	r5, #70	@ 0x46
 80073b0:	d1e4      	bne.n	800737c <__cvt+0x64>
 80073b2:	7803      	ldrb	r3, [r0, #0]
 80073b4:	2b30      	cmp	r3, #48	@ 0x30
 80073b6:	d10c      	bne.n	80073d2 <__cvt+0xba>
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	0030      	movs	r0, r6
 80073be:	0039      	movs	r1, r7
 80073c0:	f7f9 f844 	bl	800044c <__aeabi_dcmpeq>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d104      	bne.n	80073d2 <__cvt+0xba>
 80073c8:	2301      	movs	r3, #1
 80073ca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073d4:	9a07      	ldr	r2, [sp, #28]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	18d3      	adds	r3, r2, r3
 80073da:	e7ce      	b.n	800737a <__cvt+0x62>
 80073dc:	1c59      	adds	r1, r3, #1
 80073de:	9109      	str	r1, [sp, #36]	@ 0x24
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e7d6      	b.n	8007392 <__cvt+0x7a>

080073e4 <__exponent>:
 80073e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073e6:	232b      	movs	r3, #43	@ 0x2b
 80073e8:	0005      	movs	r5, r0
 80073ea:	000c      	movs	r4, r1
 80073ec:	b085      	sub	sp, #20
 80073ee:	7002      	strb	r2, [r0, #0]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	da01      	bge.n	80073f8 <__exponent+0x14>
 80073f4:	424c      	negs	r4, r1
 80073f6:	3302      	adds	r3, #2
 80073f8:	706b      	strb	r3, [r5, #1]
 80073fa:	2c09      	cmp	r4, #9
 80073fc:	dd2c      	ble.n	8007458 <__exponent+0x74>
 80073fe:	ab02      	add	r3, sp, #8
 8007400:	1dde      	adds	r6, r3, #7
 8007402:	0020      	movs	r0, r4
 8007404:	210a      	movs	r1, #10
 8007406:	f7f9 f80b 	bl	8000420 <__aeabi_idivmod>
 800740a:	0037      	movs	r7, r6
 800740c:	3130      	adds	r1, #48	@ 0x30
 800740e:	3e01      	subs	r6, #1
 8007410:	0020      	movs	r0, r4
 8007412:	7031      	strb	r1, [r6, #0]
 8007414:	210a      	movs	r1, #10
 8007416:	9401      	str	r4, [sp, #4]
 8007418:	f7f8 ff1c 	bl	8000254 <__divsi3>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	0004      	movs	r4, r0
 8007420:	2b63      	cmp	r3, #99	@ 0x63
 8007422:	dcee      	bgt.n	8007402 <__exponent+0x1e>
 8007424:	1eba      	subs	r2, r7, #2
 8007426:	1ca8      	adds	r0, r5, #2
 8007428:	0001      	movs	r1, r0
 800742a:	0013      	movs	r3, r2
 800742c:	3430      	adds	r4, #48	@ 0x30
 800742e:	7014      	strb	r4, [r2, #0]
 8007430:	ac02      	add	r4, sp, #8
 8007432:	3407      	adds	r4, #7
 8007434:	429c      	cmp	r4, r3
 8007436:	d80a      	bhi.n	800744e <__exponent+0x6a>
 8007438:	2300      	movs	r3, #0
 800743a:	42a2      	cmp	r2, r4
 800743c:	d803      	bhi.n	8007446 <__exponent+0x62>
 800743e:	3309      	adds	r3, #9
 8007440:	aa02      	add	r2, sp, #8
 8007442:	189b      	adds	r3, r3, r2
 8007444:	1bdb      	subs	r3, r3, r7
 8007446:	18c0      	adds	r0, r0, r3
 8007448:	1b40      	subs	r0, r0, r5
 800744a:	b005      	add	sp, #20
 800744c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744e:	781c      	ldrb	r4, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	700c      	strb	r4, [r1, #0]
 8007454:	3101      	adds	r1, #1
 8007456:	e7eb      	b.n	8007430 <__exponent+0x4c>
 8007458:	2330      	movs	r3, #48	@ 0x30
 800745a:	18e4      	adds	r4, r4, r3
 800745c:	70ab      	strb	r3, [r5, #2]
 800745e:	1d28      	adds	r0, r5, #4
 8007460:	70ec      	strb	r4, [r5, #3]
 8007462:	e7f1      	b.n	8007448 <__exponent+0x64>

08007464 <_printf_float>:
 8007464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007466:	b097      	sub	sp, #92	@ 0x5c
 8007468:	000d      	movs	r5, r1
 800746a:	920a      	str	r2, [sp, #40]	@ 0x28
 800746c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800746e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007470:	9009      	str	r0, [sp, #36]	@ 0x24
 8007472:	f000 fef9 	bl	8008268 <_localeconv_r>
 8007476:	6803      	ldr	r3, [r0, #0]
 8007478:	0018      	movs	r0, r3
 800747a:	930d      	str	r3, [sp, #52]	@ 0x34
 800747c:	f7f8 fe44 	bl	8000108 <strlen>
 8007480:	2300      	movs	r3, #0
 8007482:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007484:	9314      	str	r3, [sp, #80]	@ 0x50
 8007486:	7e2b      	ldrb	r3, [r5, #24]
 8007488:	2207      	movs	r2, #7
 800748a:	930c      	str	r3, [sp, #48]	@ 0x30
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007490:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	05c9      	lsls	r1, r1, #23
 8007496:	d545      	bpl.n	8007524 <_printf_float+0xc0>
 8007498:	189b      	adds	r3, r3, r2
 800749a:	4393      	bics	r3, r2
 800749c:	001a      	movs	r2, r3
 800749e:	3208      	adds	r2, #8
 80074a0:	6022      	str	r2, [r4, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	681e      	ldr	r6, [r3, #0]
 80074a6:	685f      	ldr	r7, [r3, #4]
 80074a8:	007b      	lsls	r3, r7, #1
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80074ae:	9610      	str	r6, [sp, #64]	@ 0x40
 80074b0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80074b2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80074b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80074b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80074b8:	4ba7      	ldr	r3, [pc, #668]	@ (8007758 <_printf_float+0x2f4>)
 80074ba:	4252      	negs	r2, r2
 80074bc:	f7fb fbcc 	bl	8002c58 <__aeabi_dcmpun>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d131      	bne.n	8007528 <_printf_float+0xc4>
 80074c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80074c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80074c8:	2201      	movs	r2, #1
 80074ca:	4ba3      	ldr	r3, [pc, #652]	@ (8007758 <_printf_float+0x2f4>)
 80074cc:	4252      	negs	r2, r2
 80074ce:	f7f8 ffcd 	bl	800046c <__aeabi_dcmple>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d128      	bne.n	8007528 <_printf_float+0xc4>
 80074d6:	2200      	movs	r2, #0
 80074d8:	2300      	movs	r3, #0
 80074da:	0030      	movs	r0, r6
 80074dc:	0039      	movs	r1, r7
 80074de:	f7f8 ffbb 	bl	8000458 <__aeabi_dcmplt>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d003      	beq.n	80074ee <_printf_float+0x8a>
 80074e6:	002b      	movs	r3, r5
 80074e8:	222d      	movs	r2, #45	@ 0x2d
 80074ea:	3343      	adds	r3, #67	@ 0x43
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074f0:	4f9a      	ldr	r7, [pc, #616]	@ (800775c <_printf_float+0x2f8>)
 80074f2:	2b47      	cmp	r3, #71	@ 0x47
 80074f4:	d900      	bls.n	80074f8 <_printf_float+0x94>
 80074f6:	4f9a      	ldr	r7, [pc, #616]	@ (8007760 <_printf_float+0x2fc>)
 80074f8:	2303      	movs	r3, #3
 80074fa:	2400      	movs	r4, #0
 80074fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074fe:	612b      	str	r3, [r5, #16]
 8007500:	3301      	adds	r3, #1
 8007502:	439a      	bics	r2, r3
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007508:	0029      	movs	r1, r5
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800750e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007510:	aa15      	add	r2, sp, #84	@ 0x54
 8007512:	f000 f9e5 	bl	80078e0 <_printf_common>
 8007516:	3001      	adds	r0, #1
 8007518:	d000      	beq.n	800751c <_printf_float+0xb8>
 800751a:	e09f      	b.n	800765c <_printf_float+0x1f8>
 800751c:	2001      	movs	r0, #1
 800751e:	4240      	negs	r0, r0
 8007520:	b017      	add	sp, #92	@ 0x5c
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007524:	3307      	adds	r3, #7
 8007526:	e7b8      	b.n	800749a <_printf_float+0x36>
 8007528:	0032      	movs	r2, r6
 800752a:	003b      	movs	r3, r7
 800752c:	0030      	movs	r0, r6
 800752e:	0039      	movs	r1, r7
 8007530:	f7fb fb92 	bl	8002c58 <__aeabi_dcmpun>
 8007534:	2800      	cmp	r0, #0
 8007536:	d00b      	beq.n	8007550 <_printf_float+0xec>
 8007538:	2f00      	cmp	r7, #0
 800753a:	da03      	bge.n	8007544 <_printf_float+0xe0>
 800753c:	002b      	movs	r3, r5
 800753e:	222d      	movs	r2, #45	@ 0x2d
 8007540:	3343      	adds	r3, #67	@ 0x43
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007546:	4f87      	ldr	r7, [pc, #540]	@ (8007764 <_printf_float+0x300>)
 8007548:	2b47      	cmp	r3, #71	@ 0x47
 800754a:	d9d5      	bls.n	80074f8 <_printf_float+0x94>
 800754c:	4f86      	ldr	r7, [pc, #536]	@ (8007768 <_printf_float+0x304>)
 800754e:	e7d3      	b.n	80074f8 <_printf_float+0x94>
 8007550:	2220      	movs	r2, #32
 8007552:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007554:	686b      	ldr	r3, [r5, #4]
 8007556:	4394      	bics	r4, r2
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	d146      	bne.n	80075ea <_printf_float+0x186>
 800755c:	3307      	adds	r3, #7
 800755e:	606b      	str	r3, [r5, #4]
 8007560:	2380      	movs	r3, #128	@ 0x80
 8007562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4313      	orrs	r3, r2
 8007568:	2200      	movs	r2, #0
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	9206      	str	r2, [sp, #24]
 800756e:	aa14      	add	r2, sp, #80	@ 0x50
 8007570:	9205      	str	r2, [sp, #20]
 8007572:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007574:	a90a      	add	r1, sp, #40	@ 0x28
 8007576:	9204      	str	r2, [sp, #16]
 8007578:	aa13      	add	r2, sp, #76	@ 0x4c
 800757a:	9203      	str	r2, [sp, #12]
 800757c:	2223      	movs	r2, #35	@ 0x23
 800757e:	1852      	adds	r2, r2, r1
 8007580:	9202      	str	r2, [sp, #8]
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	686b      	ldr	r3, [r5, #4]
 8007586:	0032      	movs	r2, r6
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800758c:	003b      	movs	r3, r7
 800758e:	f7ff fec3 	bl	8007318 <__cvt>
 8007592:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007594:	0007      	movs	r7, r0
 8007596:	2c47      	cmp	r4, #71	@ 0x47
 8007598:	d12d      	bne.n	80075f6 <_printf_float+0x192>
 800759a:	1cd3      	adds	r3, r2, #3
 800759c:	db02      	blt.n	80075a4 <_printf_float+0x140>
 800759e:	686b      	ldr	r3, [r5, #4]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	dd48      	ble.n	8007636 <_printf_float+0x1d2>
 80075a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80075a8:	3b02      	subs	r3, #2
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80075ae:	0028      	movs	r0, r5
 80075b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075b2:	3901      	subs	r1, #1
 80075b4:	3050      	adds	r0, #80	@ 0x50
 80075b6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075b8:	f7ff ff14 	bl	80073e4 <__exponent>
 80075bc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075be:	0004      	movs	r4, r0
 80075c0:	1813      	adds	r3, r2, r0
 80075c2:	612b      	str	r3, [r5, #16]
 80075c4:	2a01      	cmp	r2, #1
 80075c6:	dc02      	bgt.n	80075ce <_printf_float+0x16a>
 80075c8:	682a      	ldr	r2, [r5, #0]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d501      	bpl.n	80075d2 <_printf_float+0x16e>
 80075ce:	3301      	adds	r3, #1
 80075d0:	612b      	str	r3, [r5, #16]
 80075d2:	2323      	movs	r3, #35	@ 0x23
 80075d4:	aa0a      	add	r2, sp, #40	@ 0x28
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d100      	bne.n	80075e0 <_printf_float+0x17c>
 80075de:	e792      	b.n	8007506 <_printf_float+0xa2>
 80075e0:	002b      	movs	r3, r5
 80075e2:	222d      	movs	r2, #45	@ 0x2d
 80075e4:	3343      	adds	r3, #67	@ 0x43
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	e78d      	b.n	8007506 <_printf_float+0xa2>
 80075ea:	2c47      	cmp	r4, #71	@ 0x47
 80075ec:	d1b8      	bne.n	8007560 <_printf_float+0xfc>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1b6      	bne.n	8007560 <_printf_float+0xfc>
 80075f2:	3301      	adds	r3, #1
 80075f4:	e7b3      	b.n	800755e <_printf_float+0xfa>
 80075f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075f8:	0011      	movs	r1, r2
 80075fa:	2b65      	cmp	r3, #101	@ 0x65
 80075fc:	d9d7      	bls.n	80075ae <_printf_float+0x14a>
 80075fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007600:	2b66      	cmp	r3, #102	@ 0x66
 8007602:	d11a      	bne.n	800763a <_printf_float+0x1d6>
 8007604:	686b      	ldr	r3, [r5, #4]
 8007606:	2a00      	cmp	r2, #0
 8007608:	dd09      	ble.n	800761e <_printf_float+0x1ba>
 800760a:	612a      	str	r2, [r5, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <_printf_float+0x1b2>
 8007610:	6829      	ldr	r1, [r5, #0]
 8007612:	07c9      	lsls	r1, r1, #31
 8007614:	d50b      	bpl.n	800762e <_printf_float+0x1ca>
 8007616:	3301      	adds	r3, #1
 8007618:	189b      	adds	r3, r3, r2
 800761a:	612b      	str	r3, [r5, #16]
 800761c:	e007      	b.n	800762e <_printf_float+0x1ca>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <_printf_float+0x1c6>
 8007622:	2201      	movs	r2, #1
 8007624:	6829      	ldr	r1, [r5, #0]
 8007626:	4211      	tst	r1, r2
 8007628:	d000      	beq.n	800762c <_printf_float+0x1c8>
 800762a:	1c9a      	adds	r2, r3, #2
 800762c:	612a      	str	r2, [r5, #16]
 800762e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007630:	2400      	movs	r4, #0
 8007632:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007634:	e7cd      	b.n	80075d2 <_printf_float+0x16e>
 8007636:	2367      	movs	r3, #103	@ 0x67
 8007638:	930c      	str	r3, [sp, #48]	@ 0x30
 800763a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800763c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800763e:	4299      	cmp	r1, r3
 8007640:	db06      	blt.n	8007650 <_printf_float+0x1ec>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	6129      	str	r1, [r5, #16]
 8007646:	07db      	lsls	r3, r3, #31
 8007648:	d5f1      	bpl.n	800762e <_printf_float+0x1ca>
 800764a:	3101      	adds	r1, #1
 800764c:	6129      	str	r1, [r5, #16]
 800764e:	e7ee      	b.n	800762e <_printf_float+0x1ca>
 8007650:	2201      	movs	r2, #1
 8007652:	2900      	cmp	r1, #0
 8007654:	dce0      	bgt.n	8007618 <_printf_float+0x1b4>
 8007656:	1892      	adds	r2, r2, r2
 8007658:	1a52      	subs	r2, r2, r1
 800765a:	e7dd      	b.n	8007618 <_printf_float+0x1b4>
 800765c:	682a      	ldr	r2, [r5, #0]
 800765e:	0553      	lsls	r3, r2, #21
 8007660:	d408      	bmi.n	8007674 <_printf_float+0x210>
 8007662:	692b      	ldr	r3, [r5, #16]
 8007664:	003a      	movs	r2, r7
 8007666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007668:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800766a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800766c:	47a0      	blx	r4
 800766e:	3001      	adds	r0, #1
 8007670:	d129      	bne.n	80076c6 <_printf_float+0x262>
 8007672:	e753      	b.n	800751c <_printf_float+0xb8>
 8007674:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007676:	2b65      	cmp	r3, #101	@ 0x65
 8007678:	d800      	bhi.n	800767c <_printf_float+0x218>
 800767a:	e0da      	b.n	8007832 <_printf_float+0x3ce>
 800767c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800767e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	f7f8 fee2 	bl	800044c <__aeabi_dcmpeq>
 8007688:	2800      	cmp	r0, #0
 800768a:	d033      	beq.n	80076f4 <_printf_float+0x290>
 800768c:	2301      	movs	r3, #1
 800768e:	4a37      	ldr	r2, [pc, #220]	@ (800776c <_printf_float+0x308>)
 8007690:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007694:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007696:	47a0      	blx	r4
 8007698:	3001      	adds	r0, #1
 800769a:	d100      	bne.n	800769e <_printf_float+0x23a>
 800769c:	e73e      	b.n	800751c <_printf_float+0xb8>
 800769e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80076a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076a2:	42b3      	cmp	r3, r6
 80076a4:	db02      	blt.n	80076ac <_printf_float+0x248>
 80076a6:	682b      	ldr	r3, [r5, #0]
 80076a8:	07db      	lsls	r3, r3, #31
 80076aa:	d50c      	bpl.n	80076c6 <_printf_float+0x262>
 80076ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b6:	47a0      	blx	r4
 80076b8:	2400      	movs	r4, #0
 80076ba:	3001      	adds	r0, #1
 80076bc:	d100      	bne.n	80076c0 <_printf_float+0x25c>
 80076be:	e72d      	b.n	800751c <_printf_float+0xb8>
 80076c0:	1e73      	subs	r3, r6, #1
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	dc0a      	bgt.n	80076dc <_printf_float+0x278>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	079b      	lsls	r3, r3, #30
 80076ca:	d500      	bpl.n	80076ce <_printf_float+0x26a>
 80076cc:	e105      	b.n	80078da <_printf_float+0x476>
 80076ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076d0:	68e8      	ldr	r0, [r5, #12]
 80076d2:	4298      	cmp	r0, r3
 80076d4:	db00      	blt.n	80076d8 <_printf_float+0x274>
 80076d6:	e723      	b.n	8007520 <_printf_float+0xbc>
 80076d8:	0018      	movs	r0, r3
 80076da:	e721      	b.n	8007520 <_printf_float+0xbc>
 80076dc:	002a      	movs	r2, r5
 80076de:	2301      	movs	r3, #1
 80076e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80076e6:	321a      	adds	r2, #26
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	d100      	bne.n	80076f0 <_printf_float+0x28c>
 80076ee:	e715      	b.n	800751c <_printf_float+0xb8>
 80076f0:	3401      	adds	r4, #1
 80076f2:	e7e5      	b.n	80076c0 <_printf_float+0x25c>
 80076f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc3a      	bgt.n	8007770 <_printf_float+0x30c>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4a1b      	ldr	r2, [pc, #108]	@ (800776c <_printf_float+0x308>)
 80076fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007700:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007702:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007704:	47a0      	blx	r4
 8007706:	3001      	adds	r0, #1
 8007708:	d100      	bne.n	800770c <_printf_float+0x2a8>
 800770a:	e707      	b.n	800751c <_printf_float+0xb8>
 800770c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800770e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007710:	4333      	orrs	r3, r6
 8007712:	d102      	bne.n	800771a <_printf_float+0x2b6>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	07db      	lsls	r3, r3, #31
 8007718:	d5d5      	bpl.n	80076c6 <_printf_float+0x262>
 800771a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800771c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800771e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007720:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007722:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007724:	47a0      	blx	r4
 8007726:	2300      	movs	r3, #0
 8007728:	3001      	adds	r0, #1
 800772a:	d100      	bne.n	800772e <_printf_float+0x2ca>
 800772c:	e6f6      	b.n	800751c <_printf_float+0xb8>
 800772e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007730:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007732:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007734:	425b      	negs	r3, r3
 8007736:	4293      	cmp	r3, r2
 8007738:	dc01      	bgt.n	800773e <_printf_float+0x2da>
 800773a:	0033      	movs	r3, r6
 800773c:	e792      	b.n	8007664 <_printf_float+0x200>
 800773e:	002a      	movs	r2, r5
 8007740:	2301      	movs	r3, #1
 8007742:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007744:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007746:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007748:	321a      	adds	r2, #26
 800774a:	47a0      	blx	r4
 800774c:	3001      	adds	r0, #1
 800774e:	d100      	bne.n	8007752 <_printf_float+0x2ee>
 8007750:	e6e4      	b.n	800751c <_printf_float+0xb8>
 8007752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007754:	3301      	adds	r3, #1
 8007756:	e7ea      	b.n	800772e <_printf_float+0x2ca>
 8007758:	7fefffff 	.word	0x7fefffff
 800775c:	0800bd1c 	.word	0x0800bd1c
 8007760:	0800bd20 	.word	0x0800bd20
 8007764:	0800bd24 	.word	0x0800bd24
 8007768:	0800bd28 	.word	0x0800bd28
 800776c:	0800bd2c 	.word	0x0800bd2c
 8007770:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007772:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007774:	930c      	str	r3, [sp, #48]	@ 0x30
 8007776:	429e      	cmp	r6, r3
 8007778:	dd00      	ble.n	800777c <_printf_float+0x318>
 800777a:	001e      	movs	r6, r3
 800777c:	2e00      	cmp	r6, #0
 800777e:	dc31      	bgt.n	80077e4 <_printf_float+0x380>
 8007780:	43f3      	mvns	r3, r6
 8007782:	2400      	movs	r4, #0
 8007784:	17db      	asrs	r3, r3, #31
 8007786:	4033      	ands	r3, r6
 8007788:	930e      	str	r3, [sp, #56]	@ 0x38
 800778a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800778c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800778e:	1af3      	subs	r3, r6, r3
 8007790:	42a3      	cmp	r3, r4
 8007792:	dc30      	bgt.n	80077f6 <_printf_float+0x392>
 8007794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007796:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007798:	429a      	cmp	r2, r3
 800779a:	dc38      	bgt.n	800780e <_printf_float+0x3aa>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	07db      	lsls	r3, r3, #31
 80077a0:	d435      	bmi.n	800780e <_printf_float+0x3aa>
 80077a2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80077a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077a8:	1b9b      	subs	r3, r3, r6
 80077aa:	1b14      	subs	r4, r2, r4
 80077ac:	429c      	cmp	r4, r3
 80077ae:	dd00      	ble.n	80077b2 <_printf_float+0x34e>
 80077b0:	001c      	movs	r4, r3
 80077b2:	2c00      	cmp	r4, #0
 80077b4:	dc34      	bgt.n	8007820 <_printf_float+0x3bc>
 80077b6:	43e3      	mvns	r3, r4
 80077b8:	2600      	movs	r6, #0
 80077ba:	17db      	asrs	r3, r3, #31
 80077bc:	401c      	ands	r4, r3
 80077be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	1b1b      	subs	r3, r3, r4
 80077c6:	42b3      	cmp	r3, r6
 80077c8:	dc00      	bgt.n	80077cc <_printf_float+0x368>
 80077ca:	e77c      	b.n	80076c6 <_printf_float+0x262>
 80077cc:	002a      	movs	r2, r5
 80077ce:	2301      	movs	r3, #1
 80077d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80077d6:	321a      	adds	r2, #26
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	d100      	bne.n	80077e0 <_printf_float+0x37c>
 80077de:	e69d      	b.n	800751c <_printf_float+0xb8>
 80077e0:	3601      	adds	r6, #1
 80077e2:	e7ec      	b.n	80077be <_printf_float+0x35a>
 80077e4:	0033      	movs	r3, r6
 80077e6:	003a      	movs	r2, r7
 80077e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80077ee:	47a0      	blx	r4
 80077f0:	3001      	adds	r0, #1
 80077f2:	d1c5      	bne.n	8007780 <_printf_float+0x31c>
 80077f4:	e692      	b.n	800751c <_printf_float+0xb8>
 80077f6:	002a      	movs	r2, r5
 80077f8:	2301      	movs	r3, #1
 80077fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077fe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007800:	321a      	adds	r2, #26
 8007802:	47b0      	blx	r6
 8007804:	3001      	adds	r0, #1
 8007806:	d100      	bne.n	800780a <_printf_float+0x3a6>
 8007808:	e688      	b.n	800751c <_printf_float+0xb8>
 800780a:	3401      	adds	r4, #1
 800780c:	e7bd      	b.n	800778a <_printf_float+0x326>
 800780e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007812:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007814:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007816:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007818:	47a0      	blx	r4
 800781a:	3001      	adds	r0, #1
 800781c:	d1c1      	bne.n	80077a2 <_printf_float+0x33e>
 800781e:	e67d      	b.n	800751c <_printf_float+0xb8>
 8007820:	19ba      	adds	r2, r7, r6
 8007822:	0023      	movs	r3, r4
 8007824:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007828:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800782a:	47b0      	blx	r6
 800782c:	3001      	adds	r0, #1
 800782e:	d1c2      	bne.n	80077b6 <_printf_float+0x352>
 8007830:	e674      	b.n	800751c <_printf_float+0xb8>
 8007832:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007834:	930c      	str	r3, [sp, #48]	@ 0x30
 8007836:	2b01      	cmp	r3, #1
 8007838:	dc02      	bgt.n	8007840 <_printf_float+0x3dc>
 800783a:	2301      	movs	r3, #1
 800783c:	421a      	tst	r2, r3
 800783e:	d039      	beq.n	80078b4 <_printf_float+0x450>
 8007840:	2301      	movs	r3, #1
 8007842:	003a      	movs	r2, r7
 8007844:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007848:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800784a:	47b0      	blx	r6
 800784c:	3001      	adds	r0, #1
 800784e:	d100      	bne.n	8007852 <_printf_float+0x3ee>
 8007850:	e664      	b.n	800751c <_printf_float+0xb8>
 8007852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007858:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800785a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800785c:	47b0      	blx	r6
 800785e:	3001      	adds	r0, #1
 8007860:	d100      	bne.n	8007864 <_printf_float+0x400>
 8007862:	e65b      	b.n	800751c <_printf_float+0xb8>
 8007864:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007866:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800786a:	2200      	movs	r2, #0
 800786c:	3b01      	subs	r3, #1
 800786e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007870:	2300      	movs	r3, #0
 8007872:	f7f8 fdeb 	bl	800044c <__aeabi_dcmpeq>
 8007876:	2800      	cmp	r0, #0
 8007878:	d11a      	bne.n	80078b0 <_printf_float+0x44c>
 800787a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800787c:	1c7a      	adds	r2, r7, #1
 800787e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007880:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007882:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007884:	47b0      	blx	r6
 8007886:	3001      	adds	r0, #1
 8007888:	d10e      	bne.n	80078a8 <_printf_float+0x444>
 800788a:	e647      	b.n	800751c <_printf_float+0xb8>
 800788c:	002a      	movs	r2, r5
 800788e:	2301      	movs	r3, #1
 8007890:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007894:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007896:	321a      	adds	r2, #26
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	d100      	bne.n	80078a0 <_printf_float+0x43c>
 800789e:	e63d      	b.n	800751c <_printf_float+0xb8>
 80078a0:	3601      	adds	r6, #1
 80078a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078a4:	429e      	cmp	r6, r3
 80078a6:	dbf1      	blt.n	800788c <_printf_float+0x428>
 80078a8:	002a      	movs	r2, r5
 80078aa:	0023      	movs	r3, r4
 80078ac:	3250      	adds	r2, #80	@ 0x50
 80078ae:	e6da      	b.n	8007666 <_printf_float+0x202>
 80078b0:	2600      	movs	r6, #0
 80078b2:	e7f6      	b.n	80078a2 <_printf_float+0x43e>
 80078b4:	003a      	movs	r2, r7
 80078b6:	e7e2      	b.n	800787e <_printf_float+0x41a>
 80078b8:	002a      	movs	r2, r5
 80078ba:	2301      	movs	r3, #1
 80078bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078c0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078c2:	3219      	adds	r2, #25
 80078c4:	47b0      	blx	r6
 80078c6:	3001      	adds	r0, #1
 80078c8:	d100      	bne.n	80078cc <_printf_float+0x468>
 80078ca:	e627      	b.n	800751c <_printf_float+0xb8>
 80078cc:	3401      	adds	r4, #1
 80078ce:	68eb      	ldr	r3, [r5, #12]
 80078d0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	42a3      	cmp	r3, r4
 80078d6:	dcef      	bgt.n	80078b8 <_printf_float+0x454>
 80078d8:	e6f9      	b.n	80076ce <_printf_float+0x26a>
 80078da:	2400      	movs	r4, #0
 80078dc:	e7f7      	b.n	80078ce <_printf_float+0x46a>
 80078de:	46c0      	nop			@ (mov r8, r8)

080078e0 <_printf_common>:
 80078e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e2:	0016      	movs	r6, r2
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	688a      	ldr	r2, [r1, #8]
 80078e8:	690b      	ldr	r3, [r1, #16]
 80078ea:	000c      	movs	r4, r1
 80078ec:	9000      	str	r0, [sp, #0]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	da00      	bge.n	80078f4 <_printf_common+0x14>
 80078f2:	0013      	movs	r3, r2
 80078f4:	0022      	movs	r2, r4
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	3243      	adds	r2, #67	@ 0x43
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	d001      	beq.n	8007904 <_printf_common+0x24>
 8007900:	3301      	adds	r3, #1
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	069b      	lsls	r3, r3, #26
 8007908:	d502      	bpl.n	8007910 <_printf_common+0x30>
 800790a:	6833      	ldr	r3, [r6, #0]
 800790c:	3302      	adds	r3, #2
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	6822      	ldr	r2, [r4, #0]
 8007912:	2306      	movs	r3, #6
 8007914:	0015      	movs	r5, r2
 8007916:	401d      	ands	r5, r3
 8007918:	421a      	tst	r2, r3
 800791a:	d027      	beq.n	800796c <_printf_common+0x8c>
 800791c:	0023      	movs	r3, r4
 800791e:	3343      	adds	r3, #67	@ 0x43
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	1e5a      	subs	r2, r3, #1
 8007924:	4193      	sbcs	r3, r2
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	0692      	lsls	r2, r2, #26
 800792a:	d430      	bmi.n	800798e <_printf_common+0xae>
 800792c:	0022      	movs	r2, r4
 800792e:	9901      	ldr	r1, [sp, #4]
 8007930:	9800      	ldr	r0, [sp, #0]
 8007932:	9d08      	ldr	r5, [sp, #32]
 8007934:	3243      	adds	r2, #67	@ 0x43
 8007936:	47a8      	blx	r5
 8007938:	3001      	adds	r0, #1
 800793a:	d025      	beq.n	8007988 <_printf_common+0xa8>
 800793c:	2206      	movs	r2, #6
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	2500      	movs	r5, #0
 8007942:	4013      	ands	r3, r2
 8007944:	2b04      	cmp	r3, #4
 8007946:	d105      	bne.n	8007954 <_printf_common+0x74>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	68e5      	ldr	r5, [r4, #12]
 800794c:	1aed      	subs	r5, r5, r3
 800794e:	43eb      	mvns	r3, r5
 8007950:	17db      	asrs	r3, r3, #31
 8007952:	401d      	ands	r5, r3
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	6922      	ldr	r2, [r4, #16]
 8007958:	4293      	cmp	r3, r2
 800795a:	dd01      	ble.n	8007960 <_printf_common+0x80>
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	18ed      	adds	r5, r5, r3
 8007960:	2600      	movs	r6, #0
 8007962:	42b5      	cmp	r5, r6
 8007964:	d120      	bne.n	80079a8 <_printf_common+0xc8>
 8007966:	2000      	movs	r0, #0
 8007968:	e010      	b.n	800798c <_printf_common+0xac>
 800796a:	3501      	adds	r5, #1
 800796c:	68e3      	ldr	r3, [r4, #12]
 800796e:	6832      	ldr	r2, [r6, #0]
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	42ab      	cmp	r3, r5
 8007974:	ddd2      	ble.n	800791c <_printf_common+0x3c>
 8007976:	0022      	movs	r2, r4
 8007978:	2301      	movs	r3, #1
 800797a:	9901      	ldr	r1, [sp, #4]
 800797c:	9800      	ldr	r0, [sp, #0]
 800797e:	9f08      	ldr	r7, [sp, #32]
 8007980:	3219      	adds	r2, #25
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	d1f0      	bne.n	800796a <_printf_common+0x8a>
 8007988:	2001      	movs	r0, #1
 800798a:	4240      	negs	r0, r0
 800798c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800798e:	2030      	movs	r0, #48	@ 0x30
 8007990:	18e1      	adds	r1, r4, r3
 8007992:	3143      	adds	r1, #67	@ 0x43
 8007994:	7008      	strb	r0, [r1, #0]
 8007996:	0021      	movs	r1, r4
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	3145      	adds	r1, #69	@ 0x45
 800799c:	7809      	ldrb	r1, [r1, #0]
 800799e:	18a2      	adds	r2, r4, r2
 80079a0:	3243      	adds	r2, #67	@ 0x43
 80079a2:	3302      	adds	r3, #2
 80079a4:	7011      	strb	r1, [r2, #0]
 80079a6:	e7c1      	b.n	800792c <_printf_common+0x4c>
 80079a8:	0022      	movs	r2, r4
 80079aa:	2301      	movs	r3, #1
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	9800      	ldr	r0, [sp, #0]
 80079b0:	9f08      	ldr	r7, [sp, #32]
 80079b2:	321a      	adds	r2, #26
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	d0e6      	beq.n	8007988 <_printf_common+0xa8>
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7d1      	b.n	8007962 <_printf_common+0x82>
	...

080079c0 <_printf_i>:
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	b08b      	sub	sp, #44	@ 0x2c
 80079c4:	9206      	str	r2, [sp, #24]
 80079c6:	000a      	movs	r2, r1
 80079c8:	3243      	adds	r2, #67	@ 0x43
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	9005      	str	r0, [sp, #20]
 80079ce:	9203      	str	r2, [sp, #12]
 80079d0:	7e0a      	ldrb	r2, [r1, #24]
 80079d2:	000c      	movs	r4, r1
 80079d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079d6:	2a78      	cmp	r2, #120	@ 0x78
 80079d8:	d809      	bhi.n	80079ee <_printf_i+0x2e>
 80079da:	2a62      	cmp	r2, #98	@ 0x62
 80079dc:	d80b      	bhi.n	80079f6 <_printf_i+0x36>
 80079de:	2a00      	cmp	r2, #0
 80079e0:	d100      	bne.n	80079e4 <_printf_i+0x24>
 80079e2:	e0bc      	b.n	8007b5e <_printf_i+0x19e>
 80079e4:	497b      	ldr	r1, [pc, #492]	@ (8007bd4 <_printf_i+0x214>)
 80079e6:	9104      	str	r1, [sp, #16]
 80079e8:	2a58      	cmp	r2, #88	@ 0x58
 80079ea:	d100      	bne.n	80079ee <_printf_i+0x2e>
 80079ec:	e090      	b.n	8007b10 <_printf_i+0x150>
 80079ee:	0025      	movs	r5, r4
 80079f0:	3542      	adds	r5, #66	@ 0x42
 80079f2:	702a      	strb	r2, [r5, #0]
 80079f4:	e022      	b.n	8007a3c <_printf_i+0x7c>
 80079f6:	0010      	movs	r0, r2
 80079f8:	3863      	subs	r0, #99	@ 0x63
 80079fa:	2815      	cmp	r0, #21
 80079fc:	d8f7      	bhi.n	80079ee <_printf_i+0x2e>
 80079fe:	f7f8 fb95 	bl	800012c <__gnu_thumb1_case_shi>
 8007a02:	0016      	.short	0x0016
 8007a04:	fff6001f 	.word	0xfff6001f
 8007a08:	fff6fff6 	.word	0xfff6fff6
 8007a0c:	001ffff6 	.word	0x001ffff6
 8007a10:	fff6fff6 	.word	0xfff6fff6
 8007a14:	fff6fff6 	.word	0xfff6fff6
 8007a18:	003600a1 	.word	0x003600a1
 8007a1c:	fff60080 	.word	0xfff60080
 8007a20:	00b2fff6 	.word	0x00b2fff6
 8007a24:	0036fff6 	.word	0x0036fff6
 8007a28:	fff6fff6 	.word	0xfff6fff6
 8007a2c:	0084      	.short	0x0084
 8007a2e:	0025      	movs	r5, r4
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	3542      	adds	r5, #66	@ 0x42
 8007a34:	1d11      	adds	r1, r2, #4
 8007a36:	6019      	str	r1, [r3, #0]
 8007a38:	6813      	ldr	r3, [r2, #0]
 8007a3a:	702b      	strb	r3, [r5, #0]
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0a0      	b.n	8007b82 <_printf_i+0x1c2>
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	6809      	ldr	r1, [r1, #0]
 8007a44:	1d02      	adds	r2, r0, #4
 8007a46:	060d      	lsls	r5, r1, #24
 8007a48:	d50b      	bpl.n	8007a62 <_printf_i+0xa2>
 8007a4a:	6806      	ldr	r6, [r0, #0]
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	da03      	bge.n	8007a5a <_printf_i+0x9a>
 8007a52:	232d      	movs	r3, #45	@ 0x2d
 8007a54:	9a03      	ldr	r2, [sp, #12]
 8007a56:	4276      	negs	r6, r6
 8007a58:	7013      	strb	r3, [r2, #0]
 8007a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8007bd4 <_printf_i+0x214>)
 8007a5c:	270a      	movs	r7, #10
 8007a5e:	9304      	str	r3, [sp, #16]
 8007a60:	e018      	b.n	8007a94 <_printf_i+0xd4>
 8007a62:	6806      	ldr	r6, [r0, #0]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	0649      	lsls	r1, r1, #25
 8007a68:	d5f1      	bpl.n	8007a4e <_printf_i+0x8e>
 8007a6a:	b236      	sxth	r6, r6
 8007a6c:	e7ef      	b.n	8007a4e <_printf_i+0x8e>
 8007a6e:	6808      	ldr	r0, [r1, #0]
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	c940      	ldmia	r1!, {r6}
 8007a74:	0605      	lsls	r5, r0, #24
 8007a76:	d402      	bmi.n	8007a7e <_printf_i+0xbe>
 8007a78:	0640      	lsls	r0, r0, #25
 8007a7a:	d500      	bpl.n	8007a7e <_printf_i+0xbe>
 8007a7c:	b2b6      	uxth	r6, r6
 8007a7e:	6019      	str	r1, [r3, #0]
 8007a80:	4b54      	ldr	r3, [pc, #336]	@ (8007bd4 <_printf_i+0x214>)
 8007a82:	270a      	movs	r7, #10
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	2a6f      	cmp	r2, #111	@ 0x6f
 8007a88:	d100      	bne.n	8007a8c <_printf_i+0xcc>
 8007a8a:	3f02      	subs	r7, #2
 8007a8c:	0023      	movs	r3, r4
 8007a8e:	2200      	movs	r2, #0
 8007a90:	3343      	adds	r3, #67	@ 0x43
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	60a3      	str	r3, [r4, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db03      	blt.n	8007aa4 <_printf_i+0xe4>
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	438a      	bics	r2, r1
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	2e00      	cmp	r6, #0
 8007aa6:	d102      	bne.n	8007aae <_printf_i+0xee>
 8007aa8:	9d03      	ldr	r5, [sp, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <_printf_i+0x108>
 8007aae:	9d03      	ldr	r5, [sp, #12]
 8007ab0:	0030      	movs	r0, r6
 8007ab2:	0039      	movs	r1, r7
 8007ab4:	f7f8 fbca 	bl	800024c <__aeabi_uidivmod>
 8007ab8:	9b04      	ldr	r3, [sp, #16]
 8007aba:	3d01      	subs	r5, #1
 8007abc:	5c5b      	ldrb	r3, [r3, r1]
 8007abe:	702b      	strb	r3, [r5, #0]
 8007ac0:	0033      	movs	r3, r6
 8007ac2:	0006      	movs	r6, r0
 8007ac4:	429f      	cmp	r7, r3
 8007ac6:	d9f3      	bls.n	8007ab0 <_printf_i+0xf0>
 8007ac8:	2f08      	cmp	r7, #8
 8007aca:	d109      	bne.n	8007ae0 <_printf_i+0x120>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	07db      	lsls	r3, r3, #31
 8007ad0:	d506      	bpl.n	8007ae0 <_printf_i+0x120>
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	dc02      	bgt.n	8007ae0 <_printf_i+0x120>
 8007ada:	2330      	movs	r3, #48	@ 0x30
 8007adc:	3d01      	subs	r5, #1
 8007ade:	702b      	strb	r3, [r5, #0]
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1b5b      	subs	r3, r3, r5
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	0021      	movs	r1, r4
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	9805      	ldr	r0, [sp, #20]
 8007aee:	9b06      	ldr	r3, [sp, #24]
 8007af0:	aa09      	add	r2, sp, #36	@ 0x24
 8007af2:	f7ff fef5 	bl	80078e0 <_printf_common>
 8007af6:	3001      	adds	r0, #1
 8007af8:	d148      	bne.n	8007b8c <_printf_i+0x1cc>
 8007afa:	2001      	movs	r0, #1
 8007afc:	4240      	negs	r0, r0
 8007afe:	b00b      	add	sp, #44	@ 0x2c
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b02:	2220      	movs	r2, #32
 8007b04:	6809      	ldr	r1, [r1, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	2278      	movs	r2, #120	@ 0x78
 8007b0c:	4932      	ldr	r1, [pc, #200]	@ (8007bd8 <_printf_i+0x218>)
 8007b0e:	9104      	str	r1, [sp, #16]
 8007b10:	0021      	movs	r1, r4
 8007b12:	3145      	adds	r1, #69	@ 0x45
 8007b14:	700a      	strb	r2, [r1, #0]
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	c940      	ldmia	r1!, {r6}
 8007b1c:	0610      	lsls	r0, r2, #24
 8007b1e:	d402      	bmi.n	8007b26 <_printf_i+0x166>
 8007b20:	0650      	lsls	r0, r2, #25
 8007b22:	d500      	bpl.n	8007b26 <_printf_i+0x166>
 8007b24:	b2b6      	uxth	r6, r6
 8007b26:	6019      	str	r1, [r3, #0]
 8007b28:	07d3      	lsls	r3, r2, #31
 8007b2a:	d502      	bpl.n	8007b32 <_printf_i+0x172>
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d001      	beq.n	8007b3a <_printf_i+0x17a>
 8007b36:	2710      	movs	r7, #16
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0xcc>
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	4393      	bics	r3, r2
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	e7f8      	b.n	8007b36 <_printf_i+0x176>
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	680d      	ldr	r5, [r1, #0]
 8007b48:	1d10      	adds	r0, r2, #4
 8007b4a:	6949      	ldr	r1, [r1, #20]
 8007b4c:	6018      	str	r0, [r3, #0]
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	062e      	lsls	r6, r5, #24
 8007b52:	d501      	bpl.n	8007b58 <_printf_i+0x198>
 8007b54:	6019      	str	r1, [r3, #0]
 8007b56:	e002      	b.n	8007b5e <_printf_i+0x19e>
 8007b58:	066d      	lsls	r5, r5, #25
 8007b5a:	d5fb      	bpl.n	8007b54 <_printf_i+0x194>
 8007b5c:	8019      	strh	r1, [r3, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9d03      	ldr	r5, [sp, #12]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	e7bf      	b.n	8007ae6 <_printf_i+0x126>
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	1d11      	adds	r1, r2, #4
 8007b6a:	6019      	str	r1, [r3, #0]
 8007b6c:	6815      	ldr	r5, [r2, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	0028      	movs	r0, r5
 8007b72:	6862      	ldr	r2, [r4, #4]
 8007b74:	f000 fbf7 	bl	8008366 <memchr>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d001      	beq.n	8007b80 <_printf_i+0x1c0>
 8007b7c:	1b40      	subs	r0, r0, r5
 8007b7e:	6060      	str	r0, [r4, #4]
 8007b80:	6863      	ldr	r3, [r4, #4]
 8007b82:	6123      	str	r3, [r4, #16]
 8007b84:	2300      	movs	r3, #0
 8007b86:	9a03      	ldr	r2, [sp, #12]
 8007b88:	7013      	strb	r3, [r2, #0]
 8007b8a:	e7ac      	b.n	8007ae6 <_printf_i+0x126>
 8007b8c:	002a      	movs	r2, r5
 8007b8e:	6923      	ldr	r3, [r4, #16]
 8007b90:	9906      	ldr	r1, [sp, #24]
 8007b92:	9805      	ldr	r0, [sp, #20]
 8007b94:	9d07      	ldr	r5, [sp, #28]
 8007b96:	47a8      	blx	r5
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d0ae      	beq.n	8007afa <_printf_i+0x13a>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	079b      	lsls	r3, r3, #30
 8007ba0:	d415      	bmi.n	8007bce <_printf_i+0x20e>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba4:	68e0      	ldr	r0, [r4, #12]
 8007ba6:	4298      	cmp	r0, r3
 8007ba8:	daa9      	bge.n	8007afe <_printf_i+0x13e>
 8007baa:	0018      	movs	r0, r3
 8007bac:	e7a7      	b.n	8007afe <_printf_i+0x13e>
 8007bae:	0022      	movs	r2, r4
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	9906      	ldr	r1, [sp, #24]
 8007bb4:	9805      	ldr	r0, [sp, #20]
 8007bb6:	9e07      	ldr	r6, [sp, #28]
 8007bb8:	3219      	adds	r2, #25
 8007bba:	47b0      	blx	r6
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d09c      	beq.n	8007afa <_printf_i+0x13a>
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dcf0      	bgt.n	8007bae <_printf_i+0x1ee>
 8007bcc:	e7e9      	b.n	8007ba2 <_printf_i+0x1e2>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	e7f7      	b.n	8007bc2 <_printf_i+0x202>
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	0800bd2e 	.word	0x0800bd2e
 8007bd8:	0800bd3f 	.word	0x0800bd3f

08007bdc <_scanf_float>:
 8007bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bde:	b08b      	sub	sp, #44	@ 0x2c
 8007be0:	0016      	movs	r6, r2
 8007be2:	9003      	str	r0, [sp, #12]
 8007be4:	22ae      	movs	r2, #174	@ 0xae
 8007be6:	2000      	movs	r0, #0
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	688b      	ldr	r3, [r1, #8]
 8007bec:	000c      	movs	r4, r1
 8007bee:	1e59      	subs	r1, r3, #1
 8007bf0:	0052      	lsls	r2, r2, #1
 8007bf2:	9006      	str	r0, [sp, #24]
 8007bf4:	4291      	cmp	r1, r2
 8007bf6:	d905      	bls.n	8007c04 <_scanf_float+0x28>
 8007bf8:	3b5e      	subs	r3, #94	@ 0x5e
 8007bfa:	3bff      	subs	r3, #255	@ 0xff
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	235e      	movs	r3, #94	@ 0x5e
 8007c00:	33ff      	adds	r3, #255	@ 0xff
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	23f0      	movs	r3, #240	@ 0xf0
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	0023      	movs	r3, r4
 8007c10:	2500      	movs	r5, #0
 8007c12:	331c      	adds	r3, #28
 8007c14:	001f      	movs	r7, r3
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9502      	str	r5, [sp, #8]
 8007c1a:	9509      	str	r5, [sp, #36]	@ 0x24
 8007c1c:	9508      	str	r5, [sp, #32]
 8007c1e:	9501      	str	r5, [sp, #4]
 8007c20:	9505      	str	r5, [sp, #20]
 8007c22:	68a2      	ldr	r2, [r4, #8]
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	d00a      	beq.n	8007c3e <_scanf_float+0x62>
 8007c28:	6833      	ldr	r3, [r6, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c2e:	d844      	bhi.n	8007cba <_scanf_float+0xde>
 8007c30:	0018      	movs	r0, r3
 8007c32:	2b40      	cmp	r3, #64	@ 0x40
 8007c34:	d82c      	bhi.n	8007c90 <_scanf_float+0xb4>
 8007c36:	382b      	subs	r0, #43	@ 0x2b
 8007c38:	b2c1      	uxtb	r1, r0
 8007c3a:	290e      	cmp	r1, #14
 8007c3c:	d92a      	bls.n	8007c94 <_scanf_float+0xb8>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <_scanf_float+0x70>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	4aa6      	ldr	r2, [pc, #664]	@ (8007ee0 <_scanf_float+0x304>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	9b02      	ldr	r3, [sp, #8]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d900      	bls.n	8007c56 <_scanf_float+0x7a>
 8007c54:	e0fe      	b.n	8007e54 <_scanf_float+0x278>
 8007c56:	25be      	movs	r5, #190	@ 0xbe
 8007c58:	006d      	lsls	r5, r5, #1
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	429f      	cmp	r7, r3
 8007c5e:	d900      	bls.n	8007c62 <_scanf_float+0x86>
 8007c60:	e0ee      	b.n	8007e40 <_scanf_float+0x264>
 8007c62:	2001      	movs	r0, #1
 8007c64:	b00b      	add	sp, #44	@ 0x2c
 8007c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c68:	0018      	movs	r0, r3
 8007c6a:	3861      	subs	r0, #97	@ 0x61
 8007c6c:	280d      	cmp	r0, #13
 8007c6e:	d8e6      	bhi.n	8007c3e <_scanf_float+0x62>
 8007c70:	f7f8 fa5c 	bl	800012c <__gnu_thumb1_case_shi>
 8007c74:	ffe50089 	.word	0xffe50089
 8007c78:	ffe5ffe5 	.word	0xffe5ffe5
 8007c7c:	00a700bb 	.word	0x00a700bb
 8007c80:	ffe5ffe5 	.word	0xffe5ffe5
 8007c84:	ffe5008f 	.word	0xffe5008f
 8007c88:	ffe5ffe5 	.word	0xffe5ffe5
 8007c8c:	006bffe5 	.word	0x006bffe5
 8007c90:	3841      	subs	r0, #65	@ 0x41
 8007c92:	e7eb      	b.n	8007c6c <_scanf_float+0x90>
 8007c94:	280e      	cmp	r0, #14
 8007c96:	d8d2      	bhi.n	8007c3e <_scanf_float+0x62>
 8007c98:	f7f8 fa48 	bl	800012c <__gnu_thumb1_case_shi>
 8007c9c:	ffd1004f 	.word	0xffd1004f
 8007ca0:	009d004f 	.word	0x009d004f
 8007ca4:	0021ffd1 	.word	0x0021ffd1
 8007ca8:	00410041 	.word	0x00410041
 8007cac:	00410041 	.word	0x00410041
 8007cb0:	00410041 	.word	0x00410041
 8007cb4:	00410041 	.word	0x00410041
 8007cb8:	0041      	.short	0x0041
 8007cba:	2b6e      	cmp	r3, #110	@ 0x6e
 8007cbc:	d80a      	bhi.n	8007cd4 <_scanf_float+0xf8>
 8007cbe:	2b60      	cmp	r3, #96	@ 0x60
 8007cc0:	d8d2      	bhi.n	8007c68 <_scanf_float+0x8c>
 8007cc2:	2b54      	cmp	r3, #84	@ 0x54
 8007cc4:	d100      	bne.n	8007cc8 <_scanf_float+0xec>
 8007cc6:	e081      	b.n	8007dcc <_scanf_float+0x1f0>
 8007cc8:	2b59      	cmp	r3, #89	@ 0x59
 8007cca:	d1b8      	bne.n	8007c3e <_scanf_float+0x62>
 8007ccc:	2d07      	cmp	r5, #7
 8007cce:	d1b6      	bne.n	8007c3e <_scanf_float+0x62>
 8007cd0:	2508      	movs	r5, #8
 8007cd2:	e02f      	b.n	8007d34 <_scanf_float+0x158>
 8007cd4:	2b74      	cmp	r3, #116	@ 0x74
 8007cd6:	d079      	beq.n	8007dcc <_scanf_float+0x1f0>
 8007cd8:	2b79      	cmp	r3, #121	@ 0x79
 8007cda:	d0f7      	beq.n	8007ccc <_scanf_float+0xf0>
 8007cdc:	e7af      	b.n	8007c3e <_scanf_float+0x62>
 8007cde:	6821      	ldr	r1, [r4, #0]
 8007ce0:	05c8      	lsls	r0, r1, #23
 8007ce2:	d51c      	bpl.n	8007d1e <_scanf_float+0x142>
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	4399      	bics	r1, r3
 8007ce8:	9b01      	ldr	r3, [sp, #4]
 8007cea:	6021      	str	r1, [r4, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	9b06      	ldr	r3, [sp, #24]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <_scanf_float+0x122>
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	60a2      	str	r2, [r4, #8]
 8007cfe:	68a3      	ldr	r3, [r4, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60a3      	str	r3, [r4, #8]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	3301      	adds	r3, #1
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	6873      	ldr	r3, [r6, #4]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	6073      	str	r3, [r6, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	dc00      	bgt.n	8007d16 <_scanf_float+0x13a>
 8007d14:	e08a      	b.n	8007e2c <_scanf_float+0x250>
 8007d16:	6833      	ldr	r3, [r6, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	6033      	str	r3, [r6, #0]
 8007d1c:	e781      	b.n	8007c22 <_scanf_float+0x46>
 8007d1e:	9a02      	ldr	r2, [sp, #8]
 8007d20:	1951      	adds	r1, r2, r5
 8007d22:	2900      	cmp	r1, #0
 8007d24:	d000      	beq.n	8007d28 <_scanf_float+0x14c>
 8007d26:	e78a      	b.n	8007c3e <_scanf_float+0x62>
 8007d28:	000d      	movs	r5, r1
 8007d2a:	6822      	ldr	r2, [r4, #0]
 8007d2c:	486d      	ldr	r0, [pc, #436]	@ (8007ee4 <_scanf_float+0x308>)
 8007d2e:	9102      	str	r1, [sp, #8]
 8007d30:	4002      	ands	r2, r0
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	703b      	strb	r3, [r7, #0]
 8007d36:	3701      	adds	r7, #1
 8007d38:	e7e1      	b.n	8007cfe <_scanf_float+0x122>
 8007d3a:	2180      	movs	r1, #128	@ 0x80
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	420a      	tst	r2, r1
 8007d40:	d100      	bne.n	8007d44 <_scanf_float+0x168>
 8007d42:	e77c      	b.n	8007c3e <_scanf_float+0x62>
 8007d44:	438a      	bics	r2, r1
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	e7f4      	b.n	8007d34 <_scanf_float+0x158>
 8007d4a:	9a02      	ldr	r2, [sp, #8]
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	d10f      	bne.n	8007d70 <_scanf_float+0x194>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d10f      	bne.n	8007d76 <_scanf_float+0x19a>
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	21e0      	movs	r1, #224	@ 0xe0
 8007d5a:	0010      	movs	r0, r2
 8007d5c:	00c9      	lsls	r1, r1, #3
 8007d5e:	4008      	ands	r0, r1
 8007d60:	4288      	cmp	r0, r1
 8007d62:	d108      	bne.n	8007d76 <_scanf_float+0x19a>
 8007d64:	4960      	ldr	r1, [pc, #384]	@ (8007ee8 <_scanf_float+0x30c>)
 8007d66:	400a      	ands	r2, r1
 8007d68:	6022      	str	r2, [r4, #0]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	e7e1      	b.n	8007d34 <_scanf_float+0x158>
 8007d70:	9a02      	ldr	r2, [sp, #8]
 8007d72:	2a02      	cmp	r2, #2
 8007d74:	d058      	beq.n	8007e28 <_scanf_float+0x24c>
 8007d76:	2d01      	cmp	r5, #1
 8007d78:	d002      	beq.n	8007d80 <_scanf_float+0x1a4>
 8007d7a:	2d04      	cmp	r5, #4
 8007d7c:	d000      	beq.n	8007d80 <_scanf_float+0x1a4>
 8007d7e:	e75e      	b.n	8007c3e <_scanf_float+0x62>
 8007d80:	3501      	adds	r5, #1
 8007d82:	b2ed      	uxtb	r5, r5
 8007d84:	e7d6      	b.n	8007d34 <_scanf_float+0x158>
 8007d86:	9a02      	ldr	r2, [sp, #8]
 8007d88:	2a01      	cmp	r2, #1
 8007d8a:	d000      	beq.n	8007d8e <_scanf_float+0x1b2>
 8007d8c:	e757      	b.n	8007c3e <_scanf_float+0x62>
 8007d8e:	2202      	movs	r2, #2
 8007d90:	e7ec      	b.n	8007d6c <_scanf_float+0x190>
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	d110      	bne.n	8007db8 <_scanf_float+0x1dc>
 8007d96:	9a01      	ldr	r2, [sp, #4]
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d000      	beq.n	8007d9e <_scanf_float+0x1c2>
 8007d9c:	e752      	b.n	8007c44 <_scanf_float+0x68>
 8007d9e:	6822      	ldr	r2, [r4, #0]
 8007da0:	21e0      	movs	r1, #224	@ 0xe0
 8007da2:	0010      	movs	r0, r2
 8007da4:	00c9      	lsls	r1, r1, #3
 8007da6:	4008      	ands	r0, r1
 8007da8:	4288      	cmp	r0, r1
 8007daa:	d000      	beq.n	8007dae <_scanf_float+0x1d2>
 8007dac:	e11d      	b.n	8007fea <_scanf_float+0x40e>
 8007dae:	494e      	ldr	r1, [pc, #312]	@ (8007ee8 <_scanf_float+0x30c>)
 8007db0:	3501      	adds	r5, #1
 8007db2:	400a      	ands	r2, r1
 8007db4:	6022      	str	r2, [r4, #0]
 8007db6:	e7bd      	b.n	8007d34 <_scanf_float+0x158>
 8007db8:	21fd      	movs	r1, #253	@ 0xfd
 8007dba:	1eea      	subs	r2, r5, #3
 8007dbc:	420a      	tst	r2, r1
 8007dbe:	d0df      	beq.n	8007d80 <_scanf_float+0x1a4>
 8007dc0:	e73d      	b.n	8007c3e <_scanf_float+0x62>
 8007dc2:	2d02      	cmp	r5, #2
 8007dc4:	d000      	beq.n	8007dc8 <_scanf_float+0x1ec>
 8007dc6:	e73a      	b.n	8007c3e <_scanf_float+0x62>
 8007dc8:	2503      	movs	r5, #3
 8007dca:	e7b3      	b.n	8007d34 <_scanf_float+0x158>
 8007dcc:	2d06      	cmp	r5, #6
 8007dce:	d000      	beq.n	8007dd2 <_scanf_float+0x1f6>
 8007dd0:	e735      	b.n	8007c3e <_scanf_float+0x62>
 8007dd2:	2507      	movs	r5, #7
 8007dd4:	e7ae      	b.n	8007d34 <_scanf_float+0x158>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	0591      	lsls	r1, r2, #22
 8007dda:	d400      	bmi.n	8007dde <_scanf_float+0x202>
 8007ddc:	e72f      	b.n	8007c3e <_scanf_float+0x62>
 8007dde:	4943      	ldr	r1, [pc, #268]	@ (8007eec <_scanf_float+0x310>)
 8007de0:	400a      	ands	r2, r1
 8007de2:	6022      	str	r2, [r4, #0]
 8007de4:	9a01      	ldr	r2, [sp, #4]
 8007de6:	9205      	str	r2, [sp, #20]
 8007de8:	e7a4      	b.n	8007d34 <_scanf_float+0x158>
 8007dea:	21a0      	movs	r1, #160	@ 0xa0
 8007dec:	2080      	movs	r0, #128	@ 0x80
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	00c9      	lsls	r1, r1, #3
 8007df2:	4011      	ands	r1, r2
 8007df4:	00c0      	lsls	r0, r0, #3
 8007df6:	4281      	cmp	r1, r0
 8007df8:	d006      	beq.n	8007e08 <_scanf_float+0x22c>
 8007dfa:	4202      	tst	r2, r0
 8007dfc:	d100      	bne.n	8007e00 <_scanf_float+0x224>
 8007dfe:	e71e      	b.n	8007c3e <_scanf_float+0x62>
 8007e00:	9901      	ldr	r1, [sp, #4]
 8007e02:	2900      	cmp	r1, #0
 8007e04:	d100      	bne.n	8007e08 <_scanf_float+0x22c>
 8007e06:	e0f0      	b.n	8007fea <_scanf_float+0x40e>
 8007e08:	0591      	lsls	r1, r2, #22
 8007e0a:	d404      	bmi.n	8007e16 <_scanf_float+0x23a>
 8007e0c:	9901      	ldr	r1, [sp, #4]
 8007e0e:	9805      	ldr	r0, [sp, #20]
 8007e10:	9709      	str	r7, [sp, #36]	@ 0x24
 8007e12:	1a09      	subs	r1, r1, r0
 8007e14:	9108      	str	r1, [sp, #32]
 8007e16:	4934      	ldr	r1, [pc, #208]	@ (8007ee8 <_scanf_float+0x30c>)
 8007e18:	400a      	ands	r2, r1
 8007e1a:	21c0      	movs	r1, #192	@ 0xc0
 8007e1c:	0049      	lsls	r1, r1, #1
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	6022      	str	r2, [r4, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	9201      	str	r2, [sp, #4]
 8007e26:	e785      	b.n	8007d34 <_scanf_float+0x158>
 8007e28:	2203      	movs	r2, #3
 8007e2a:	e79f      	b.n	8007d6c <_scanf_float+0x190>
 8007e2c:	23c0      	movs	r3, #192	@ 0xc0
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	0031      	movs	r1, r6
 8007e32:	58e3      	ldr	r3, [r4, r3]
 8007e34:	9803      	ldr	r0, [sp, #12]
 8007e36:	4798      	blx	r3
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d100      	bne.n	8007e3e <_scanf_float+0x262>
 8007e3c:	e6f1      	b.n	8007c22 <_scanf_float+0x46>
 8007e3e:	e6fe      	b.n	8007c3e <_scanf_float+0x62>
 8007e40:	3f01      	subs	r7, #1
 8007e42:	5963      	ldr	r3, [r4, r5]
 8007e44:	0032      	movs	r2, r6
 8007e46:	7839      	ldrb	r1, [r7, #0]
 8007e48:	9803      	ldr	r0, [sp, #12]
 8007e4a:	4798      	blx	r3
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	6123      	str	r3, [r4, #16]
 8007e52:	e702      	b.n	8007c5a <_scanf_float+0x7e>
 8007e54:	1e6b      	subs	r3, r5, #1
 8007e56:	2b06      	cmp	r3, #6
 8007e58:	d80e      	bhi.n	8007e78 <_scanf_float+0x29c>
 8007e5a:	9702      	str	r7, [sp, #8]
 8007e5c:	2d02      	cmp	r5, #2
 8007e5e:	d920      	bls.n	8007ea2 <_scanf_float+0x2c6>
 8007e60:	1beb      	subs	r3, r5, r7
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	9306      	str	r3, [sp, #24]
 8007e66:	9b02      	ldr	r3, [sp, #8]
 8007e68:	9a06      	ldr	r2, [sp, #24]
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d127      	bne.n	8007ec2 <_scanf_float+0x2e6>
 8007e72:	3d03      	subs	r5, #3
 8007e74:	b2ed      	uxtb	r5, r5
 8007e76:	1b7f      	subs	r7, r7, r5
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	05da      	lsls	r2, r3, #23
 8007e7c:	d553      	bpl.n	8007f26 <_scanf_float+0x34a>
 8007e7e:	055b      	lsls	r3, r3, #21
 8007e80:	d536      	bpl.n	8007ef0 <_scanf_float+0x314>
 8007e82:	25be      	movs	r5, #190	@ 0xbe
 8007e84:	006d      	lsls	r5, r5, #1
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	429f      	cmp	r7, r3
 8007e8a:	d800      	bhi.n	8007e8e <_scanf_float+0x2b2>
 8007e8c:	e6e9      	b.n	8007c62 <_scanf_float+0x86>
 8007e8e:	3f01      	subs	r7, #1
 8007e90:	5963      	ldr	r3, [r4, r5]
 8007e92:	0032      	movs	r2, r6
 8007e94:	7839      	ldrb	r1, [r7, #0]
 8007e96:	9803      	ldr	r0, [sp, #12]
 8007e98:	4798      	blx	r3
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	e7f1      	b.n	8007e86 <_scanf_float+0x2aa>
 8007ea2:	25be      	movs	r5, #190	@ 0xbe
 8007ea4:	006d      	lsls	r5, r5, #1
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	429f      	cmp	r7, r3
 8007eaa:	d800      	bhi.n	8007eae <_scanf_float+0x2d2>
 8007eac:	e6d9      	b.n	8007c62 <_scanf_float+0x86>
 8007eae:	3f01      	subs	r7, #1
 8007eb0:	5963      	ldr	r3, [r4, r5]
 8007eb2:	0032      	movs	r2, r6
 8007eb4:	7839      	ldrb	r1, [r7, #0]
 8007eb6:	9803      	ldr	r0, [sp, #12]
 8007eb8:	4798      	blx	r3
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	6123      	str	r3, [r4, #16]
 8007ec0:	e7f1      	b.n	8007ea6 <_scanf_float+0x2ca>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	0032      	movs	r2, r6
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	7819      	ldrb	r1, [r3, #0]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	23be      	movs	r3, #190	@ 0xbe
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	58e3      	ldr	r3, [r4, r3]
 8007ed2:	9803      	ldr	r0, [sp, #12]
 8007ed4:	4798      	blx	r3
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	e7c3      	b.n	8007e66 <_scanf_float+0x28a>
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	fffffeff 	.word	0xfffffeff
 8007ee4:	fffffe7f 	.word	0xfffffe7f
 8007ee8:	fffff87f 	.word	0xfffff87f
 8007eec:	fffffd7f 	.word	0xfffffd7f
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	1e7d      	subs	r5, r7, #1
 8007ef4:	7829      	ldrb	r1, [r5, #0]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	2965      	cmp	r1, #101	@ 0x65
 8007efc:	d00c      	beq.n	8007f18 <_scanf_float+0x33c>
 8007efe:	2945      	cmp	r1, #69	@ 0x45
 8007f00:	d00a      	beq.n	8007f18 <_scanf_float+0x33c>
 8007f02:	23be      	movs	r3, #190	@ 0xbe
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	58e3      	ldr	r3, [r4, r3]
 8007f08:	0032      	movs	r2, r6
 8007f0a:	9803      	ldr	r0, [sp, #12]
 8007f0c:	4798      	blx	r3
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	1ebd      	subs	r5, r7, #2
 8007f12:	3b01      	subs	r3, #1
 8007f14:	7829      	ldrb	r1, [r5, #0]
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	23be      	movs	r3, #190	@ 0xbe
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	0032      	movs	r2, r6
 8007f1e:	58e3      	ldr	r3, [r4, r3]
 8007f20:	9803      	ldr	r0, [sp, #12]
 8007f22:	4798      	blx	r3
 8007f24:	002f      	movs	r7, r5
 8007f26:	6821      	ldr	r1, [r4, #0]
 8007f28:	2310      	movs	r3, #16
 8007f2a:	000a      	movs	r2, r1
 8007f2c:	401a      	ands	r2, r3
 8007f2e:	4219      	tst	r1, r3
 8007f30:	d001      	beq.n	8007f36 <_scanf_float+0x35a>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e696      	b.n	8007c64 <_scanf_float+0x88>
 8007f36:	21c0      	movs	r1, #192	@ 0xc0
 8007f38:	703a      	strb	r2, [r7, #0]
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	00c9      	lsls	r1, r1, #3
 8007f3e:	400b      	ands	r3, r1
 8007f40:	2180      	movs	r1, #128	@ 0x80
 8007f42:	00c9      	lsls	r1, r1, #3
 8007f44:	428b      	cmp	r3, r1
 8007f46:	d11c      	bne.n	8007f82 <_scanf_float+0x3a6>
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	9a01      	ldr	r2, [sp, #4]
 8007f4c:	9905      	ldr	r1, [sp, #20]
 8007f4e:	1a9a      	subs	r2, r3, r2
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	428b      	cmp	r3, r1
 8007f54:	d121      	bne.n	8007f9a <_scanf_float+0x3be>
 8007f56:	2200      	movs	r2, #0
 8007f58:	9904      	ldr	r1, [sp, #16]
 8007f5a:	9803      	ldr	r0, [sp, #12]
 8007f5c:	f002 fc6e 	bl	800a83c <_strtod_r>
 8007f60:	9b07      	ldr	r3, [sp, #28]
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	0006      	movs	r6, r0
 8007f66:	000f      	movs	r7, r1
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	0791      	lsls	r1, r2, #30
 8007f6c:	d522      	bpl.n	8007fb4 <_scanf_float+0x3d8>
 8007f6e:	9907      	ldr	r1, [sp, #28]
 8007f70:	1d1a      	adds	r2, r3, #4
 8007f72:	600a      	str	r2, [r1, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	601e      	str	r6, [r3, #0]
 8007f78:	605f      	str	r7, [r3, #4]
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60e3      	str	r3, [r4, #12]
 8007f80:	e7d7      	b.n	8007f32 <_scanf_float+0x356>
 8007f82:	9b08      	ldr	r3, [sp, #32]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0e6      	beq.n	8007f56 <_scanf_float+0x37a>
 8007f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8a:	9803      	ldr	r0, [sp, #12]
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	230a      	movs	r3, #10
 8007f90:	f002 fce6 	bl	800a960 <_strtol_r>
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007f98:	1ac2      	subs	r2, r0, r3
 8007f9a:	0023      	movs	r3, r4
 8007f9c:	3370      	adds	r3, #112	@ 0x70
 8007f9e:	33ff      	adds	r3, #255	@ 0xff
 8007fa0:	429f      	cmp	r7, r3
 8007fa2:	d302      	bcc.n	8007faa <_scanf_float+0x3ce>
 8007fa4:	0027      	movs	r7, r4
 8007fa6:	376f      	adds	r7, #111	@ 0x6f
 8007fa8:	37ff      	adds	r7, #255	@ 0xff
 8007faa:	0038      	movs	r0, r7
 8007fac:	4910      	ldr	r1, [pc, #64]	@ (8007ff0 <_scanf_float+0x414>)
 8007fae:	f000 f8e7 	bl	8008180 <siprintf>
 8007fb2:	e7d0      	b.n	8007f56 <_scanf_float+0x37a>
 8007fb4:	1d19      	adds	r1, r3, #4
 8007fb6:	0752      	lsls	r2, r2, #29
 8007fb8:	d502      	bpl.n	8007fc0 <_scanf_float+0x3e4>
 8007fba:	9a07      	ldr	r2, [sp, #28]
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	e7d9      	b.n	8007f74 <_scanf_float+0x398>
 8007fc0:	9a07      	ldr	r2, [sp, #28]
 8007fc2:	0030      	movs	r0, r6
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	681d      	ldr	r5, [r3, #0]
 8007fc8:	0032      	movs	r2, r6
 8007fca:	003b      	movs	r3, r7
 8007fcc:	0039      	movs	r1, r7
 8007fce:	f7fa fe43 	bl	8002c58 <__aeabi_dcmpun>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d004      	beq.n	8007fe0 <_scanf_float+0x404>
 8007fd6:	4807      	ldr	r0, [pc, #28]	@ (8007ff4 <_scanf_float+0x418>)
 8007fd8:	f000 f9d0 	bl	800837c <nanf>
 8007fdc:	6028      	str	r0, [r5, #0]
 8007fde:	e7cc      	b.n	8007f7a <_scanf_float+0x39e>
 8007fe0:	0030      	movs	r0, r6
 8007fe2:	0039      	movs	r1, r7
 8007fe4:	f7fa ff30 	bl	8002e48 <__aeabi_d2f>
 8007fe8:	e7f8      	b.n	8007fdc <_scanf_float+0x400>
 8007fea:	2300      	movs	r3, #0
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	e62d      	b.n	8007c4c <_scanf_float+0x70>
 8007ff0:	0800bd50 	.word	0x0800bd50
 8007ff4:	0800c0e5 	.word	0x0800c0e5

08007ff8 <std>:
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	b510      	push	{r4, lr}
 8007ffc:	0004      	movs	r4, r0
 8007ffe:	6003      	str	r3, [r0, #0]
 8008000:	6043      	str	r3, [r0, #4]
 8008002:	6083      	str	r3, [r0, #8]
 8008004:	8181      	strh	r1, [r0, #12]
 8008006:	6643      	str	r3, [r0, #100]	@ 0x64
 8008008:	81c2      	strh	r2, [r0, #14]
 800800a:	6103      	str	r3, [r0, #16]
 800800c:	6143      	str	r3, [r0, #20]
 800800e:	6183      	str	r3, [r0, #24]
 8008010:	0019      	movs	r1, r3
 8008012:	2208      	movs	r2, #8
 8008014:	305c      	adds	r0, #92	@ 0x5c
 8008016:	f000 f91f 	bl	8008258 <memset>
 800801a:	4b0b      	ldr	r3, [pc, #44]	@ (8008048 <std+0x50>)
 800801c:	6224      	str	r4, [r4, #32]
 800801e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008020:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <std+0x54>)
 8008022:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008024:	4b0a      	ldr	r3, [pc, #40]	@ (8008050 <std+0x58>)
 8008026:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008028:	4b0a      	ldr	r3, [pc, #40]	@ (8008054 <std+0x5c>)
 800802a:	6323      	str	r3, [r4, #48]	@ 0x30
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <std+0x60>)
 800802e:	429c      	cmp	r4, r3
 8008030:	d005      	beq.n	800803e <std+0x46>
 8008032:	4b0a      	ldr	r3, [pc, #40]	@ (800805c <std+0x64>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d002      	beq.n	800803e <std+0x46>
 8008038:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <std+0x68>)
 800803a:	429c      	cmp	r4, r3
 800803c:	d103      	bne.n	8008046 <std+0x4e>
 800803e:	0020      	movs	r0, r4
 8008040:	3058      	adds	r0, #88	@ 0x58
 8008042:	f000 f98d 	bl	8008360 <__retarget_lock_init_recursive>
 8008046:	bd10      	pop	{r4, pc}
 8008048:	080081c1 	.word	0x080081c1
 800804c:	080081e9 	.word	0x080081e9
 8008050:	08008221 	.word	0x08008221
 8008054:	0800824d 	.word	0x0800824d
 8008058:	20000374 	.word	0x20000374
 800805c:	200003dc 	.word	0x200003dc
 8008060:	20000444 	.word	0x20000444

08008064 <stdio_exit_handler>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4a03      	ldr	r2, [pc, #12]	@ (8008074 <stdio_exit_handler+0x10>)
 8008068:	4903      	ldr	r1, [pc, #12]	@ (8008078 <stdio_exit_handler+0x14>)
 800806a:	4804      	ldr	r0, [pc, #16]	@ (800807c <stdio_exit_handler+0x18>)
 800806c:	f000 f86c 	bl	8008148 <_fwalk_sglue>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	46c0      	nop			@ (mov r8, r8)
 8008074:	20000010 	.word	0x20000010
 8008078:	0800ad31 	.word	0x0800ad31
 800807c:	20000020 	.word	0x20000020

08008080 <cleanup_stdio>:
 8008080:	6841      	ldr	r1, [r0, #4]
 8008082:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <cleanup_stdio+0x30>)
 8008084:	b510      	push	{r4, lr}
 8008086:	0004      	movs	r4, r0
 8008088:	4299      	cmp	r1, r3
 800808a:	d001      	beq.n	8008090 <cleanup_stdio+0x10>
 800808c:	f002 fe50 	bl	800ad30 <_fflush_r>
 8008090:	68a1      	ldr	r1, [r4, #8]
 8008092:	4b08      	ldr	r3, [pc, #32]	@ (80080b4 <cleanup_stdio+0x34>)
 8008094:	4299      	cmp	r1, r3
 8008096:	d002      	beq.n	800809e <cleanup_stdio+0x1e>
 8008098:	0020      	movs	r0, r4
 800809a:	f002 fe49 	bl	800ad30 <_fflush_r>
 800809e:	68e1      	ldr	r1, [r4, #12]
 80080a0:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <cleanup_stdio+0x38>)
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d002      	beq.n	80080ac <cleanup_stdio+0x2c>
 80080a6:	0020      	movs	r0, r4
 80080a8:	f002 fe42 	bl	800ad30 <_fflush_r>
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	46c0      	nop			@ (mov r8, r8)
 80080b0:	20000374 	.word	0x20000374
 80080b4:	200003dc 	.word	0x200003dc
 80080b8:	20000444 	.word	0x20000444

080080bc <global_stdio_init.part.0>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <global_stdio_init.part.0+0x28>)
 80080c0:	4a09      	ldr	r2, [pc, #36]	@ (80080e8 <global_stdio_init.part.0+0x2c>)
 80080c2:	2104      	movs	r1, #4
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	4809      	ldr	r0, [pc, #36]	@ (80080ec <global_stdio_init.part.0+0x30>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	f7ff ff95 	bl	8007ff8 <std>
 80080ce:	2201      	movs	r2, #1
 80080d0:	2109      	movs	r1, #9
 80080d2:	4807      	ldr	r0, [pc, #28]	@ (80080f0 <global_stdio_init.part.0+0x34>)
 80080d4:	f7ff ff90 	bl	8007ff8 <std>
 80080d8:	2202      	movs	r2, #2
 80080da:	2112      	movs	r1, #18
 80080dc:	4805      	ldr	r0, [pc, #20]	@ (80080f4 <global_stdio_init.part.0+0x38>)
 80080de:	f7ff ff8b 	bl	8007ff8 <std>
 80080e2:	bd10      	pop	{r4, pc}
 80080e4:	200004ac 	.word	0x200004ac
 80080e8:	08008065 	.word	0x08008065
 80080ec:	20000374 	.word	0x20000374
 80080f0:	200003dc 	.word	0x200003dc
 80080f4:	20000444 	.word	0x20000444

080080f8 <__sfp_lock_acquire>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	4802      	ldr	r0, [pc, #8]	@ (8008104 <__sfp_lock_acquire+0xc>)
 80080fc:	f000 f931 	bl	8008362 <__retarget_lock_acquire_recursive>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	200004b5 	.word	0x200004b5

08008108 <__sfp_lock_release>:
 8008108:	b510      	push	{r4, lr}
 800810a:	4802      	ldr	r0, [pc, #8]	@ (8008114 <__sfp_lock_release+0xc>)
 800810c:	f000 f92a 	bl	8008364 <__retarget_lock_release_recursive>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	46c0      	nop			@ (mov r8, r8)
 8008114:	200004b5 	.word	0x200004b5

08008118 <__sinit>:
 8008118:	b510      	push	{r4, lr}
 800811a:	0004      	movs	r4, r0
 800811c:	f7ff ffec 	bl	80080f8 <__sfp_lock_acquire>
 8008120:	6a23      	ldr	r3, [r4, #32]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <__sinit+0x14>
 8008126:	f7ff ffef 	bl	8008108 <__sfp_lock_release>
 800812a:	bd10      	pop	{r4, pc}
 800812c:	4b04      	ldr	r3, [pc, #16]	@ (8008140 <__sinit+0x28>)
 800812e:	6223      	str	r3, [r4, #32]
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <__sinit+0x2c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f6      	bne.n	8008126 <__sinit+0xe>
 8008138:	f7ff ffc0 	bl	80080bc <global_stdio_init.part.0>
 800813c:	e7f3      	b.n	8008126 <__sinit+0xe>
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	08008081 	.word	0x08008081
 8008144:	200004ac 	.word	0x200004ac

08008148 <_fwalk_sglue>:
 8008148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800814a:	0014      	movs	r4, r2
 800814c:	2600      	movs	r6, #0
 800814e:	9000      	str	r0, [sp, #0]
 8008150:	9101      	str	r1, [sp, #4]
 8008152:	68a5      	ldr	r5, [r4, #8]
 8008154:	6867      	ldr	r7, [r4, #4]
 8008156:	3f01      	subs	r7, #1
 8008158:	d504      	bpl.n	8008164 <_fwalk_sglue+0x1c>
 800815a:	6824      	ldr	r4, [r4, #0]
 800815c:	2c00      	cmp	r4, #0
 800815e:	d1f8      	bne.n	8008152 <_fwalk_sglue+0xa>
 8008160:	0030      	movs	r0, r6
 8008162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d908      	bls.n	800817c <_fwalk_sglue+0x34>
 800816a:	220e      	movs	r2, #14
 800816c:	5eab      	ldrsh	r3, [r5, r2]
 800816e:	3301      	adds	r3, #1
 8008170:	d004      	beq.n	800817c <_fwalk_sglue+0x34>
 8008172:	0029      	movs	r1, r5
 8008174:	9800      	ldr	r0, [sp, #0]
 8008176:	9b01      	ldr	r3, [sp, #4]
 8008178:	4798      	blx	r3
 800817a:	4306      	orrs	r6, r0
 800817c:	3568      	adds	r5, #104	@ 0x68
 800817e:	e7ea      	b.n	8008156 <_fwalk_sglue+0xe>

08008180 <siprintf>:
 8008180:	b40e      	push	{r1, r2, r3}
 8008182:	b500      	push	{lr}
 8008184:	490b      	ldr	r1, [pc, #44]	@ (80081b4 <siprintf+0x34>)
 8008186:	b09c      	sub	sp, #112	@ 0x70
 8008188:	ab1d      	add	r3, sp, #116	@ 0x74
 800818a:	9002      	str	r0, [sp, #8]
 800818c:	9006      	str	r0, [sp, #24]
 800818e:	9107      	str	r1, [sp, #28]
 8008190:	9104      	str	r1, [sp, #16]
 8008192:	4809      	ldr	r0, [pc, #36]	@ (80081b8 <siprintf+0x38>)
 8008194:	4909      	ldr	r1, [pc, #36]	@ (80081bc <siprintf+0x3c>)
 8008196:	cb04      	ldmia	r3!, {r2}
 8008198:	9105      	str	r1, [sp, #20]
 800819a:	6800      	ldr	r0, [r0, #0]
 800819c:	a902      	add	r1, sp, #8
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	f002 fc42 	bl	800aa28 <_svfiprintf_r>
 80081a4:	2200      	movs	r2, #0
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	b01c      	add	sp, #112	@ 0x70
 80081ac:	bc08      	pop	{r3}
 80081ae:	b003      	add	sp, #12
 80081b0:	4718      	bx	r3
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	7fffffff 	.word	0x7fffffff
 80081b8:	2000001c 	.word	0x2000001c
 80081bc:	ffff0208 	.word	0xffff0208

080081c0 <__sread>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	000c      	movs	r4, r1
 80081c4:	250e      	movs	r5, #14
 80081c6:	5f49      	ldrsh	r1, [r1, r5]
 80081c8:	f000 f878 	bl	80082bc <_read_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	db03      	blt.n	80081d8 <__sread+0x18>
 80081d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80081d2:	181b      	adds	r3, r3, r0
 80081d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80081d6:	bd70      	pop	{r4, r5, r6, pc}
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	4a02      	ldr	r2, [pc, #8]	@ (80081e4 <__sread+0x24>)
 80081dc:	4013      	ands	r3, r2
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	e7f9      	b.n	80081d6 <__sread+0x16>
 80081e2:	46c0      	nop			@ (mov r8, r8)
 80081e4:	ffffefff 	.word	0xffffefff

080081e8 <__swrite>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	001f      	movs	r7, r3
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	0005      	movs	r5, r0
 80081f0:	000c      	movs	r4, r1
 80081f2:	0016      	movs	r6, r2
 80081f4:	05db      	lsls	r3, r3, #23
 80081f6:	d505      	bpl.n	8008204 <__swrite+0x1c>
 80081f8:	230e      	movs	r3, #14
 80081fa:	5ec9      	ldrsh	r1, [r1, r3]
 80081fc:	2200      	movs	r2, #0
 80081fe:	2302      	movs	r3, #2
 8008200:	f000 f848 	bl	8008294 <_lseek_r>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	4a05      	ldr	r2, [pc, #20]	@ (800821c <__swrite+0x34>)
 8008208:	0028      	movs	r0, r5
 800820a:	4013      	ands	r3, r2
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	0032      	movs	r2, r6
 8008210:	230e      	movs	r3, #14
 8008212:	5ee1      	ldrsh	r1, [r4, r3]
 8008214:	003b      	movs	r3, r7
 8008216:	f000 f865 	bl	80082e4 <_write_r>
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800821c:	ffffefff 	.word	0xffffefff

08008220 <__sseek>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	000c      	movs	r4, r1
 8008224:	250e      	movs	r5, #14
 8008226:	5f49      	ldrsh	r1, [r1, r5]
 8008228:	f000 f834 	bl	8008294 <_lseek_r>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	1c42      	adds	r2, r0, #1
 8008230:	d103      	bne.n	800823a <__sseek+0x1a>
 8008232:	4a05      	ldr	r2, [pc, #20]	@ (8008248 <__sseek+0x28>)
 8008234:	4013      	ands	r3, r2
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	2280      	movs	r2, #128	@ 0x80
 800823c:	0152      	lsls	r2, r2, #5
 800823e:	4313      	orrs	r3, r2
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	6560      	str	r0, [r4, #84]	@ 0x54
 8008244:	e7f8      	b.n	8008238 <__sseek+0x18>
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	ffffefff 	.word	0xffffefff

0800824c <__sclose>:
 800824c:	b510      	push	{r4, lr}
 800824e:	230e      	movs	r3, #14
 8008250:	5ec9      	ldrsh	r1, [r1, r3]
 8008252:	f000 f80d 	bl	8008270 <_close_r>
 8008256:	bd10      	pop	{r4, pc}

08008258 <memset>:
 8008258:	0003      	movs	r3, r0
 800825a:	1882      	adds	r2, r0, r2
 800825c:	4293      	cmp	r3, r2
 800825e:	d100      	bne.n	8008262 <memset+0xa>
 8008260:	4770      	bx	lr
 8008262:	7019      	strb	r1, [r3, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	e7f9      	b.n	800825c <memset+0x4>

08008268 <_localeconv_r>:
 8008268:	4800      	ldr	r0, [pc, #0]	@ (800826c <_localeconv_r+0x4>)
 800826a:	4770      	bx	lr
 800826c:	2000015c 	.word	0x2000015c

08008270 <_close_r>:
 8008270:	2300      	movs	r3, #0
 8008272:	b570      	push	{r4, r5, r6, lr}
 8008274:	4d06      	ldr	r5, [pc, #24]	@ (8008290 <_close_r+0x20>)
 8008276:	0004      	movs	r4, r0
 8008278:	0008      	movs	r0, r1
 800827a:	602b      	str	r3, [r5, #0]
 800827c:	f7fb fa7a 	bl	8003774 <_close>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d103      	bne.n	800828c <_close_r+0x1c>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d000      	beq.n	800828c <_close_r+0x1c>
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	bd70      	pop	{r4, r5, r6, pc}
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	200004b0 	.word	0x200004b0

08008294 <_lseek_r>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	0004      	movs	r4, r0
 8008298:	0008      	movs	r0, r1
 800829a:	0011      	movs	r1, r2
 800829c:	001a      	movs	r2, r3
 800829e:	2300      	movs	r3, #0
 80082a0:	4d05      	ldr	r5, [pc, #20]	@ (80082b8 <_lseek_r+0x24>)
 80082a2:	602b      	str	r3, [r5, #0]
 80082a4:	f7fb fa87 	bl	80037b6 <_lseek>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d103      	bne.n	80082b4 <_lseek_r+0x20>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d000      	beq.n	80082b4 <_lseek_r+0x20>
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	46c0      	nop			@ (mov r8, r8)
 80082b8:	200004b0 	.word	0x200004b0

080082bc <_read_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	0004      	movs	r4, r0
 80082c0:	0008      	movs	r0, r1
 80082c2:	0011      	movs	r1, r2
 80082c4:	001a      	movs	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	4d05      	ldr	r5, [pc, #20]	@ (80082e0 <_read_r+0x24>)
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	f7fb fa19 	bl	8003702 <_read>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d103      	bne.n	80082dc <_read_r+0x20>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d000      	beq.n	80082dc <_read_r+0x20>
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	200004b0 	.word	0x200004b0

080082e4 <_write_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	0004      	movs	r4, r0
 80082e8:	0008      	movs	r0, r1
 80082ea:	0011      	movs	r1, r2
 80082ec:	001a      	movs	r2, r3
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	@ (8008308 <_write_r+0x24>)
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7fb fa22 	bl	800373c <_write>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d103      	bne.n	8008304 <_write_r+0x20>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d000      	beq.n	8008304 <_write_r+0x20>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	200004b0 	.word	0x200004b0

0800830c <__errno>:
 800830c:	4b01      	ldr	r3, [pc, #4]	@ (8008314 <__errno+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	4770      	bx	lr
 8008312:	46c0      	nop			@ (mov r8, r8)
 8008314:	2000001c 	.word	0x2000001c

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	2600      	movs	r6, #0
 800831c:	4c0c      	ldr	r4, [pc, #48]	@ (8008350 <__libc_init_array+0x38>)
 800831e:	4d0d      	ldr	r5, [pc, #52]	@ (8008354 <__libc_init_array+0x3c>)
 8008320:	1b64      	subs	r4, r4, r5
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	42a6      	cmp	r6, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	2600      	movs	r6, #0
 800832a:	f003 fc43 	bl	800bbb4 <_init>
 800832e:	4c0a      	ldr	r4, [pc, #40]	@ (8008358 <__libc_init_array+0x40>)
 8008330:	4d0a      	ldr	r5, [pc, #40]	@ (800835c <__libc_init_array+0x44>)
 8008332:	1b64      	subs	r4, r4, r5
 8008334:	10a4      	asrs	r4, r4, #2
 8008336:	42a6      	cmp	r6, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	00b3      	lsls	r3, r6, #2
 800833e:	58eb      	ldr	r3, [r5, r3]
 8008340:	4798      	blx	r3
 8008342:	3601      	adds	r6, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	00b3      	lsls	r3, r6, #2
 8008348:	58eb      	ldr	r3, [r5, r3]
 800834a:	4798      	blx	r3
 800834c:	3601      	adds	r6, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	0800c150 	.word	0x0800c150
 8008354:	0800c150 	.word	0x0800c150
 8008358:	0800c154 	.word	0x0800c154
 800835c:	0800c150 	.word	0x0800c150

08008360 <__retarget_lock_init_recursive>:
 8008360:	4770      	bx	lr

08008362 <__retarget_lock_acquire_recursive>:
 8008362:	4770      	bx	lr

08008364 <__retarget_lock_release_recursive>:
 8008364:	4770      	bx	lr

08008366 <memchr>:
 8008366:	b2c9      	uxtb	r1, r1
 8008368:	1882      	adds	r2, r0, r2
 800836a:	4290      	cmp	r0, r2
 800836c:	d101      	bne.n	8008372 <memchr+0xc>
 800836e:	2000      	movs	r0, #0
 8008370:	4770      	bx	lr
 8008372:	7803      	ldrb	r3, [r0, #0]
 8008374:	428b      	cmp	r3, r1
 8008376:	d0fb      	beq.n	8008370 <memchr+0xa>
 8008378:	3001      	adds	r0, #1
 800837a:	e7f6      	b.n	800836a <memchr+0x4>

0800837c <nanf>:
 800837c:	4800      	ldr	r0, [pc, #0]	@ (8008380 <nanf+0x4>)
 800837e:	4770      	bx	lr
 8008380:	7fc00000 	.word	0x7fc00000

08008384 <quorem>:
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	6902      	ldr	r2, [r0, #16]
 8008388:	690f      	ldr	r7, [r1, #16]
 800838a:	b087      	sub	sp, #28
 800838c:	0006      	movs	r6, r0
 800838e:	000b      	movs	r3, r1
 8008390:	2000      	movs	r0, #0
 8008392:	9102      	str	r1, [sp, #8]
 8008394:	42ba      	cmp	r2, r7
 8008396:	db6d      	blt.n	8008474 <quorem+0xf0>
 8008398:	3f01      	subs	r7, #1
 800839a:	00bc      	lsls	r4, r7, #2
 800839c:	3314      	adds	r3, #20
 800839e:	9305      	str	r3, [sp, #20]
 80083a0:	191b      	adds	r3, r3, r4
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	0033      	movs	r3, r6
 80083a6:	3314      	adds	r3, #20
 80083a8:	191c      	adds	r4, r3, r4
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	9804      	ldr	r0, [sp, #16]
 80083b4:	681d      	ldr	r5, [r3, #0]
 80083b6:	3501      	adds	r5, #1
 80083b8:	0029      	movs	r1, r5
 80083ba:	f7f7 fec1 	bl	8000140 <__udivsi3>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	9000      	str	r0, [sp, #0]
 80083c2:	42ab      	cmp	r3, r5
 80083c4:	d32b      	bcc.n	800841e <quorem+0x9a>
 80083c6:	9b05      	ldr	r3, [sp, #20]
 80083c8:	9d01      	ldr	r5, [sp, #4]
 80083ca:	469c      	mov	ip, r3
 80083cc:	2300      	movs	r3, #0
 80083ce:	9305      	str	r3, [sp, #20]
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	4662      	mov	r2, ip
 80083d4:	ca08      	ldmia	r2!, {r3}
 80083d6:	6828      	ldr	r0, [r5, #0]
 80083d8:	4694      	mov	ip, r2
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	b299      	uxth	r1, r3
 80083de:	4351      	muls	r1, r2
 80083e0:	9a05      	ldr	r2, [sp, #20]
 80083e2:	0c1b      	lsrs	r3, r3, #16
 80083e4:	1889      	adds	r1, r1, r2
 80083e6:	9a00      	ldr	r2, [sp, #0]
 80083e8:	4353      	muls	r3, r2
 80083ea:	0c0a      	lsrs	r2, r1, #16
 80083ec:	189b      	adds	r3, r3, r2
 80083ee:	0c1a      	lsrs	r2, r3, #16
 80083f0:	b289      	uxth	r1, r1
 80083f2:	9205      	str	r2, [sp, #20]
 80083f4:	b282      	uxth	r2, r0
 80083f6:	1a52      	subs	r2, r2, r1
 80083f8:	9904      	ldr	r1, [sp, #16]
 80083fa:	0c00      	lsrs	r0, r0, #16
 80083fc:	1852      	adds	r2, r2, r1
 80083fe:	b29b      	uxth	r3, r3
 8008400:	1411      	asrs	r1, r2, #16
 8008402:	1ac3      	subs	r3, r0, r3
 8008404:	185b      	adds	r3, r3, r1
 8008406:	1419      	asrs	r1, r3, #16
 8008408:	b292      	uxth	r2, r2
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	431a      	orrs	r2, r3
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	9104      	str	r1, [sp, #16]
 8008412:	c504      	stmia	r5!, {r2}
 8008414:	4563      	cmp	r3, ip
 8008416:	d2dc      	bcs.n	80083d2 <quorem+0x4e>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d030      	beq.n	8008480 <quorem+0xfc>
 800841e:	0030      	movs	r0, r6
 8008420:	9902      	ldr	r1, [sp, #8]
 8008422:	f001 fa11 	bl	8009848 <__mcmp>
 8008426:	2800      	cmp	r0, #0
 8008428:	db23      	blt.n	8008472 <quorem+0xee>
 800842a:	0034      	movs	r4, r6
 800842c:	2500      	movs	r5, #0
 800842e:	9902      	ldr	r1, [sp, #8]
 8008430:	3414      	adds	r4, #20
 8008432:	3114      	adds	r1, #20
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	c901      	ldmia	r1!, {r0}
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	466b      	mov	r3, sp
 800843c:	891b      	ldrh	r3, [r3, #8]
 800843e:	b282      	uxth	r2, r0
 8008440:	1a9a      	subs	r2, r3, r2
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	1952      	adds	r2, r2, r5
 8008446:	0c00      	lsrs	r0, r0, #16
 8008448:	0c1b      	lsrs	r3, r3, #16
 800844a:	1a1b      	subs	r3, r3, r0
 800844c:	1410      	asrs	r0, r2, #16
 800844e:	181b      	adds	r3, r3, r0
 8008450:	141d      	asrs	r5, r3, #16
 8008452:	b292      	uxth	r2, r2
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	431a      	orrs	r2, r3
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	c404      	stmia	r4!, {r2}
 800845c:	428b      	cmp	r3, r1
 800845e:	d2e9      	bcs.n	8008434 <quorem+0xb0>
 8008460:	9a01      	ldr	r2, [sp, #4]
 8008462:	00bb      	lsls	r3, r7, #2
 8008464:	18d3      	adds	r3, r2, r3
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	2a00      	cmp	r2, #0
 800846a:	d013      	beq.n	8008494 <quorem+0x110>
 800846c:	9b00      	ldr	r3, [sp, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	9800      	ldr	r0, [sp, #0]
 8008474:	b007      	add	sp, #28
 8008476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d104      	bne.n	8008488 <quorem+0x104>
 800847e:	3f01      	subs	r7, #1
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	3c04      	subs	r4, #4
 8008484:	42a3      	cmp	r3, r4
 8008486:	d3f7      	bcc.n	8008478 <quorem+0xf4>
 8008488:	6137      	str	r7, [r6, #16]
 800848a:	e7c8      	b.n	800841e <quorem+0x9a>
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	2a00      	cmp	r2, #0
 8008490:	d104      	bne.n	800849c <quorem+0x118>
 8008492:	3f01      	subs	r7, #1
 8008494:	9a01      	ldr	r2, [sp, #4]
 8008496:	3b04      	subs	r3, #4
 8008498:	429a      	cmp	r2, r3
 800849a:	d3f7      	bcc.n	800848c <quorem+0x108>
 800849c:	6137      	str	r7, [r6, #16]
 800849e:	e7e5      	b.n	800846c <quorem+0xe8>

080084a0 <_dtoa_r>:
 80084a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a2:	0014      	movs	r4, r2
 80084a4:	001d      	movs	r5, r3
 80084a6:	69c6      	ldr	r6, [r0, #28]
 80084a8:	b09d      	sub	sp, #116	@ 0x74
 80084aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80084ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 80084ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80084b0:	9003      	str	r0, [sp, #12]
 80084b2:	2e00      	cmp	r6, #0
 80084b4:	d10f      	bne.n	80084d6 <_dtoa_r+0x36>
 80084b6:	2010      	movs	r0, #16
 80084b8:	f000 fe30 	bl	800911c <malloc>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	1e02      	subs	r2, r0, #0
 80084c0:	61d8      	str	r0, [r3, #28]
 80084c2:	d104      	bne.n	80084ce <_dtoa_r+0x2e>
 80084c4:	21ef      	movs	r1, #239	@ 0xef
 80084c6:	4bc7      	ldr	r3, [pc, #796]	@ (80087e4 <_dtoa_r+0x344>)
 80084c8:	48c7      	ldr	r0, [pc, #796]	@ (80087e8 <_dtoa_r+0x348>)
 80084ca:	f002 fca3 	bl	800ae14 <__assert_func>
 80084ce:	6046      	str	r6, [r0, #4]
 80084d0:	6086      	str	r6, [r0, #8]
 80084d2:	6006      	str	r6, [r0, #0]
 80084d4:	60c6      	str	r6, [r0, #12]
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	6819      	ldr	r1, [r3, #0]
 80084dc:	2900      	cmp	r1, #0
 80084de:	d00b      	beq.n	80084f8 <_dtoa_r+0x58>
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	2301      	movs	r3, #1
 80084e4:	4093      	lsls	r3, r2
 80084e6:	604a      	str	r2, [r1, #4]
 80084e8:	608b      	str	r3, [r1, #8]
 80084ea:	9803      	ldr	r0, [sp, #12]
 80084ec:	f000 ff16 	bl	800931c <_Bfree>
 80084f0:	2200      	movs	r2, #0
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	da1e      	bge.n	800853a <_dtoa_r+0x9a>
 80084fc:	2301      	movs	r3, #1
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	006b      	lsls	r3, r5, #1
 8008502:	085b      	lsrs	r3, r3, #1
 8008504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008506:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008508:	4bb8      	ldr	r3, [pc, #736]	@ (80087ec <_dtoa_r+0x34c>)
 800850a:	4ab8      	ldr	r2, [pc, #736]	@ (80087ec <_dtoa_r+0x34c>)
 800850c:	403b      	ands	r3, r7
 800850e:	4293      	cmp	r3, r2
 8008510:	d116      	bne.n	8008540 <_dtoa_r+0xa0>
 8008512:	4bb7      	ldr	r3, [pc, #732]	@ (80087f0 <_dtoa_r+0x350>)
 8008514:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	033b      	lsls	r3, r7, #12
 800851a:	0b1b      	lsrs	r3, r3, #12
 800851c:	4323      	orrs	r3, r4
 800851e:	d101      	bne.n	8008524 <_dtoa_r+0x84>
 8008520:	f000 fd83 	bl	800902a <_dtoa_r+0xb8a>
 8008524:	4bb3      	ldr	r3, [pc, #716]	@ (80087f4 <_dtoa_r+0x354>)
 8008526:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008528:	9308      	str	r3, [sp, #32]
 800852a:	2a00      	cmp	r2, #0
 800852c:	d002      	beq.n	8008534 <_dtoa_r+0x94>
 800852e:	4bb2      	ldr	r3, [pc, #712]	@ (80087f8 <_dtoa_r+0x358>)
 8008530:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	9808      	ldr	r0, [sp, #32]
 8008536:	b01d      	add	sp, #116	@ 0x74
 8008538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800853a:	2300      	movs	r3, #0
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	e7e2      	b.n	8008506 <_dtoa_r+0x66>
 8008540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008544:	9212      	str	r2, [sp, #72]	@ 0x48
 8008546:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008548:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800854a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800854c:	2200      	movs	r2, #0
 800854e:	2300      	movs	r3, #0
 8008550:	f7f7 ff7c 	bl	800044c <__aeabi_dcmpeq>
 8008554:	1e06      	subs	r6, r0, #0
 8008556:	d00b      	beq.n	8008570 <_dtoa_r+0xd0>
 8008558:	2301      	movs	r3, #1
 800855a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <_dtoa_r+0xca>
 8008564:	4ba5      	ldr	r3, [pc, #660]	@ (80087fc <_dtoa_r+0x35c>)
 8008566:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4ba5      	ldr	r3, [pc, #660]	@ (8008800 <_dtoa_r+0x360>)
 800856c:	9308      	str	r3, [sp, #32]
 800856e:	e7e1      	b.n	8008534 <_dtoa_r+0x94>
 8008570:	ab1a      	add	r3, sp, #104	@ 0x68
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	9803      	ldr	r0, [sp, #12]
 800857a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800857c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800857e:	f001 fa85 	bl	8009a8c <__d2b>
 8008582:	007a      	lsls	r2, r7, #1
 8008584:	9005      	str	r0, [sp, #20]
 8008586:	0d52      	lsrs	r2, r2, #21
 8008588:	d100      	bne.n	800858c <_dtoa_r+0xec>
 800858a:	e07b      	b.n	8008684 <_dtoa_r+0x1e4>
 800858c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800858e:	9618      	str	r6, [sp, #96]	@ 0x60
 8008590:	0319      	lsls	r1, r3, #12
 8008592:	4b9c      	ldr	r3, [pc, #624]	@ (8008804 <_dtoa_r+0x364>)
 8008594:	0b09      	lsrs	r1, r1, #12
 8008596:	430b      	orrs	r3, r1
 8008598:	499b      	ldr	r1, [pc, #620]	@ (8008808 <_dtoa_r+0x368>)
 800859a:	1857      	adds	r7, r2, r1
 800859c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800859e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80085a0:	0019      	movs	r1, r3
 80085a2:	2200      	movs	r2, #0
 80085a4:	4b99      	ldr	r3, [pc, #612]	@ (800880c <_dtoa_r+0x36c>)
 80085a6:	f7f9 ffbb 	bl	8002520 <__aeabi_dsub>
 80085aa:	4a99      	ldr	r2, [pc, #612]	@ (8008810 <_dtoa_r+0x370>)
 80085ac:	4b99      	ldr	r3, [pc, #612]	@ (8008814 <_dtoa_r+0x374>)
 80085ae:	f7f9 fcef 	bl	8001f90 <__aeabi_dmul>
 80085b2:	4a99      	ldr	r2, [pc, #612]	@ (8008818 <_dtoa_r+0x378>)
 80085b4:	4b99      	ldr	r3, [pc, #612]	@ (800881c <_dtoa_r+0x37c>)
 80085b6:	f7f8 fd43 	bl	8001040 <__aeabi_dadd>
 80085ba:	0004      	movs	r4, r0
 80085bc:	0038      	movs	r0, r7
 80085be:	000d      	movs	r5, r1
 80085c0:	f7fa fba8 	bl	8002d14 <__aeabi_i2d>
 80085c4:	4a96      	ldr	r2, [pc, #600]	@ (8008820 <_dtoa_r+0x380>)
 80085c6:	4b97      	ldr	r3, [pc, #604]	@ (8008824 <_dtoa_r+0x384>)
 80085c8:	f7f9 fce2 	bl	8001f90 <__aeabi_dmul>
 80085cc:	0002      	movs	r2, r0
 80085ce:	000b      	movs	r3, r1
 80085d0:	0020      	movs	r0, r4
 80085d2:	0029      	movs	r1, r5
 80085d4:	f7f8 fd34 	bl	8001040 <__aeabi_dadd>
 80085d8:	0004      	movs	r4, r0
 80085da:	000d      	movs	r5, r1
 80085dc:	f7fa fb5e 	bl	8002c9c <__aeabi_d2iz>
 80085e0:	2200      	movs	r2, #0
 80085e2:	9004      	str	r0, [sp, #16]
 80085e4:	2300      	movs	r3, #0
 80085e6:	0020      	movs	r0, r4
 80085e8:	0029      	movs	r1, r5
 80085ea:	f7f7 ff35 	bl	8000458 <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d00b      	beq.n	800860a <_dtoa_r+0x16a>
 80085f2:	9804      	ldr	r0, [sp, #16]
 80085f4:	f7fa fb8e 	bl	8002d14 <__aeabi_i2d>
 80085f8:	002b      	movs	r3, r5
 80085fa:	0022      	movs	r2, r4
 80085fc:	f7f7 ff26 	bl	800044c <__aeabi_dcmpeq>
 8008600:	4243      	negs	r3, r0
 8008602:	4158      	adcs	r0, r3
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	1a1b      	subs	r3, r3, r0
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	2301      	movs	r3, #1
 800860c:	9315      	str	r3, [sp, #84]	@ 0x54
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	2b16      	cmp	r3, #22
 8008612:	d810      	bhi.n	8008636 <_dtoa_r+0x196>
 8008614:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008616:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	4b83      	ldr	r3, [pc, #524]	@ (8008828 <_dtoa_r+0x388>)
 800861c:	00d2      	lsls	r2, r2, #3
 800861e:	189b      	adds	r3, r3, r2
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f7f7 ff18 	bl	8000458 <__aeabi_dcmplt>
 8008628:	2800      	cmp	r0, #0
 800862a:	d047      	beq.n	80086bc <_dtoa_r+0x21c>
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	3b01      	subs	r3, #1
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	9315      	str	r3, [sp, #84]	@ 0x54
 8008636:	2200      	movs	r2, #0
 8008638:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800863a:	9206      	str	r2, [sp, #24]
 800863c:	1bdb      	subs	r3, r3, r7
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	d53e      	bpl.n	80086c0 <_dtoa_r+0x220>
 8008642:	2201      	movs	r2, #1
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	9306      	str	r3, [sp, #24]
 8008648:	2300      	movs	r3, #0
 800864a:	930d      	str	r3, [sp, #52]	@ 0x34
 800864c:	9b04      	ldr	r3, [sp, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	db38      	blt.n	80086c4 <_dtoa_r+0x224>
 8008652:	9a04      	ldr	r2, [sp, #16]
 8008654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008656:	4694      	mov	ip, r2
 8008658:	4463      	add	r3, ip
 800865a:	930d      	str	r3, [sp, #52]	@ 0x34
 800865c:	2300      	movs	r3, #0
 800865e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008660:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008662:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008664:	2401      	movs	r4, #1
 8008666:	2b09      	cmp	r3, #9
 8008668:	d867      	bhi.n	800873a <_dtoa_r+0x29a>
 800866a:	2b05      	cmp	r3, #5
 800866c:	dd02      	ble.n	8008674 <_dtoa_r+0x1d4>
 800866e:	2400      	movs	r4, #0
 8008670:	3b04      	subs	r3, #4
 8008672:	9322      	str	r3, [sp, #136]	@ 0x88
 8008674:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008676:	1e98      	subs	r0, r3, #2
 8008678:	2803      	cmp	r0, #3
 800867a:	d867      	bhi.n	800874c <_dtoa_r+0x2ac>
 800867c:	f7f7 fd4c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008680:	5b383a2b 	.word	0x5b383a2b
 8008684:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008686:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008688:	18f6      	adds	r6, r6, r3
 800868a:	4b68      	ldr	r3, [pc, #416]	@ (800882c <_dtoa_r+0x38c>)
 800868c:	18f2      	adds	r2, r6, r3
 800868e:	2a20      	cmp	r2, #32
 8008690:	dd0f      	ble.n	80086b2 <_dtoa_r+0x212>
 8008692:	2340      	movs	r3, #64	@ 0x40
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	409f      	lsls	r7, r3
 8008698:	4b65      	ldr	r3, [pc, #404]	@ (8008830 <_dtoa_r+0x390>)
 800869a:	0038      	movs	r0, r7
 800869c:	18f3      	adds	r3, r6, r3
 800869e:	40dc      	lsrs	r4, r3
 80086a0:	4320      	orrs	r0, r4
 80086a2:	f7fa fb65 	bl	8002d70 <__aeabi_ui2d>
 80086a6:	2201      	movs	r2, #1
 80086a8:	4b62      	ldr	r3, [pc, #392]	@ (8008834 <_dtoa_r+0x394>)
 80086aa:	1e77      	subs	r7, r6, #1
 80086ac:	18cb      	adds	r3, r1, r3
 80086ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80086b0:	e776      	b.n	80085a0 <_dtoa_r+0x100>
 80086b2:	2320      	movs	r3, #32
 80086b4:	0020      	movs	r0, r4
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	4098      	lsls	r0, r3
 80086ba:	e7f2      	b.n	80086a2 <_dtoa_r+0x202>
 80086bc:	9015      	str	r0, [sp, #84]	@ 0x54
 80086be:	e7ba      	b.n	8008636 <_dtoa_r+0x196>
 80086c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80086c2:	e7c3      	b.n	800864c <_dtoa_r+0x1ac>
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	9a04      	ldr	r2, [sp, #16]
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	9306      	str	r3, [sp, #24]
 80086cc:	4253      	negs	r3, r2
 80086ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086d0:	2300      	movs	r3, #0
 80086d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80086d4:	e7c5      	b.n	8008662 <_dtoa_r+0x1c2>
 80086d6:	2300      	movs	r3, #0
 80086d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80086da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80086de:	9309      	str	r3, [sp, #36]	@ 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dc13      	bgt.n	800870c <_dtoa_r+0x26c>
 80086e4:	2301      	movs	r3, #1
 80086e6:	001a      	movs	r2, r3
 80086e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80086ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ec:	9223      	str	r2, [sp, #140]	@ 0x8c
 80086ee:	e00d      	b.n	800870c <_dtoa_r+0x26c>
 80086f0:	2301      	movs	r3, #1
 80086f2:	e7f1      	b.n	80086d8 <_dtoa_r+0x238>
 80086f4:	2300      	movs	r3, #0
 80086f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80086fa:	4694      	mov	ip, r2
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	4463      	add	r3, ip
 8008700:	930e      	str	r3, [sp, #56]	@ 0x38
 8008702:	3301      	adds	r3, #1
 8008704:	9309      	str	r3, [sp, #36]	@ 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	dc00      	bgt.n	800870c <_dtoa_r+0x26c>
 800870a:	2301      	movs	r3, #1
 800870c:	9a03      	ldr	r2, [sp, #12]
 800870e:	2100      	movs	r1, #0
 8008710:	69d0      	ldr	r0, [r2, #28]
 8008712:	2204      	movs	r2, #4
 8008714:	0015      	movs	r5, r2
 8008716:	3514      	adds	r5, #20
 8008718:	429d      	cmp	r5, r3
 800871a:	d91b      	bls.n	8008754 <_dtoa_r+0x2b4>
 800871c:	6041      	str	r1, [r0, #4]
 800871e:	9803      	ldr	r0, [sp, #12]
 8008720:	f000 fdb8 	bl	8009294 <_Balloc>
 8008724:	9008      	str	r0, [sp, #32]
 8008726:	2800      	cmp	r0, #0
 8008728:	d117      	bne.n	800875a <_dtoa_r+0x2ba>
 800872a:	21b0      	movs	r1, #176	@ 0xb0
 800872c:	4b42      	ldr	r3, [pc, #264]	@ (8008838 <_dtoa_r+0x398>)
 800872e:	482e      	ldr	r0, [pc, #184]	@ (80087e8 <_dtoa_r+0x348>)
 8008730:	9a08      	ldr	r2, [sp, #32]
 8008732:	31ff      	adds	r1, #255	@ 0xff
 8008734:	e6c9      	b.n	80084ca <_dtoa_r+0x2a>
 8008736:	2301      	movs	r3, #1
 8008738:	e7dd      	b.n	80086f6 <_dtoa_r+0x256>
 800873a:	2300      	movs	r3, #0
 800873c:	9410      	str	r4, [sp, #64]	@ 0x40
 800873e:	9322      	str	r3, [sp, #136]	@ 0x88
 8008740:	3b01      	subs	r3, #1
 8008742:	930e      	str	r3, [sp, #56]	@ 0x38
 8008744:	9309      	str	r3, [sp, #36]	@ 0x24
 8008746:	2200      	movs	r2, #0
 8008748:	3313      	adds	r3, #19
 800874a:	e7cf      	b.n	80086ec <_dtoa_r+0x24c>
 800874c:	2301      	movs	r3, #1
 800874e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008750:	3b02      	subs	r3, #2
 8008752:	e7f6      	b.n	8008742 <_dtoa_r+0x2a2>
 8008754:	3101      	adds	r1, #1
 8008756:	0052      	lsls	r2, r2, #1
 8008758:	e7dc      	b.n	8008714 <_dtoa_r+0x274>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	9a08      	ldr	r2, [sp, #32]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	2b0e      	cmp	r3, #14
 8008766:	d900      	bls.n	800876a <_dtoa_r+0x2ca>
 8008768:	e0d9      	b.n	800891e <_dtoa_r+0x47e>
 800876a:	2c00      	cmp	r4, #0
 800876c:	d100      	bne.n	8008770 <_dtoa_r+0x2d0>
 800876e:	e0d6      	b.n	800891e <_dtoa_r+0x47e>
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dd64      	ble.n	8008840 <_dtoa_r+0x3a0>
 8008776:	210f      	movs	r1, #15
 8008778:	9a04      	ldr	r2, [sp, #16]
 800877a:	4b2b      	ldr	r3, [pc, #172]	@ (8008828 <_dtoa_r+0x388>)
 800877c:	400a      	ands	r2, r1
 800877e:	00d2      	lsls	r2, r2, #3
 8008780:	189b      	adds	r3, r3, r2
 8008782:	681e      	ldr	r6, [r3, #0]
 8008784:	685f      	ldr	r7, [r3, #4]
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	2402      	movs	r4, #2
 800878a:	111d      	asrs	r5, r3, #4
 800878c:	05db      	lsls	r3, r3, #23
 800878e:	d50a      	bpl.n	80087a6 <_dtoa_r+0x306>
 8008790:	4b2a      	ldr	r3, [pc, #168]	@ (800883c <_dtoa_r+0x39c>)
 8008792:	400d      	ands	r5, r1
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008798:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800879a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800879c:	f7f8 ffb4 	bl	8001708 <__aeabi_ddiv>
 80087a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80087a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087a4:	3401      	adds	r4, #1
 80087a6:	4b25      	ldr	r3, [pc, #148]	@ (800883c <_dtoa_r+0x39c>)
 80087a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	d108      	bne.n	80087c0 <_dtoa_r+0x320>
 80087ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087b2:	0032      	movs	r2, r6
 80087b4:	003b      	movs	r3, r7
 80087b6:	f7f8 ffa7 	bl	8001708 <__aeabi_ddiv>
 80087ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80087bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087be:	e05a      	b.n	8008876 <_dtoa_r+0x3d6>
 80087c0:	2301      	movs	r3, #1
 80087c2:	421d      	tst	r5, r3
 80087c4:	d009      	beq.n	80087da <_dtoa_r+0x33a>
 80087c6:	18e4      	adds	r4, r4, r3
 80087c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087ca:	0030      	movs	r0, r6
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	0039      	movs	r1, r7
 80087d2:	f7f9 fbdd 	bl	8001f90 <__aeabi_dmul>
 80087d6:	0006      	movs	r6, r0
 80087d8:	000f      	movs	r7, r1
 80087da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087dc:	106d      	asrs	r5, r5, #1
 80087de:	3308      	adds	r3, #8
 80087e0:	e7e2      	b.n	80087a8 <_dtoa_r+0x308>
 80087e2:	46c0      	nop			@ (mov r8, r8)
 80087e4:	0800bd62 	.word	0x0800bd62
 80087e8:	0800bd79 	.word	0x0800bd79
 80087ec:	7ff00000 	.word	0x7ff00000
 80087f0:	0000270f 	.word	0x0000270f
 80087f4:	0800bd5e 	.word	0x0800bd5e
 80087f8:	0800bd61 	.word	0x0800bd61
 80087fc:	0800bd2d 	.word	0x0800bd2d
 8008800:	0800bd2c 	.word	0x0800bd2c
 8008804:	3ff00000 	.word	0x3ff00000
 8008808:	fffffc01 	.word	0xfffffc01
 800880c:	3ff80000 	.word	0x3ff80000
 8008810:	636f4361 	.word	0x636f4361
 8008814:	3fd287a7 	.word	0x3fd287a7
 8008818:	8b60c8b3 	.word	0x8b60c8b3
 800881c:	3fc68a28 	.word	0x3fc68a28
 8008820:	509f79fb 	.word	0x509f79fb
 8008824:	3fd34413 	.word	0x3fd34413
 8008828:	0800be70 	.word	0x0800be70
 800882c:	00000432 	.word	0x00000432
 8008830:	00000412 	.word	0x00000412
 8008834:	fe100000 	.word	0xfe100000
 8008838:	0800bdd1 	.word	0x0800bdd1
 800883c:	0800be48 	.word	0x0800be48
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	2402      	movs	r4, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d016      	beq.n	8008876 <_dtoa_r+0x3d6>
 8008848:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800884a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800884c:	220f      	movs	r2, #15
 800884e:	425d      	negs	r5, r3
 8008850:	402a      	ands	r2, r5
 8008852:	4bd7      	ldr	r3, [pc, #860]	@ (8008bb0 <_dtoa_r+0x710>)
 8008854:	00d2      	lsls	r2, r2, #3
 8008856:	189b      	adds	r3, r3, r2
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f7f9 fb98 	bl	8001f90 <__aeabi_dmul>
 8008860:	2701      	movs	r7, #1
 8008862:	2300      	movs	r3, #0
 8008864:	900a      	str	r0, [sp, #40]	@ 0x28
 8008866:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008868:	4ed2      	ldr	r6, [pc, #840]	@ (8008bb4 <_dtoa_r+0x714>)
 800886a:	112d      	asrs	r5, r5, #4
 800886c:	2d00      	cmp	r5, #0
 800886e:	d000      	beq.n	8008872 <_dtoa_r+0x3d2>
 8008870:	e0ba      	b.n	80089e8 <_dtoa_r+0x548>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1a1      	bne.n	80087ba <_dtoa_r+0x31a>
 8008876:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008878:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800887a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800887c:	2b00      	cmp	r3, #0
 800887e:	d100      	bne.n	8008882 <_dtoa_r+0x3e2>
 8008880:	e0bd      	b.n	80089fe <_dtoa_r+0x55e>
 8008882:	2200      	movs	r2, #0
 8008884:	0030      	movs	r0, r6
 8008886:	0039      	movs	r1, r7
 8008888:	4bcb      	ldr	r3, [pc, #812]	@ (8008bb8 <_dtoa_r+0x718>)
 800888a:	f7f7 fde5 	bl	8000458 <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	d100      	bne.n	8008894 <_dtoa_r+0x3f4>
 8008892:	e0b4      	b.n	80089fe <_dtoa_r+0x55e>
 8008894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d100      	bne.n	800889c <_dtoa_r+0x3fc>
 800889a:	e0b0      	b.n	80089fe <_dtoa_r+0x55e>
 800889c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd39      	ble.n	8008916 <_dtoa_r+0x476>
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	2200      	movs	r2, #0
 80088a6:	3b01      	subs	r3, #1
 80088a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80088aa:	0030      	movs	r0, r6
 80088ac:	4bc3      	ldr	r3, [pc, #780]	@ (8008bbc <_dtoa_r+0x71c>)
 80088ae:	0039      	movs	r1, r7
 80088b0:	f7f9 fb6e 	bl	8001f90 <__aeabi_dmul>
 80088b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80088b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ba:	3401      	adds	r4, #1
 80088bc:	0020      	movs	r0, r4
 80088be:	9311      	str	r3, [sp, #68]	@ 0x44
 80088c0:	f7fa fa28 	bl	8002d14 <__aeabi_i2d>
 80088c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c8:	f7f9 fb62 	bl	8001f90 <__aeabi_dmul>
 80088cc:	4bbc      	ldr	r3, [pc, #752]	@ (8008bc0 <_dtoa_r+0x720>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	f7f8 fbb6 	bl	8001040 <__aeabi_dadd>
 80088d4:	4bbb      	ldr	r3, [pc, #748]	@ (8008bc4 <_dtoa_r+0x724>)
 80088d6:	0006      	movs	r6, r0
 80088d8:	18cf      	adds	r7, r1, r3
 80088da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d000      	beq.n	80088e2 <_dtoa_r+0x442>
 80088e0:	e091      	b.n	8008a06 <_dtoa_r+0x566>
 80088e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088e6:	2200      	movs	r2, #0
 80088e8:	4bb7      	ldr	r3, [pc, #732]	@ (8008bc8 <_dtoa_r+0x728>)
 80088ea:	f7f9 fe19 	bl	8002520 <__aeabi_dsub>
 80088ee:	0032      	movs	r2, r6
 80088f0:	003b      	movs	r3, r7
 80088f2:	0004      	movs	r4, r0
 80088f4:	000d      	movs	r5, r1
 80088f6:	f7f7 fdc3 	bl	8000480 <__aeabi_dcmpgt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d000      	beq.n	8008900 <_dtoa_r+0x460>
 80088fe:	e29d      	b.n	8008e3c <_dtoa_r+0x99c>
 8008900:	2180      	movs	r1, #128	@ 0x80
 8008902:	0609      	lsls	r1, r1, #24
 8008904:	187b      	adds	r3, r7, r1
 8008906:	0032      	movs	r2, r6
 8008908:	0020      	movs	r0, r4
 800890a:	0029      	movs	r1, r5
 800890c:	f7f7 fda4 	bl	8000458 <__aeabi_dcmplt>
 8008910:	2800      	cmp	r0, #0
 8008912:	d000      	beq.n	8008916 <_dtoa_r+0x476>
 8008914:	e130      	b.n	8008b78 <_dtoa_r+0x6d8>
 8008916:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008918:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800891a:	930a      	str	r3, [sp, #40]	@ 0x28
 800891c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800891e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008920:	2b00      	cmp	r3, #0
 8008922:	da00      	bge.n	8008926 <_dtoa_r+0x486>
 8008924:	e177      	b.n	8008c16 <_dtoa_r+0x776>
 8008926:	9a04      	ldr	r2, [sp, #16]
 8008928:	2a0e      	cmp	r2, #14
 800892a:	dd00      	ble.n	800892e <_dtoa_r+0x48e>
 800892c:	e173      	b.n	8008c16 <_dtoa_r+0x776>
 800892e:	4ba0      	ldr	r3, [pc, #640]	@ (8008bb0 <_dtoa_r+0x710>)
 8008930:	00d2      	lsls	r2, r2, #3
 8008932:	189b      	adds	r3, r3, r2
 8008934:	685c      	ldr	r4, [r3, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9306      	str	r3, [sp, #24]
 800893a:	9407      	str	r4, [sp, #28]
 800893c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800893e:	2b00      	cmp	r3, #0
 8008940:	da03      	bge.n	800894a <_dtoa_r+0x4aa>
 8008942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	dc00      	bgt.n	800894a <_dtoa_r+0x4aa>
 8008948:	e106      	b.n	8008b58 <_dtoa_r+0x6b8>
 800894a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800894c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800894e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008950:	9d08      	ldr	r5, [sp, #32]
 8008952:	3b01      	subs	r3, #1
 8008954:	195b      	adds	r3, r3, r5
 8008956:	930a      	str	r3, [sp, #40]	@ 0x28
 8008958:	9a06      	ldr	r2, [sp, #24]
 800895a:	9b07      	ldr	r3, [sp, #28]
 800895c:	0030      	movs	r0, r6
 800895e:	0039      	movs	r1, r7
 8008960:	f7f8 fed2 	bl	8001708 <__aeabi_ddiv>
 8008964:	f7fa f99a 	bl	8002c9c <__aeabi_d2iz>
 8008968:	9009      	str	r0, [sp, #36]	@ 0x24
 800896a:	f7fa f9d3 	bl	8002d14 <__aeabi_i2d>
 800896e:	9a06      	ldr	r2, [sp, #24]
 8008970:	9b07      	ldr	r3, [sp, #28]
 8008972:	f7f9 fb0d 	bl	8001f90 <__aeabi_dmul>
 8008976:	0002      	movs	r2, r0
 8008978:	000b      	movs	r3, r1
 800897a:	0030      	movs	r0, r6
 800897c:	0039      	movs	r1, r7
 800897e:	f7f9 fdcf 	bl	8002520 <__aeabi_dsub>
 8008982:	002b      	movs	r3, r5
 8008984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008986:	3501      	adds	r5, #1
 8008988:	3230      	adds	r2, #48	@ 0x30
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800898e:	002c      	movs	r4, r5
 8008990:	429a      	cmp	r2, r3
 8008992:	d000      	beq.n	8008996 <_dtoa_r+0x4f6>
 8008994:	e131      	b.n	8008bfa <_dtoa_r+0x75a>
 8008996:	0002      	movs	r2, r0
 8008998:	000b      	movs	r3, r1
 800899a:	f7f8 fb51 	bl	8001040 <__aeabi_dadd>
 800899e:	9a06      	ldr	r2, [sp, #24]
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	0006      	movs	r6, r0
 80089a4:	000f      	movs	r7, r1
 80089a6:	f7f7 fd6b 	bl	8000480 <__aeabi_dcmpgt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d000      	beq.n	80089b0 <_dtoa_r+0x510>
 80089ae:	e10f      	b.n	8008bd0 <_dtoa_r+0x730>
 80089b0:	9a06      	ldr	r2, [sp, #24]
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	0030      	movs	r0, r6
 80089b6:	0039      	movs	r1, r7
 80089b8:	f7f7 fd48 	bl	800044c <__aeabi_dcmpeq>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d003      	beq.n	80089c8 <_dtoa_r+0x528>
 80089c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c2:	07dd      	lsls	r5, r3, #31
 80089c4:	d500      	bpl.n	80089c8 <_dtoa_r+0x528>
 80089c6:	e103      	b.n	8008bd0 <_dtoa_r+0x730>
 80089c8:	9905      	ldr	r1, [sp, #20]
 80089ca:	9803      	ldr	r0, [sp, #12]
 80089cc:	f000 fca6 	bl	800931c <_Bfree>
 80089d0:	2300      	movs	r3, #0
 80089d2:	7023      	strb	r3, [r4, #0]
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089d8:	3301      	adds	r3, #1
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d100      	bne.n	80089e4 <_dtoa_r+0x544>
 80089e2:	e5a7      	b.n	8008534 <_dtoa_r+0x94>
 80089e4:	601c      	str	r4, [r3, #0]
 80089e6:	e5a5      	b.n	8008534 <_dtoa_r+0x94>
 80089e8:	423d      	tst	r5, r7
 80089ea:	d005      	beq.n	80089f8 <_dtoa_r+0x558>
 80089ec:	6832      	ldr	r2, [r6, #0]
 80089ee:	6873      	ldr	r3, [r6, #4]
 80089f0:	f7f9 face 	bl	8001f90 <__aeabi_dmul>
 80089f4:	003b      	movs	r3, r7
 80089f6:	3401      	adds	r4, #1
 80089f8:	106d      	asrs	r5, r5, #1
 80089fa:	3608      	adds	r6, #8
 80089fc:	e736      	b.n	800886c <_dtoa_r+0x3cc>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a04:	e75a      	b.n	80088bc <_dtoa_r+0x41c>
 8008a06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a08:	4b69      	ldr	r3, [pc, #420]	@ (8008bb0 <_dtoa_r+0x710>)
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	00d2      	lsls	r2, r2, #3
 8008a0e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d04c      	beq.n	8008ab4 <_dtoa_r+0x614>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	496b      	ldr	r1, [pc, #428]	@ (8008bcc <_dtoa_r+0x72c>)
 8008a1e:	f7f8 fe73 	bl	8001708 <__aeabi_ddiv>
 8008a22:	0032      	movs	r2, r6
 8008a24:	003b      	movs	r3, r7
 8008a26:	f7f9 fd7b 	bl	8002520 <__aeabi_dsub>
 8008a2a:	9a08      	ldr	r2, [sp, #32]
 8008a2c:	0006      	movs	r6, r0
 8008a2e:	4694      	mov	ip, r2
 8008a30:	000f      	movs	r7, r1
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a38:	4463      	add	r3, ip
 8008a3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a40:	f7fa f92c 	bl	8002c9c <__aeabi_d2iz>
 8008a44:	0005      	movs	r5, r0
 8008a46:	f7fa f965 	bl	8002d14 <__aeabi_i2d>
 8008a4a:	0002      	movs	r2, r0
 8008a4c:	000b      	movs	r3, r1
 8008a4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a52:	f7f9 fd65 	bl	8002520 <__aeabi_dsub>
 8008a56:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a58:	3530      	adds	r5, #48	@ 0x30
 8008a5a:	1c5c      	adds	r4, r3, #1
 8008a5c:	701d      	strb	r5, [r3, #0]
 8008a5e:	0032      	movs	r2, r6
 8008a60:	003b      	movs	r3, r7
 8008a62:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a66:	f7f7 fcf7 	bl	8000458 <__aeabi_dcmplt>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d16a      	bne.n	8008b44 <_dtoa_r+0x6a4>
 8008a6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a72:	2000      	movs	r0, #0
 8008a74:	4950      	ldr	r1, [pc, #320]	@ (8008bb8 <_dtoa_r+0x718>)
 8008a76:	f7f9 fd53 	bl	8002520 <__aeabi_dsub>
 8008a7a:	0032      	movs	r2, r6
 8008a7c:	003b      	movs	r3, r7
 8008a7e:	f7f7 fceb 	bl	8000458 <__aeabi_dcmplt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d000      	beq.n	8008a88 <_dtoa_r+0x5e8>
 8008a86:	e0a5      	b.n	8008bd4 <_dtoa_r+0x734>
 8008a88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	d100      	bne.n	8008a90 <_dtoa_r+0x5f0>
 8008a8e:	e742      	b.n	8008916 <_dtoa_r+0x476>
 8008a90:	2200      	movs	r2, #0
 8008a92:	0030      	movs	r0, r6
 8008a94:	0039      	movs	r1, r7
 8008a96:	4b49      	ldr	r3, [pc, #292]	@ (8008bbc <_dtoa_r+0x71c>)
 8008a98:	f7f9 fa7a 	bl	8001f90 <__aeabi_dmul>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	0006      	movs	r6, r0
 8008aa0:	000f      	movs	r7, r1
 8008aa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008aa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008aa6:	4b45      	ldr	r3, [pc, #276]	@ (8008bbc <_dtoa_r+0x71c>)
 8008aa8:	f7f9 fa72 	bl	8001f90 <__aeabi_dmul>
 8008aac:	9416      	str	r4, [sp, #88]	@ 0x58
 8008aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ab0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ab2:	e7c3      	b.n	8008a3c <_dtoa_r+0x59c>
 8008ab4:	0030      	movs	r0, r6
 8008ab6:	0039      	movs	r1, r7
 8008ab8:	f7f9 fa6a 	bl	8001f90 <__aeabi_dmul>
 8008abc:	9d08      	ldr	r5, [sp, #32]
 8008abe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008ac0:	002b      	movs	r3, r5
 8008ac2:	4694      	mov	ip, r2
 8008ac4:	9016      	str	r0, [sp, #88]	@ 0x58
 8008ac6:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008ac8:	4463      	add	r3, ip
 8008aca:	9319      	str	r3, [sp, #100]	@ 0x64
 8008acc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ace:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ad0:	f7fa f8e4 	bl	8002c9c <__aeabi_d2iz>
 8008ad4:	0004      	movs	r4, r0
 8008ad6:	f7fa f91d 	bl	8002d14 <__aeabi_i2d>
 8008ada:	000b      	movs	r3, r1
 8008adc:	0002      	movs	r2, r0
 8008ade:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ae2:	f7f9 fd1d 	bl	8002520 <__aeabi_dsub>
 8008ae6:	3430      	adds	r4, #48	@ 0x30
 8008ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aea:	702c      	strb	r4, [r5, #0]
 8008aec:	3501      	adds	r5, #1
 8008aee:	0006      	movs	r6, r0
 8008af0:	000f      	movs	r7, r1
 8008af2:	42ab      	cmp	r3, r5
 8008af4:	d129      	bne.n	8008b4a <_dtoa_r+0x6aa>
 8008af6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008af8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008afe:	469c      	mov	ip, r3
 8008b00:	2200      	movs	r2, #0
 8008b02:	4b32      	ldr	r3, [pc, #200]	@ (8008bcc <_dtoa_r+0x72c>)
 8008b04:	4464      	add	r4, ip
 8008b06:	f7f8 fa9b 	bl	8001040 <__aeabi_dadd>
 8008b0a:	0002      	movs	r2, r0
 8008b0c:	000b      	movs	r3, r1
 8008b0e:	0030      	movs	r0, r6
 8008b10:	0039      	movs	r1, r7
 8008b12:	f7f7 fcb5 	bl	8000480 <__aeabi_dcmpgt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d15c      	bne.n	8008bd4 <_dtoa_r+0x734>
 8008b1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b1e:	2000      	movs	r0, #0
 8008b20:	492a      	ldr	r1, [pc, #168]	@ (8008bcc <_dtoa_r+0x72c>)
 8008b22:	f7f9 fcfd 	bl	8002520 <__aeabi_dsub>
 8008b26:	0002      	movs	r2, r0
 8008b28:	000b      	movs	r3, r1
 8008b2a:	0030      	movs	r0, r6
 8008b2c:	0039      	movs	r1, r7
 8008b2e:	f7f7 fc93 	bl	8000458 <__aeabi_dcmplt>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d100      	bne.n	8008b38 <_dtoa_r+0x698>
 8008b36:	e6ee      	b.n	8008916 <_dtoa_r+0x476>
 8008b38:	0023      	movs	r3, r4
 8008b3a:	3c01      	subs	r4, #1
 8008b3c:	7822      	ldrb	r2, [r4, #0]
 8008b3e:	2a30      	cmp	r2, #48	@ 0x30
 8008b40:	d0fa      	beq.n	8008b38 <_dtoa_r+0x698>
 8008b42:	001c      	movs	r4, r3
 8008b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	e73e      	b.n	80089c8 <_dtoa_r+0x528>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bbc <_dtoa_r+0x71c>)
 8008b4e:	f7f9 fa1f 	bl	8001f90 <__aeabi_dmul>
 8008b52:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b54:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b56:	e7b9      	b.n	8008acc <_dtoa_r+0x62c>
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10c      	bne.n	8008b78 <_dtoa_r+0x6d8>
 8008b5e:	9806      	ldr	r0, [sp, #24]
 8008b60:	9907      	ldr	r1, [sp, #28]
 8008b62:	2200      	movs	r2, #0
 8008b64:	4b18      	ldr	r3, [pc, #96]	@ (8008bc8 <_dtoa_r+0x728>)
 8008b66:	f7f9 fa13 	bl	8001f90 <__aeabi_dmul>
 8008b6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6e:	f7f7 fc91 	bl	8000494 <__aeabi_dcmpge>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d100      	bne.n	8008b78 <_dtoa_r+0x6d8>
 8008b76:	e164      	b.n	8008e42 <_dtoa_r+0x9a2>
 8008b78:	2600      	movs	r6, #0
 8008b7a:	0037      	movs	r7, r6
 8008b7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b7e:	9c08      	ldr	r4, [sp, #32]
 8008b80:	43db      	mvns	r3, r3
 8008b82:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b84:	2300      	movs	r3, #0
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	0031      	movs	r1, r6
 8008b8a:	9803      	ldr	r0, [sp, #12]
 8008b8c:	f000 fbc6 	bl	800931c <_Bfree>
 8008b90:	2f00      	cmp	r7, #0
 8008b92:	d0d7      	beq.n	8008b44 <_dtoa_r+0x6a4>
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <_dtoa_r+0x706>
 8008b9a:	42bb      	cmp	r3, r7
 8008b9c:	d003      	beq.n	8008ba6 <_dtoa_r+0x706>
 8008b9e:	0019      	movs	r1, r3
 8008ba0:	9803      	ldr	r0, [sp, #12]
 8008ba2:	f000 fbbb 	bl	800931c <_Bfree>
 8008ba6:	0039      	movs	r1, r7
 8008ba8:	9803      	ldr	r0, [sp, #12]
 8008baa:	f000 fbb7 	bl	800931c <_Bfree>
 8008bae:	e7c9      	b.n	8008b44 <_dtoa_r+0x6a4>
 8008bb0:	0800be70 	.word	0x0800be70
 8008bb4:	0800be48 	.word	0x0800be48
 8008bb8:	3ff00000 	.word	0x3ff00000
 8008bbc:	40240000 	.word	0x40240000
 8008bc0:	401c0000 	.word	0x401c0000
 8008bc4:	fcc00000 	.word	0xfcc00000
 8008bc8:	40140000 	.word	0x40140000
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	9b04      	ldr	r3, [sp, #16]
 8008bd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bd4:	0023      	movs	r3, r4
 8008bd6:	001c      	movs	r4, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	2a39      	cmp	r2, #57	@ 0x39
 8008bde:	d108      	bne.n	8008bf2 <_dtoa_r+0x752>
 8008be0:	9a08      	ldr	r2, [sp, #32]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d1f7      	bne.n	8008bd6 <_dtoa_r+0x736>
 8008be6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008be8:	9908      	ldr	r1, [sp, #32]
 8008bea:	3201      	adds	r2, #1
 8008bec:	920c      	str	r2, [sp, #48]	@ 0x30
 8008bee:	2230      	movs	r2, #48	@ 0x30
 8008bf0:	700a      	strb	r2, [r1, #0]
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	3201      	adds	r2, #1
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	e7a4      	b.n	8008b44 <_dtoa_r+0x6a4>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4bc6      	ldr	r3, [pc, #792]	@ (8008f18 <_dtoa_r+0xa78>)
 8008bfe:	f7f9 f9c7 	bl	8001f90 <__aeabi_dmul>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2300      	movs	r3, #0
 8008c06:	0006      	movs	r6, r0
 8008c08:	000f      	movs	r7, r1
 8008c0a:	f7f7 fc1f 	bl	800044c <__aeabi_dcmpeq>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d100      	bne.n	8008c14 <_dtoa_r+0x774>
 8008c12:	e6a1      	b.n	8008958 <_dtoa_r+0x4b8>
 8008c14:	e6d8      	b.n	80089c8 <_dtoa_r+0x528>
 8008c16:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008c18:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008c1a:	9c06      	ldr	r4, [sp, #24]
 8008c1c:	2f00      	cmp	r7, #0
 8008c1e:	d014      	beq.n	8008c4a <_dtoa_r+0x7aa>
 8008c20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008c22:	2a01      	cmp	r2, #1
 8008c24:	dd00      	ble.n	8008c28 <_dtoa_r+0x788>
 8008c26:	e0c8      	b.n	8008dba <_dtoa_r+0x91a>
 8008c28:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	d100      	bne.n	8008c30 <_dtoa_r+0x790>
 8008c2e:	e0be      	b.n	8008dae <_dtoa_r+0x90e>
 8008c30:	4aba      	ldr	r2, [pc, #744]	@ (8008f1c <_dtoa_r+0xa7c>)
 8008c32:	189b      	adds	r3, r3, r2
 8008c34:	9a06      	ldr	r2, [sp, #24]
 8008c36:	2101      	movs	r1, #1
 8008c38:	18d2      	adds	r2, r2, r3
 8008c3a:	9206      	str	r2, [sp, #24]
 8008c3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c3e:	9803      	ldr	r0, [sp, #12]
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c44:	f000 fc6e 	bl	8009524 <__i2b>
 8008c48:	0007      	movs	r7, r0
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d00e      	beq.n	8008c6c <_dtoa_r+0x7cc>
 8008c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd0b      	ble.n	8008c6c <_dtoa_r+0x7cc>
 8008c54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c56:	0023      	movs	r3, r4
 8008c58:	4294      	cmp	r4, r2
 8008c5a:	dd00      	ble.n	8008c5e <_dtoa_r+0x7be>
 8008c5c:	0013      	movs	r3, r2
 8008c5e:	9a06      	ldr	r2, [sp, #24]
 8008c60:	1ae4      	subs	r4, r4, r3
 8008c62:	1ad2      	subs	r2, r2, r3
 8008c64:	9206      	str	r2, [sp, #24]
 8008c66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d01f      	beq.n	8008cb2 <_dtoa_r+0x812>
 8008c72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d100      	bne.n	8008c7a <_dtoa_r+0x7da>
 8008c78:	e0b5      	b.n	8008de6 <_dtoa_r+0x946>
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	d010      	beq.n	8008ca0 <_dtoa_r+0x800>
 8008c7e:	0039      	movs	r1, r7
 8008c80:	002a      	movs	r2, r5
 8008c82:	9803      	ldr	r0, [sp, #12]
 8008c84:	f000 fd18 	bl	80096b8 <__pow5mult>
 8008c88:	9a05      	ldr	r2, [sp, #20]
 8008c8a:	0001      	movs	r1, r0
 8008c8c:	0007      	movs	r7, r0
 8008c8e:	9803      	ldr	r0, [sp, #12]
 8008c90:	f000 fc60 	bl	8009554 <__multiply>
 8008c94:	0006      	movs	r6, r0
 8008c96:	9905      	ldr	r1, [sp, #20]
 8008c98:	9803      	ldr	r0, [sp, #12]
 8008c9a:	f000 fb3f 	bl	800931c <_Bfree>
 8008c9e:	9605      	str	r6, [sp, #20]
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca2:	1b5a      	subs	r2, r3, r5
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	d004      	beq.n	8008cb2 <_dtoa_r+0x812>
 8008ca8:	9905      	ldr	r1, [sp, #20]
 8008caa:	9803      	ldr	r0, [sp, #12]
 8008cac:	f000 fd04 	bl	80096b8 <__pow5mult>
 8008cb0:	9005      	str	r0, [sp, #20]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	9803      	ldr	r0, [sp, #12]
 8008cb6:	f000 fc35 	bl	8009524 <__i2b>
 8008cba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cbc:	0006      	movs	r6, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d100      	bne.n	8008cc4 <_dtoa_r+0x824>
 8008cc2:	e1bc      	b.n	800903e <_dtoa_r+0xb9e>
 8008cc4:	001a      	movs	r2, r3
 8008cc6:	0001      	movs	r1, r0
 8008cc8:	9803      	ldr	r0, [sp, #12]
 8008cca:	f000 fcf5 	bl	80096b8 <__pow5mult>
 8008cce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008cd0:	0006      	movs	r6, r0
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	dc16      	bgt.n	8008d06 <_dtoa_r+0x866>
 8008cd8:	2500      	movs	r5, #0
 8008cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cdc:	42ab      	cmp	r3, r5
 8008cde:	d10e      	bne.n	8008cfe <_dtoa_r+0x85e>
 8008ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ce2:	031b      	lsls	r3, r3, #12
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	d10a      	bne.n	8008cfe <_dtoa_r+0x85e>
 8008ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8008f20 <_dtoa_r+0xa80>)
 8008cea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cec:	4213      	tst	r3, r2
 8008cee:	d006      	beq.n	8008cfe <_dtoa_r+0x85e>
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	3501      	adds	r5, #1
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d00:	2001      	movs	r0, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d008      	beq.n	8008d18 <_dtoa_r+0x878>
 8008d06:	6933      	ldr	r3, [r6, #16]
 8008d08:	3303      	adds	r3, #3
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	18f3      	adds	r3, r6, r3
 8008d0e:	6858      	ldr	r0, [r3, #4]
 8008d10:	f000 fbb8 	bl	8009484 <__hi0bits>
 8008d14:	2320      	movs	r3, #32
 8008d16:	1a18      	subs	r0, r3, r0
 8008d18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d1a:	1818      	adds	r0, r3, r0
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	231f      	movs	r3, #31
 8008d20:	401a      	ands	r2, r3
 8008d22:	4218      	tst	r0, r3
 8008d24:	d065      	beq.n	8008df2 <_dtoa_r+0x952>
 8008d26:	3301      	adds	r3, #1
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	dd5d      	ble.n	8008dea <_dtoa_r+0x94a>
 8008d2e:	231c      	movs	r3, #28
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	9a06      	ldr	r2, [sp, #24]
 8008d34:	18e4      	adds	r4, r4, r3
 8008d36:	18d2      	adds	r2, r2, r3
 8008d38:	9206      	str	r2, [sp, #24]
 8008d3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d3c:	18d3      	adds	r3, r2, r3
 8008d3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd05      	ble.n	8008d52 <_dtoa_r+0x8b2>
 8008d46:	001a      	movs	r2, r3
 8008d48:	9905      	ldr	r1, [sp, #20]
 8008d4a:	9803      	ldr	r0, [sp, #12]
 8008d4c:	f000 fd10 	bl	8009770 <__lshift>
 8008d50:	9005      	str	r0, [sp, #20]
 8008d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd05      	ble.n	8008d64 <_dtoa_r+0x8c4>
 8008d58:	0031      	movs	r1, r6
 8008d5a:	001a      	movs	r2, r3
 8008d5c:	9803      	ldr	r0, [sp, #12]
 8008d5e:	f000 fd07 	bl	8009770 <__lshift>
 8008d62:	0006      	movs	r6, r0
 8008d64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d045      	beq.n	8008df6 <_dtoa_r+0x956>
 8008d6a:	0031      	movs	r1, r6
 8008d6c:	9805      	ldr	r0, [sp, #20]
 8008d6e:	f000 fd6b 	bl	8009848 <__mcmp>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	da3f      	bge.n	8008df6 <_dtoa_r+0x956>
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	220a      	movs	r2, #10
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d7e:	9905      	ldr	r1, [sp, #20]
 8008d80:	2300      	movs	r3, #0
 8008d82:	9803      	ldr	r0, [sp, #12]
 8008d84:	f000 faee 	bl	8009364 <__multadd>
 8008d88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d8a:	9005      	str	r0, [sp, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d100      	bne.n	8008d92 <_dtoa_r+0x8f2>
 8008d90:	e15c      	b.n	800904c <_dtoa_r+0xbac>
 8008d92:	2300      	movs	r3, #0
 8008d94:	0039      	movs	r1, r7
 8008d96:	220a      	movs	r2, #10
 8008d98:	9803      	ldr	r0, [sp, #12]
 8008d9a:	f000 fae3 	bl	8009364 <__multadd>
 8008d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008da0:	0007      	movs	r7, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dc55      	bgt.n	8008e52 <_dtoa_r+0x9b2>
 8008da6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	dc2d      	bgt.n	8008e08 <_dtoa_r+0x968>
 8008dac:	e051      	b.n	8008e52 <_dtoa_r+0x9b2>
 8008dae:	2336      	movs	r3, #54	@ 0x36
 8008db0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008db2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008db4:	9c06      	ldr	r4, [sp, #24]
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	e73c      	b.n	8008c34 <_dtoa_r+0x794>
 8008dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbc:	1e5d      	subs	r5, r3, #1
 8008dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	db08      	blt.n	8008dd6 <_dtoa_r+0x936>
 8008dc4:	1b5d      	subs	r5, r3, r5
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	9c06      	ldr	r4, [sp, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	db00      	blt.n	8008dd0 <_dtoa_r+0x930>
 8008dce:	e731      	b.n	8008c34 <_dtoa_r+0x794>
 8008dd0:	1ae4      	subs	r4, r4, r3
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e72e      	b.n	8008c34 <_dtoa_r+0x794>
 8008dd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008dda:	1aeb      	subs	r3, r5, r3
 8008ddc:	18d3      	adds	r3, r2, r3
 8008dde:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008de0:	9314      	str	r3, [sp, #80]	@ 0x50
 8008de2:	2500      	movs	r5, #0
 8008de4:	e7ef      	b.n	8008dc6 <_dtoa_r+0x926>
 8008de6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008de8:	e75e      	b.n	8008ca8 <_dtoa_r+0x808>
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d0a8      	beq.n	8008d40 <_dtoa_r+0x8a0>
 8008dee:	331c      	adds	r3, #28
 8008df0:	e79f      	b.n	8008d32 <_dtoa_r+0x892>
 8008df2:	0013      	movs	r3, r2
 8008df4:	e7fb      	b.n	8008dee <_dtoa_r+0x94e>
 8008df6:	9b04      	ldr	r3, [sp, #16]
 8008df8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dfc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	dc23      	bgt.n	8008e4a <_dtoa_r+0x9aa>
 8008e02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	dd20      	ble.n	8008e4a <_dtoa_r+0x9aa>
 8008e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d000      	beq.n	8008e10 <_dtoa_r+0x970>
 8008e0e:	e6b5      	b.n	8008b7c <_dtoa_r+0x6dc>
 8008e10:	0031      	movs	r1, r6
 8008e12:	2205      	movs	r2, #5
 8008e14:	9803      	ldr	r0, [sp, #12]
 8008e16:	f000 faa5 	bl	8009364 <__multadd>
 8008e1a:	0006      	movs	r6, r0
 8008e1c:	0001      	movs	r1, r0
 8008e1e:	9805      	ldr	r0, [sp, #20]
 8008e20:	f000 fd12 	bl	8009848 <__mcmp>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	dc00      	bgt.n	8008e2a <_dtoa_r+0x98a>
 8008e28:	e6a8      	b.n	8008b7c <_dtoa_r+0x6dc>
 8008e2a:	9b08      	ldr	r3, [sp, #32]
 8008e2c:	9a08      	ldr	r2, [sp, #32]
 8008e2e:	1c5c      	adds	r4, r3, #1
 8008e30:	2331      	movs	r3, #49	@ 0x31
 8008e32:	7013      	strb	r3, [r2, #0]
 8008e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e36:	3301      	adds	r3, #1
 8008e38:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e3a:	e6a3      	b.n	8008b84 <_dtoa_r+0x6e4>
 8008e3c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008e3e:	0037      	movs	r7, r6
 8008e40:	e7f3      	b.n	8008e2a <_dtoa_r+0x98a>
 8008e42:	9b04      	ldr	r3, [sp, #16]
 8008e44:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008e46:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e48:	e7f9      	b.n	8008e3e <_dtoa_r+0x99e>
 8008e4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d100      	bne.n	8008e52 <_dtoa_r+0x9b2>
 8008e50:	e100      	b.n	8009054 <_dtoa_r+0xbb4>
 8008e52:	2c00      	cmp	r4, #0
 8008e54:	dd05      	ble.n	8008e62 <_dtoa_r+0x9c2>
 8008e56:	0039      	movs	r1, r7
 8008e58:	0022      	movs	r2, r4
 8008e5a:	9803      	ldr	r0, [sp, #12]
 8008e5c:	f000 fc88 	bl	8009770 <__lshift>
 8008e60:	0007      	movs	r7, r0
 8008e62:	0038      	movs	r0, r7
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	d018      	beq.n	8008e9a <_dtoa_r+0x9fa>
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	9803      	ldr	r0, [sp, #12]
 8008e6c:	f000 fa12 	bl	8009294 <_Balloc>
 8008e70:	1e04      	subs	r4, r0, #0
 8008e72:	d105      	bne.n	8008e80 <_dtoa_r+0x9e0>
 8008e74:	0022      	movs	r2, r4
 8008e76:	4b2b      	ldr	r3, [pc, #172]	@ (8008f24 <_dtoa_r+0xa84>)
 8008e78:	482b      	ldr	r0, [pc, #172]	@ (8008f28 <_dtoa_r+0xa88>)
 8008e7a:	492c      	ldr	r1, [pc, #176]	@ (8008f2c <_dtoa_r+0xa8c>)
 8008e7c:	f7ff fb25 	bl	80084ca <_dtoa_r+0x2a>
 8008e80:	0039      	movs	r1, r7
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	310c      	adds	r1, #12
 8008e86:	3202      	adds	r2, #2
 8008e88:	0092      	lsls	r2, r2, #2
 8008e8a:	300c      	adds	r0, #12
 8008e8c:	f001 ffb2 	bl	800adf4 <memcpy>
 8008e90:	2201      	movs	r2, #1
 8008e92:	0021      	movs	r1, r4
 8008e94:	9803      	ldr	r0, [sp, #12]
 8008e96:	f000 fc6b 	bl	8009770 <__lshift>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e9e:	9306      	str	r3, [sp, #24]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	189b      	adds	r3, r3, r2
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	9704      	str	r7, [sp, #16]
 8008ea8:	0007      	movs	r7, r0
 8008eaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eae:	4013      	ands	r3, r2
 8008eb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eb2:	0031      	movs	r1, r6
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	f7ff fa65 	bl	8008384 <quorem>
 8008eba:	9904      	ldr	r1, [sp, #16]
 8008ebc:	0005      	movs	r5, r0
 8008ebe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ec0:	9805      	ldr	r0, [sp, #20]
 8008ec2:	f000 fcc1 	bl	8009848 <__mcmp>
 8008ec6:	003a      	movs	r2, r7
 8008ec8:	900d      	str	r0, [sp, #52]	@ 0x34
 8008eca:	0031      	movs	r1, r6
 8008ecc:	9803      	ldr	r0, [sp, #12]
 8008ece:	f000 fcd7 	bl	8009880 <__mdiff>
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	68c3      	ldr	r3, [r0, #12]
 8008ed6:	0004      	movs	r4, r0
 8008ed8:	3530      	adds	r5, #48	@ 0x30
 8008eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <_dtoa_r+0xa4a>
 8008ee0:	0001      	movs	r1, r0
 8008ee2:	9805      	ldr	r0, [sp, #20]
 8008ee4:	f000 fcb0 	bl	8009848 <__mcmp>
 8008ee8:	9009      	str	r0, [sp, #36]	@ 0x24
 8008eea:	0021      	movs	r1, r4
 8008eec:	9803      	ldr	r0, [sp, #12]
 8008eee:	f000 fa15 	bl	800931c <_Bfree>
 8008ef2:	9b06      	ldr	r3, [sp, #24]
 8008ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef6:	1c5c      	adds	r4, r3, #1
 8008ef8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008efa:	4313      	orrs	r3, r2
 8008efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008efe:	4313      	orrs	r3, r2
 8008f00:	d116      	bne.n	8008f30 <_dtoa_r+0xa90>
 8008f02:	2d39      	cmp	r5, #57	@ 0x39
 8008f04:	d02f      	beq.n	8008f66 <_dtoa_r+0xac6>
 8008f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dd01      	ble.n	8008f10 <_dtoa_r+0xa70>
 8008f0c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008f0e:	3531      	adds	r5, #49	@ 0x31
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	701d      	strb	r5, [r3, #0]
 8008f14:	e638      	b.n	8008b88 <_dtoa_r+0x6e8>
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	40240000 	.word	0x40240000
 8008f1c:	00000433 	.word	0x00000433
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	0800bdd1 	.word	0x0800bdd1
 8008f28:	0800bd79 	.word	0x0800bd79
 8008f2c:	000002ef 	.word	0x000002ef
 8008f30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	db04      	blt.n	8008f40 <_dtoa_r+0xaa0>
 8008f36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	d11e      	bne.n	8008f7e <_dtoa_r+0xade>
 8008f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dde4      	ble.n	8008f10 <_dtoa_r+0xa70>
 8008f46:	9905      	ldr	r1, [sp, #20]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	9803      	ldr	r0, [sp, #12]
 8008f4c:	f000 fc10 	bl	8009770 <__lshift>
 8008f50:	0031      	movs	r1, r6
 8008f52:	9005      	str	r0, [sp, #20]
 8008f54:	f000 fc78 	bl	8009848 <__mcmp>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	dc02      	bgt.n	8008f62 <_dtoa_r+0xac2>
 8008f5c:	d1d8      	bne.n	8008f10 <_dtoa_r+0xa70>
 8008f5e:	07eb      	lsls	r3, r5, #31
 8008f60:	d5d6      	bpl.n	8008f10 <_dtoa_r+0xa70>
 8008f62:	2d39      	cmp	r5, #57	@ 0x39
 8008f64:	d1d2      	bne.n	8008f0c <_dtoa_r+0xa6c>
 8008f66:	2339      	movs	r3, #57	@ 0x39
 8008f68:	9a06      	ldr	r2, [sp, #24]
 8008f6a:	7013      	strb	r3, [r2, #0]
 8008f6c:	0023      	movs	r3, r4
 8008f6e:	001c      	movs	r4, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	2a39      	cmp	r2, #57	@ 0x39
 8008f76:	d04f      	beq.n	8009018 <_dtoa_r+0xb78>
 8008f78:	3201      	adds	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	e604      	b.n	8008b88 <_dtoa_r+0x6e8>
 8008f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dd03      	ble.n	8008f8c <_dtoa_r+0xaec>
 8008f84:	2d39      	cmp	r5, #57	@ 0x39
 8008f86:	d0ee      	beq.n	8008f66 <_dtoa_r+0xac6>
 8008f88:	3501      	adds	r5, #1
 8008f8a:	e7c1      	b.n	8008f10 <_dtoa_r+0xa70>
 8008f8c:	9b06      	ldr	r3, [sp, #24]
 8008f8e:	9a06      	ldr	r2, [sp, #24]
 8008f90:	701d      	strb	r5, [r3, #0]
 8008f92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d02a      	beq.n	8008fee <_dtoa_r+0xb4e>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	9905      	ldr	r1, [sp, #20]
 8008f9e:	9803      	ldr	r0, [sp, #12]
 8008fa0:	f000 f9e0 	bl	8009364 <__multadd>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	9005      	str	r0, [sp, #20]
 8008fa8:	42bb      	cmp	r3, r7
 8008faa:	d109      	bne.n	8008fc0 <_dtoa_r+0xb20>
 8008fac:	2300      	movs	r3, #0
 8008fae:	220a      	movs	r2, #10
 8008fb0:	9904      	ldr	r1, [sp, #16]
 8008fb2:	9803      	ldr	r0, [sp, #12]
 8008fb4:	f000 f9d6 	bl	8009364 <__multadd>
 8008fb8:	9004      	str	r0, [sp, #16]
 8008fba:	0007      	movs	r7, r0
 8008fbc:	9406      	str	r4, [sp, #24]
 8008fbe:	e778      	b.n	8008eb2 <_dtoa_r+0xa12>
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	220a      	movs	r2, #10
 8008fc6:	9803      	ldr	r0, [sp, #12]
 8008fc8:	f000 f9cc 	bl	8009364 <__multadd>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9004      	str	r0, [sp, #16]
 8008fd0:	220a      	movs	r2, #10
 8008fd2:	0039      	movs	r1, r7
 8008fd4:	9803      	ldr	r0, [sp, #12]
 8008fd6:	f000 f9c5 	bl	8009364 <__multadd>
 8008fda:	e7ee      	b.n	8008fba <_dtoa_r+0xb1a>
 8008fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fde:	2401      	movs	r4, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dd00      	ble.n	8008fe6 <_dtoa_r+0xb46>
 8008fe4:	001c      	movs	r4, r3
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	191c      	adds	r4, r3, r4
 8008fea:	2300      	movs	r3, #0
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	9803      	ldr	r0, [sp, #12]
 8008ff4:	f000 fbbc 	bl	8009770 <__lshift>
 8008ff8:	0031      	movs	r1, r6
 8008ffa:	9005      	str	r0, [sp, #20]
 8008ffc:	f000 fc24 	bl	8009848 <__mcmp>
 8009000:	2800      	cmp	r0, #0
 8009002:	dcb3      	bgt.n	8008f6c <_dtoa_r+0xacc>
 8009004:	d101      	bne.n	800900a <_dtoa_r+0xb6a>
 8009006:	07ed      	lsls	r5, r5, #31
 8009008:	d4b0      	bmi.n	8008f6c <_dtoa_r+0xacc>
 800900a:	0023      	movs	r3, r4
 800900c:	001c      	movs	r4, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	2a30      	cmp	r2, #48	@ 0x30
 8009014:	d0fa      	beq.n	800900c <_dtoa_r+0xb6c>
 8009016:	e5b7      	b.n	8008b88 <_dtoa_r+0x6e8>
 8009018:	9a08      	ldr	r2, [sp, #32]
 800901a:	429a      	cmp	r2, r3
 800901c:	d1a7      	bne.n	8008f6e <_dtoa_r+0xace>
 800901e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009020:	3301      	adds	r3, #1
 8009022:	930c      	str	r3, [sp, #48]	@ 0x30
 8009024:	2331      	movs	r3, #49	@ 0x31
 8009026:	7013      	strb	r3, [r2, #0]
 8009028:	e5ae      	b.n	8008b88 <_dtoa_r+0x6e8>
 800902a:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <_dtoa_r+0xbe0>)
 800902c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800902e:	9308      	str	r3, [sp, #32]
 8009030:	4b14      	ldr	r3, [pc, #80]	@ (8009084 <_dtoa_r+0xbe4>)
 8009032:	2a00      	cmp	r2, #0
 8009034:	d001      	beq.n	800903a <_dtoa_r+0xb9a>
 8009036:	f7ff fa7b 	bl	8008530 <_dtoa_r+0x90>
 800903a:	f7ff fa7b 	bl	8008534 <_dtoa_r+0x94>
 800903e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009040:	2b01      	cmp	r3, #1
 8009042:	dc00      	bgt.n	8009046 <_dtoa_r+0xba6>
 8009044:	e648      	b.n	8008cd8 <_dtoa_r+0x838>
 8009046:	2001      	movs	r0, #1
 8009048:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800904a:	e665      	b.n	8008d18 <_dtoa_r+0x878>
 800904c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	dc00      	bgt.n	8009054 <_dtoa_r+0xbb4>
 8009052:	e6d6      	b.n	8008e02 <_dtoa_r+0x962>
 8009054:	2400      	movs	r4, #0
 8009056:	0031      	movs	r1, r6
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	f7ff f993 	bl	8008384 <quorem>
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	3030      	adds	r0, #48	@ 0x30
 8009062:	5518      	strb	r0, [r3, r4]
 8009064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009066:	3401      	adds	r4, #1
 8009068:	0005      	movs	r5, r0
 800906a:	429c      	cmp	r4, r3
 800906c:	dab6      	bge.n	8008fdc <_dtoa_r+0xb3c>
 800906e:	2300      	movs	r3, #0
 8009070:	220a      	movs	r2, #10
 8009072:	9905      	ldr	r1, [sp, #20]
 8009074:	9803      	ldr	r0, [sp, #12]
 8009076:	f000 f975 	bl	8009364 <__multadd>
 800907a:	9005      	str	r0, [sp, #20]
 800907c:	e7eb      	b.n	8009056 <_dtoa_r+0xbb6>
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	0800bd55 	.word	0x0800bd55
 8009084:	0800bd5d 	.word	0x0800bd5d

08009088 <_free_r>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	0005      	movs	r5, r0
 800908c:	1e0c      	subs	r4, r1, #0
 800908e:	d010      	beq.n	80090b2 <_free_r+0x2a>
 8009090:	3c04      	subs	r4, #4
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	da00      	bge.n	800909a <_free_r+0x12>
 8009098:	18e4      	adds	r4, r4, r3
 800909a:	0028      	movs	r0, r5
 800909c:	f000 f8ea 	bl	8009274 <__malloc_lock>
 80090a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009118 <_free_r+0x90>)
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d105      	bne.n	80090b4 <_free_r+0x2c>
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6014      	str	r4, [r2, #0]
 80090ac:	0028      	movs	r0, r5
 80090ae:	f000 f8e9 	bl	8009284 <__malloc_unlock>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d908      	bls.n	80090ca <_free_r+0x42>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	1821      	adds	r1, r4, r0
 80090bc:	428b      	cmp	r3, r1
 80090be:	d1f3      	bne.n	80090a8 <_free_r+0x20>
 80090c0:	6819      	ldr	r1, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	1809      	adds	r1, r1, r0
 80090c6:	6021      	str	r1, [r4, #0]
 80090c8:	e7ee      	b.n	80090a8 <_free_r+0x20>
 80090ca:	001a      	movs	r2, r3
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <_free_r+0x4e>
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	d9f9      	bls.n	80090ca <_free_r+0x42>
 80090d6:	6811      	ldr	r1, [r2, #0]
 80090d8:	1850      	adds	r0, r2, r1
 80090da:	42a0      	cmp	r0, r4
 80090dc:	d10b      	bne.n	80090f6 <_free_r+0x6e>
 80090de:	6820      	ldr	r0, [r4, #0]
 80090e0:	1809      	adds	r1, r1, r0
 80090e2:	1850      	adds	r0, r2, r1
 80090e4:	6011      	str	r1, [r2, #0]
 80090e6:	4283      	cmp	r3, r0
 80090e8:	d1e0      	bne.n	80090ac <_free_r+0x24>
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	1841      	adds	r1, r0, r1
 80090f0:	6011      	str	r1, [r2, #0]
 80090f2:	6053      	str	r3, [r2, #4]
 80090f4:	e7da      	b.n	80090ac <_free_r+0x24>
 80090f6:	42a0      	cmp	r0, r4
 80090f8:	d902      	bls.n	8009100 <_free_r+0x78>
 80090fa:	230c      	movs	r3, #12
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	e7d5      	b.n	80090ac <_free_r+0x24>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	1821      	adds	r1, r4, r0
 8009104:	428b      	cmp	r3, r1
 8009106:	d103      	bne.n	8009110 <_free_r+0x88>
 8009108:	6819      	ldr	r1, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	1809      	adds	r1, r1, r0
 800910e:	6021      	str	r1, [r4, #0]
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6054      	str	r4, [r2, #4]
 8009114:	e7ca      	b.n	80090ac <_free_r+0x24>
 8009116:	46c0      	nop			@ (mov r8, r8)
 8009118:	200004bc 	.word	0x200004bc

0800911c <malloc>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4b03      	ldr	r3, [pc, #12]	@ (800912c <malloc+0x10>)
 8009120:	0001      	movs	r1, r0
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	f000 f826 	bl	8009174 <_malloc_r>
 8009128:	bd10      	pop	{r4, pc}
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	2000001c 	.word	0x2000001c

08009130 <sbrk_aligned>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4e0f      	ldr	r6, [pc, #60]	@ (8009170 <sbrk_aligned+0x40>)
 8009134:	000d      	movs	r5, r1
 8009136:	6831      	ldr	r1, [r6, #0]
 8009138:	0004      	movs	r4, r0
 800913a:	2900      	cmp	r1, #0
 800913c:	d102      	bne.n	8009144 <sbrk_aligned+0x14>
 800913e:	f001 fe47 	bl	800add0 <_sbrk_r>
 8009142:	6030      	str	r0, [r6, #0]
 8009144:	0029      	movs	r1, r5
 8009146:	0020      	movs	r0, r4
 8009148:	f001 fe42 	bl	800add0 <_sbrk_r>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d103      	bne.n	8009158 <sbrk_aligned+0x28>
 8009150:	2501      	movs	r5, #1
 8009152:	426d      	negs	r5, r5
 8009154:	0028      	movs	r0, r5
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	2303      	movs	r3, #3
 800915a:	1cc5      	adds	r5, r0, #3
 800915c:	439d      	bics	r5, r3
 800915e:	42a8      	cmp	r0, r5
 8009160:	d0f8      	beq.n	8009154 <sbrk_aligned+0x24>
 8009162:	1a29      	subs	r1, r5, r0
 8009164:	0020      	movs	r0, r4
 8009166:	f001 fe33 	bl	800add0 <_sbrk_r>
 800916a:	3001      	adds	r0, #1
 800916c:	d1f2      	bne.n	8009154 <sbrk_aligned+0x24>
 800916e:	e7ef      	b.n	8009150 <sbrk_aligned+0x20>
 8009170:	200004b8 	.word	0x200004b8

08009174 <_malloc_r>:
 8009174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009176:	2203      	movs	r2, #3
 8009178:	1ccb      	adds	r3, r1, #3
 800917a:	4393      	bics	r3, r2
 800917c:	3308      	adds	r3, #8
 800917e:	0005      	movs	r5, r0
 8009180:	001f      	movs	r7, r3
 8009182:	2b0c      	cmp	r3, #12
 8009184:	d234      	bcs.n	80091f0 <_malloc_r+0x7c>
 8009186:	270c      	movs	r7, #12
 8009188:	42b9      	cmp	r1, r7
 800918a:	d833      	bhi.n	80091f4 <_malloc_r+0x80>
 800918c:	0028      	movs	r0, r5
 800918e:	f000 f871 	bl	8009274 <__malloc_lock>
 8009192:	4e37      	ldr	r6, [pc, #220]	@ (8009270 <_malloc_r+0xfc>)
 8009194:	6833      	ldr	r3, [r6, #0]
 8009196:	001c      	movs	r4, r3
 8009198:	2c00      	cmp	r4, #0
 800919a:	d12f      	bne.n	80091fc <_malloc_r+0x88>
 800919c:	0039      	movs	r1, r7
 800919e:	0028      	movs	r0, r5
 80091a0:	f7ff ffc6 	bl	8009130 <sbrk_aligned>
 80091a4:	0004      	movs	r4, r0
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d15f      	bne.n	800926a <_malloc_r+0xf6>
 80091aa:	6834      	ldr	r4, [r6, #0]
 80091ac:	9400      	str	r4, [sp, #0]
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d14a      	bne.n	800924a <_malloc_r+0xd6>
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d052      	beq.n	800925e <_malloc_r+0xea>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	0028      	movs	r0, r5
 80091bc:	18e3      	adds	r3, r4, r3
 80091be:	9900      	ldr	r1, [sp, #0]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	f001 fe05 	bl	800add0 <_sbrk_r>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	4283      	cmp	r3, r0
 80091ca:	d148      	bne.n	800925e <_malloc_r+0xea>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	0028      	movs	r0, r5
 80091d0:	1aff      	subs	r7, r7, r3
 80091d2:	0039      	movs	r1, r7
 80091d4:	f7ff ffac 	bl	8009130 <sbrk_aligned>
 80091d8:	3001      	adds	r0, #1
 80091da:	d040      	beq.n	800925e <_malloc_r+0xea>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	19db      	adds	r3, r3, r7
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	6833      	ldr	r3, [r6, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	d133      	bne.n	8009252 <_malloc_r+0xde>
 80091ea:	9b00      	ldr	r3, [sp, #0]
 80091ec:	6033      	str	r3, [r6, #0]
 80091ee:	e019      	b.n	8009224 <_malloc_r+0xb0>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dac9      	bge.n	8009188 <_malloc_r+0x14>
 80091f4:	230c      	movs	r3, #12
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	2000      	movs	r0, #0
 80091fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	1bc9      	subs	r1, r1, r7
 8009200:	d420      	bmi.n	8009244 <_malloc_r+0xd0>
 8009202:	290b      	cmp	r1, #11
 8009204:	d90a      	bls.n	800921c <_malloc_r+0xa8>
 8009206:	19e2      	adds	r2, r4, r7
 8009208:	6027      	str	r7, [r4, #0]
 800920a:	42a3      	cmp	r3, r4
 800920c:	d104      	bne.n	8009218 <_malloc_r+0xa4>
 800920e:	6032      	str	r2, [r6, #0]
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	6011      	str	r1, [r2, #0]
 8009214:	6053      	str	r3, [r2, #4]
 8009216:	e005      	b.n	8009224 <_malloc_r+0xb0>
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	e7f9      	b.n	8009210 <_malloc_r+0x9c>
 800921c:	6862      	ldr	r2, [r4, #4]
 800921e:	42a3      	cmp	r3, r4
 8009220:	d10e      	bne.n	8009240 <_malloc_r+0xcc>
 8009222:	6032      	str	r2, [r6, #0]
 8009224:	0028      	movs	r0, r5
 8009226:	f000 f82d 	bl	8009284 <__malloc_unlock>
 800922a:	0020      	movs	r0, r4
 800922c:	2207      	movs	r2, #7
 800922e:	300b      	adds	r0, #11
 8009230:	1d23      	adds	r3, r4, #4
 8009232:	4390      	bics	r0, r2
 8009234:	1ac2      	subs	r2, r0, r3
 8009236:	4298      	cmp	r0, r3
 8009238:	d0df      	beq.n	80091fa <_malloc_r+0x86>
 800923a:	1a1b      	subs	r3, r3, r0
 800923c:	50a3      	str	r3, [r4, r2]
 800923e:	e7dc      	b.n	80091fa <_malloc_r+0x86>
 8009240:	605a      	str	r2, [r3, #4]
 8009242:	e7ef      	b.n	8009224 <_malloc_r+0xb0>
 8009244:	0023      	movs	r3, r4
 8009246:	6864      	ldr	r4, [r4, #4]
 8009248:	e7a6      	b.n	8009198 <_malloc_r+0x24>
 800924a:	9c00      	ldr	r4, [sp, #0]
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	e7ad      	b.n	80091ae <_malloc_r+0x3a>
 8009252:	001a      	movs	r2, r3
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	42a3      	cmp	r3, r4
 8009258:	d1fb      	bne.n	8009252 <_malloc_r+0xde>
 800925a:	2300      	movs	r3, #0
 800925c:	e7da      	b.n	8009214 <_malloc_r+0xa0>
 800925e:	230c      	movs	r3, #12
 8009260:	0028      	movs	r0, r5
 8009262:	602b      	str	r3, [r5, #0]
 8009264:	f000 f80e 	bl	8009284 <__malloc_unlock>
 8009268:	e7c6      	b.n	80091f8 <_malloc_r+0x84>
 800926a:	6007      	str	r7, [r0, #0]
 800926c:	e7da      	b.n	8009224 <_malloc_r+0xb0>
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	200004bc 	.word	0x200004bc

08009274 <__malloc_lock>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4802      	ldr	r0, [pc, #8]	@ (8009280 <__malloc_lock+0xc>)
 8009278:	f7ff f873 	bl	8008362 <__retarget_lock_acquire_recursive>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	46c0      	nop			@ (mov r8, r8)
 8009280:	200004b4 	.word	0x200004b4

08009284 <__malloc_unlock>:
 8009284:	b510      	push	{r4, lr}
 8009286:	4802      	ldr	r0, [pc, #8]	@ (8009290 <__malloc_unlock+0xc>)
 8009288:	f7ff f86c 	bl	8008364 <__retarget_lock_release_recursive>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	46c0      	nop			@ (mov r8, r8)
 8009290:	200004b4 	.word	0x200004b4

08009294 <_Balloc>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	69c5      	ldr	r5, [r0, #28]
 8009298:	0006      	movs	r6, r0
 800929a:	000c      	movs	r4, r1
 800929c:	2d00      	cmp	r5, #0
 800929e:	d10e      	bne.n	80092be <_Balloc+0x2a>
 80092a0:	2010      	movs	r0, #16
 80092a2:	f7ff ff3b 	bl	800911c <malloc>
 80092a6:	1e02      	subs	r2, r0, #0
 80092a8:	61f0      	str	r0, [r6, #28]
 80092aa:	d104      	bne.n	80092b6 <_Balloc+0x22>
 80092ac:	216b      	movs	r1, #107	@ 0x6b
 80092ae:	4b19      	ldr	r3, [pc, #100]	@ (8009314 <_Balloc+0x80>)
 80092b0:	4819      	ldr	r0, [pc, #100]	@ (8009318 <_Balloc+0x84>)
 80092b2:	f001 fdaf 	bl	800ae14 <__assert_func>
 80092b6:	6045      	str	r5, [r0, #4]
 80092b8:	6085      	str	r5, [r0, #8]
 80092ba:	6005      	str	r5, [r0, #0]
 80092bc:	60c5      	str	r5, [r0, #12]
 80092be:	69f5      	ldr	r5, [r6, #28]
 80092c0:	68eb      	ldr	r3, [r5, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d013      	beq.n	80092ee <_Balloc+0x5a>
 80092c6:	69f3      	ldr	r3, [r6, #28]
 80092c8:	00a2      	lsls	r2, r4, #2
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	189b      	adds	r3, r3, r2
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d118      	bne.n	8009306 <_Balloc+0x72>
 80092d4:	2101      	movs	r1, #1
 80092d6:	000d      	movs	r5, r1
 80092d8:	40a5      	lsls	r5, r4
 80092da:	1d6a      	adds	r2, r5, #5
 80092dc:	0030      	movs	r0, r6
 80092de:	0092      	lsls	r2, r2, #2
 80092e0:	f001 fdb6 	bl	800ae50 <_calloc_r>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d00c      	beq.n	8009302 <_Balloc+0x6e>
 80092e8:	6044      	str	r4, [r0, #4]
 80092ea:	6085      	str	r5, [r0, #8]
 80092ec:	e00d      	b.n	800930a <_Balloc+0x76>
 80092ee:	2221      	movs	r2, #33	@ 0x21
 80092f0:	2104      	movs	r1, #4
 80092f2:	0030      	movs	r0, r6
 80092f4:	f001 fdac 	bl	800ae50 <_calloc_r>
 80092f8:	69f3      	ldr	r3, [r6, #28]
 80092fa:	60e8      	str	r0, [r5, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e1      	bne.n	80092c6 <_Balloc+0x32>
 8009302:	2000      	movs	r0, #0
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	6802      	ldr	r2, [r0, #0]
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	6103      	str	r3, [r0, #16]
 800930e:	60c3      	str	r3, [r0, #12]
 8009310:	e7f8      	b.n	8009304 <_Balloc+0x70>
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	0800bd62 	.word	0x0800bd62
 8009318:	0800bde2 	.word	0x0800bde2

0800931c <_Bfree>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	69c6      	ldr	r6, [r0, #28]
 8009320:	0005      	movs	r5, r0
 8009322:	000c      	movs	r4, r1
 8009324:	2e00      	cmp	r6, #0
 8009326:	d10e      	bne.n	8009346 <_Bfree+0x2a>
 8009328:	2010      	movs	r0, #16
 800932a:	f7ff fef7 	bl	800911c <malloc>
 800932e:	1e02      	subs	r2, r0, #0
 8009330:	61e8      	str	r0, [r5, #28]
 8009332:	d104      	bne.n	800933e <_Bfree+0x22>
 8009334:	218f      	movs	r1, #143	@ 0x8f
 8009336:	4b09      	ldr	r3, [pc, #36]	@ (800935c <_Bfree+0x40>)
 8009338:	4809      	ldr	r0, [pc, #36]	@ (8009360 <_Bfree+0x44>)
 800933a:	f001 fd6b 	bl	800ae14 <__assert_func>
 800933e:	6046      	str	r6, [r0, #4]
 8009340:	6086      	str	r6, [r0, #8]
 8009342:	6006      	str	r6, [r0, #0]
 8009344:	60c6      	str	r6, [r0, #12]
 8009346:	2c00      	cmp	r4, #0
 8009348:	d007      	beq.n	800935a <_Bfree+0x3e>
 800934a:	69eb      	ldr	r3, [r5, #28]
 800934c:	6862      	ldr	r2, [r4, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	189b      	adds	r3, r3, r2
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	6022      	str	r2, [r4, #0]
 8009358:	601c      	str	r4, [r3, #0]
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	0800bd62 	.word	0x0800bd62
 8009360:	0800bde2 	.word	0x0800bde2

08009364 <__multadd>:
 8009364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009366:	000f      	movs	r7, r1
 8009368:	9001      	str	r0, [sp, #4]
 800936a:	000c      	movs	r4, r1
 800936c:	001e      	movs	r6, r3
 800936e:	2000      	movs	r0, #0
 8009370:	690d      	ldr	r5, [r1, #16]
 8009372:	3714      	adds	r7, #20
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	3001      	adds	r0, #1
 8009378:	b299      	uxth	r1, r3
 800937a:	4351      	muls	r1, r2
 800937c:	0c1b      	lsrs	r3, r3, #16
 800937e:	4353      	muls	r3, r2
 8009380:	1989      	adds	r1, r1, r6
 8009382:	0c0e      	lsrs	r6, r1, #16
 8009384:	199b      	adds	r3, r3, r6
 8009386:	0c1e      	lsrs	r6, r3, #16
 8009388:	b289      	uxth	r1, r1
 800938a:	041b      	lsls	r3, r3, #16
 800938c:	185b      	adds	r3, r3, r1
 800938e:	c708      	stmia	r7!, {r3}
 8009390:	4285      	cmp	r5, r0
 8009392:	dcef      	bgt.n	8009374 <__multadd+0x10>
 8009394:	2e00      	cmp	r6, #0
 8009396:	d022      	beq.n	80093de <__multadd+0x7a>
 8009398:	68a3      	ldr	r3, [r4, #8]
 800939a:	42ab      	cmp	r3, r5
 800939c:	dc19      	bgt.n	80093d2 <__multadd+0x6e>
 800939e:	6861      	ldr	r1, [r4, #4]
 80093a0:	9801      	ldr	r0, [sp, #4]
 80093a2:	3101      	adds	r1, #1
 80093a4:	f7ff ff76 	bl	8009294 <_Balloc>
 80093a8:	1e07      	subs	r7, r0, #0
 80093aa:	d105      	bne.n	80093b8 <__multadd+0x54>
 80093ac:	003a      	movs	r2, r7
 80093ae:	21ba      	movs	r1, #186	@ 0xba
 80093b0:	4b0c      	ldr	r3, [pc, #48]	@ (80093e4 <__multadd+0x80>)
 80093b2:	480d      	ldr	r0, [pc, #52]	@ (80093e8 <__multadd+0x84>)
 80093b4:	f001 fd2e 	bl	800ae14 <__assert_func>
 80093b8:	0021      	movs	r1, r4
 80093ba:	6922      	ldr	r2, [r4, #16]
 80093bc:	310c      	adds	r1, #12
 80093be:	3202      	adds	r2, #2
 80093c0:	0092      	lsls	r2, r2, #2
 80093c2:	300c      	adds	r0, #12
 80093c4:	f001 fd16 	bl	800adf4 <memcpy>
 80093c8:	0021      	movs	r1, r4
 80093ca:	9801      	ldr	r0, [sp, #4]
 80093cc:	f7ff ffa6 	bl	800931c <_Bfree>
 80093d0:	003c      	movs	r4, r7
 80093d2:	1d2b      	adds	r3, r5, #4
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	18e3      	adds	r3, r4, r3
 80093d8:	3501      	adds	r5, #1
 80093da:	605e      	str	r6, [r3, #4]
 80093dc:	6125      	str	r5, [r4, #16]
 80093de:	0020      	movs	r0, r4
 80093e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	0800bdd1 	.word	0x0800bdd1
 80093e8:	0800bde2 	.word	0x0800bde2

080093ec <__s2b>:
 80093ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ee:	0007      	movs	r7, r0
 80093f0:	0018      	movs	r0, r3
 80093f2:	000c      	movs	r4, r1
 80093f4:	3008      	adds	r0, #8
 80093f6:	2109      	movs	r1, #9
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	0015      	movs	r5, r2
 80093fc:	f7f6 ff2a 	bl	8000254 <__divsi3>
 8009400:	2301      	movs	r3, #1
 8009402:	2100      	movs	r1, #0
 8009404:	4283      	cmp	r3, r0
 8009406:	db0a      	blt.n	800941e <__s2b+0x32>
 8009408:	0038      	movs	r0, r7
 800940a:	f7ff ff43 	bl	8009294 <_Balloc>
 800940e:	1e01      	subs	r1, r0, #0
 8009410:	d108      	bne.n	8009424 <__s2b+0x38>
 8009412:	000a      	movs	r2, r1
 8009414:	4b19      	ldr	r3, [pc, #100]	@ (800947c <__s2b+0x90>)
 8009416:	481a      	ldr	r0, [pc, #104]	@ (8009480 <__s2b+0x94>)
 8009418:	31d3      	adds	r1, #211	@ 0xd3
 800941a:	f001 fcfb 	bl	800ae14 <__assert_func>
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	3101      	adds	r1, #1
 8009422:	e7ef      	b.n	8009404 <__s2b+0x18>
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	6143      	str	r3, [r0, #20]
 8009428:	2301      	movs	r3, #1
 800942a:	6103      	str	r3, [r0, #16]
 800942c:	2d09      	cmp	r5, #9
 800942e:	dd18      	ble.n	8009462 <__s2b+0x76>
 8009430:	0023      	movs	r3, r4
 8009432:	3309      	adds	r3, #9
 8009434:	001e      	movs	r6, r3
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	1964      	adds	r4, r4, r5
 800943a:	7833      	ldrb	r3, [r6, #0]
 800943c:	220a      	movs	r2, #10
 800943e:	0038      	movs	r0, r7
 8009440:	3b30      	subs	r3, #48	@ 0x30
 8009442:	f7ff ff8f 	bl	8009364 <__multadd>
 8009446:	3601      	adds	r6, #1
 8009448:	0001      	movs	r1, r0
 800944a:	42a6      	cmp	r6, r4
 800944c:	d1f5      	bne.n	800943a <__s2b+0x4e>
 800944e:	002c      	movs	r4, r5
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	3c08      	subs	r4, #8
 8009454:	191c      	adds	r4, r3, r4
 8009456:	002e      	movs	r6, r5
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	429e      	cmp	r6, r3
 800945c:	db04      	blt.n	8009468 <__s2b+0x7c>
 800945e:	0008      	movs	r0, r1
 8009460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009462:	2509      	movs	r5, #9
 8009464:	340a      	adds	r4, #10
 8009466:	e7f6      	b.n	8009456 <__s2b+0x6a>
 8009468:	1b63      	subs	r3, r4, r5
 800946a:	5d9b      	ldrb	r3, [r3, r6]
 800946c:	220a      	movs	r2, #10
 800946e:	0038      	movs	r0, r7
 8009470:	3b30      	subs	r3, #48	@ 0x30
 8009472:	f7ff ff77 	bl	8009364 <__multadd>
 8009476:	3601      	adds	r6, #1
 8009478:	0001      	movs	r1, r0
 800947a:	e7ed      	b.n	8009458 <__s2b+0x6c>
 800947c:	0800bdd1 	.word	0x0800bdd1
 8009480:	0800bde2 	.word	0x0800bde2

08009484 <__hi0bits>:
 8009484:	2280      	movs	r2, #128	@ 0x80
 8009486:	0003      	movs	r3, r0
 8009488:	0252      	lsls	r2, r2, #9
 800948a:	2000      	movs	r0, #0
 800948c:	4293      	cmp	r3, r2
 800948e:	d201      	bcs.n	8009494 <__hi0bits+0x10>
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	3010      	adds	r0, #16
 8009494:	2280      	movs	r2, #128	@ 0x80
 8009496:	0452      	lsls	r2, r2, #17
 8009498:	4293      	cmp	r3, r2
 800949a:	d201      	bcs.n	80094a0 <__hi0bits+0x1c>
 800949c:	3008      	adds	r0, #8
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	2280      	movs	r2, #128	@ 0x80
 80094a2:	0552      	lsls	r2, r2, #21
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d201      	bcs.n	80094ac <__hi0bits+0x28>
 80094a8:	3004      	adds	r0, #4
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	2280      	movs	r2, #128	@ 0x80
 80094ae:	05d2      	lsls	r2, r2, #23
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d201      	bcs.n	80094b8 <__hi0bits+0x34>
 80094b4:	3002      	adds	r0, #2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db03      	blt.n	80094c4 <__hi0bits+0x40>
 80094bc:	3001      	adds	r0, #1
 80094be:	4213      	tst	r3, r2
 80094c0:	d100      	bne.n	80094c4 <__hi0bits+0x40>
 80094c2:	2020      	movs	r0, #32
 80094c4:	4770      	bx	lr

080094c6 <__lo0bits>:
 80094c6:	6803      	ldr	r3, [r0, #0]
 80094c8:	0001      	movs	r1, r0
 80094ca:	2207      	movs	r2, #7
 80094cc:	0018      	movs	r0, r3
 80094ce:	4010      	ands	r0, r2
 80094d0:	4213      	tst	r3, r2
 80094d2:	d00d      	beq.n	80094f0 <__lo0bits+0x2a>
 80094d4:	3a06      	subs	r2, #6
 80094d6:	2000      	movs	r0, #0
 80094d8:	4213      	tst	r3, r2
 80094da:	d105      	bne.n	80094e8 <__lo0bits+0x22>
 80094dc:	3002      	adds	r0, #2
 80094de:	4203      	tst	r3, r0
 80094e0:	d003      	beq.n	80094ea <__lo0bits+0x24>
 80094e2:	40d3      	lsrs	r3, r2
 80094e4:	0010      	movs	r0, r2
 80094e6:	600b      	str	r3, [r1, #0]
 80094e8:	4770      	bx	lr
 80094ea:	089b      	lsrs	r3, r3, #2
 80094ec:	600b      	str	r3, [r1, #0]
 80094ee:	e7fb      	b.n	80094e8 <__lo0bits+0x22>
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	2a00      	cmp	r2, #0
 80094f4:	d101      	bne.n	80094fa <__lo0bits+0x34>
 80094f6:	2010      	movs	r0, #16
 80094f8:	0c1b      	lsrs	r3, r3, #16
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	d101      	bne.n	8009504 <__lo0bits+0x3e>
 8009500:	3008      	adds	r0, #8
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	071a      	lsls	r2, r3, #28
 8009506:	d101      	bne.n	800950c <__lo0bits+0x46>
 8009508:	3004      	adds	r0, #4
 800950a:	091b      	lsrs	r3, r3, #4
 800950c:	079a      	lsls	r2, r3, #30
 800950e:	d101      	bne.n	8009514 <__lo0bits+0x4e>
 8009510:	3002      	adds	r0, #2
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	07da      	lsls	r2, r3, #31
 8009516:	d4e9      	bmi.n	80094ec <__lo0bits+0x26>
 8009518:	3001      	adds	r0, #1
 800951a:	085b      	lsrs	r3, r3, #1
 800951c:	d1e6      	bne.n	80094ec <__lo0bits+0x26>
 800951e:	2020      	movs	r0, #32
 8009520:	e7e2      	b.n	80094e8 <__lo0bits+0x22>
	...

08009524 <__i2b>:
 8009524:	b510      	push	{r4, lr}
 8009526:	000c      	movs	r4, r1
 8009528:	2101      	movs	r1, #1
 800952a:	f7ff feb3 	bl	8009294 <_Balloc>
 800952e:	2800      	cmp	r0, #0
 8009530:	d107      	bne.n	8009542 <__i2b+0x1e>
 8009532:	2146      	movs	r1, #70	@ 0x46
 8009534:	4c05      	ldr	r4, [pc, #20]	@ (800954c <__i2b+0x28>)
 8009536:	0002      	movs	r2, r0
 8009538:	4b05      	ldr	r3, [pc, #20]	@ (8009550 <__i2b+0x2c>)
 800953a:	0020      	movs	r0, r4
 800953c:	31ff      	adds	r1, #255	@ 0xff
 800953e:	f001 fc69 	bl	800ae14 <__assert_func>
 8009542:	2301      	movs	r3, #1
 8009544:	6144      	str	r4, [r0, #20]
 8009546:	6103      	str	r3, [r0, #16]
 8009548:	bd10      	pop	{r4, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	0800bde2 	.word	0x0800bde2
 8009550:	0800bdd1 	.word	0x0800bdd1

08009554 <__multiply>:
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	0014      	movs	r4, r2
 8009558:	690a      	ldr	r2, [r1, #16]
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	000d      	movs	r5, r1
 800955e:	b08b      	sub	sp, #44	@ 0x2c
 8009560:	429a      	cmp	r2, r3
 8009562:	db02      	blt.n	800956a <__multiply+0x16>
 8009564:	0023      	movs	r3, r4
 8009566:	000c      	movs	r4, r1
 8009568:	001d      	movs	r5, r3
 800956a:	6927      	ldr	r7, [r4, #16]
 800956c:	692e      	ldr	r6, [r5, #16]
 800956e:	6861      	ldr	r1, [r4, #4]
 8009570:	19bb      	adds	r3, r7, r6
 8009572:	9303      	str	r3, [sp, #12]
 8009574:	68a3      	ldr	r3, [r4, #8]
 8009576:	19ba      	adds	r2, r7, r6
 8009578:	4293      	cmp	r3, r2
 800957a:	da00      	bge.n	800957e <__multiply+0x2a>
 800957c:	3101      	adds	r1, #1
 800957e:	f7ff fe89 	bl	8009294 <_Balloc>
 8009582:	9002      	str	r0, [sp, #8]
 8009584:	2800      	cmp	r0, #0
 8009586:	d106      	bne.n	8009596 <__multiply+0x42>
 8009588:	21b1      	movs	r1, #177	@ 0xb1
 800958a:	4b49      	ldr	r3, [pc, #292]	@ (80096b0 <__multiply+0x15c>)
 800958c:	4849      	ldr	r0, [pc, #292]	@ (80096b4 <__multiply+0x160>)
 800958e:	9a02      	ldr	r2, [sp, #8]
 8009590:	0049      	lsls	r1, r1, #1
 8009592:	f001 fc3f 	bl	800ae14 <__assert_func>
 8009596:	9b02      	ldr	r3, [sp, #8]
 8009598:	2200      	movs	r2, #0
 800959a:	3314      	adds	r3, #20
 800959c:	469c      	mov	ip, r3
 800959e:	19bb      	adds	r3, r7, r6
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4463      	add	r3, ip
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	4663      	mov	r3, ip
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	428b      	cmp	r3, r1
 80095ac:	d32a      	bcc.n	8009604 <__multiply+0xb0>
 80095ae:	0023      	movs	r3, r4
 80095b0:	00bf      	lsls	r7, r7, #2
 80095b2:	3314      	adds	r3, #20
 80095b4:	3514      	adds	r5, #20
 80095b6:	9308      	str	r3, [sp, #32]
 80095b8:	00b6      	lsls	r6, r6, #2
 80095ba:	19db      	adds	r3, r3, r7
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	19ab      	adds	r3, r5, r6
 80095c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c2:	2304      	movs	r3, #4
 80095c4:	9306      	str	r3, [sp, #24]
 80095c6:	0023      	movs	r3, r4
 80095c8:	9a05      	ldr	r2, [sp, #20]
 80095ca:	3315      	adds	r3, #21
 80095cc:	9501      	str	r5, [sp, #4]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d305      	bcc.n	80095de <__multiply+0x8a>
 80095d2:	1b13      	subs	r3, r2, r4
 80095d4:	3b15      	subs	r3, #21
 80095d6:	089b      	lsrs	r3, r3, #2
 80095d8:	3301      	adds	r3, #1
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	9306      	str	r3, [sp, #24]
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d310      	bcc.n	8009608 <__multiply+0xb4>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dd05      	ble.n	80095f8 <__multiply+0xa4>
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	3b04      	subs	r3, #4
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d056      	beq.n	80096a6 <__multiply+0x152>
 80095f8:	9b02      	ldr	r3, [sp, #8]
 80095fa:	9a03      	ldr	r2, [sp, #12]
 80095fc:	0018      	movs	r0, r3
 80095fe:	611a      	str	r2, [r3, #16]
 8009600:	b00b      	add	sp, #44	@ 0x2c
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	c304      	stmia	r3!, {r2}
 8009606:	e7cf      	b.n	80095a8 <__multiply+0x54>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	b280      	uxth	r0, r0
 800960e:	2800      	cmp	r0, #0
 8009610:	d01e      	beq.n	8009650 <__multiply+0xfc>
 8009612:	4667      	mov	r7, ip
 8009614:	2500      	movs	r5, #0
 8009616:	9e08      	ldr	r6, [sp, #32]
 8009618:	ce02      	ldmia	r6!, {r1}
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	b28b      	uxth	r3, r1
 8009620:	4343      	muls	r3, r0
 8009622:	001a      	movs	r2, r3
 8009624:	466b      	mov	r3, sp
 8009626:	0c09      	lsrs	r1, r1, #16
 8009628:	8b9b      	ldrh	r3, [r3, #28]
 800962a:	4341      	muls	r1, r0
 800962c:	18d3      	adds	r3, r2, r3
 800962e:	9a07      	ldr	r2, [sp, #28]
 8009630:	195b      	adds	r3, r3, r5
 8009632:	0c12      	lsrs	r2, r2, #16
 8009634:	1889      	adds	r1, r1, r2
 8009636:	0c1a      	lsrs	r2, r3, #16
 8009638:	188a      	adds	r2, r1, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	0c15      	lsrs	r5, r2, #16
 800963e:	0412      	lsls	r2, r2, #16
 8009640:	431a      	orrs	r2, r3
 8009642:	9b05      	ldr	r3, [sp, #20]
 8009644:	c704      	stmia	r7!, {r2}
 8009646:	42b3      	cmp	r3, r6
 8009648:	d8e6      	bhi.n	8009618 <__multiply+0xc4>
 800964a:	4663      	mov	r3, ip
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	509d      	str	r5, [r3, r2]
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	0c00      	lsrs	r0, r0, #16
 8009656:	d020      	beq.n	800969a <__multiply+0x146>
 8009658:	4663      	mov	r3, ip
 800965a:	0025      	movs	r5, r4
 800965c:	4661      	mov	r1, ip
 800965e:	2700      	movs	r7, #0
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3514      	adds	r5, #20
 8009664:	682a      	ldr	r2, [r5, #0]
 8009666:	680e      	ldr	r6, [r1, #0]
 8009668:	b292      	uxth	r2, r2
 800966a:	4342      	muls	r2, r0
 800966c:	0c36      	lsrs	r6, r6, #16
 800966e:	1992      	adds	r2, r2, r6
 8009670:	19d2      	adds	r2, r2, r7
 8009672:	0416      	lsls	r6, r2, #16
 8009674:	b29b      	uxth	r3, r3
 8009676:	431e      	orrs	r6, r3
 8009678:	600e      	str	r6, [r1, #0]
 800967a:	cd40      	ldmia	r5!, {r6}
 800967c:	684b      	ldr	r3, [r1, #4]
 800967e:	0c36      	lsrs	r6, r6, #16
 8009680:	4346      	muls	r6, r0
 8009682:	b29b      	uxth	r3, r3
 8009684:	0c12      	lsrs	r2, r2, #16
 8009686:	18f3      	adds	r3, r6, r3
 8009688:	189b      	adds	r3, r3, r2
 800968a:	9a05      	ldr	r2, [sp, #20]
 800968c:	0c1f      	lsrs	r7, r3, #16
 800968e:	3104      	adds	r1, #4
 8009690:	42aa      	cmp	r2, r5
 8009692:	d8e7      	bhi.n	8009664 <__multiply+0x110>
 8009694:	4662      	mov	r2, ip
 8009696:	9906      	ldr	r1, [sp, #24]
 8009698:	5053      	str	r3, [r2, r1]
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	3304      	adds	r3, #4
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	2304      	movs	r3, #4
 80096a2:	449c      	add	ip, r3
 80096a4:	e79b      	b.n	80095de <__multiply+0x8a>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	e79b      	b.n	80095e6 <__multiply+0x92>
 80096ae:	46c0      	nop			@ (mov r8, r8)
 80096b0:	0800bdd1 	.word	0x0800bdd1
 80096b4:	0800bde2 	.word	0x0800bde2

080096b8 <__pow5mult>:
 80096b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ba:	2303      	movs	r3, #3
 80096bc:	0015      	movs	r5, r2
 80096be:	0007      	movs	r7, r0
 80096c0:	000e      	movs	r6, r1
 80096c2:	401a      	ands	r2, r3
 80096c4:	421d      	tst	r5, r3
 80096c6:	d008      	beq.n	80096da <__pow5mult+0x22>
 80096c8:	4925      	ldr	r1, [pc, #148]	@ (8009760 <__pow5mult+0xa8>)
 80096ca:	3a01      	subs	r2, #1
 80096cc:	0092      	lsls	r2, r2, #2
 80096ce:	5852      	ldr	r2, [r2, r1]
 80096d0:	2300      	movs	r3, #0
 80096d2:	0031      	movs	r1, r6
 80096d4:	f7ff fe46 	bl	8009364 <__multadd>
 80096d8:	0006      	movs	r6, r0
 80096da:	10ad      	asrs	r5, r5, #2
 80096dc:	d03d      	beq.n	800975a <__pow5mult+0xa2>
 80096de:	69fc      	ldr	r4, [r7, #28]
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	d10f      	bne.n	8009704 <__pow5mult+0x4c>
 80096e4:	2010      	movs	r0, #16
 80096e6:	f7ff fd19 	bl	800911c <malloc>
 80096ea:	1e02      	subs	r2, r0, #0
 80096ec:	61f8      	str	r0, [r7, #28]
 80096ee:	d105      	bne.n	80096fc <__pow5mult+0x44>
 80096f0:	21b4      	movs	r1, #180	@ 0xb4
 80096f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009764 <__pow5mult+0xac>)
 80096f4:	481c      	ldr	r0, [pc, #112]	@ (8009768 <__pow5mult+0xb0>)
 80096f6:	31ff      	adds	r1, #255	@ 0xff
 80096f8:	f001 fb8c 	bl	800ae14 <__assert_func>
 80096fc:	6044      	str	r4, [r0, #4]
 80096fe:	6084      	str	r4, [r0, #8]
 8009700:	6004      	str	r4, [r0, #0]
 8009702:	60c4      	str	r4, [r0, #12]
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	689c      	ldr	r4, [r3, #8]
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	2c00      	cmp	r4, #0
 800970c:	d108      	bne.n	8009720 <__pow5mult+0x68>
 800970e:	0038      	movs	r0, r7
 8009710:	4916      	ldr	r1, [pc, #88]	@ (800976c <__pow5mult+0xb4>)
 8009712:	f7ff ff07 	bl	8009524 <__i2b>
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	0004      	movs	r4, r0
 800971a:	6098      	str	r0, [r3, #8]
 800971c:	2300      	movs	r3, #0
 800971e:	6003      	str	r3, [r0, #0]
 8009720:	2301      	movs	r3, #1
 8009722:	421d      	tst	r5, r3
 8009724:	d00a      	beq.n	800973c <__pow5mult+0x84>
 8009726:	0031      	movs	r1, r6
 8009728:	0022      	movs	r2, r4
 800972a:	0038      	movs	r0, r7
 800972c:	f7ff ff12 	bl	8009554 <__multiply>
 8009730:	0031      	movs	r1, r6
 8009732:	9001      	str	r0, [sp, #4]
 8009734:	0038      	movs	r0, r7
 8009736:	f7ff fdf1 	bl	800931c <_Bfree>
 800973a:	9e01      	ldr	r6, [sp, #4]
 800973c:	106d      	asrs	r5, r5, #1
 800973e:	d00c      	beq.n	800975a <__pow5mult+0xa2>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	2800      	cmp	r0, #0
 8009744:	d107      	bne.n	8009756 <__pow5mult+0x9e>
 8009746:	0022      	movs	r2, r4
 8009748:	0021      	movs	r1, r4
 800974a:	0038      	movs	r0, r7
 800974c:	f7ff ff02 	bl	8009554 <__multiply>
 8009750:	2300      	movs	r3, #0
 8009752:	6020      	str	r0, [r4, #0]
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	0004      	movs	r4, r0
 8009758:	e7e2      	b.n	8009720 <__pow5mult+0x68>
 800975a:	0030      	movs	r0, r6
 800975c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	0800be3c 	.word	0x0800be3c
 8009764:	0800bd62 	.word	0x0800bd62
 8009768:	0800bde2 	.word	0x0800bde2
 800976c:	00000271 	.word	0x00000271

08009770 <__lshift>:
 8009770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009772:	000c      	movs	r4, r1
 8009774:	0016      	movs	r6, r2
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	1157      	asrs	r7, r2, #5
 800977a:	b085      	sub	sp, #20
 800977c:	18fb      	adds	r3, r7, r3
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	3301      	adds	r3, #1
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	6849      	ldr	r1, [r1, #4]
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	9002      	str	r0, [sp, #8]
 800978a:	9a00      	ldr	r2, [sp, #0]
 800978c:	4293      	cmp	r3, r2
 800978e:	db10      	blt.n	80097b2 <__lshift+0x42>
 8009790:	9802      	ldr	r0, [sp, #8]
 8009792:	f7ff fd7f 	bl	8009294 <_Balloc>
 8009796:	2300      	movs	r3, #0
 8009798:	0001      	movs	r1, r0
 800979a:	0005      	movs	r5, r0
 800979c:	001a      	movs	r2, r3
 800979e:	3114      	adds	r1, #20
 80097a0:	4298      	cmp	r0, r3
 80097a2:	d10c      	bne.n	80097be <__lshift+0x4e>
 80097a4:	21ef      	movs	r1, #239	@ 0xef
 80097a6:	002a      	movs	r2, r5
 80097a8:	4b25      	ldr	r3, [pc, #148]	@ (8009840 <__lshift+0xd0>)
 80097aa:	4826      	ldr	r0, [pc, #152]	@ (8009844 <__lshift+0xd4>)
 80097ac:	0049      	lsls	r1, r1, #1
 80097ae:	f001 fb31 	bl	800ae14 <__assert_func>
 80097b2:	3101      	adds	r1, #1
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	e7e8      	b.n	800978a <__lshift+0x1a>
 80097b8:	0098      	lsls	r0, r3, #2
 80097ba:	500a      	str	r2, [r1, r0]
 80097bc:	3301      	adds	r3, #1
 80097be:	42bb      	cmp	r3, r7
 80097c0:	dbfa      	blt.n	80097b8 <__lshift+0x48>
 80097c2:	43fb      	mvns	r3, r7
 80097c4:	17db      	asrs	r3, r3, #31
 80097c6:	401f      	ands	r7, r3
 80097c8:	00bf      	lsls	r7, r7, #2
 80097ca:	0023      	movs	r3, r4
 80097cc:	201f      	movs	r0, #31
 80097ce:	19c9      	adds	r1, r1, r7
 80097d0:	0037      	movs	r7, r6
 80097d2:	6922      	ldr	r2, [r4, #16]
 80097d4:	3314      	adds	r3, #20
 80097d6:	0092      	lsls	r2, r2, #2
 80097d8:	189a      	adds	r2, r3, r2
 80097da:	4007      	ands	r7, r0
 80097dc:	4206      	tst	r6, r0
 80097de:	d029      	beq.n	8009834 <__lshift+0xc4>
 80097e0:	3001      	adds	r0, #1
 80097e2:	1bc0      	subs	r0, r0, r7
 80097e4:	9003      	str	r0, [sp, #12]
 80097e6:	468c      	mov	ip, r1
 80097e8:	2000      	movs	r0, #0
 80097ea:	681e      	ldr	r6, [r3, #0]
 80097ec:	40be      	lsls	r6, r7
 80097ee:	4306      	orrs	r6, r0
 80097f0:	4660      	mov	r0, ip
 80097f2:	c040      	stmia	r0!, {r6}
 80097f4:	4684      	mov	ip, r0
 80097f6:	9e03      	ldr	r6, [sp, #12]
 80097f8:	cb01      	ldmia	r3!, {r0}
 80097fa:	40f0      	lsrs	r0, r6
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d8f4      	bhi.n	80097ea <__lshift+0x7a>
 8009800:	0026      	movs	r6, r4
 8009802:	3615      	adds	r6, #21
 8009804:	2304      	movs	r3, #4
 8009806:	42b2      	cmp	r2, r6
 8009808:	d304      	bcc.n	8009814 <__lshift+0xa4>
 800980a:	1b13      	subs	r3, r2, r4
 800980c:	3b15      	subs	r3, #21
 800980e:	089b      	lsrs	r3, r3, #2
 8009810:	3301      	adds	r3, #1
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	50c8      	str	r0, [r1, r3]
 8009816:	2800      	cmp	r0, #0
 8009818:	d002      	beq.n	8009820 <__lshift+0xb0>
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	3302      	adds	r3, #2
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	9802      	ldr	r0, [sp, #8]
 8009824:	3b01      	subs	r3, #1
 8009826:	0021      	movs	r1, r4
 8009828:	612b      	str	r3, [r5, #16]
 800982a:	f7ff fd77 	bl	800931c <_Bfree>
 800982e:	0028      	movs	r0, r5
 8009830:	b005      	add	sp, #20
 8009832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009834:	cb01      	ldmia	r3!, {r0}
 8009836:	c101      	stmia	r1!, {r0}
 8009838:	429a      	cmp	r2, r3
 800983a:	d8fb      	bhi.n	8009834 <__lshift+0xc4>
 800983c:	e7f0      	b.n	8009820 <__lshift+0xb0>
 800983e:	46c0      	nop			@ (mov r8, r8)
 8009840:	0800bdd1 	.word	0x0800bdd1
 8009844:	0800bde2 	.word	0x0800bde2

08009848 <__mcmp>:
 8009848:	b530      	push	{r4, r5, lr}
 800984a:	690b      	ldr	r3, [r1, #16]
 800984c:	6904      	ldr	r4, [r0, #16]
 800984e:	0002      	movs	r2, r0
 8009850:	1ae0      	subs	r0, r4, r3
 8009852:	429c      	cmp	r4, r3
 8009854:	d10f      	bne.n	8009876 <__mcmp+0x2e>
 8009856:	3214      	adds	r2, #20
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	3114      	adds	r1, #20
 800985c:	0014      	movs	r4, r2
 800985e:	18c9      	adds	r1, r1, r3
 8009860:	18d2      	adds	r2, r2, r3
 8009862:	3a04      	subs	r2, #4
 8009864:	3904      	subs	r1, #4
 8009866:	6815      	ldr	r5, [r2, #0]
 8009868:	680b      	ldr	r3, [r1, #0]
 800986a:	429d      	cmp	r5, r3
 800986c:	d004      	beq.n	8009878 <__mcmp+0x30>
 800986e:	2001      	movs	r0, #1
 8009870:	429d      	cmp	r5, r3
 8009872:	d200      	bcs.n	8009876 <__mcmp+0x2e>
 8009874:	3802      	subs	r0, #2
 8009876:	bd30      	pop	{r4, r5, pc}
 8009878:	4294      	cmp	r4, r2
 800987a:	d3f2      	bcc.n	8009862 <__mcmp+0x1a>
 800987c:	e7fb      	b.n	8009876 <__mcmp+0x2e>
	...

08009880 <__mdiff>:
 8009880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009882:	000c      	movs	r4, r1
 8009884:	b087      	sub	sp, #28
 8009886:	9000      	str	r0, [sp, #0]
 8009888:	0011      	movs	r1, r2
 800988a:	0020      	movs	r0, r4
 800988c:	0017      	movs	r7, r2
 800988e:	f7ff ffdb 	bl	8009848 <__mcmp>
 8009892:	1e05      	subs	r5, r0, #0
 8009894:	d110      	bne.n	80098b8 <__mdiff+0x38>
 8009896:	0001      	movs	r1, r0
 8009898:	9800      	ldr	r0, [sp, #0]
 800989a:	f7ff fcfb 	bl	8009294 <_Balloc>
 800989e:	1e02      	subs	r2, r0, #0
 80098a0:	d104      	bne.n	80098ac <__mdiff+0x2c>
 80098a2:	4b40      	ldr	r3, [pc, #256]	@ (80099a4 <__mdiff+0x124>)
 80098a4:	4840      	ldr	r0, [pc, #256]	@ (80099a8 <__mdiff+0x128>)
 80098a6:	4941      	ldr	r1, [pc, #260]	@ (80099ac <__mdiff+0x12c>)
 80098a8:	f001 fab4 	bl	800ae14 <__assert_func>
 80098ac:	2301      	movs	r3, #1
 80098ae:	6145      	str	r5, [r0, #20]
 80098b0:	6103      	str	r3, [r0, #16]
 80098b2:	0010      	movs	r0, r2
 80098b4:	b007      	add	sp, #28
 80098b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b8:	2600      	movs	r6, #0
 80098ba:	42b0      	cmp	r0, r6
 80098bc:	da03      	bge.n	80098c6 <__mdiff+0x46>
 80098be:	0023      	movs	r3, r4
 80098c0:	003c      	movs	r4, r7
 80098c2:	001f      	movs	r7, r3
 80098c4:	3601      	adds	r6, #1
 80098c6:	6861      	ldr	r1, [r4, #4]
 80098c8:	9800      	ldr	r0, [sp, #0]
 80098ca:	f7ff fce3 	bl	8009294 <_Balloc>
 80098ce:	1e02      	subs	r2, r0, #0
 80098d0:	d103      	bne.n	80098da <__mdiff+0x5a>
 80098d2:	4b34      	ldr	r3, [pc, #208]	@ (80099a4 <__mdiff+0x124>)
 80098d4:	4834      	ldr	r0, [pc, #208]	@ (80099a8 <__mdiff+0x128>)
 80098d6:	4936      	ldr	r1, [pc, #216]	@ (80099b0 <__mdiff+0x130>)
 80098d8:	e7e6      	b.n	80098a8 <__mdiff+0x28>
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	3414      	adds	r4, #20
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	18e3      	adds	r3, r4, r3
 80098e4:	0021      	movs	r1, r4
 80098e6:	9401      	str	r4, [sp, #4]
 80098e8:	003c      	movs	r4, r7
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	3414      	adds	r4, #20
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	18e3      	adds	r3, r4, r3
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	0003      	movs	r3, r0
 80098f8:	60c6      	str	r6, [r0, #12]
 80098fa:	468c      	mov	ip, r1
 80098fc:	2000      	movs	r0, #0
 80098fe:	3314      	adds	r3, #20
 8009900:	9304      	str	r3, [sp, #16]
 8009902:	9305      	str	r3, [sp, #20]
 8009904:	4663      	mov	r3, ip
 8009906:	cb20      	ldmia	r3!, {r5}
 8009908:	b2a9      	uxth	r1, r5
 800990a:	000e      	movs	r6, r1
 800990c:	469c      	mov	ip, r3
 800990e:	cc08      	ldmia	r4!, {r3}
 8009910:	0c2d      	lsrs	r5, r5, #16
 8009912:	b299      	uxth	r1, r3
 8009914:	1a71      	subs	r1, r6, r1
 8009916:	1809      	adds	r1, r1, r0
 8009918:	0c1b      	lsrs	r3, r3, #16
 800991a:	1408      	asrs	r0, r1, #16
 800991c:	1aeb      	subs	r3, r5, r3
 800991e:	181b      	adds	r3, r3, r0
 8009920:	1418      	asrs	r0, r3, #16
 8009922:	b289      	uxth	r1, r1
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	4319      	orrs	r1, r3
 8009928:	9b05      	ldr	r3, [sp, #20]
 800992a:	c302      	stmia	r3!, {r1}
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	42a3      	cmp	r3, r4
 8009932:	d8e7      	bhi.n	8009904 <__mdiff+0x84>
 8009934:	0039      	movs	r1, r7
 8009936:	9c03      	ldr	r4, [sp, #12]
 8009938:	3115      	adds	r1, #21
 800993a:	2304      	movs	r3, #4
 800993c:	428c      	cmp	r4, r1
 800993e:	d304      	bcc.n	800994a <__mdiff+0xca>
 8009940:	1be3      	subs	r3, r4, r7
 8009942:	3b15      	subs	r3, #21
 8009944:	089b      	lsrs	r3, r3, #2
 8009946:	3301      	adds	r3, #1
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	9901      	ldr	r1, [sp, #4]
 800994c:	18cd      	adds	r5, r1, r3
 800994e:	9904      	ldr	r1, [sp, #16]
 8009950:	002e      	movs	r6, r5
 8009952:	18cb      	adds	r3, r1, r3
 8009954:	001f      	movs	r7, r3
 8009956:	9902      	ldr	r1, [sp, #8]
 8009958:	428e      	cmp	r6, r1
 800995a:	d311      	bcc.n	8009980 <__mdiff+0x100>
 800995c:	9c02      	ldr	r4, [sp, #8]
 800995e:	1ee9      	subs	r1, r5, #3
 8009960:	2000      	movs	r0, #0
 8009962:	428c      	cmp	r4, r1
 8009964:	d304      	bcc.n	8009970 <__mdiff+0xf0>
 8009966:	0021      	movs	r1, r4
 8009968:	3103      	adds	r1, #3
 800996a:	1b49      	subs	r1, r1, r5
 800996c:	0889      	lsrs	r1, r1, #2
 800996e:	0088      	lsls	r0, r1, #2
 8009970:	181b      	adds	r3, r3, r0
 8009972:	3b04      	subs	r3, #4
 8009974:	6819      	ldr	r1, [r3, #0]
 8009976:	2900      	cmp	r1, #0
 8009978:	d010      	beq.n	800999c <__mdiff+0x11c>
 800997a:	9b00      	ldr	r3, [sp, #0]
 800997c:	6113      	str	r3, [r2, #16]
 800997e:	e798      	b.n	80098b2 <__mdiff+0x32>
 8009980:	4684      	mov	ip, r0
 8009982:	ce02      	ldmia	r6!, {r1}
 8009984:	b288      	uxth	r0, r1
 8009986:	4460      	add	r0, ip
 8009988:	1400      	asrs	r0, r0, #16
 800998a:	0c0c      	lsrs	r4, r1, #16
 800998c:	1904      	adds	r4, r0, r4
 800998e:	4461      	add	r1, ip
 8009990:	1420      	asrs	r0, r4, #16
 8009992:	b289      	uxth	r1, r1
 8009994:	0424      	lsls	r4, r4, #16
 8009996:	4321      	orrs	r1, r4
 8009998:	c702      	stmia	r7!, {r1}
 800999a:	e7dc      	b.n	8009956 <__mdiff+0xd6>
 800999c:	9900      	ldr	r1, [sp, #0]
 800999e:	3901      	subs	r1, #1
 80099a0:	9100      	str	r1, [sp, #0]
 80099a2:	e7e6      	b.n	8009972 <__mdiff+0xf2>
 80099a4:	0800bdd1 	.word	0x0800bdd1
 80099a8:	0800bde2 	.word	0x0800bde2
 80099ac:	00000237 	.word	0x00000237
 80099b0:	00000245 	.word	0x00000245

080099b4 <__ulp>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	2400      	movs	r4, #0
 80099b8:	4b0c      	ldr	r3, [pc, #48]	@ (80099ec <__ulp+0x38>)
 80099ba:	4a0d      	ldr	r2, [pc, #52]	@ (80099f0 <__ulp+0x3c>)
 80099bc:	400b      	ands	r3, r1
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	dc06      	bgt.n	80099d2 <__ulp+0x1e>
 80099c4:	425b      	negs	r3, r3
 80099c6:	151a      	asrs	r2, r3, #20
 80099c8:	2a13      	cmp	r2, #19
 80099ca:	dc05      	bgt.n	80099d8 <__ulp+0x24>
 80099cc:	2380      	movs	r3, #128	@ 0x80
 80099ce:	031b      	lsls	r3, r3, #12
 80099d0:	4113      	asrs	r3, r2
 80099d2:	0019      	movs	r1, r3
 80099d4:	0020      	movs	r0, r4
 80099d6:	bd10      	pop	{r4, pc}
 80099d8:	3a14      	subs	r2, #20
 80099da:	2401      	movs	r4, #1
 80099dc:	2a1e      	cmp	r2, #30
 80099de:	dc02      	bgt.n	80099e6 <__ulp+0x32>
 80099e0:	2480      	movs	r4, #128	@ 0x80
 80099e2:	0624      	lsls	r4, r4, #24
 80099e4:	40d4      	lsrs	r4, r2
 80099e6:	2300      	movs	r3, #0
 80099e8:	e7f3      	b.n	80099d2 <__ulp+0x1e>
 80099ea:	46c0      	nop			@ (mov r8, r8)
 80099ec:	7ff00000 	.word	0x7ff00000
 80099f0:	fcc00000 	.word	0xfcc00000

080099f4 <__b2d>:
 80099f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f6:	0006      	movs	r6, r0
 80099f8:	6903      	ldr	r3, [r0, #16]
 80099fa:	3614      	adds	r6, #20
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	18f3      	adds	r3, r6, r3
 8009a00:	1f1d      	subs	r5, r3, #4
 8009a02:	682c      	ldr	r4, [r5, #0]
 8009a04:	000f      	movs	r7, r1
 8009a06:	0020      	movs	r0, r4
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	f7ff fd3b 	bl	8009484 <__hi0bits>
 8009a0e:	2220      	movs	r2, #32
 8009a10:	1a12      	subs	r2, r2, r0
 8009a12:	603a      	str	r2, [r7, #0]
 8009a14:	0003      	movs	r3, r0
 8009a16:	4a1c      	ldr	r2, [pc, #112]	@ (8009a88 <__b2d+0x94>)
 8009a18:	280a      	cmp	r0, #10
 8009a1a:	dc15      	bgt.n	8009a48 <__b2d+0x54>
 8009a1c:	210b      	movs	r1, #11
 8009a1e:	0027      	movs	r7, r4
 8009a20:	1a09      	subs	r1, r1, r0
 8009a22:	40cf      	lsrs	r7, r1
 8009a24:	433a      	orrs	r2, r7
 8009a26:	468c      	mov	ip, r1
 8009a28:	0011      	movs	r1, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	42ae      	cmp	r6, r5
 8009a2e:	d202      	bcs.n	8009a36 <__b2d+0x42>
 8009a30:	9a01      	ldr	r2, [sp, #4]
 8009a32:	3a08      	subs	r2, #8
 8009a34:	6812      	ldr	r2, [r2, #0]
 8009a36:	3315      	adds	r3, #21
 8009a38:	409c      	lsls	r4, r3
 8009a3a:	4663      	mov	r3, ip
 8009a3c:	0027      	movs	r7, r4
 8009a3e:	40da      	lsrs	r2, r3
 8009a40:	4317      	orrs	r7, r2
 8009a42:	0038      	movs	r0, r7
 8009a44:	b003      	add	sp, #12
 8009a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a48:	2700      	movs	r7, #0
 8009a4a:	42ae      	cmp	r6, r5
 8009a4c:	d202      	bcs.n	8009a54 <__b2d+0x60>
 8009a4e:	9d01      	ldr	r5, [sp, #4]
 8009a50:	3d08      	subs	r5, #8
 8009a52:	682f      	ldr	r7, [r5, #0]
 8009a54:	210b      	movs	r1, #11
 8009a56:	4249      	negs	r1, r1
 8009a58:	468c      	mov	ip, r1
 8009a5a:	449c      	add	ip, r3
 8009a5c:	2b0b      	cmp	r3, #11
 8009a5e:	d010      	beq.n	8009a82 <__b2d+0x8e>
 8009a60:	4661      	mov	r1, ip
 8009a62:	2320      	movs	r3, #32
 8009a64:	408c      	lsls	r4, r1
 8009a66:	1a5b      	subs	r3, r3, r1
 8009a68:	0039      	movs	r1, r7
 8009a6a:	40d9      	lsrs	r1, r3
 8009a6c:	430c      	orrs	r4, r1
 8009a6e:	4322      	orrs	r2, r4
 8009a70:	0011      	movs	r1, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	42b5      	cmp	r5, r6
 8009a76:	d901      	bls.n	8009a7c <__b2d+0x88>
 8009a78:	3d04      	subs	r5, #4
 8009a7a:	682a      	ldr	r2, [r5, #0]
 8009a7c:	4664      	mov	r4, ip
 8009a7e:	40a7      	lsls	r7, r4
 8009a80:	e7dd      	b.n	8009a3e <__b2d+0x4a>
 8009a82:	4322      	orrs	r2, r4
 8009a84:	0011      	movs	r1, r2
 8009a86:	e7dc      	b.n	8009a42 <__b2d+0x4e>
 8009a88:	3ff00000 	.word	0x3ff00000

08009a8c <__d2b>:
 8009a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8e:	2101      	movs	r1, #1
 8009a90:	0016      	movs	r6, r2
 8009a92:	001f      	movs	r7, r3
 8009a94:	f7ff fbfe 	bl	8009294 <_Balloc>
 8009a98:	1e04      	subs	r4, r0, #0
 8009a9a:	d105      	bne.n	8009aa8 <__d2b+0x1c>
 8009a9c:	0022      	movs	r2, r4
 8009a9e:	4b25      	ldr	r3, [pc, #148]	@ (8009b34 <__d2b+0xa8>)
 8009aa0:	4825      	ldr	r0, [pc, #148]	@ (8009b38 <__d2b+0xac>)
 8009aa2:	4926      	ldr	r1, [pc, #152]	@ (8009b3c <__d2b+0xb0>)
 8009aa4:	f001 f9b6 	bl	800ae14 <__assert_func>
 8009aa8:	033b      	lsls	r3, r7, #12
 8009aaa:	007d      	lsls	r5, r7, #1
 8009aac:	0b1b      	lsrs	r3, r3, #12
 8009aae:	0d6d      	lsrs	r5, r5, #21
 8009ab0:	d002      	beq.n	8009ab8 <__d2b+0x2c>
 8009ab2:	2280      	movs	r2, #128	@ 0x80
 8009ab4:	0352      	lsls	r2, r2, #13
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2e00      	cmp	r6, #0
 8009abc:	d025      	beq.n	8009b0a <__d2b+0x7e>
 8009abe:	4668      	mov	r0, sp
 8009ac0:	9600      	str	r6, [sp, #0]
 8009ac2:	f7ff fd00 	bl	80094c6 <__lo0bits>
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	9900      	ldr	r1, [sp, #0]
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d01b      	beq.n	8009b06 <__d2b+0x7a>
 8009ace:	2220      	movs	r2, #32
 8009ad0:	001e      	movs	r6, r3
 8009ad2:	1a12      	subs	r2, r2, r0
 8009ad4:	4096      	lsls	r6, r2
 8009ad6:	0032      	movs	r2, r6
 8009ad8:	40c3      	lsrs	r3, r0
 8009ada:	430a      	orrs	r2, r1
 8009adc:	6162      	str	r2, [r4, #20]
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	9e01      	ldr	r6, [sp, #4]
 8009ae2:	61a6      	str	r6, [r4, #24]
 8009ae4:	1e73      	subs	r3, r6, #1
 8009ae6:	419e      	sbcs	r6, r3
 8009ae8:	3601      	adds	r6, #1
 8009aea:	6126      	str	r6, [r4, #16]
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	d014      	beq.n	8009b1a <__d2b+0x8e>
 8009af0:	2635      	movs	r6, #53	@ 0x35
 8009af2:	4b13      	ldr	r3, [pc, #76]	@ (8009b40 <__d2b+0xb4>)
 8009af4:	18ed      	adds	r5, r5, r3
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	182d      	adds	r5, r5, r0
 8009afa:	601d      	str	r5, [r3, #0]
 8009afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afe:	1a36      	subs	r6, r6, r0
 8009b00:	601e      	str	r6, [r3, #0]
 8009b02:	0020      	movs	r0, r4
 8009b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b06:	6161      	str	r1, [r4, #20]
 8009b08:	e7ea      	b.n	8009ae0 <__d2b+0x54>
 8009b0a:	a801      	add	r0, sp, #4
 8009b0c:	f7ff fcdb 	bl	80094c6 <__lo0bits>
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	2601      	movs	r6, #1
 8009b14:	6163      	str	r3, [r4, #20]
 8009b16:	3020      	adds	r0, #32
 8009b18:	e7e7      	b.n	8009aea <__d2b+0x5e>
 8009b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <__d2b+0xb8>)
 8009b1c:	18c0      	adds	r0, r0, r3
 8009b1e:	9b08      	ldr	r3, [sp, #32]
 8009b20:	6018      	str	r0, [r3, #0]
 8009b22:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <__d2b+0xbc>)
 8009b24:	18f3      	adds	r3, r6, r3
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	18e3      	adds	r3, r4, r3
 8009b2a:	6958      	ldr	r0, [r3, #20]
 8009b2c:	f7ff fcaa 	bl	8009484 <__hi0bits>
 8009b30:	0176      	lsls	r6, r6, #5
 8009b32:	e7e3      	b.n	8009afc <__d2b+0x70>
 8009b34:	0800bdd1 	.word	0x0800bdd1
 8009b38:	0800bde2 	.word	0x0800bde2
 8009b3c:	0000030f 	.word	0x0000030f
 8009b40:	fffffbcd 	.word	0xfffffbcd
 8009b44:	fffffbce 	.word	0xfffffbce
 8009b48:	3fffffff 	.word	0x3fffffff

08009b4c <__ratio>:
 8009b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	000f      	movs	r7, r1
 8009b52:	a904      	add	r1, sp, #16
 8009b54:	0006      	movs	r6, r0
 8009b56:	f7ff ff4d 	bl	80099f4 <__b2d>
 8009b5a:	9000      	str	r0, [sp, #0]
 8009b5c:	9101      	str	r1, [sp, #4]
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	9c01      	ldr	r4, [sp, #4]
 8009b62:	0038      	movs	r0, r7
 8009b64:	a905      	add	r1, sp, #20
 8009b66:	9302      	str	r3, [sp, #8]
 8009b68:	9403      	str	r4, [sp, #12]
 8009b6a:	f7ff ff43 	bl	80099f4 <__b2d>
 8009b6e:	000d      	movs	r5, r1
 8009b70:	0002      	movs	r2, r0
 8009b72:	000b      	movs	r3, r1
 8009b74:	6930      	ldr	r0, [r6, #16]
 8009b76:	6939      	ldr	r1, [r7, #16]
 8009b78:	9e04      	ldr	r6, [sp, #16]
 8009b7a:	1a40      	subs	r0, r0, r1
 8009b7c:	9905      	ldr	r1, [sp, #20]
 8009b7e:	0140      	lsls	r0, r0, #5
 8009b80:	1a71      	subs	r1, r6, r1
 8009b82:	1841      	adds	r1, r0, r1
 8009b84:	0508      	lsls	r0, r1, #20
 8009b86:	2900      	cmp	r1, #0
 8009b88:	dd08      	ble.n	8009b9c <__ratio+0x50>
 8009b8a:	9901      	ldr	r1, [sp, #4]
 8009b8c:	1841      	adds	r1, r0, r1
 8009b8e:	9103      	str	r1, [sp, #12]
 8009b90:	9802      	ldr	r0, [sp, #8]
 8009b92:	9903      	ldr	r1, [sp, #12]
 8009b94:	f7f7 fdb8 	bl	8001708 <__aeabi_ddiv>
 8009b98:	b007      	add	sp, #28
 8009b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9c:	1a2b      	subs	r3, r5, r0
 8009b9e:	e7f7      	b.n	8009b90 <__ratio+0x44>

08009ba0 <__copybits>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	0014      	movs	r4, r2
 8009ba4:	0005      	movs	r5, r0
 8009ba6:	3901      	subs	r1, #1
 8009ba8:	6913      	ldr	r3, [r2, #16]
 8009baa:	1149      	asrs	r1, r1, #5
 8009bac:	3101      	adds	r1, #1
 8009bae:	0089      	lsls	r1, r1, #2
 8009bb0:	3414      	adds	r4, #20
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	1841      	adds	r1, r0, r1
 8009bb6:	18e3      	adds	r3, r4, r3
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	d80d      	bhi.n	8009bd8 <__copybits+0x38>
 8009bbc:	0014      	movs	r4, r2
 8009bbe:	3411      	adds	r4, #17
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d803      	bhi.n	8009bce <__copybits+0x2e>
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	3b11      	subs	r3, #17
 8009bca:	089b      	lsrs	r3, r3, #2
 8009bcc:	009d      	lsls	r5, r3, #2
 8009bce:	2300      	movs	r3, #0
 8009bd0:	1940      	adds	r0, r0, r5
 8009bd2:	4281      	cmp	r1, r0
 8009bd4:	d803      	bhi.n	8009bde <__copybits+0x3e>
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
 8009bd8:	cc40      	ldmia	r4!, {r6}
 8009bda:	c540      	stmia	r5!, {r6}
 8009bdc:	e7ec      	b.n	8009bb8 <__copybits+0x18>
 8009bde:	c008      	stmia	r0!, {r3}
 8009be0:	e7f7      	b.n	8009bd2 <__copybits+0x32>

08009be2 <__any_on>:
 8009be2:	0002      	movs	r2, r0
 8009be4:	6900      	ldr	r0, [r0, #16]
 8009be6:	b510      	push	{r4, lr}
 8009be8:	3214      	adds	r2, #20
 8009bea:	114b      	asrs	r3, r1, #5
 8009bec:	4298      	cmp	r0, r3
 8009bee:	db13      	blt.n	8009c18 <__any_on+0x36>
 8009bf0:	dd0c      	ble.n	8009c0c <__any_on+0x2a>
 8009bf2:	241f      	movs	r4, #31
 8009bf4:	0008      	movs	r0, r1
 8009bf6:	4020      	ands	r0, r4
 8009bf8:	4221      	tst	r1, r4
 8009bfa:	d007      	beq.n	8009c0c <__any_on+0x2a>
 8009bfc:	0099      	lsls	r1, r3, #2
 8009bfe:	588c      	ldr	r4, [r1, r2]
 8009c00:	0021      	movs	r1, r4
 8009c02:	40c1      	lsrs	r1, r0
 8009c04:	4081      	lsls	r1, r0
 8009c06:	2001      	movs	r0, #1
 8009c08:	428c      	cmp	r4, r1
 8009c0a:	d104      	bne.n	8009c16 <__any_on+0x34>
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	18d3      	adds	r3, r2, r3
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d803      	bhi.n	8009c1c <__any_on+0x3a>
 8009c14:	2000      	movs	r0, #0
 8009c16:	bd10      	pop	{r4, pc}
 8009c18:	0003      	movs	r3, r0
 8009c1a:	e7f7      	b.n	8009c0c <__any_on+0x2a>
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d0f5      	beq.n	8009c10 <__any_on+0x2e>
 8009c24:	2001      	movs	r0, #1
 8009c26:	e7f6      	b.n	8009c16 <__any_on+0x34>

08009c28 <sulp>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	0016      	movs	r6, r2
 8009c2c:	000d      	movs	r5, r1
 8009c2e:	f7ff fec1 	bl	80099b4 <__ulp>
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d00d      	beq.n	8009c52 <sulp+0x2a>
 8009c36:	236b      	movs	r3, #107	@ 0x6b
 8009c38:	006a      	lsls	r2, r5, #1
 8009c3a:	0d52      	lsrs	r2, r2, #21
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd07      	ble.n	8009c52 <sulp+0x2a>
 8009c42:	2400      	movs	r4, #0
 8009c44:	4a03      	ldr	r2, [pc, #12]	@ (8009c54 <sulp+0x2c>)
 8009c46:	051b      	lsls	r3, r3, #20
 8009c48:	189d      	adds	r5, r3, r2
 8009c4a:	002b      	movs	r3, r5
 8009c4c:	0022      	movs	r2, r4
 8009c4e:	f7f8 f99f 	bl	8001f90 <__aeabi_dmul>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	3ff00000 	.word	0x3ff00000

08009c58 <_strtod_l>:
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	b0a3      	sub	sp, #140	@ 0x8c
 8009c5c:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2600      	movs	r6, #0
 8009c62:	2700      	movs	r7, #0
 8009c64:	9005      	str	r0, [sp, #20]
 8009c66:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c68:	921e      	str	r2, [sp, #120]	@ 0x78
 8009c6a:	911d      	str	r1, [sp, #116]	@ 0x74
 8009c6c:	780a      	ldrb	r2, [r1, #0]
 8009c6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c70:	d053      	beq.n	8009d1a <_strtod_l+0xc2>
 8009c72:	d83f      	bhi.n	8009cf4 <_strtod_l+0x9c>
 8009c74:	2a0d      	cmp	r2, #13
 8009c76:	d839      	bhi.n	8009cec <_strtod_l+0x94>
 8009c78:	2a08      	cmp	r2, #8
 8009c7a:	d839      	bhi.n	8009cf0 <_strtod_l+0x98>
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d042      	beq.n	8009d06 <_strtod_l+0xae>
 8009c80:	2200      	movs	r2, #0
 8009c82:	9212      	str	r2, [sp, #72]	@ 0x48
 8009c84:	2100      	movs	r1, #0
 8009c86:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8009c88:	910c      	str	r1, [sp, #48]	@ 0x30
 8009c8a:	782a      	ldrb	r2, [r5, #0]
 8009c8c:	2a30      	cmp	r2, #48	@ 0x30
 8009c8e:	d000      	beq.n	8009c92 <_strtod_l+0x3a>
 8009c90:	e083      	b.n	8009d9a <_strtod_l+0x142>
 8009c92:	786a      	ldrb	r2, [r5, #1]
 8009c94:	3120      	adds	r1, #32
 8009c96:	438a      	bics	r2, r1
 8009c98:	2a58      	cmp	r2, #88	@ 0x58
 8009c9a:	d000      	beq.n	8009c9e <_strtod_l+0x46>
 8009c9c:	e073      	b.n	8009d86 <_strtod_l+0x12e>
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ca2:	4a95      	ldr	r2, [pc, #596]	@ (8009ef8 <_strtod_l+0x2a0>)
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	ab1e      	add	r3, sp, #120	@ 0x78
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009cae:	a91d      	add	r1, sp, #116	@ 0x74
 8009cb0:	f001 f964 	bl	800af7c <__gethex>
 8009cb4:	230f      	movs	r3, #15
 8009cb6:	0002      	movs	r2, r0
 8009cb8:	401a      	ands	r2, r3
 8009cba:	0004      	movs	r4, r0
 8009cbc:	9206      	str	r2, [sp, #24]
 8009cbe:	4218      	tst	r0, r3
 8009cc0:	d005      	beq.n	8009cce <_strtod_l+0x76>
 8009cc2:	2a06      	cmp	r2, #6
 8009cc4:	d12b      	bne.n	8009d1e <_strtod_l+0xc6>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	3501      	adds	r5, #1
 8009cca:	951d      	str	r5, [sp, #116]	@ 0x74
 8009ccc:	9312      	str	r3, [sp, #72]	@ 0x48
 8009cce:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <_strtod_l+0x82>
 8009cd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009cd6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d019      	beq.n	8009d14 <_strtod_l+0xbc>
 8009ce0:	2380      	movs	r3, #128	@ 0x80
 8009ce2:	0030      	movs	r0, r6
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	18f9      	adds	r1, r7, r3
 8009ce8:	b023      	add	sp, #140	@ 0x8c
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	2a20      	cmp	r2, #32
 8009cee:	d1c7      	bne.n	8009c80 <_strtod_l+0x28>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	e7ba      	b.n	8009c6a <_strtod_l+0x12>
 8009cf4:	2a2d      	cmp	r2, #45	@ 0x2d
 8009cf6:	d1c3      	bne.n	8009c80 <_strtod_l+0x28>
 8009cf8:	3a2c      	subs	r2, #44	@ 0x2c
 8009cfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8009cfc:	1c4a      	adds	r2, r1, #1
 8009cfe:	921d      	str	r2, [sp, #116]	@ 0x74
 8009d00:	784a      	ldrb	r2, [r1, #1]
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d1be      	bne.n	8009c84 <_strtod_l+0x2c>
 8009d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d08:	931d      	str	r3, [sp, #116]	@ 0x74
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1df      	bne.n	8009cd4 <_strtod_l+0x7c>
 8009d14:	0030      	movs	r0, r6
 8009d16:	0039      	movs	r1, r7
 8009d18:	e7e6      	b.n	8009ce8 <_strtod_l+0x90>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	e7ed      	b.n	8009cfa <_strtod_l+0xa2>
 8009d1e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d007      	beq.n	8009d34 <_strtod_l+0xdc>
 8009d24:	2135      	movs	r1, #53	@ 0x35
 8009d26:	a820      	add	r0, sp, #128	@ 0x80
 8009d28:	f7ff ff3a 	bl	8009ba0 <__copybits>
 8009d2c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009d2e:	9805      	ldr	r0, [sp, #20]
 8009d30:	f7ff faf4 	bl	800931c <_Bfree>
 8009d34:	9806      	ldr	r0, [sp, #24]
 8009d36:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009d38:	3801      	subs	r0, #1
 8009d3a:	2804      	cmp	r0, #4
 8009d3c:	d806      	bhi.n	8009d4c <_strtod_l+0xf4>
 8009d3e:	f7f6 f9eb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009d42:	0312      	.short	0x0312
 8009d44:	1e1c      	.short	0x1e1c
 8009d46:	12          	.byte	0x12
 8009d47:	00          	.byte	0x00
 8009d48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d4a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009d4c:	05e4      	lsls	r4, r4, #23
 8009d4e:	d502      	bpl.n	8009d56 <_strtod_l+0xfe>
 8009d50:	2380      	movs	r3, #128	@ 0x80
 8009d52:	061b      	lsls	r3, r3, #24
 8009d54:	431f      	orrs	r7, r3
 8009d56:	4b69      	ldr	r3, [pc, #420]	@ (8009efc <_strtod_l+0x2a4>)
 8009d58:	423b      	tst	r3, r7
 8009d5a:	d1b8      	bne.n	8009cce <_strtod_l+0x76>
 8009d5c:	f7fe fad6 	bl	800830c <__errno>
 8009d60:	2322      	movs	r3, #34	@ 0x22
 8009d62:	6003      	str	r3, [r0, #0]
 8009d64:	e7b3      	b.n	8009cce <_strtod_l+0x76>
 8009d66:	4966      	ldr	r1, [pc, #408]	@ (8009f00 <_strtod_l+0x2a8>)
 8009d68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009d6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d6c:	400a      	ands	r2, r1
 8009d6e:	4965      	ldr	r1, [pc, #404]	@ (8009f04 <_strtod_l+0x2ac>)
 8009d70:	185b      	adds	r3, r3, r1
 8009d72:	051b      	lsls	r3, r3, #20
 8009d74:	431a      	orrs	r2, r3
 8009d76:	0017      	movs	r7, r2
 8009d78:	e7e8      	b.n	8009d4c <_strtod_l+0xf4>
 8009d7a:	4f60      	ldr	r7, [pc, #384]	@ (8009efc <_strtod_l+0x2a4>)
 8009d7c:	e7e6      	b.n	8009d4c <_strtod_l+0xf4>
 8009d7e:	2601      	movs	r6, #1
 8009d80:	4f61      	ldr	r7, [pc, #388]	@ (8009f08 <_strtod_l+0x2b0>)
 8009d82:	4276      	negs	r6, r6
 8009d84:	e7e2      	b.n	8009d4c <_strtod_l+0xf4>
 8009d86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	921d      	str	r2, [sp, #116]	@ 0x74
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	2b30      	cmp	r3, #48	@ 0x30
 8009d90:	d0f9      	beq.n	8009d86 <_strtod_l+0x12e>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d09b      	beq.n	8009cce <_strtod_l+0x76>
 8009d96:	2301      	movs	r3, #1
 8009d98:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009da0:	950d      	str	r5, [sp, #52]	@ 0x34
 8009da2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009da4:	9508      	str	r5, [sp, #32]
 8009da6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009da8:	7804      	ldrb	r4, [r0, #0]
 8009daa:	0023      	movs	r3, r4
 8009dac:	3b30      	subs	r3, #48	@ 0x30
 8009dae:	b2d9      	uxtb	r1, r3
 8009db0:	2909      	cmp	r1, #9
 8009db2:	d927      	bls.n	8009e04 <_strtod_l+0x1ac>
 8009db4:	2201      	movs	r2, #1
 8009db6:	4955      	ldr	r1, [pc, #340]	@ (8009f0c <_strtod_l+0x2b4>)
 8009db8:	f000 fff8 	bl	800adac <strncmp>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d031      	beq.n	8009e24 <_strtod_l+0x1cc>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	0023      	movs	r3, r4
 8009dc4:	4684      	mov	ip, r0
 8009dc6:	9a08      	ldr	r2, [sp, #32]
 8009dc8:	900e      	str	r0, [sp, #56]	@ 0x38
 8009dca:	9206      	str	r2, [sp, #24]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	0019      	movs	r1, r3
 8009dd0:	4391      	bics	r1, r2
 8009dd2:	000a      	movs	r2, r1
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	9107      	str	r1, [sp, #28]
 8009dd8:	2a45      	cmp	r2, #69	@ 0x45
 8009dda:	d000      	beq.n	8009dde <_strtod_l+0x186>
 8009ddc:	e0c0      	b.n	8009f60 <_strtod_l+0x308>
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009de2:	4303      	orrs	r3, r0
 8009de4:	4313      	orrs	r3, r2
 8009de6:	428b      	cmp	r3, r1
 8009de8:	d08d      	beq.n	8009d06 <_strtod_l+0xae>
 8009dea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dee:	3301      	adds	r3, #1
 8009df0:	931d      	str	r3, [sp, #116]	@ 0x74
 8009df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df4:	785b      	ldrb	r3, [r3, #1]
 8009df6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009df8:	d070      	beq.n	8009edc <_strtod_l+0x284>
 8009dfa:	000c      	movs	r4, r1
 8009dfc:	2b2d      	cmp	r3, #45	@ 0x2d
 8009dfe:	d173      	bne.n	8009ee8 <_strtod_l+0x290>
 8009e00:	2401      	movs	r4, #1
 8009e02:	e06c      	b.n	8009ede <_strtod_l+0x286>
 8009e04:	9908      	ldr	r1, [sp, #32]
 8009e06:	2908      	cmp	r1, #8
 8009e08:	dc09      	bgt.n	8009e1e <_strtod_l+0x1c6>
 8009e0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009e0c:	4351      	muls	r1, r2
 8009e0e:	185b      	adds	r3, r3, r1
 8009e10:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	3001      	adds	r0, #1
 8009e16:	3301      	adds	r3, #1
 8009e18:	9308      	str	r3, [sp, #32]
 8009e1a:	901d      	str	r0, [sp, #116]	@ 0x74
 8009e1c:	e7c3      	b.n	8009da6 <_strtod_l+0x14e>
 8009e1e:	4355      	muls	r5, r2
 8009e20:	195d      	adds	r5, r3, r5
 8009e22:	e7f6      	b.n	8009e12 <_strtod_l+0x1ba>
 8009e24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	921d      	str	r2, [sp, #116]	@ 0x74
 8009e2a:	9a08      	ldr	r2, [sp, #32]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d03a      	beq.n	8009ea8 <_strtod_l+0x250>
 8009e32:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e34:	9206      	str	r2, [sp, #24]
 8009e36:	001a      	movs	r2, r3
 8009e38:	3a30      	subs	r2, #48	@ 0x30
 8009e3a:	2a09      	cmp	r2, #9
 8009e3c:	d912      	bls.n	8009e64 <_strtod_l+0x20c>
 8009e3e:	2201      	movs	r2, #1
 8009e40:	4694      	mov	ip, r2
 8009e42:	e7c3      	b.n	8009dcc <_strtod_l+0x174>
 8009e44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e46:	3001      	adds	r0, #1
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	921d      	str	r2, [sp, #116]	@ 0x74
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b30      	cmp	r3, #48	@ 0x30
 8009e50:	d0f8      	beq.n	8009e44 <_strtod_l+0x1ec>
 8009e52:	001a      	movs	r2, r3
 8009e54:	3a31      	subs	r2, #49	@ 0x31
 8009e56:	2a08      	cmp	r2, #8
 8009e58:	d83b      	bhi.n	8009ed2 <_strtod_l+0x27a>
 8009e5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009e60:	9006      	str	r0, [sp, #24]
 8009e62:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009e64:	001a      	movs	r2, r3
 8009e66:	1c41      	adds	r1, r0, #1
 8009e68:	3a30      	subs	r2, #48	@ 0x30
 8009e6a:	2b30      	cmp	r3, #48	@ 0x30
 8009e6c:	d016      	beq.n	8009e9c <_strtod_l+0x244>
 8009e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e70:	185b      	adds	r3, r3, r1
 8009e72:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	210a      	movs	r1, #10
 8009e78:	469c      	mov	ip, r3
 8009e7a:	4484      	add	ip, r0
 8009e7c:	459c      	cmp	ip, r3
 8009e7e:	d115      	bne.n	8009eac <_strtod_l+0x254>
 8009e80:	9906      	ldr	r1, [sp, #24]
 8009e82:	9b06      	ldr	r3, [sp, #24]
 8009e84:	3101      	adds	r1, #1
 8009e86:	1809      	adds	r1, r1, r0
 8009e88:	181b      	adds	r3, r3, r0
 8009e8a:	9106      	str	r1, [sp, #24]
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	dc19      	bgt.n	8009ec4 <_strtod_l+0x26c>
 8009e90:	230a      	movs	r3, #10
 8009e92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009e94:	434b      	muls	r3, r1
 8009e96:	2100      	movs	r1, #0
 8009e98:	18d3      	adds	r3, r2, r3
 8009e9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e9e:	0008      	movs	r0, r1
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	921d      	str	r2, [sp, #116]	@ 0x74
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	e7c6      	b.n	8009e36 <_strtod_l+0x1de>
 8009ea8:	9808      	ldr	r0, [sp, #32]
 8009eaa:	e7d0      	b.n	8009e4e <_strtod_l+0x1f6>
 8009eac:	1c5c      	adds	r4, r3, #1
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	dc04      	bgt.n	8009ebc <_strtod_l+0x264>
 8009eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eb4:	434b      	muls	r3, r1
 8009eb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009eb8:	0023      	movs	r3, r4
 8009eba:	e7df      	b.n	8009e7c <_strtod_l+0x224>
 8009ebc:	2c10      	cmp	r4, #16
 8009ebe:	dcfb      	bgt.n	8009eb8 <_strtod_l+0x260>
 8009ec0:	434d      	muls	r5, r1
 8009ec2:	e7f9      	b.n	8009eb8 <_strtod_l+0x260>
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	dce8      	bgt.n	8009e9c <_strtod_l+0x244>
 8009eca:	230a      	movs	r3, #10
 8009ecc:	435d      	muls	r5, r3
 8009ece:	1955      	adds	r5, r2, r5
 8009ed0:	e7e4      	b.n	8009e9c <_strtod_l+0x244>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ed6:	9206      	str	r2, [sp, #24]
 8009ed8:	3201      	adds	r2, #1
 8009eda:	e7b1      	b.n	8009e40 <_strtod_l+0x1e8>
 8009edc:	2400      	movs	r4, #0
 8009ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	931d      	str	r3, [sp, #116]	@ 0x74
 8009ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee6:	789b      	ldrb	r3, [r3, #2]
 8009ee8:	001a      	movs	r2, r3
 8009eea:	3a30      	subs	r2, #48	@ 0x30
 8009eec:	2a09      	cmp	r2, #9
 8009eee:	d913      	bls.n	8009f18 <_strtod_l+0x2c0>
 8009ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ef2:	921d      	str	r2, [sp, #116]	@ 0x74
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	e032      	b.n	8009f5e <_strtod_l+0x306>
 8009ef8:	0800bf50 	.word	0x0800bf50
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	ffefffff 	.word	0xffefffff
 8009f04:	00000433 	.word	0x00000433
 8009f08:	7fffffff 	.word	0x7fffffff
 8009f0c:	0800bf38 	.word	0x0800bf38
 8009f10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	921d      	str	r2, [sp, #116]	@ 0x74
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b30      	cmp	r3, #48	@ 0x30
 8009f1a:	d0f9      	beq.n	8009f10 <_strtod_l+0x2b8>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	9207      	str	r2, [sp, #28]
 8009f20:	001a      	movs	r2, r3
 8009f22:	3a31      	subs	r2, #49	@ 0x31
 8009f24:	2a08      	cmp	r2, #8
 8009f26:	d81b      	bhi.n	8009f60 <_strtod_l+0x308>
 8009f28:	3b30      	subs	r3, #48	@ 0x30
 8009f2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f2e:	9307      	str	r3, [sp, #28]
 8009f30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f32:	1c59      	adds	r1, r3, #1
 8009f34:	911d      	str	r1, [sp, #116]	@ 0x74
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	001a      	movs	r2, r3
 8009f3a:	3a30      	subs	r2, #48	@ 0x30
 8009f3c:	2a09      	cmp	r2, #9
 8009f3e:	d93a      	bls.n	8009fb6 <_strtod_l+0x35e>
 8009f40:	9a07      	ldr	r2, [sp, #28]
 8009f42:	1a8a      	subs	r2, r1, r2
 8009f44:	49b4      	ldr	r1, [pc, #720]	@ (800a218 <_strtod_l+0x5c0>)
 8009f46:	9107      	str	r1, [sp, #28]
 8009f48:	2a08      	cmp	r2, #8
 8009f4a:	dc04      	bgt.n	8009f56 <_strtod_l+0x2fe>
 8009f4c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009f4e:	9207      	str	r2, [sp, #28]
 8009f50:	428a      	cmp	r2, r1
 8009f52:	dd00      	ble.n	8009f56 <_strtod_l+0x2fe>
 8009f54:	9107      	str	r1, [sp, #28]
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	d002      	beq.n	8009f60 <_strtod_l+0x308>
 8009f5a:	9a07      	ldr	r2, [sp, #28]
 8009f5c:	4252      	negs	r2, r2
 8009f5e:	9207      	str	r2, [sp, #28]
 8009f60:	9a06      	ldr	r2, [sp, #24]
 8009f62:	2a00      	cmp	r2, #0
 8009f64:	d14d      	bne.n	800a002 <_strtod_l+0x3aa>
 8009f66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f68:	4310      	orrs	r0, r2
 8009f6a:	d000      	beq.n	8009f6e <_strtod_l+0x316>
 8009f6c:	e6af      	b.n	8009cce <_strtod_l+0x76>
 8009f6e:	4662      	mov	r2, ip
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d000      	beq.n	8009f76 <_strtod_l+0x31e>
 8009f74:	e6c7      	b.n	8009d06 <_strtod_l+0xae>
 8009f76:	2b69      	cmp	r3, #105	@ 0x69
 8009f78:	d027      	beq.n	8009fca <_strtod_l+0x372>
 8009f7a:	dc23      	bgt.n	8009fc4 <_strtod_l+0x36c>
 8009f7c:	2b49      	cmp	r3, #73	@ 0x49
 8009f7e:	d024      	beq.n	8009fca <_strtod_l+0x372>
 8009f80:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f82:	d000      	beq.n	8009f86 <_strtod_l+0x32e>
 8009f84:	e6bf      	b.n	8009d06 <_strtod_l+0xae>
 8009f86:	49a5      	ldr	r1, [pc, #660]	@ (800a21c <_strtod_l+0x5c4>)
 8009f88:	a81d      	add	r0, sp, #116	@ 0x74
 8009f8a:	f001 fa2d 	bl	800b3e8 <__match>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d100      	bne.n	8009f94 <_strtod_l+0x33c>
 8009f92:	e6b8      	b.n	8009d06 <_strtod_l+0xae>
 8009f94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b28      	cmp	r3, #40	@ 0x28
 8009f9a:	d12c      	bne.n	8009ff6 <_strtod_l+0x39e>
 8009f9c:	49a0      	ldr	r1, [pc, #640]	@ (800a220 <_strtod_l+0x5c8>)
 8009f9e:	aa20      	add	r2, sp, #128	@ 0x80
 8009fa0:	a81d      	add	r0, sp, #116	@ 0x74
 8009fa2:	f001 fa35 	bl	800b410 <__hexnan>
 8009fa6:	2805      	cmp	r0, #5
 8009fa8:	d125      	bne.n	8009ff6 <_strtod_l+0x39e>
 8009faa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fac:	4a9d      	ldr	r2, [pc, #628]	@ (800a224 <_strtod_l+0x5cc>)
 8009fae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	0017      	movs	r7, r2
 8009fb4:	e68b      	b.n	8009cce <_strtod_l+0x76>
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009fba:	434a      	muls	r2, r1
 8009fbc:	18d2      	adds	r2, r2, r3
 8009fbe:	3a30      	subs	r2, #48	@ 0x30
 8009fc0:	9210      	str	r2, [sp, #64]	@ 0x40
 8009fc2:	e7b5      	b.n	8009f30 <_strtod_l+0x2d8>
 8009fc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fc6:	d0de      	beq.n	8009f86 <_strtod_l+0x32e>
 8009fc8:	e69d      	b.n	8009d06 <_strtod_l+0xae>
 8009fca:	4997      	ldr	r1, [pc, #604]	@ (800a228 <_strtod_l+0x5d0>)
 8009fcc:	a81d      	add	r0, sp, #116	@ 0x74
 8009fce:	f001 fa0b 	bl	800b3e8 <__match>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d100      	bne.n	8009fd8 <_strtod_l+0x380>
 8009fd6:	e696      	b.n	8009d06 <_strtod_l+0xae>
 8009fd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fda:	4994      	ldr	r1, [pc, #592]	@ (800a22c <_strtod_l+0x5d4>)
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	a81d      	add	r0, sp, #116	@ 0x74
 8009fe0:	931d      	str	r3, [sp, #116]	@ 0x74
 8009fe2:	f001 fa01 	bl	800b3e8 <__match>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d102      	bne.n	8009ff0 <_strtod_l+0x398>
 8009fea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fec:	3301      	adds	r3, #1
 8009fee:	931d      	str	r3, [sp, #116]	@ 0x74
 8009ff0:	2600      	movs	r6, #0
 8009ff2:	4f8c      	ldr	r7, [pc, #560]	@ (800a224 <_strtod_l+0x5cc>)
 8009ff4:	e66b      	b.n	8009cce <_strtod_l+0x76>
 8009ff6:	488e      	ldr	r0, [pc, #568]	@ (800a230 <_strtod_l+0x5d8>)
 8009ff8:	f000 ff06 	bl	800ae08 <nan>
 8009ffc:	0006      	movs	r6, r0
 8009ffe:	000f      	movs	r7, r1
 800a000:	e665      	b.n	8009cce <_strtod_l+0x76>
 800a002:	9b07      	ldr	r3, [sp, #28]
 800a004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a006:	1a9b      	subs	r3, r3, r2
 800a008:	930c      	str	r3, [sp, #48]	@ 0x30
 800a00a:	9b08      	ldr	r3, [sp, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <_strtod_l+0x3bc>
 800a010:	9b06      	ldr	r3, [sp, #24]
 800a012:	9308      	str	r3, [sp, #32]
 800a014:	9c06      	ldr	r4, [sp, #24]
 800a016:	2c10      	cmp	r4, #16
 800a018:	dd00      	ble.n	800a01c <_strtod_l+0x3c4>
 800a01a:	2410      	movs	r4, #16
 800a01c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a01e:	f7f8 fea7 	bl	8002d70 <__aeabi_ui2d>
 800a022:	9b06      	ldr	r3, [sp, #24]
 800a024:	0006      	movs	r6, r0
 800a026:	000f      	movs	r7, r1
 800a028:	2b09      	cmp	r3, #9
 800a02a:	dc13      	bgt.n	800a054 <_strtod_l+0x3fc>
 800a02c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d100      	bne.n	800a034 <_strtod_l+0x3dc>
 800a032:	e64c      	b.n	8009cce <_strtod_l+0x76>
 800a034:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a036:	2b00      	cmp	r3, #0
 800a038:	dc00      	bgt.n	800a03c <_strtod_l+0x3e4>
 800a03a:	e07e      	b.n	800a13a <_strtod_l+0x4e2>
 800a03c:	2b16      	cmp	r3, #22
 800a03e:	dc63      	bgt.n	800a108 <_strtod_l+0x4b0>
 800a040:	497c      	ldr	r1, [pc, #496]	@ (800a234 <_strtod_l+0x5dc>)
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	18c9      	adds	r1, r1, r3
 800a046:	0032      	movs	r2, r6
 800a048:	6808      	ldr	r0, [r1, #0]
 800a04a:	6849      	ldr	r1, [r1, #4]
 800a04c:	003b      	movs	r3, r7
 800a04e:	f7f7 ff9f 	bl	8001f90 <__aeabi_dmul>
 800a052:	e7d3      	b.n	8009ffc <_strtod_l+0x3a4>
 800a054:	0022      	movs	r2, r4
 800a056:	4b77      	ldr	r3, [pc, #476]	@ (800a234 <_strtod_l+0x5dc>)
 800a058:	3a09      	subs	r2, #9
 800a05a:	00d2      	lsls	r2, r2, #3
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f7f7 ff95 	bl	8001f90 <__aeabi_dmul>
 800a066:	0006      	movs	r6, r0
 800a068:	0028      	movs	r0, r5
 800a06a:	000f      	movs	r7, r1
 800a06c:	f7f8 fe80 	bl	8002d70 <__aeabi_ui2d>
 800a070:	000b      	movs	r3, r1
 800a072:	0002      	movs	r2, r0
 800a074:	0039      	movs	r1, r7
 800a076:	0030      	movs	r0, r6
 800a078:	f7f6 ffe2 	bl	8001040 <__aeabi_dadd>
 800a07c:	9b06      	ldr	r3, [sp, #24]
 800a07e:	0006      	movs	r6, r0
 800a080:	000f      	movs	r7, r1
 800a082:	2b0f      	cmp	r3, #15
 800a084:	ddd2      	ble.n	800a02c <_strtod_l+0x3d4>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	1b1c      	subs	r4, r3, r4
 800a08a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a08c:	18e4      	adds	r4, r4, r3
 800a08e:	2c00      	cmp	r4, #0
 800a090:	dc00      	bgt.n	800a094 <_strtod_l+0x43c>
 800a092:	e09b      	b.n	800a1cc <_strtod_l+0x574>
 800a094:	220f      	movs	r2, #15
 800a096:	0023      	movs	r3, r4
 800a098:	4013      	ands	r3, r2
 800a09a:	4214      	tst	r4, r2
 800a09c:	d00a      	beq.n	800a0b4 <_strtod_l+0x45c>
 800a09e:	4965      	ldr	r1, [pc, #404]	@ (800a234 <_strtod_l+0x5dc>)
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	18c9      	adds	r1, r1, r3
 800a0a4:	0032      	movs	r2, r6
 800a0a6:	6808      	ldr	r0, [r1, #0]
 800a0a8:	6849      	ldr	r1, [r1, #4]
 800a0aa:	003b      	movs	r3, r7
 800a0ac:	f7f7 ff70 	bl	8001f90 <__aeabi_dmul>
 800a0b0:	0006      	movs	r6, r0
 800a0b2:	000f      	movs	r7, r1
 800a0b4:	230f      	movs	r3, #15
 800a0b6:	439c      	bics	r4, r3
 800a0b8:	d073      	beq.n	800a1a2 <_strtod_l+0x54a>
 800a0ba:	3326      	adds	r3, #38	@ 0x26
 800a0bc:	33ff      	adds	r3, #255	@ 0xff
 800a0be:	429c      	cmp	r4, r3
 800a0c0:	dd4b      	ble.n	800a15a <_strtod_l+0x502>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9306      	str	r3, [sp, #24]
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	930d      	str	r3, [sp, #52]	@ 0x34
 800a0ca:	9308      	str	r3, [sp, #32]
 800a0cc:	2322      	movs	r3, #34	@ 0x22
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	9a05      	ldr	r2, [sp, #20]
 800a0d2:	4f54      	ldr	r7, [pc, #336]	@ (800a224 <_strtod_l+0x5cc>)
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	d100      	bne.n	800a0de <_strtod_l+0x486>
 800a0dc:	e5f7      	b.n	8009cce <_strtod_l+0x76>
 800a0de:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a0e0:	9805      	ldr	r0, [sp, #20]
 800a0e2:	f7ff f91b 	bl	800931c <_Bfree>
 800a0e6:	9908      	ldr	r1, [sp, #32]
 800a0e8:	9805      	ldr	r0, [sp, #20]
 800a0ea:	f7ff f917 	bl	800931c <_Bfree>
 800a0ee:	9907      	ldr	r1, [sp, #28]
 800a0f0:	9805      	ldr	r0, [sp, #20]
 800a0f2:	f7ff f913 	bl	800931c <_Bfree>
 800a0f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a0f8:	9805      	ldr	r0, [sp, #20]
 800a0fa:	f7ff f90f 	bl	800931c <_Bfree>
 800a0fe:	9906      	ldr	r1, [sp, #24]
 800a100:	9805      	ldr	r0, [sp, #20]
 800a102:	f7ff f90b 	bl	800931c <_Bfree>
 800a106:	e5e2      	b.n	8009cce <_strtod_l+0x76>
 800a108:	2325      	movs	r3, #37	@ 0x25
 800a10a:	9a06      	ldr	r2, [sp, #24]
 800a10c:	1a9b      	subs	r3, r3, r2
 800a10e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a110:	4293      	cmp	r3, r2
 800a112:	dbb8      	blt.n	800a086 <_strtod_l+0x42e>
 800a114:	240f      	movs	r4, #15
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	4d46      	ldr	r5, [pc, #280]	@ (800a234 <_strtod_l+0x5dc>)
 800a11a:	1ae4      	subs	r4, r4, r3
 800a11c:	00e1      	lsls	r1, r4, #3
 800a11e:	1869      	adds	r1, r5, r1
 800a120:	0032      	movs	r2, r6
 800a122:	6808      	ldr	r0, [r1, #0]
 800a124:	6849      	ldr	r1, [r1, #4]
 800a126:	003b      	movs	r3, r7
 800a128:	f7f7 ff32 	bl	8001f90 <__aeabi_dmul>
 800a12c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a12e:	1b1c      	subs	r4, r3, r4
 800a130:	00e4      	lsls	r4, r4, #3
 800a132:	192d      	adds	r5, r5, r4
 800a134:	682a      	ldr	r2, [r5, #0]
 800a136:	686b      	ldr	r3, [r5, #4]
 800a138:	e789      	b.n	800a04e <_strtod_l+0x3f6>
 800a13a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a13c:	3316      	adds	r3, #22
 800a13e:	dba2      	blt.n	800a086 <_strtod_l+0x42e>
 800a140:	9907      	ldr	r1, [sp, #28]
 800a142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a144:	4b3b      	ldr	r3, [pc, #236]	@ (800a234 <_strtod_l+0x5dc>)
 800a146:	1a52      	subs	r2, r2, r1
 800a148:	00d2      	lsls	r2, r2, #3
 800a14a:	189b      	adds	r3, r3, r2
 800a14c:	0030      	movs	r0, r6
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	0039      	movs	r1, r7
 800a154:	f7f7 fad8 	bl	8001708 <__aeabi_ddiv>
 800a158:	e750      	b.n	8009ffc <_strtod_l+0x3a4>
 800a15a:	2300      	movs	r3, #0
 800a15c:	0030      	movs	r0, r6
 800a15e:	0039      	movs	r1, r7
 800a160:	4d35      	ldr	r5, [pc, #212]	@ (800a238 <_strtod_l+0x5e0>)
 800a162:	1124      	asrs	r4, r4, #4
 800a164:	9309      	str	r3, [sp, #36]	@ 0x24
 800a166:	2c01      	cmp	r4, #1
 800a168:	dc1e      	bgt.n	800a1a8 <_strtod_l+0x550>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <_strtod_l+0x51a>
 800a16e:	0006      	movs	r6, r0
 800a170:	000f      	movs	r7, r1
 800a172:	4b32      	ldr	r3, [pc, #200]	@ (800a23c <_strtod_l+0x5e4>)
 800a174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a176:	18ff      	adds	r7, r7, r3
 800a178:	4b2f      	ldr	r3, [pc, #188]	@ (800a238 <_strtod_l+0x5e0>)
 800a17a:	00d5      	lsls	r5, r2, #3
 800a17c:	195d      	adds	r5, r3, r5
 800a17e:	0032      	movs	r2, r6
 800a180:	6828      	ldr	r0, [r5, #0]
 800a182:	6869      	ldr	r1, [r5, #4]
 800a184:	003b      	movs	r3, r7
 800a186:	f7f7 ff03 	bl	8001f90 <__aeabi_dmul>
 800a18a:	4b26      	ldr	r3, [pc, #152]	@ (800a224 <_strtod_l+0x5cc>)
 800a18c:	4a2c      	ldr	r2, [pc, #176]	@ (800a240 <_strtod_l+0x5e8>)
 800a18e:	0006      	movs	r6, r0
 800a190:	400b      	ands	r3, r1
 800a192:	4293      	cmp	r3, r2
 800a194:	d895      	bhi.n	800a0c2 <_strtod_l+0x46a>
 800a196:	4a2b      	ldr	r2, [pc, #172]	@ (800a244 <_strtod_l+0x5ec>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d913      	bls.n	800a1c4 <_strtod_l+0x56c>
 800a19c:	2601      	movs	r6, #1
 800a19e:	4f2a      	ldr	r7, [pc, #168]	@ (800a248 <_strtod_l+0x5f0>)
 800a1a0:	4276      	negs	r6, r6
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a6:	e086      	b.n	800a2b6 <_strtod_l+0x65e>
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	4214      	tst	r4, r2
 800a1ac:	d004      	beq.n	800a1b8 <_strtod_l+0x560>
 800a1ae:	682a      	ldr	r2, [r5, #0]
 800a1b0:	686b      	ldr	r3, [r5, #4]
 800a1b2:	f7f7 feed 	bl	8001f90 <__aeabi_dmul>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ba:	1064      	asrs	r4, r4, #1
 800a1bc:	3201      	adds	r2, #1
 800a1be:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1c0:	3508      	adds	r5, #8
 800a1c2:	e7d0      	b.n	800a166 <_strtod_l+0x50e>
 800a1c4:	23d4      	movs	r3, #212	@ 0xd4
 800a1c6:	049b      	lsls	r3, r3, #18
 800a1c8:	18cf      	adds	r7, r1, r3
 800a1ca:	e7ea      	b.n	800a1a2 <_strtod_l+0x54a>
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d0e8      	beq.n	800a1a2 <_strtod_l+0x54a>
 800a1d0:	4264      	negs	r4, r4
 800a1d2:	230f      	movs	r3, #15
 800a1d4:	0022      	movs	r2, r4
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	421c      	tst	r4, r3
 800a1da:	d00a      	beq.n	800a1f2 <_strtod_l+0x59a>
 800a1dc:	4b15      	ldr	r3, [pc, #84]	@ (800a234 <_strtod_l+0x5dc>)
 800a1de:	00d2      	lsls	r2, r2, #3
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	0030      	movs	r0, r6
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	0039      	movs	r1, r7
 800a1ea:	f7f7 fa8d 	bl	8001708 <__aeabi_ddiv>
 800a1ee:	0006      	movs	r6, r0
 800a1f0:	000f      	movs	r7, r1
 800a1f2:	1124      	asrs	r4, r4, #4
 800a1f4:	d0d5      	beq.n	800a1a2 <_strtod_l+0x54a>
 800a1f6:	2c1f      	cmp	r4, #31
 800a1f8:	dd28      	ble.n	800a24c <_strtod_l+0x5f4>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	9306      	str	r3, [sp, #24]
 800a1fe:	9307      	str	r3, [sp, #28]
 800a200:	930d      	str	r3, [sp, #52]	@ 0x34
 800a202:	9308      	str	r3, [sp, #32]
 800a204:	2322      	movs	r3, #34	@ 0x22
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	2600      	movs	r6, #0
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a20e:	2700      	movs	r7, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d000      	beq.n	800a216 <_strtod_l+0x5be>
 800a214:	e763      	b.n	800a0de <_strtod_l+0x486>
 800a216:	e55a      	b.n	8009cce <_strtod_l+0x76>
 800a218:	00004e1f 	.word	0x00004e1f
 800a21c:	0800bd29 	.word	0x0800bd29
 800a220:	0800bf3c 	.word	0x0800bf3c
 800a224:	7ff00000 	.word	0x7ff00000
 800a228:	0800bd21 	.word	0x0800bd21
 800a22c:	0800bd58 	.word	0x0800bd58
 800a230:	0800c0e5 	.word	0x0800c0e5
 800a234:	0800be70 	.word	0x0800be70
 800a238:	0800be48 	.word	0x0800be48
 800a23c:	fcb00000 	.word	0xfcb00000
 800a240:	7ca00000 	.word	0x7ca00000
 800a244:	7c900000 	.word	0x7c900000
 800a248:	7fefffff 	.word	0x7fefffff
 800a24c:	2310      	movs	r3, #16
 800a24e:	0022      	movs	r2, r4
 800a250:	401a      	ands	r2, r3
 800a252:	9209      	str	r2, [sp, #36]	@ 0x24
 800a254:	421c      	tst	r4, r3
 800a256:	d001      	beq.n	800a25c <_strtod_l+0x604>
 800a258:	335a      	adds	r3, #90	@ 0x5a
 800a25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25c:	0030      	movs	r0, r6
 800a25e:	0039      	movs	r1, r7
 800a260:	2300      	movs	r3, #0
 800a262:	4dbf      	ldr	r5, [pc, #764]	@ (800a560 <_strtod_l+0x908>)
 800a264:	2201      	movs	r2, #1
 800a266:	4214      	tst	r4, r2
 800a268:	d004      	beq.n	800a274 <_strtod_l+0x61c>
 800a26a:	682a      	ldr	r2, [r5, #0]
 800a26c:	686b      	ldr	r3, [r5, #4]
 800a26e:	f7f7 fe8f 	bl	8001f90 <__aeabi_dmul>
 800a272:	2301      	movs	r3, #1
 800a274:	1064      	asrs	r4, r4, #1
 800a276:	3508      	adds	r5, #8
 800a278:	2c00      	cmp	r4, #0
 800a27a:	d1f3      	bne.n	800a264 <_strtod_l+0x60c>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <_strtod_l+0x62c>
 800a280:	0006      	movs	r6, r0
 800a282:	000f      	movs	r7, r1
 800a284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00d      	beq.n	800a2a6 <_strtod_l+0x64e>
 800a28a:	236b      	movs	r3, #107	@ 0x6b
 800a28c:	007a      	lsls	r2, r7, #1
 800a28e:	0d52      	lsrs	r2, r2, #21
 800a290:	0039      	movs	r1, r7
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd06      	ble.n	800a2a6 <_strtod_l+0x64e>
 800a298:	2b1f      	cmp	r3, #31
 800a29a:	dd5a      	ble.n	800a352 <_strtod_l+0x6fa>
 800a29c:	2600      	movs	r6, #0
 800a29e:	2b34      	cmp	r3, #52	@ 0x34
 800a2a0:	dd50      	ble.n	800a344 <_strtod_l+0x6ec>
 800a2a2:	27dc      	movs	r7, #220	@ 0xdc
 800a2a4:	04bf      	lsls	r7, r7, #18
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	0030      	movs	r0, r6
 800a2ac:	0039      	movs	r1, r7
 800a2ae:	f7f6 f8cd 	bl	800044c <__aeabi_dcmpeq>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d1a1      	bne.n	800a1fa <_strtod_l+0x5a2>
 800a2b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2b8:	9a08      	ldr	r2, [sp, #32]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a2be:	9b06      	ldr	r3, [sp, #24]
 800a2c0:	9805      	ldr	r0, [sp, #20]
 800a2c2:	f7ff f893 	bl	80093ec <__s2b>
 800a2c6:	900d      	str	r0, [sp, #52]	@ 0x34
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d100      	bne.n	800a2ce <_strtod_l+0x676>
 800a2cc:	e6f9      	b.n	800a0c2 <_strtod_l+0x46a>
 800a2ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2d0:	9907      	ldr	r1, [sp, #28]
 800a2d2:	17da      	asrs	r2, r3, #31
 800a2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2d6:	1a5b      	subs	r3, r3, r1
 800a2d8:	401a      	ands	r2, r3
 800a2da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2dc:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a2de:	43db      	mvns	r3, r3
 800a2e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2e2:	17db      	asrs	r3, r3, #31
 800a2e4:	401a      	ands	r2, r3
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	921a      	str	r2, [sp, #104]	@ 0x68
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2f0:	9805      	ldr	r0, [sp, #20]
 800a2f2:	6859      	ldr	r1, [r3, #4]
 800a2f4:	f7fe ffce 	bl	8009294 <_Balloc>
 800a2f8:	9008      	str	r0, [sp, #32]
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d100      	bne.n	800a300 <_strtod_l+0x6a8>
 800a2fe:	e6e5      	b.n	800a0cc <_strtod_l+0x474>
 800a300:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a302:	300c      	adds	r0, #12
 800a304:	0019      	movs	r1, r3
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	310c      	adds	r1, #12
 800a30a:	3202      	adds	r2, #2
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	f000 fd71 	bl	800adf4 <memcpy>
 800a312:	ab20      	add	r3, sp, #128	@ 0x80
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	0032      	movs	r2, r6
 800a31c:	003b      	movs	r3, r7
 800a31e:	9805      	ldr	r0, [sp, #20]
 800a320:	9610      	str	r6, [sp, #64]	@ 0x40
 800a322:	9711      	str	r7, [sp, #68]	@ 0x44
 800a324:	f7ff fbb2 	bl	8009a8c <__d2b>
 800a328:	901e      	str	r0, [sp, #120]	@ 0x78
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d100      	bne.n	800a330 <_strtod_l+0x6d8>
 800a32e:	e6cd      	b.n	800a0cc <_strtod_l+0x474>
 800a330:	2101      	movs	r1, #1
 800a332:	9805      	ldr	r0, [sp, #20]
 800a334:	f7ff f8f6 	bl	8009524 <__i2b>
 800a338:	9007      	str	r0, [sp, #28]
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d10e      	bne.n	800a35c <_strtod_l+0x704>
 800a33e:	2300      	movs	r3, #0
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	e6c3      	b.n	800a0cc <_strtod_l+0x474>
 800a344:	234b      	movs	r3, #75	@ 0x4b
 800a346:	1a9a      	subs	r2, r3, r2
 800a348:	3b4c      	subs	r3, #76	@ 0x4c
 800a34a:	4093      	lsls	r3, r2
 800a34c:	4019      	ands	r1, r3
 800a34e:	000f      	movs	r7, r1
 800a350:	e7a9      	b.n	800a2a6 <_strtod_l+0x64e>
 800a352:	2201      	movs	r2, #1
 800a354:	4252      	negs	r2, r2
 800a356:	409a      	lsls	r2, r3
 800a358:	4016      	ands	r6, r2
 800a35a:	e7a4      	b.n	800a2a6 <_strtod_l+0x64e>
 800a35c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a35e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a360:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a362:	1ad4      	subs	r4, r2, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	db01      	blt.n	800a36c <_strtod_l+0x714>
 800a368:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800a36a:	195d      	adds	r5, r3, r5
 800a36c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a36e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a370:	1a5b      	subs	r3, r3, r1
 800a372:	2136      	movs	r1, #54	@ 0x36
 800a374:	189b      	adds	r3, r3, r2
 800a376:	1a8a      	subs	r2, r1, r2
 800a378:	497a      	ldr	r1, [pc, #488]	@ (800a564 <_strtod_l+0x90c>)
 800a37a:	2001      	movs	r0, #1
 800a37c:	468c      	mov	ip, r1
 800a37e:	2100      	movs	r1, #0
 800a380:	3b01      	subs	r3, #1
 800a382:	9116      	str	r1, [sp, #88]	@ 0x58
 800a384:	9014      	str	r0, [sp, #80]	@ 0x50
 800a386:	4563      	cmp	r3, ip
 800a388:	da06      	bge.n	800a398 <_strtod_l+0x740>
 800a38a:	4661      	mov	r1, ip
 800a38c:	1ac9      	subs	r1, r1, r3
 800a38e:	1a52      	subs	r2, r2, r1
 800a390:	291f      	cmp	r1, #31
 800a392:	dc3f      	bgt.n	800a414 <_strtod_l+0x7bc>
 800a394:	4088      	lsls	r0, r1
 800a396:	9014      	str	r0, [sp, #80]	@ 0x50
 800a398:	18ab      	adds	r3, r5, r2
 800a39a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a39c:	18a4      	adds	r4, r4, r2
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3a2:	191c      	adds	r4, r3, r4
 800a3a4:	002b      	movs	r3, r5
 800a3a6:	4295      	cmp	r5, r2
 800a3a8:	dd00      	ble.n	800a3ac <_strtod_l+0x754>
 800a3aa:	0013      	movs	r3, r2
 800a3ac:	42a3      	cmp	r3, r4
 800a3ae:	dd00      	ble.n	800a3b2 <_strtod_l+0x75a>
 800a3b0:	0023      	movs	r3, r4
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd04      	ble.n	800a3c0 <_strtod_l+0x768>
 800a3b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3b8:	1ae4      	subs	r4, r4, r3
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3be:	1aed      	subs	r5, r5, r3
 800a3c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dd16      	ble.n	800a3f4 <_strtod_l+0x79c>
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	9907      	ldr	r1, [sp, #28]
 800a3ca:	9805      	ldr	r0, [sp, #20]
 800a3cc:	f7ff f974 	bl	80096b8 <__pow5mult>
 800a3d0:	9007      	str	r0, [sp, #28]
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d0b3      	beq.n	800a33e <_strtod_l+0x6e6>
 800a3d6:	0001      	movs	r1, r0
 800a3d8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f7ff f8ba 	bl	8009554 <__multiply>
 800a3e0:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d100      	bne.n	800a3e8 <_strtod_l+0x790>
 800a3e6:	e671      	b.n	800a0cc <_strtod_l+0x474>
 800a3e8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a3ea:	9805      	ldr	r0, [sp, #20]
 800a3ec:	f7fe ff96 	bl	800931c <_Bfree>
 800a3f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3f2:	931e      	str	r3, [sp, #120]	@ 0x78
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dc12      	bgt.n	800a420 <_strtod_l+0x7c8>
 800a3fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dd18      	ble.n	800a432 <_strtod_l+0x7da>
 800a400:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a402:	9908      	ldr	r1, [sp, #32]
 800a404:	9805      	ldr	r0, [sp, #20]
 800a406:	f7ff f957 	bl	80096b8 <__pow5mult>
 800a40a:	9008      	str	r0, [sp, #32]
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d110      	bne.n	800a432 <_strtod_l+0x7da>
 800a410:	2300      	movs	r3, #0
 800a412:	e65a      	b.n	800a0ca <_strtod_l+0x472>
 800a414:	4954      	ldr	r1, [pc, #336]	@ (800a568 <_strtod_l+0x910>)
 800a416:	1acb      	subs	r3, r1, r3
 800a418:	0001      	movs	r1, r0
 800a41a:	4099      	lsls	r1, r3
 800a41c:	9116      	str	r1, [sp, #88]	@ 0x58
 800a41e:	e7ba      	b.n	800a396 <_strtod_l+0x73e>
 800a420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a422:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	f7ff f9a3 	bl	8009770 <__lshift>
 800a42a:	901e      	str	r0, [sp, #120]	@ 0x78
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d1e4      	bne.n	800a3fa <_strtod_l+0x7a2>
 800a430:	e64c      	b.n	800a0cc <_strtod_l+0x474>
 800a432:	2c00      	cmp	r4, #0
 800a434:	dd07      	ble.n	800a446 <_strtod_l+0x7ee>
 800a436:	0022      	movs	r2, r4
 800a438:	9908      	ldr	r1, [sp, #32]
 800a43a:	9805      	ldr	r0, [sp, #20]
 800a43c:	f7ff f998 	bl	8009770 <__lshift>
 800a440:	9008      	str	r0, [sp, #32]
 800a442:	2800      	cmp	r0, #0
 800a444:	d0e4      	beq.n	800a410 <_strtod_l+0x7b8>
 800a446:	2d00      	cmp	r5, #0
 800a448:	dd08      	ble.n	800a45c <_strtod_l+0x804>
 800a44a:	002a      	movs	r2, r5
 800a44c:	9907      	ldr	r1, [sp, #28]
 800a44e:	9805      	ldr	r0, [sp, #20]
 800a450:	f7ff f98e 	bl	8009770 <__lshift>
 800a454:	9007      	str	r0, [sp, #28]
 800a456:	2800      	cmp	r0, #0
 800a458:	d100      	bne.n	800a45c <_strtod_l+0x804>
 800a45a:	e637      	b.n	800a0cc <_strtod_l+0x474>
 800a45c:	9a08      	ldr	r2, [sp, #32]
 800a45e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a460:	9805      	ldr	r0, [sp, #20]
 800a462:	f7ff fa0d 	bl	8009880 <__mdiff>
 800a466:	9006      	str	r0, [sp, #24]
 800a468:	2800      	cmp	r0, #0
 800a46a:	d100      	bne.n	800a46e <_strtod_l+0x816>
 800a46c:	e62e      	b.n	800a0cc <_strtod_l+0x474>
 800a46e:	68c3      	ldr	r3, [r0, #12]
 800a470:	9907      	ldr	r1, [sp, #28]
 800a472:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a474:	2300      	movs	r3, #0
 800a476:	60c3      	str	r3, [r0, #12]
 800a478:	f7ff f9e6 	bl	8009848 <__mcmp>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	da3b      	bge.n	800a4f8 <_strtod_l+0x8a0>
 800a480:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a482:	4333      	orrs	r3, r6
 800a484:	d167      	bne.n	800a556 <_strtod_l+0x8fe>
 800a486:	033b      	lsls	r3, r7, #12
 800a488:	d165      	bne.n	800a556 <_strtod_l+0x8fe>
 800a48a:	22d6      	movs	r2, #214	@ 0xd6
 800a48c:	4b37      	ldr	r3, [pc, #220]	@ (800a56c <_strtod_l+0x914>)
 800a48e:	04d2      	lsls	r2, r2, #19
 800a490:	403b      	ands	r3, r7
 800a492:	4293      	cmp	r3, r2
 800a494:	d95f      	bls.n	800a556 <_strtod_l+0x8fe>
 800a496:	9b06      	ldr	r3, [sp, #24]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <_strtod_l+0x84e>
 800a49e:	9b06      	ldr	r3, [sp, #24]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	dd57      	ble.n	800a556 <_strtod_l+0x8fe>
 800a4a6:	9906      	ldr	r1, [sp, #24]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	9805      	ldr	r0, [sp, #20]
 800a4ac:	f7ff f960 	bl	8009770 <__lshift>
 800a4b0:	9907      	ldr	r1, [sp, #28]
 800a4b2:	9006      	str	r0, [sp, #24]
 800a4b4:	f7ff f9c8 	bl	8009848 <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dd4c      	ble.n	800a556 <_strtod_l+0x8fe>
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a56c <_strtod_l+0x914>)
 800a4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4c0:	403b      	ands	r3, r7
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	d074      	beq.n	800a5b0 <_strtod_l+0x958>
 800a4c6:	22d6      	movs	r2, #214	@ 0xd6
 800a4c8:	04d2      	lsls	r2, r2, #19
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d870      	bhi.n	800a5b0 <_strtod_l+0x958>
 800a4ce:	22dc      	movs	r2, #220	@ 0xdc
 800a4d0:	0492      	lsls	r2, r2, #18
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d800      	bhi.n	800a4d8 <_strtod_l+0x880>
 800a4d6:	e695      	b.n	800a204 <_strtod_l+0x5ac>
 800a4d8:	0030      	movs	r0, r6
 800a4da:	0039      	movs	r1, r7
 800a4dc:	4b24      	ldr	r3, [pc, #144]	@ (800a570 <_strtod_l+0x918>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f7f7 fd56 	bl	8001f90 <__aeabi_dmul>
 800a4e4:	4b21      	ldr	r3, [pc, #132]	@ (800a56c <_strtod_l+0x914>)
 800a4e6:	0006      	movs	r6, r0
 800a4e8:	000f      	movs	r7, r1
 800a4ea:	420b      	tst	r3, r1
 800a4ec:	d000      	beq.n	800a4f0 <_strtod_l+0x898>
 800a4ee:	e5f6      	b.n	800a0de <_strtod_l+0x486>
 800a4f0:	2322      	movs	r3, #34	@ 0x22
 800a4f2:	9a05      	ldr	r2, [sp, #20]
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	e5f2      	b.n	800a0de <_strtod_l+0x486>
 800a4f8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d175      	bne.n	800a5ea <_strtod_l+0x992>
 800a4fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a500:	033b      	lsls	r3, r7, #12
 800a502:	0b1b      	lsrs	r3, r3, #12
 800a504:	2a00      	cmp	r2, #0
 800a506:	d039      	beq.n	800a57c <_strtod_l+0x924>
 800a508:	4a1a      	ldr	r2, [pc, #104]	@ (800a574 <_strtod_l+0x91c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d138      	bne.n	800a580 <_strtod_l+0x928>
 800a50e:	2101      	movs	r1, #1
 800a510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a512:	4249      	negs	r1, r1
 800a514:	0032      	movs	r2, r6
 800a516:	0008      	movs	r0, r1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <_strtod_l+0x8dc>
 800a51c:	24d4      	movs	r4, #212	@ 0xd4
 800a51e:	4b13      	ldr	r3, [pc, #76]	@ (800a56c <_strtod_l+0x914>)
 800a520:	0008      	movs	r0, r1
 800a522:	403b      	ands	r3, r7
 800a524:	04e4      	lsls	r4, r4, #19
 800a526:	42a3      	cmp	r3, r4
 800a528:	d804      	bhi.n	800a534 <_strtod_l+0x8dc>
 800a52a:	306c      	adds	r0, #108	@ 0x6c
 800a52c:	0d1b      	lsrs	r3, r3, #20
 800a52e:	1ac3      	subs	r3, r0, r3
 800a530:	4099      	lsls	r1, r3
 800a532:	0008      	movs	r0, r1
 800a534:	4282      	cmp	r2, r0
 800a536:	d123      	bne.n	800a580 <_strtod_l+0x928>
 800a538:	4b0f      	ldr	r3, [pc, #60]	@ (800a578 <_strtod_l+0x920>)
 800a53a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a53c:	4299      	cmp	r1, r3
 800a53e:	d102      	bne.n	800a546 <_strtod_l+0x8ee>
 800a540:	3201      	adds	r2, #1
 800a542:	d100      	bne.n	800a546 <_strtod_l+0x8ee>
 800a544:	e5c2      	b.n	800a0cc <_strtod_l+0x474>
 800a546:	4b09      	ldr	r3, [pc, #36]	@ (800a56c <_strtod_l+0x914>)
 800a548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a54a:	2600      	movs	r6, #0
 800a54c:	401a      	ands	r2, r3
 800a54e:	0013      	movs	r3, r2
 800a550:	2280      	movs	r2, #128	@ 0x80
 800a552:	0352      	lsls	r2, r2, #13
 800a554:	189f      	adds	r7, r3, r2
 800a556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1bd      	bne.n	800a4d8 <_strtod_l+0x880>
 800a55c:	e5bf      	b.n	800a0de <_strtod_l+0x486>
 800a55e:	46c0      	nop			@ (mov r8, r8)
 800a560:	0800bf68 	.word	0x0800bf68
 800a564:	fffffc02 	.word	0xfffffc02
 800a568:	fffffbe2 	.word	0xfffffbe2
 800a56c:	7ff00000 	.word	0x7ff00000
 800a570:	39500000 	.word	0x39500000
 800a574:	000fffff 	.word	0x000fffff
 800a578:	7fefffff 	.word	0x7fefffff
 800a57c:	4333      	orrs	r3, r6
 800a57e:	d09d      	beq.n	800a4bc <_strtod_l+0x864>
 800a580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01c      	beq.n	800a5c0 <_strtod_l+0x968>
 800a586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a588:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a58a:	4213      	tst	r3, r2
 800a58c:	d0e3      	beq.n	800a556 <_strtod_l+0x8fe>
 800a58e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a590:	0030      	movs	r0, r6
 800a592:	0039      	movs	r1, r7
 800a594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a596:	2b00      	cmp	r3, #0
 800a598:	d016      	beq.n	800a5c8 <_strtod_l+0x970>
 800a59a:	f7ff fb45 	bl	8009c28 <sulp>
 800a59e:	0002      	movs	r2, r0
 800a5a0:	000b      	movs	r3, r1
 800a5a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a5a4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a5a6:	f7f6 fd4b 	bl	8001040 <__aeabi_dadd>
 800a5aa:	0006      	movs	r6, r0
 800a5ac:	000f      	movs	r7, r1
 800a5ae:	e7d2      	b.n	800a556 <_strtod_l+0x8fe>
 800a5b0:	2601      	movs	r6, #1
 800a5b2:	4a92      	ldr	r2, [pc, #584]	@ (800a7fc <_strtod_l+0xba4>)
 800a5b4:	4276      	negs	r6, r6
 800a5b6:	189b      	adds	r3, r3, r2
 800a5b8:	4a91      	ldr	r2, [pc, #580]	@ (800a800 <_strtod_l+0xba8>)
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	0017      	movs	r7, r2
 800a5be:	e7ca      	b.n	800a556 <_strtod_l+0x8fe>
 800a5c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5c2:	4233      	tst	r3, r6
 800a5c4:	d0c7      	beq.n	800a556 <_strtod_l+0x8fe>
 800a5c6:	e7e2      	b.n	800a58e <_strtod_l+0x936>
 800a5c8:	f7ff fb2e 	bl	8009c28 <sulp>
 800a5cc:	0002      	movs	r2, r0
 800a5ce:	000b      	movs	r3, r1
 800a5d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a5d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a5d4:	f7f7 ffa4 	bl	8002520 <__aeabi_dsub>
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2300      	movs	r3, #0
 800a5dc:	0006      	movs	r6, r0
 800a5de:	000f      	movs	r7, r1
 800a5e0:	f7f5 ff34 	bl	800044c <__aeabi_dcmpeq>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d0b6      	beq.n	800a556 <_strtod_l+0x8fe>
 800a5e8:	e60c      	b.n	800a204 <_strtod_l+0x5ac>
 800a5ea:	9907      	ldr	r1, [sp, #28]
 800a5ec:	9806      	ldr	r0, [sp, #24]
 800a5ee:	f7ff faad 	bl	8009b4c <__ratio>
 800a5f2:	2380      	movs	r3, #128	@ 0x80
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	05db      	lsls	r3, r3, #23
 800a5f8:	0004      	movs	r4, r0
 800a5fa:	000d      	movs	r5, r1
 800a5fc:	f7f5 ff36 	bl	800046c <__aeabi_dcmple>
 800a600:	2800      	cmp	r0, #0
 800a602:	d06c      	beq.n	800a6de <_strtod_l+0xa86>
 800a604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d177      	bne.n	800a6fa <_strtod_l+0xaa2>
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d157      	bne.n	800a6be <_strtod_l+0xa66>
 800a60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a610:	031b      	lsls	r3, r3, #12
 800a612:	d15a      	bne.n	800a6ca <_strtod_l+0xa72>
 800a614:	2200      	movs	r2, #0
 800a616:	0020      	movs	r0, r4
 800a618:	0029      	movs	r1, r5
 800a61a:	4b7a      	ldr	r3, [pc, #488]	@ (800a804 <_strtod_l+0xbac>)
 800a61c:	f7f5 ff1c 	bl	8000458 <__aeabi_dcmplt>
 800a620:	2800      	cmp	r0, #0
 800a622:	d159      	bne.n	800a6d8 <_strtod_l+0xa80>
 800a624:	0020      	movs	r0, r4
 800a626:	0029      	movs	r1, r5
 800a628:	2200      	movs	r2, #0
 800a62a:	4b77      	ldr	r3, [pc, #476]	@ (800a808 <_strtod_l+0xbb0>)
 800a62c:	f7f7 fcb0 	bl	8001f90 <__aeabi_dmul>
 800a630:	0004      	movs	r4, r0
 800a632:	000d      	movs	r5, r1
 800a634:	2380      	movs	r3, #128	@ 0x80
 800a636:	061b      	lsls	r3, r3, #24
 800a638:	18eb      	adds	r3, r5, r3
 800a63a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a63e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a642:	9214      	str	r2, [sp, #80]	@ 0x50
 800a644:	9315      	str	r3, [sp, #84]	@ 0x54
 800a646:	4a71      	ldr	r2, [pc, #452]	@ (800a80c <_strtod_l+0xbb4>)
 800a648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a64a:	4013      	ands	r3, r2
 800a64c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a64e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a650:	4b6f      	ldr	r3, [pc, #444]	@ (800a810 <_strtod_l+0xbb8>)
 800a652:	429a      	cmp	r2, r3
 800a654:	d000      	beq.n	800a658 <_strtod_l+0xa00>
 800a656:	e087      	b.n	800a768 <_strtod_l+0xb10>
 800a658:	4a6e      	ldr	r2, [pc, #440]	@ (800a814 <_strtod_l+0xbbc>)
 800a65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a65c:	4694      	mov	ip, r2
 800a65e:	4463      	add	r3, ip
 800a660:	001f      	movs	r7, r3
 800a662:	0030      	movs	r0, r6
 800a664:	0019      	movs	r1, r3
 800a666:	f7ff f9a5 	bl	80099b4 <__ulp>
 800a66a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a66e:	f7f7 fc8f 	bl	8001f90 <__aeabi_dmul>
 800a672:	0032      	movs	r2, r6
 800a674:	003b      	movs	r3, r7
 800a676:	f7f6 fce3 	bl	8001040 <__aeabi_dadd>
 800a67a:	4a64      	ldr	r2, [pc, #400]	@ (800a80c <_strtod_l+0xbb4>)
 800a67c:	4b66      	ldr	r3, [pc, #408]	@ (800a818 <_strtod_l+0xbc0>)
 800a67e:	0006      	movs	r6, r0
 800a680:	400a      	ands	r2, r1
 800a682:	429a      	cmp	r2, r3
 800a684:	d940      	bls.n	800a708 <_strtod_l+0xab0>
 800a686:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a688:	4a64      	ldr	r2, [pc, #400]	@ (800a81c <_strtod_l+0xbc4>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d103      	bne.n	800a696 <_strtod_l+0xa3e>
 800a68e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a690:	3301      	adds	r3, #1
 800a692:	d100      	bne.n	800a696 <_strtod_l+0xa3e>
 800a694:	e51a      	b.n	800a0cc <_strtod_l+0x474>
 800a696:	2601      	movs	r6, #1
 800a698:	4f60      	ldr	r7, [pc, #384]	@ (800a81c <_strtod_l+0xbc4>)
 800a69a:	4276      	negs	r6, r6
 800a69c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a69e:	9805      	ldr	r0, [sp, #20]
 800a6a0:	f7fe fe3c 	bl	800931c <_Bfree>
 800a6a4:	9908      	ldr	r1, [sp, #32]
 800a6a6:	9805      	ldr	r0, [sp, #20]
 800a6a8:	f7fe fe38 	bl	800931c <_Bfree>
 800a6ac:	9907      	ldr	r1, [sp, #28]
 800a6ae:	9805      	ldr	r0, [sp, #20]
 800a6b0:	f7fe fe34 	bl	800931c <_Bfree>
 800a6b4:	9906      	ldr	r1, [sp, #24]
 800a6b6:	9805      	ldr	r0, [sp, #20]
 800a6b8:	f7fe fe30 	bl	800931c <_Bfree>
 800a6bc:	e617      	b.n	800a2ee <_strtod_l+0x696>
 800a6be:	2e01      	cmp	r6, #1
 800a6c0:	d103      	bne.n	800a6ca <_strtod_l+0xa72>
 800a6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d100      	bne.n	800a6ca <_strtod_l+0xa72>
 800a6c8:	e59c      	b.n	800a204 <_strtod_l+0x5ac>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4c54      	ldr	r4, [pc, #336]	@ (800a820 <_strtod_l+0xbc8>)
 800a6ce:	4d4d      	ldr	r5, [pc, #308]	@ (800a804 <_strtod_l+0xbac>)
 800a6d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a6d4:	2400      	movs	r4, #0
 800a6d6:	e7b2      	b.n	800a63e <_strtod_l+0x9e6>
 800a6d8:	2400      	movs	r4, #0
 800a6da:	4d4b      	ldr	r5, [pc, #300]	@ (800a808 <_strtod_l+0xbb0>)
 800a6dc:	e7aa      	b.n	800a634 <_strtod_l+0x9dc>
 800a6de:	0020      	movs	r0, r4
 800a6e0:	0029      	movs	r1, r5
 800a6e2:	4b49      	ldr	r3, [pc, #292]	@ (800a808 <_strtod_l+0xbb0>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f7f7 fc53 	bl	8001f90 <__aeabi_dmul>
 800a6ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6ec:	0004      	movs	r4, r0
 800a6ee:	000d      	movs	r5, r1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d09f      	beq.n	800a634 <_strtod_l+0x9dc>
 800a6f4:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6f6:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a6f8:	e7a1      	b.n	800a63e <_strtod_l+0x9e6>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	4c41      	ldr	r4, [pc, #260]	@ (800a804 <_strtod_l+0xbac>)
 800a6fe:	0025      	movs	r5, r4
 800a700:	930a      	str	r3, [sp, #40]	@ 0x28
 800a702:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a704:	001c      	movs	r4, r3
 800a706:	e79a      	b.n	800a63e <_strtod_l+0x9e6>
 800a708:	23d4      	movs	r3, #212	@ 0xd4
 800a70a:	049b      	lsls	r3, r3, #18
 800a70c:	18cf      	adds	r7, r1, r3
 800a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a710:	9710      	str	r7, [sp, #64]	@ 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1c2      	bne.n	800a69c <_strtod_l+0xa44>
 800a716:	4b3d      	ldr	r3, [pc, #244]	@ (800a80c <_strtod_l+0xbb4>)
 800a718:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a71a:	403b      	ands	r3, r7
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d1bd      	bne.n	800a69c <_strtod_l+0xa44>
 800a720:	0020      	movs	r0, r4
 800a722:	0029      	movs	r1, r5
 800a724:	f7f5 ff2c 	bl	8000580 <__aeabi_d2lz>
 800a728:	f7f5 ff64 	bl	80005f4 <__aeabi_l2d>
 800a72c:	0002      	movs	r2, r0
 800a72e:	000b      	movs	r3, r1
 800a730:	0020      	movs	r0, r4
 800a732:	0029      	movs	r1, r5
 800a734:	f7f7 fef4 	bl	8002520 <__aeabi_dsub>
 800a738:	033c      	lsls	r4, r7, #12
 800a73a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a73c:	0b24      	lsrs	r4, r4, #12
 800a73e:	4334      	orrs	r4, r6
 800a740:	900e      	str	r0, [sp, #56]	@ 0x38
 800a742:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a744:	4a37      	ldr	r2, [pc, #220]	@ (800a824 <_strtod_l+0xbcc>)
 800a746:	431c      	orrs	r4, r3
 800a748:	d052      	beq.n	800a7f0 <_strtod_l+0xb98>
 800a74a:	4b37      	ldr	r3, [pc, #220]	@ (800a828 <_strtod_l+0xbd0>)
 800a74c:	f7f5 fe84 	bl	8000458 <__aeabi_dcmplt>
 800a750:	2800      	cmp	r0, #0
 800a752:	d000      	beq.n	800a756 <_strtod_l+0xafe>
 800a754:	e4c3      	b.n	800a0de <_strtod_l+0x486>
 800a756:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a758:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a75a:	4a34      	ldr	r2, [pc, #208]	@ (800a82c <_strtod_l+0xbd4>)
 800a75c:	4b2a      	ldr	r3, [pc, #168]	@ (800a808 <_strtod_l+0xbb0>)
 800a75e:	f7f5 fe8f 	bl	8000480 <__aeabi_dcmpgt>
 800a762:	2800      	cmp	r0, #0
 800a764:	d09a      	beq.n	800a69c <_strtod_l+0xa44>
 800a766:	e4ba      	b.n	800a0de <_strtod_l+0x486>
 800a768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d02a      	beq.n	800a7c4 <_strtod_l+0xb6c>
 800a76e:	23d4      	movs	r3, #212	@ 0xd4
 800a770:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a772:	04db      	lsls	r3, r3, #19
 800a774:	429a      	cmp	r2, r3
 800a776:	d825      	bhi.n	800a7c4 <_strtod_l+0xb6c>
 800a778:	0020      	movs	r0, r4
 800a77a:	0029      	movs	r1, r5
 800a77c:	4a2c      	ldr	r2, [pc, #176]	@ (800a830 <_strtod_l+0xbd8>)
 800a77e:	4b2d      	ldr	r3, [pc, #180]	@ (800a834 <_strtod_l+0xbdc>)
 800a780:	f7f5 fe74 	bl	800046c <__aeabi_dcmple>
 800a784:	2800      	cmp	r0, #0
 800a786:	d016      	beq.n	800a7b6 <_strtod_l+0xb5e>
 800a788:	0020      	movs	r0, r4
 800a78a:	0029      	movs	r1, r5
 800a78c:	f7f5 feda 	bl	8000544 <__aeabi_d2uiz>
 800a790:	2800      	cmp	r0, #0
 800a792:	d100      	bne.n	800a796 <_strtod_l+0xb3e>
 800a794:	3001      	adds	r0, #1
 800a796:	f7f8 faeb 	bl	8002d70 <__aeabi_ui2d>
 800a79a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a79c:	0004      	movs	r4, r0
 800a79e:	000d      	movs	r5, r1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d122      	bne.n	800a7ea <_strtod_l+0xb92>
 800a7a4:	2380      	movs	r3, #128	@ 0x80
 800a7a6:	061b      	lsls	r3, r3, #24
 800a7a8:	18cb      	adds	r3, r1, r3
 800a7aa:	9018      	str	r0, [sp, #96]	@ 0x60
 800a7ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a7b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7b2:	9214      	str	r2, [sp, #80]	@ 0x50
 800a7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7b6:	22d6      	movs	r2, #214	@ 0xd6
 800a7b8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a7ba:	04d2      	lsls	r2, r2, #19
 800a7bc:	189b      	adds	r3, r3, r2
 800a7be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a7c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a7c8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a7ca:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800a7cc:	f7ff f8f2 	bl	80099b4 <__ulp>
 800a7d0:	0002      	movs	r2, r0
 800a7d2:	000b      	movs	r3, r1
 800a7d4:	0030      	movs	r0, r6
 800a7d6:	0039      	movs	r1, r7
 800a7d8:	f7f7 fbda 	bl	8001f90 <__aeabi_dmul>
 800a7dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a7de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7e0:	f7f6 fc2e 	bl	8001040 <__aeabi_dadd>
 800a7e4:	0006      	movs	r6, r0
 800a7e6:	000f      	movs	r7, r1
 800a7e8:	e791      	b.n	800a70e <_strtod_l+0xab6>
 800a7ea:	9418      	str	r4, [sp, #96]	@ 0x60
 800a7ec:	9519      	str	r5, [sp, #100]	@ 0x64
 800a7ee:	e7de      	b.n	800a7ae <_strtod_l+0xb56>
 800a7f0:	4b11      	ldr	r3, [pc, #68]	@ (800a838 <_strtod_l+0xbe0>)
 800a7f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a7f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a7f6:	f7f5 fe2f 	bl	8000458 <__aeabi_dcmplt>
 800a7fa:	e7b2      	b.n	800a762 <_strtod_l+0xb0a>
 800a7fc:	fff00000 	.word	0xfff00000
 800a800:	000fffff 	.word	0x000fffff
 800a804:	3ff00000 	.word	0x3ff00000
 800a808:	3fe00000 	.word	0x3fe00000
 800a80c:	7ff00000 	.word	0x7ff00000
 800a810:	7fe00000 	.word	0x7fe00000
 800a814:	fcb00000 	.word	0xfcb00000
 800a818:	7c9fffff 	.word	0x7c9fffff
 800a81c:	7fefffff 	.word	0x7fefffff
 800a820:	bff00000 	.word	0xbff00000
 800a824:	94a03595 	.word	0x94a03595
 800a828:	3fdfffff 	.word	0x3fdfffff
 800a82c:	35afe535 	.word	0x35afe535
 800a830:	ffc00000 	.word	0xffc00000
 800a834:	41dfffff 	.word	0x41dfffff
 800a838:	3fcfffff 	.word	0x3fcfffff

0800a83c <_strtod_r>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	4b02      	ldr	r3, [pc, #8]	@ (800a848 <_strtod_r+0xc>)
 800a840:	f7ff fa0a 	bl	8009c58 <_strtod_l>
 800a844:	bd10      	pop	{r4, pc}
 800a846:	46c0      	nop			@ (mov r8, r8)
 800a848:	2000006c 	.word	0x2000006c

0800a84c <_strtol_l.constprop.0>:
 800a84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a84e:	b085      	sub	sp, #20
 800a850:	0017      	movs	r7, r2
 800a852:	001e      	movs	r6, r3
 800a854:	9003      	str	r0, [sp, #12]
 800a856:	9101      	str	r1, [sp, #4]
 800a858:	2b24      	cmp	r3, #36	@ 0x24
 800a85a:	d844      	bhi.n	800a8e6 <_strtol_l.constprop.0+0x9a>
 800a85c:	000c      	movs	r4, r1
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d041      	beq.n	800a8e6 <_strtol_l.constprop.0+0x9a>
 800a862:	4b3d      	ldr	r3, [pc, #244]	@ (800a958 <_strtol_l.constprop.0+0x10c>)
 800a864:	2208      	movs	r2, #8
 800a866:	469c      	mov	ip, r3
 800a868:	0023      	movs	r3, r4
 800a86a:	4661      	mov	r1, ip
 800a86c:	781d      	ldrb	r5, [r3, #0]
 800a86e:	3401      	adds	r4, #1
 800a870:	5d48      	ldrb	r0, [r1, r5]
 800a872:	0001      	movs	r1, r0
 800a874:	4011      	ands	r1, r2
 800a876:	4210      	tst	r0, r2
 800a878:	d1f6      	bne.n	800a868 <_strtol_l.constprop.0+0x1c>
 800a87a:	2d2d      	cmp	r5, #45	@ 0x2d
 800a87c:	d13a      	bne.n	800a8f4 <_strtol_l.constprop.0+0xa8>
 800a87e:	7825      	ldrb	r5, [r4, #0]
 800a880:	1c9c      	adds	r4, r3, #2
 800a882:	2301      	movs	r3, #1
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2210      	movs	r2, #16
 800a888:	0033      	movs	r3, r6
 800a88a:	4393      	bics	r3, r2
 800a88c:	d109      	bne.n	800a8a2 <_strtol_l.constprop.0+0x56>
 800a88e:	2d30      	cmp	r5, #48	@ 0x30
 800a890:	d136      	bne.n	800a900 <_strtol_l.constprop.0+0xb4>
 800a892:	2120      	movs	r1, #32
 800a894:	7823      	ldrb	r3, [r4, #0]
 800a896:	438b      	bics	r3, r1
 800a898:	2b58      	cmp	r3, #88	@ 0x58
 800a89a:	d131      	bne.n	800a900 <_strtol_l.constprop.0+0xb4>
 800a89c:	0016      	movs	r6, r2
 800a89e:	7865      	ldrb	r5, [r4, #1]
 800a8a0:	3402      	adds	r4, #2
 800a8a2:	4a2e      	ldr	r2, [pc, #184]	@ (800a95c <_strtol_l.constprop.0+0x110>)
 800a8a4:	9b00      	ldr	r3, [sp, #0]
 800a8a6:	4694      	mov	ip, r2
 800a8a8:	4463      	add	r3, ip
 800a8aa:	0031      	movs	r1, r6
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	f7f5 fccc 	bl	800024c <__aeabi_uidivmod>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4684      	mov	ip, r0
 800a8b8:	0010      	movs	r0, r2
 800a8ba:	002b      	movs	r3, r5
 800a8bc:	3b30      	subs	r3, #48	@ 0x30
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d825      	bhi.n	800a90e <_strtol_l.constprop.0+0xc2>
 800a8c2:	001d      	movs	r5, r3
 800a8c4:	42ae      	cmp	r6, r5
 800a8c6:	dd31      	ble.n	800a92c <_strtol_l.constprop.0+0xe0>
 800a8c8:	1c53      	adds	r3, r2, #1
 800a8ca:	d009      	beq.n	800a8e0 <_strtol_l.constprop.0+0x94>
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	4252      	negs	r2, r2
 800a8d0:	4584      	cmp	ip, r0
 800a8d2:	d305      	bcc.n	800a8e0 <_strtol_l.constprop.0+0x94>
 800a8d4:	d101      	bne.n	800a8da <_strtol_l.constprop.0+0x8e>
 800a8d6:	42a9      	cmp	r1, r5
 800a8d8:	db25      	blt.n	800a926 <_strtol_l.constprop.0+0xda>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4370      	muls	r0, r6
 800a8de:	1828      	adds	r0, r5, r0
 800a8e0:	7825      	ldrb	r5, [r4, #0]
 800a8e2:	3401      	adds	r4, #1
 800a8e4:	e7e9      	b.n	800a8ba <_strtol_l.constprop.0+0x6e>
 800a8e6:	f7fd fd11 	bl	800830c <__errno>
 800a8ea:	2316      	movs	r3, #22
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	b005      	add	sp, #20
 800a8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8f4:	9100      	str	r1, [sp, #0]
 800a8f6:	2d2b      	cmp	r5, #43	@ 0x2b
 800a8f8:	d1c5      	bne.n	800a886 <_strtol_l.constprop.0+0x3a>
 800a8fa:	7825      	ldrb	r5, [r4, #0]
 800a8fc:	1c9c      	adds	r4, r3, #2
 800a8fe:	e7c2      	b.n	800a886 <_strtol_l.constprop.0+0x3a>
 800a900:	2e00      	cmp	r6, #0
 800a902:	d1ce      	bne.n	800a8a2 <_strtol_l.constprop.0+0x56>
 800a904:	3608      	adds	r6, #8
 800a906:	2d30      	cmp	r5, #48	@ 0x30
 800a908:	d0cb      	beq.n	800a8a2 <_strtol_l.constprop.0+0x56>
 800a90a:	3602      	adds	r6, #2
 800a90c:	e7c9      	b.n	800a8a2 <_strtol_l.constprop.0+0x56>
 800a90e:	002b      	movs	r3, r5
 800a910:	3b41      	subs	r3, #65	@ 0x41
 800a912:	2b19      	cmp	r3, #25
 800a914:	d801      	bhi.n	800a91a <_strtol_l.constprop.0+0xce>
 800a916:	3d37      	subs	r5, #55	@ 0x37
 800a918:	e7d4      	b.n	800a8c4 <_strtol_l.constprop.0+0x78>
 800a91a:	002b      	movs	r3, r5
 800a91c:	3b61      	subs	r3, #97	@ 0x61
 800a91e:	2b19      	cmp	r3, #25
 800a920:	d804      	bhi.n	800a92c <_strtol_l.constprop.0+0xe0>
 800a922:	3d57      	subs	r5, #87	@ 0x57
 800a924:	e7ce      	b.n	800a8c4 <_strtol_l.constprop.0+0x78>
 800a926:	2201      	movs	r2, #1
 800a928:	4252      	negs	r2, r2
 800a92a:	e7d9      	b.n	800a8e0 <_strtol_l.constprop.0+0x94>
 800a92c:	1c53      	adds	r3, r2, #1
 800a92e:	d108      	bne.n	800a942 <_strtol_l.constprop.0+0xf6>
 800a930:	2322      	movs	r3, #34	@ 0x22
 800a932:	9a03      	ldr	r2, [sp, #12]
 800a934:	9802      	ldr	r0, [sp, #8]
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	2f00      	cmp	r7, #0
 800a93a:	d0d9      	beq.n	800a8f0 <_strtol_l.constprop.0+0xa4>
 800a93c:	1e63      	subs	r3, r4, #1
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	e007      	b.n	800a952 <_strtol_l.constprop.0+0x106>
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d000      	beq.n	800a94a <_strtol_l.constprop.0+0xfe>
 800a948:	4240      	negs	r0, r0
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	d0d0      	beq.n	800a8f0 <_strtol_l.constprop.0+0xa4>
 800a94e:	2a00      	cmp	r2, #0
 800a950:	d1f4      	bne.n	800a93c <_strtol_l.constprop.0+0xf0>
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	603b      	str	r3, [r7, #0]
 800a956:	e7cb      	b.n	800a8f0 <_strtol_l.constprop.0+0xa4>
 800a958:	0800bf91 	.word	0x0800bf91
 800a95c:	7fffffff 	.word	0x7fffffff

0800a960 <_strtol_r>:
 800a960:	b510      	push	{r4, lr}
 800a962:	f7ff ff73 	bl	800a84c <_strtol_l.constprop.0>
 800a966:	bd10      	pop	{r4, pc}

0800a968 <__ssputs_r>:
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	688e      	ldr	r6, [r1, #8]
 800a96c:	b085      	sub	sp, #20
 800a96e:	001f      	movs	r7, r3
 800a970:	000c      	movs	r4, r1
 800a972:	680b      	ldr	r3, [r1, #0]
 800a974:	9002      	str	r0, [sp, #8]
 800a976:	9203      	str	r2, [sp, #12]
 800a978:	42be      	cmp	r6, r7
 800a97a:	d830      	bhi.n	800a9de <__ssputs_r+0x76>
 800a97c:	210c      	movs	r1, #12
 800a97e:	5e62      	ldrsh	r2, [r4, r1]
 800a980:	2190      	movs	r1, #144	@ 0x90
 800a982:	00c9      	lsls	r1, r1, #3
 800a984:	420a      	tst	r2, r1
 800a986:	d028      	beq.n	800a9da <__ssputs_r+0x72>
 800a988:	2003      	movs	r0, #3
 800a98a:	6921      	ldr	r1, [r4, #16]
 800a98c:	1a5b      	subs	r3, r3, r1
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	6963      	ldr	r3, [r4, #20]
 800a992:	4343      	muls	r3, r0
 800a994:	9801      	ldr	r0, [sp, #4]
 800a996:	0fdd      	lsrs	r5, r3, #31
 800a998:	18ed      	adds	r5, r5, r3
 800a99a:	1c7b      	adds	r3, r7, #1
 800a99c:	181b      	adds	r3, r3, r0
 800a99e:	106d      	asrs	r5, r5, #1
 800a9a0:	42ab      	cmp	r3, r5
 800a9a2:	d900      	bls.n	800a9a6 <__ssputs_r+0x3e>
 800a9a4:	001d      	movs	r5, r3
 800a9a6:	0552      	lsls	r2, r2, #21
 800a9a8:	d528      	bpl.n	800a9fc <__ssputs_r+0x94>
 800a9aa:	0029      	movs	r1, r5
 800a9ac:	9802      	ldr	r0, [sp, #8]
 800a9ae:	f7fe fbe1 	bl	8009174 <_malloc_r>
 800a9b2:	1e06      	subs	r6, r0, #0
 800a9b4:	d02c      	beq.n	800aa10 <__ssputs_r+0xa8>
 800a9b6:	9a01      	ldr	r2, [sp, #4]
 800a9b8:	6921      	ldr	r1, [r4, #16]
 800a9ba:	f000 fa1b 	bl	800adf4 <memcpy>
 800a9be:	89a2      	ldrh	r2, [r4, #12]
 800a9c0:	4b18      	ldr	r3, [pc, #96]	@ (800aa24 <__ssputs_r+0xbc>)
 800a9c2:	401a      	ands	r2, r3
 800a9c4:	2380      	movs	r3, #128	@ 0x80
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	6126      	str	r6, [r4, #16]
 800a9ce:	18f6      	adds	r6, r6, r3
 800a9d0:	6026      	str	r6, [r4, #0]
 800a9d2:	003e      	movs	r6, r7
 800a9d4:	6165      	str	r5, [r4, #20]
 800a9d6:	1aed      	subs	r5, r5, r3
 800a9d8:	60a5      	str	r5, [r4, #8]
 800a9da:	42be      	cmp	r6, r7
 800a9dc:	d900      	bls.n	800a9e0 <__ssputs_r+0x78>
 800a9de:	003e      	movs	r6, r7
 800a9e0:	0032      	movs	r2, r6
 800a9e2:	9903      	ldr	r1, [sp, #12]
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	f000 f9ce 	bl	800ad86 <memmove>
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	68a3      	ldr	r3, [r4, #8]
 800a9ee:	1b9b      	subs	r3, r3, r6
 800a9f0:	60a3      	str	r3, [r4, #8]
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	199b      	adds	r3, r3, r6
 800a9f6:	6023      	str	r3, [r4, #0]
 800a9f8:	b005      	add	sp, #20
 800a9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fc:	002a      	movs	r2, r5
 800a9fe:	9802      	ldr	r0, [sp, #8]
 800aa00:	f000 fdc0 	bl	800b584 <_realloc_r>
 800aa04:	1e06      	subs	r6, r0, #0
 800aa06:	d1e0      	bne.n	800a9ca <__ssputs_r+0x62>
 800aa08:	6921      	ldr	r1, [r4, #16]
 800aa0a:	9802      	ldr	r0, [sp, #8]
 800aa0c:	f7fe fb3c 	bl	8009088 <_free_r>
 800aa10:	230c      	movs	r3, #12
 800aa12:	2001      	movs	r0, #1
 800aa14:	9a02      	ldr	r2, [sp, #8]
 800aa16:	4240      	negs	r0, r0
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	89a2      	ldrh	r2, [r4, #12]
 800aa1c:	3334      	adds	r3, #52	@ 0x34
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	e7e9      	b.n	800a9f8 <__ssputs_r+0x90>
 800aa24:	fffffb7f 	.word	0xfffffb7f

0800aa28 <_svfiprintf_r>:
 800aa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa2a:	b0a1      	sub	sp, #132	@ 0x84
 800aa2c:	9003      	str	r0, [sp, #12]
 800aa2e:	001d      	movs	r5, r3
 800aa30:	898b      	ldrh	r3, [r1, #12]
 800aa32:	000f      	movs	r7, r1
 800aa34:	0016      	movs	r6, r2
 800aa36:	061b      	lsls	r3, r3, #24
 800aa38:	d511      	bpl.n	800aa5e <_svfiprintf_r+0x36>
 800aa3a:	690b      	ldr	r3, [r1, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10e      	bne.n	800aa5e <_svfiprintf_r+0x36>
 800aa40:	2140      	movs	r1, #64	@ 0x40
 800aa42:	f7fe fb97 	bl	8009174 <_malloc_r>
 800aa46:	6038      	str	r0, [r7, #0]
 800aa48:	6138      	str	r0, [r7, #16]
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d105      	bne.n	800aa5a <_svfiprintf_r+0x32>
 800aa4e:	230c      	movs	r3, #12
 800aa50:	9a03      	ldr	r2, [sp, #12]
 800aa52:	6013      	str	r3, [r2, #0]
 800aa54:	2001      	movs	r0, #1
 800aa56:	4240      	negs	r0, r0
 800aa58:	e0cf      	b.n	800abfa <_svfiprintf_r+0x1d2>
 800aa5a:	2340      	movs	r3, #64	@ 0x40
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	ac08      	add	r4, sp, #32
 800aa62:	6163      	str	r3, [r4, #20]
 800aa64:	3320      	adds	r3, #32
 800aa66:	7663      	strb	r3, [r4, #25]
 800aa68:	3310      	adds	r3, #16
 800aa6a:	76a3      	strb	r3, [r4, #26]
 800aa6c:	9507      	str	r5, [sp, #28]
 800aa6e:	0035      	movs	r5, r6
 800aa70:	782b      	ldrb	r3, [r5, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d001      	beq.n	800aa7a <_svfiprintf_r+0x52>
 800aa76:	2b25      	cmp	r3, #37	@ 0x25
 800aa78:	d148      	bne.n	800ab0c <_svfiprintf_r+0xe4>
 800aa7a:	1bab      	subs	r3, r5, r6
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	42b5      	cmp	r5, r6
 800aa80:	d00b      	beq.n	800aa9a <_svfiprintf_r+0x72>
 800aa82:	0032      	movs	r2, r6
 800aa84:	0039      	movs	r1, r7
 800aa86:	9803      	ldr	r0, [sp, #12]
 800aa88:	f7ff ff6e 	bl	800a968 <__ssputs_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d100      	bne.n	800aa92 <_svfiprintf_r+0x6a>
 800aa90:	e0ae      	b.n	800abf0 <_svfiprintf_r+0x1c8>
 800aa92:	6963      	ldr	r3, [r4, #20]
 800aa94:	9a05      	ldr	r2, [sp, #20]
 800aa96:	189b      	adds	r3, r3, r2
 800aa98:	6163      	str	r3, [r4, #20]
 800aa9a:	782b      	ldrb	r3, [r5, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d100      	bne.n	800aaa2 <_svfiprintf_r+0x7a>
 800aaa0:	e0a6      	b.n	800abf0 <_svfiprintf_r+0x1c8>
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4252      	negs	r2, r2
 800aaa8:	6062      	str	r2, [r4, #4]
 800aaaa:	a904      	add	r1, sp, #16
 800aaac:	3254      	adds	r2, #84	@ 0x54
 800aaae:	1852      	adds	r2, r2, r1
 800aab0:	1c6e      	adds	r6, r5, #1
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	60e3      	str	r3, [r4, #12]
 800aab6:	60a3      	str	r3, [r4, #8]
 800aab8:	7013      	strb	r3, [r2, #0]
 800aaba:	65a3      	str	r3, [r4, #88]	@ 0x58
 800aabc:	4b54      	ldr	r3, [pc, #336]	@ (800ac10 <_svfiprintf_r+0x1e8>)
 800aabe:	2205      	movs	r2, #5
 800aac0:	0018      	movs	r0, r3
 800aac2:	7831      	ldrb	r1, [r6, #0]
 800aac4:	9305      	str	r3, [sp, #20]
 800aac6:	f7fd fc4e 	bl	8008366 <memchr>
 800aaca:	1c75      	adds	r5, r6, #1
 800aacc:	2800      	cmp	r0, #0
 800aace:	d11f      	bne.n	800ab10 <_svfiprintf_r+0xe8>
 800aad0:	6822      	ldr	r2, [r4, #0]
 800aad2:	06d3      	lsls	r3, r2, #27
 800aad4:	d504      	bpl.n	800aae0 <_svfiprintf_r+0xb8>
 800aad6:	2353      	movs	r3, #83	@ 0x53
 800aad8:	a904      	add	r1, sp, #16
 800aada:	185b      	adds	r3, r3, r1
 800aadc:	2120      	movs	r1, #32
 800aade:	7019      	strb	r1, [r3, #0]
 800aae0:	0713      	lsls	r3, r2, #28
 800aae2:	d504      	bpl.n	800aaee <_svfiprintf_r+0xc6>
 800aae4:	2353      	movs	r3, #83	@ 0x53
 800aae6:	a904      	add	r1, sp, #16
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	212b      	movs	r1, #43	@ 0x2b
 800aaec:	7019      	strb	r1, [r3, #0]
 800aaee:	7833      	ldrb	r3, [r6, #0]
 800aaf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaf2:	d016      	beq.n	800ab22 <_svfiprintf_r+0xfa>
 800aaf4:	0035      	movs	r5, r6
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	200a      	movs	r0, #10
 800aafa:	68e3      	ldr	r3, [r4, #12]
 800aafc:	782a      	ldrb	r2, [r5, #0]
 800aafe:	1c6e      	adds	r6, r5, #1
 800ab00:	3a30      	subs	r2, #48	@ 0x30
 800ab02:	2a09      	cmp	r2, #9
 800ab04:	d950      	bls.n	800aba8 <_svfiprintf_r+0x180>
 800ab06:	2900      	cmp	r1, #0
 800ab08:	d111      	bne.n	800ab2e <_svfiprintf_r+0x106>
 800ab0a:	e017      	b.n	800ab3c <_svfiprintf_r+0x114>
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	e7af      	b.n	800aa70 <_svfiprintf_r+0x48>
 800ab10:	9b05      	ldr	r3, [sp, #20]
 800ab12:	6822      	ldr	r2, [r4, #0]
 800ab14:	1ac0      	subs	r0, r0, r3
 800ab16:	2301      	movs	r3, #1
 800ab18:	4083      	lsls	r3, r0
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	002e      	movs	r6, r5
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	e7cc      	b.n	800aabc <_svfiprintf_r+0x94>
 800ab22:	9b07      	ldr	r3, [sp, #28]
 800ab24:	1d19      	adds	r1, r3, #4
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	9107      	str	r1, [sp, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	db01      	blt.n	800ab32 <_svfiprintf_r+0x10a>
 800ab2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab30:	e004      	b.n	800ab3c <_svfiprintf_r+0x114>
 800ab32:	425b      	negs	r3, r3
 800ab34:	60e3      	str	r3, [r4, #12]
 800ab36:	2302      	movs	r3, #2
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	6023      	str	r3, [r4, #0]
 800ab3c:	782b      	ldrb	r3, [r5, #0]
 800ab3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab40:	d10c      	bne.n	800ab5c <_svfiprintf_r+0x134>
 800ab42:	786b      	ldrb	r3, [r5, #1]
 800ab44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab46:	d134      	bne.n	800abb2 <_svfiprintf_r+0x18a>
 800ab48:	9b07      	ldr	r3, [sp, #28]
 800ab4a:	3502      	adds	r5, #2
 800ab4c:	1d1a      	adds	r2, r3, #4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	9207      	str	r2, [sp, #28]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da01      	bge.n	800ab5a <_svfiprintf_r+0x132>
 800ab56:	2301      	movs	r3, #1
 800ab58:	425b      	negs	r3, r3
 800ab5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab5c:	4e2d      	ldr	r6, [pc, #180]	@ (800ac14 <_svfiprintf_r+0x1ec>)
 800ab5e:	2203      	movs	r2, #3
 800ab60:	0030      	movs	r0, r6
 800ab62:	7829      	ldrb	r1, [r5, #0]
 800ab64:	f7fd fbff 	bl	8008366 <memchr>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d006      	beq.n	800ab7a <_svfiprintf_r+0x152>
 800ab6c:	2340      	movs	r3, #64	@ 0x40
 800ab6e:	1b80      	subs	r0, r0, r6
 800ab70:	4083      	lsls	r3, r0
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	3501      	adds	r5, #1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	7829      	ldrb	r1, [r5, #0]
 800ab7c:	2206      	movs	r2, #6
 800ab7e:	4826      	ldr	r0, [pc, #152]	@ (800ac18 <_svfiprintf_r+0x1f0>)
 800ab80:	1c6e      	adds	r6, r5, #1
 800ab82:	7621      	strb	r1, [r4, #24]
 800ab84:	f7fd fbef 	bl	8008366 <memchr>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d038      	beq.n	800abfe <_svfiprintf_r+0x1d6>
 800ab8c:	4b23      	ldr	r3, [pc, #140]	@ (800ac1c <_svfiprintf_r+0x1f4>)
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d122      	bne.n	800abd8 <_svfiprintf_r+0x1b0>
 800ab92:	2207      	movs	r2, #7
 800ab94:	9b07      	ldr	r3, [sp, #28]
 800ab96:	3307      	adds	r3, #7
 800ab98:	4393      	bics	r3, r2
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	9307      	str	r3, [sp, #28]
 800ab9e:	6963      	ldr	r3, [r4, #20]
 800aba0:	9a04      	ldr	r2, [sp, #16]
 800aba2:	189b      	adds	r3, r3, r2
 800aba4:	6163      	str	r3, [r4, #20]
 800aba6:	e762      	b.n	800aa6e <_svfiprintf_r+0x46>
 800aba8:	4343      	muls	r3, r0
 800abaa:	0035      	movs	r5, r6
 800abac:	2101      	movs	r1, #1
 800abae:	189b      	adds	r3, r3, r2
 800abb0:	e7a4      	b.n	800aafc <_svfiprintf_r+0xd4>
 800abb2:	2300      	movs	r3, #0
 800abb4:	200a      	movs	r0, #10
 800abb6:	0019      	movs	r1, r3
 800abb8:	3501      	adds	r5, #1
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	782a      	ldrb	r2, [r5, #0]
 800abbe:	1c6e      	adds	r6, r5, #1
 800abc0:	3a30      	subs	r2, #48	@ 0x30
 800abc2:	2a09      	cmp	r2, #9
 800abc4:	d903      	bls.n	800abce <_svfiprintf_r+0x1a6>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0c8      	beq.n	800ab5c <_svfiprintf_r+0x134>
 800abca:	9109      	str	r1, [sp, #36]	@ 0x24
 800abcc:	e7c6      	b.n	800ab5c <_svfiprintf_r+0x134>
 800abce:	4341      	muls	r1, r0
 800abd0:	0035      	movs	r5, r6
 800abd2:	2301      	movs	r3, #1
 800abd4:	1889      	adds	r1, r1, r2
 800abd6:	e7f1      	b.n	800abbc <_svfiprintf_r+0x194>
 800abd8:	aa07      	add	r2, sp, #28
 800abda:	9200      	str	r2, [sp, #0]
 800abdc:	0021      	movs	r1, r4
 800abde:	003a      	movs	r2, r7
 800abe0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac20 <_svfiprintf_r+0x1f8>)
 800abe2:	9803      	ldr	r0, [sp, #12]
 800abe4:	f7fc fc3e 	bl	8007464 <_printf_float>
 800abe8:	9004      	str	r0, [sp, #16]
 800abea:	9b04      	ldr	r3, [sp, #16]
 800abec:	3301      	adds	r3, #1
 800abee:	d1d6      	bne.n	800ab9e <_svfiprintf_r+0x176>
 800abf0:	89bb      	ldrh	r3, [r7, #12]
 800abf2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800abf4:	065b      	lsls	r3, r3, #25
 800abf6:	d500      	bpl.n	800abfa <_svfiprintf_r+0x1d2>
 800abf8:	e72c      	b.n	800aa54 <_svfiprintf_r+0x2c>
 800abfa:	b021      	add	sp, #132	@ 0x84
 800abfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abfe:	aa07      	add	r2, sp, #28
 800ac00:	9200      	str	r2, [sp, #0]
 800ac02:	0021      	movs	r1, r4
 800ac04:	003a      	movs	r2, r7
 800ac06:	4b06      	ldr	r3, [pc, #24]	@ (800ac20 <_svfiprintf_r+0x1f8>)
 800ac08:	9803      	ldr	r0, [sp, #12]
 800ac0a:	f7fc fed9 	bl	80079c0 <_printf_i>
 800ac0e:	e7eb      	b.n	800abe8 <_svfiprintf_r+0x1c0>
 800ac10:	0800c091 	.word	0x0800c091
 800ac14:	0800c097 	.word	0x0800c097
 800ac18:	0800c09b 	.word	0x0800c09b
 800ac1c:	08007465 	.word	0x08007465
 800ac20:	0800a969 	.word	0x0800a969

0800ac24 <__sflush_r>:
 800ac24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac26:	220c      	movs	r2, #12
 800ac28:	5e8b      	ldrsh	r3, [r1, r2]
 800ac2a:	0005      	movs	r5, r0
 800ac2c:	000c      	movs	r4, r1
 800ac2e:	071a      	lsls	r2, r3, #28
 800ac30:	d456      	bmi.n	800ace0 <__sflush_r+0xbc>
 800ac32:	684a      	ldr	r2, [r1, #4]
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	dc02      	bgt.n	800ac3e <__sflush_r+0x1a>
 800ac38:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	dd4e      	ble.n	800acdc <__sflush_r+0xb8>
 800ac3e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac40:	2f00      	cmp	r7, #0
 800ac42:	d04b      	beq.n	800acdc <__sflush_r+0xb8>
 800ac44:	2200      	movs	r2, #0
 800ac46:	2080      	movs	r0, #128	@ 0x80
 800ac48:	682e      	ldr	r6, [r5, #0]
 800ac4a:	602a      	str	r2, [r5, #0]
 800ac4c:	001a      	movs	r2, r3
 800ac4e:	0140      	lsls	r0, r0, #5
 800ac50:	6a21      	ldr	r1, [r4, #32]
 800ac52:	4002      	ands	r2, r0
 800ac54:	4203      	tst	r3, r0
 800ac56:	d033      	beq.n	800acc0 <__sflush_r+0x9c>
 800ac58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	075b      	lsls	r3, r3, #29
 800ac5e:	d506      	bpl.n	800ac6e <__sflush_r+0x4a>
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <__sflush_r+0x4a>
 800ac6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	2300      	movs	r3, #0
 800ac70:	0028      	movs	r0, r5
 800ac72:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac74:	6a21      	ldr	r1, [r4, #32]
 800ac76:	47b8      	blx	r7
 800ac78:	89a2      	ldrh	r2, [r4, #12]
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	d106      	bne.n	800ac8c <__sflush_r+0x68>
 800ac7e:	6829      	ldr	r1, [r5, #0]
 800ac80:	291d      	cmp	r1, #29
 800ac82:	d846      	bhi.n	800ad12 <__sflush_r+0xee>
 800ac84:	4b29      	ldr	r3, [pc, #164]	@ (800ad2c <__sflush_r+0x108>)
 800ac86:	410b      	asrs	r3, r1
 800ac88:	07db      	lsls	r3, r3, #31
 800ac8a:	d442      	bmi.n	800ad12 <__sflush_r+0xee>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6063      	str	r3, [r4, #4]
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	04d2      	lsls	r2, r2, #19
 800ac96:	d505      	bpl.n	800aca4 <__sflush_r+0x80>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <__sflush_r+0x7e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d100      	bne.n	800aca4 <__sflush_r+0x80>
 800aca2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aca6:	602e      	str	r6, [r5, #0]
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d017      	beq.n	800acdc <__sflush_r+0xb8>
 800acac:	0023      	movs	r3, r4
 800acae:	3344      	adds	r3, #68	@ 0x44
 800acb0:	4299      	cmp	r1, r3
 800acb2:	d002      	beq.n	800acba <__sflush_r+0x96>
 800acb4:	0028      	movs	r0, r5
 800acb6:	f7fe f9e7 	bl	8009088 <_free_r>
 800acba:	2300      	movs	r3, #0
 800acbc:	6363      	str	r3, [r4, #52]	@ 0x34
 800acbe:	e00d      	b.n	800acdc <__sflush_r+0xb8>
 800acc0:	2301      	movs	r3, #1
 800acc2:	0028      	movs	r0, r5
 800acc4:	47b8      	blx	r7
 800acc6:	0002      	movs	r2, r0
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d1c6      	bne.n	800ac5a <__sflush_r+0x36>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c3      	beq.n	800ac5a <__sflush_r+0x36>
 800acd2:	2b1d      	cmp	r3, #29
 800acd4:	d001      	beq.n	800acda <__sflush_r+0xb6>
 800acd6:	2b16      	cmp	r3, #22
 800acd8:	d11a      	bne.n	800ad10 <__sflush_r+0xec>
 800acda:	602e      	str	r6, [r5, #0]
 800acdc:	2000      	movs	r0, #0
 800acde:	e01e      	b.n	800ad1e <__sflush_r+0xfa>
 800ace0:	690e      	ldr	r6, [r1, #16]
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d0fa      	beq.n	800acdc <__sflush_r+0xb8>
 800ace6:	680f      	ldr	r7, [r1, #0]
 800ace8:	600e      	str	r6, [r1, #0]
 800acea:	1bba      	subs	r2, r7, r6
 800acec:	9201      	str	r2, [sp, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	079b      	lsls	r3, r3, #30
 800acf2:	d100      	bne.n	800acf6 <__sflush_r+0xd2>
 800acf4:	694a      	ldr	r2, [r1, #20]
 800acf6:	60a2      	str	r2, [r4, #8]
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	ddee      	ble.n	800acdc <__sflush_r+0xb8>
 800acfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ad00:	0032      	movs	r2, r6
 800ad02:	001f      	movs	r7, r3
 800ad04:	0028      	movs	r0, r5
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	6a21      	ldr	r1, [r4, #32]
 800ad0a:	47b8      	blx	r7
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	dc07      	bgt.n	800ad20 <__sflush_r+0xfc>
 800ad10:	89a2      	ldrh	r2, [r4, #12]
 800ad12:	2340      	movs	r3, #64	@ 0x40
 800ad14:	2001      	movs	r0, #1
 800ad16:	4313      	orrs	r3, r2
 800ad18:	b21b      	sxth	r3, r3
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	4240      	negs	r0, r0
 800ad1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	1836      	adds	r6, r6, r0
 800ad24:	1a1b      	subs	r3, r3, r0
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	e7e6      	b.n	800acf8 <__sflush_r+0xd4>
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	dfbffffe 	.word	0xdfbffffe

0800ad30 <_fflush_r>:
 800ad30:	690b      	ldr	r3, [r1, #16]
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	0005      	movs	r5, r0
 800ad36:	000c      	movs	r4, r1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <_fflush_r+0x12>
 800ad3c:	2500      	movs	r5, #0
 800ad3e:	0028      	movs	r0, r5
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d004      	beq.n	800ad50 <_fflush_r+0x20>
 800ad46:	6a03      	ldr	r3, [r0, #32]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <_fflush_r+0x20>
 800ad4c:	f7fd f9e4 	bl	8008118 <__sinit>
 800ad50:	220c      	movs	r2, #12
 800ad52:	5ea3      	ldrsh	r3, [r4, r2]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d0f1      	beq.n	800ad3c <_fflush_r+0xc>
 800ad58:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad5a:	07d2      	lsls	r2, r2, #31
 800ad5c:	d404      	bmi.n	800ad68 <_fflush_r+0x38>
 800ad5e:	059b      	lsls	r3, r3, #22
 800ad60:	d402      	bmi.n	800ad68 <_fflush_r+0x38>
 800ad62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad64:	f7fd fafd 	bl	8008362 <__retarget_lock_acquire_recursive>
 800ad68:	0028      	movs	r0, r5
 800ad6a:	0021      	movs	r1, r4
 800ad6c:	f7ff ff5a 	bl	800ac24 <__sflush_r>
 800ad70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad72:	0005      	movs	r5, r0
 800ad74:	07db      	lsls	r3, r3, #31
 800ad76:	d4e2      	bmi.n	800ad3e <_fflush_r+0xe>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	059b      	lsls	r3, r3, #22
 800ad7c:	d4df      	bmi.n	800ad3e <_fflush_r+0xe>
 800ad7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad80:	f7fd faf0 	bl	8008364 <__retarget_lock_release_recursive>
 800ad84:	e7db      	b.n	800ad3e <_fflush_r+0xe>

0800ad86 <memmove>:
 800ad86:	b510      	push	{r4, lr}
 800ad88:	4288      	cmp	r0, r1
 800ad8a:	d806      	bhi.n	800ad9a <memmove+0x14>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d008      	beq.n	800ada4 <memmove+0x1e>
 800ad92:	5ccc      	ldrb	r4, [r1, r3]
 800ad94:	54c4      	strb	r4, [r0, r3]
 800ad96:	3301      	adds	r3, #1
 800ad98:	e7f9      	b.n	800ad8e <memmove+0x8>
 800ad9a:	188b      	adds	r3, r1, r2
 800ad9c:	4298      	cmp	r0, r3
 800ad9e:	d2f5      	bcs.n	800ad8c <memmove+0x6>
 800ada0:	3a01      	subs	r2, #1
 800ada2:	d200      	bcs.n	800ada6 <memmove+0x20>
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	5c8b      	ldrb	r3, [r1, r2]
 800ada8:	5483      	strb	r3, [r0, r2]
 800adaa:	e7f9      	b.n	800ada0 <memmove+0x1a>

0800adac <strncmp>:
 800adac:	b530      	push	{r4, r5, lr}
 800adae:	0005      	movs	r5, r0
 800adb0:	1e10      	subs	r0, r2, #0
 800adb2:	d00b      	beq.n	800adcc <strncmp+0x20>
 800adb4:	2400      	movs	r4, #0
 800adb6:	3a01      	subs	r2, #1
 800adb8:	5d2b      	ldrb	r3, [r5, r4]
 800adba:	5d08      	ldrb	r0, [r1, r4]
 800adbc:	4283      	cmp	r3, r0
 800adbe:	d104      	bne.n	800adca <strncmp+0x1e>
 800adc0:	42a2      	cmp	r2, r4
 800adc2:	d002      	beq.n	800adca <strncmp+0x1e>
 800adc4:	3401      	adds	r4, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1f6      	bne.n	800adb8 <strncmp+0xc>
 800adca:	1a18      	subs	r0, r3, r0
 800adcc:	bd30      	pop	{r4, r5, pc}
	...

0800add0 <_sbrk_r>:
 800add0:	2300      	movs	r3, #0
 800add2:	b570      	push	{r4, r5, r6, lr}
 800add4:	4d06      	ldr	r5, [pc, #24]	@ (800adf0 <_sbrk_r+0x20>)
 800add6:	0004      	movs	r4, r0
 800add8:	0008      	movs	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f8 fcf6 	bl	80037cc <_sbrk>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d103      	bne.n	800adec <_sbrk_r+0x1c>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d000      	beq.n	800adec <_sbrk_r+0x1c>
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	46c0      	nop			@ (mov r8, r8)
 800adf0:	200004b0 	.word	0x200004b0

0800adf4 <memcpy>:
 800adf4:	2300      	movs	r3, #0
 800adf6:	b510      	push	{r4, lr}
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d100      	bne.n	800adfe <memcpy+0xa>
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	5ccc      	ldrb	r4, [r1, r3]
 800ae00:	54c4      	strb	r4, [r0, r3]
 800ae02:	3301      	adds	r3, #1
 800ae04:	e7f8      	b.n	800adf8 <memcpy+0x4>
	...

0800ae08 <nan>:
 800ae08:	2000      	movs	r0, #0
 800ae0a:	4901      	ldr	r1, [pc, #4]	@ (800ae10 <nan+0x8>)
 800ae0c:	4770      	bx	lr
 800ae0e:	46c0      	nop			@ (mov r8, r8)
 800ae10:	7ff80000 	.word	0x7ff80000

0800ae14 <__assert_func>:
 800ae14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae16:	0014      	movs	r4, r2
 800ae18:	001a      	movs	r2, r3
 800ae1a:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <__assert_func+0x2c>)
 800ae1c:	0005      	movs	r5, r0
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	000e      	movs	r6, r1
 800ae22:	68d8      	ldr	r0, [r3, #12]
 800ae24:	4b07      	ldr	r3, [pc, #28]	@ (800ae44 <__assert_func+0x30>)
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d101      	bne.n	800ae2e <__assert_func+0x1a>
 800ae2a:	4b07      	ldr	r3, [pc, #28]	@ (800ae48 <__assert_func+0x34>)
 800ae2c:	001c      	movs	r4, r3
 800ae2e:	4907      	ldr	r1, [pc, #28]	@ (800ae4c <__assert_func+0x38>)
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	9402      	str	r4, [sp, #8]
 800ae34:	002b      	movs	r3, r5
 800ae36:	9600      	str	r6, [sp, #0]
 800ae38:	f000 fbe0 	bl	800b5fc <fiprintf>
 800ae3c:	f000 fbee 	bl	800b61c <abort>
 800ae40:	2000001c 	.word	0x2000001c
 800ae44:	0800c0aa 	.word	0x0800c0aa
 800ae48:	0800c0e5 	.word	0x0800c0e5
 800ae4c:	0800c0b7 	.word	0x0800c0b7

0800ae50 <_calloc_r>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	0c0b      	lsrs	r3, r1, #16
 800ae54:	0c15      	lsrs	r5, r2, #16
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d11e      	bne.n	800ae98 <_calloc_r+0x48>
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	d10c      	bne.n	800ae78 <_calloc_r+0x28>
 800ae5e:	b289      	uxth	r1, r1
 800ae60:	b294      	uxth	r4, r2
 800ae62:	434c      	muls	r4, r1
 800ae64:	0021      	movs	r1, r4
 800ae66:	f7fe f985 	bl	8009174 <_malloc_r>
 800ae6a:	1e05      	subs	r5, r0, #0
 800ae6c:	d01a      	beq.n	800aea4 <_calloc_r+0x54>
 800ae6e:	0022      	movs	r2, r4
 800ae70:	2100      	movs	r1, #0
 800ae72:	f7fd f9f1 	bl	8008258 <memset>
 800ae76:	e016      	b.n	800aea6 <_calloc_r+0x56>
 800ae78:	1c2b      	adds	r3, r5, #0
 800ae7a:	1c0c      	adds	r4, r1, #0
 800ae7c:	b289      	uxth	r1, r1
 800ae7e:	b292      	uxth	r2, r2
 800ae80:	434a      	muls	r2, r1
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	b2a1      	uxth	r1, r4
 800ae86:	4359      	muls	r1, r3
 800ae88:	0c14      	lsrs	r4, r2, #16
 800ae8a:	190c      	adds	r4, r1, r4
 800ae8c:	0c23      	lsrs	r3, r4, #16
 800ae8e:	d107      	bne.n	800aea0 <_calloc_r+0x50>
 800ae90:	0424      	lsls	r4, r4, #16
 800ae92:	b292      	uxth	r2, r2
 800ae94:	4314      	orrs	r4, r2
 800ae96:	e7e5      	b.n	800ae64 <_calloc_r+0x14>
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	d101      	bne.n	800aea0 <_calloc_r+0x50>
 800ae9c:	1c14      	adds	r4, r2, #0
 800ae9e:	e7ed      	b.n	800ae7c <_calloc_r+0x2c>
 800aea0:	230c      	movs	r3, #12
 800aea2:	6003      	str	r3, [r0, #0]
 800aea4:	2500      	movs	r5, #0
 800aea6:	0028      	movs	r0, r5
 800aea8:	bd70      	pop	{r4, r5, r6, pc}

0800aeaa <rshift>:
 800aeaa:	0002      	movs	r2, r0
 800aeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeae:	6904      	ldr	r4, [r0, #16]
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	3214      	adds	r2, #20
 800aeb4:	114b      	asrs	r3, r1, #5
 800aeb6:	0016      	movs	r6, r2
 800aeb8:	9302      	str	r3, [sp, #8]
 800aeba:	429c      	cmp	r4, r3
 800aebc:	dd31      	ble.n	800af22 <rshift+0x78>
 800aebe:	261f      	movs	r6, #31
 800aec0:	000f      	movs	r7, r1
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	00a5      	lsls	r5, r4, #2
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	4037      	ands	r7, r6
 800aeca:	1955      	adds	r5, r2, r5
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	9701      	str	r7, [sp, #4]
 800aed0:	4231      	tst	r1, r6
 800aed2:	d10d      	bne.n	800aef0 <rshift+0x46>
 800aed4:	0016      	movs	r6, r2
 800aed6:	0019      	movs	r1, r3
 800aed8:	428d      	cmp	r5, r1
 800aeda:	d836      	bhi.n	800af4a <rshift+0xa0>
 800aedc:	9b00      	ldr	r3, [sp, #0]
 800aede:	2600      	movs	r6, #0
 800aee0:	3b03      	subs	r3, #3
 800aee2:	429d      	cmp	r5, r3
 800aee4:	d302      	bcc.n	800aeec <rshift+0x42>
 800aee6:	9b02      	ldr	r3, [sp, #8]
 800aee8:	1ae4      	subs	r4, r4, r3
 800aeea:	00a6      	lsls	r6, r4, #2
 800aeec:	1996      	adds	r6, r2, r6
 800aeee:	e018      	b.n	800af22 <rshift+0x78>
 800aef0:	2120      	movs	r1, #32
 800aef2:	9e01      	ldr	r6, [sp, #4]
 800aef4:	9f01      	ldr	r7, [sp, #4]
 800aef6:	1b89      	subs	r1, r1, r6
 800aef8:	9e00      	ldr	r6, [sp, #0]
 800aefa:	9103      	str	r1, [sp, #12]
 800aefc:	ce02      	ldmia	r6!, {r1}
 800aefe:	4694      	mov	ip, r2
 800af00:	40f9      	lsrs	r1, r7
 800af02:	42b5      	cmp	r5, r6
 800af04:	d816      	bhi.n	800af34 <rshift+0x8a>
 800af06:	9b00      	ldr	r3, [sp, #0]
 800af08:	2600      	movs	r6, #0
 800af0a:	3301      	adds	r3, #1
 800af0c:	429d      	cmp	r5, r3
 800af0e:	d303      	bcc.n	800af18 <rshift+0x6e>
 800af10:	9b02      	ldr	r3, [sp, #8]
 800af12:	1ae4      	subs	r4, r4, r3
 800af14:	00a6      	lsls	r6, r4, #2
 800af16:	3e04      	subs	r6, #4
 800af18:	1996      	adds	r6, r2, r6
 800af1a:	6031      	str	r1, [r6, #0]
 800af1c:	2900      	cmp	r1, #0
 800af1e:	d000      	beq.n	800af22 <rshift+0x78>
 800af20:	3604      	adds	r6, #4
 800af22:	1ab1      	subs	r1, r6, r2
 800af24:	1089      	asrs	r1, r1, #2
 800af26:	6101      	str	r1, [r0, #16]
 800af28:	4296      	cmp	r6, r2
 800af2a:	d101      	bne.n	800af30 <rshift+0x86>
 800af2c:	2300      	movs	r3, #0
 800af2e:	6143      	str	r3, [r0, #20]
 800af30:	b005      	add	sp, #20
 800af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af34:	6837      	ldr	r7, [r6, #0]
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	409f      	lsls	r7, r3
 800af3a:	430f      	orrs	r7, r1
 800af3c:	4661      	mov	r1, ip
 800af3e:	c180      	stmia	r1!, {r7}
 800af40:	468c      	mov	ip, r1
 800af42:	9b01      	ldr	r3, [sp, #4]
 800af44:	ce02      	ldmia	r6!, {r1}
 800af46:	40d9      	lsrs	r1, r3
 800af48:	e7db      	b.n	800af02 <rshift+0x58>
 800af4a:	c980      	ldmia	r1!, {r7}
 800af4c:	c680      	stmia	r6!, {r7}
 800af4e:	e7c3      	b.n	800aed8 <rshift+0x2e>

0800af50 <__hexdig_fun>:
 800af50:	0002      	movs	r2, r0
 800af52:	3a30      	subs	r2, #48	@ 0x30
 800af54:	0003      	movs	r3, r0
 800af56:	2a09      	cmp	r2, #9
 800af58:	d802      	bhi.n	800af60 <__hexdig_fun+0x10>
 800af5a:	3b20      	subs	r3, #32
 800af5c:	b2d8      	uxtb	r0, r3
 800af5e:	4770      	bx	lr
 800af60:	0002      	movs	r2, r0
 800af62:	3a61      	subs	r2, #97	@ 0x61
 800af64:	2a05      	cmp	r2, #5
 800af66:	d801      	bhi.n	800af6c <__hexdig_fun+0x1c>
 800af68:	3b47      	subs	r3, #71	@ 0x47
 800af6a:	e7f7      	b.n	800af5c <__hexdig_fun+0xc>
 800af6c:	001a      	movs	r2, r3
 800af6e:	3a41      	subs	r2, #65	@ 0x41
 800af70:	2000      	movs	r0, #0
 800af72:	2a05      	cmp	r2, #5
 800af74:	d8f3      	bhi.n	800af5e <__hexdig_fun+0xe>
 800af76:	3b27      	subs	r3, #39	@ 0x27
 800af78:	e7f0      	b.n	800af5c <__hexdig_fun+0xc>
	...

0800af7c <__gethex>:
 800af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7e:	b089      	sub	sp, #36	@ 0x24
 800af80:	9307      	str	r3, [sp, #28]
 800af82:	680b      	ldr	r3, [r1, #0]
 800af84:	9201      	str	r2, [sp, #4]
 800af86:	9003      	str	r0, [sp, #12]
 800af88:	9106      	str	r1, [sp, #24]
 800af8a:	1c9a      	adds	r2, r3, #2
 800af8c:	0011      	movs	r1, r2
 800af8e:	3201      	adds	r2, #1
 800af90:	1e50      	subs	r0, r2, #1
 800af92:	7800      	ldrb	r0, [r0, #0]
 800af94:	2830      	cmp	r0, #48	@ 0x30
 800af96:	d0f9      	beq.n	800af8c <__gethex+0x10>
 800af98:	1acb      	subs	r3, r1, r3
 800af9a:	3b02      	subs	r3, #2
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	9100      	str	r1, [sp, #0]
 800afa0:	f7ff ffd6 	bl	800af50 <__hexdig_fun>
 800afa4:	2300      	movs	r3, #0
 800afa6:	001d      	movs	r5, r3
 800afa8:	9302      	str	r3, [sp, #8]
 800afaa:	4298      	cmp	r0, r3
 800afac:	d11e      	bne.n	800afec <__gethex+0x70>
 800afae:	2201      	movs	r2, #1
 800afb0:	49a6      	ldr	r1, [pc, #664]	@ (800b24c <__gethex+0x2d0>)
 800afb2:	9800      	ldr	r0, [sp, #0]
 800afb4:	f7ff fefa 	bl	800adac <strncmp>
 800afb8:	0007      	movs	r7, r0
 800afba:	42a8      	cmp	r0, r5
 800afbc:	d000      	beq.n	800afc0 <__gethex+0x44>
 800afbe:	e06a      	b.n	800b096 <__gethex+0x11a>
 800afc0:	9b00      	ldr	r3, [sp, #0]
 800afc2:	7858      	ldrb	r0, [r3, #1]
 800afc4:	1c5c      	adds	r4, r3, #1
 800afc6:	f7ff ffc3 	bl	800af50 <__hexdig_fun>
 800afca:	2301      	movs	r3, #1
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	42a8      	cmp	r0, r5
 800afd0:	d02f      	beq.n	800b032 <__gethex+0xb6>
 800afd2:	9400      	str	r4, [sp, #0]
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	7818      	ldrb	r0, [r3, #0]
 800afd8:	2830      	cmp	r0, #48	@ 0x30
 800afda:	d009      	beq.n	800aff0 <__gethex+0x74>
 800afdc:	f7ff ffb8 	bl	800af50 <__hexdig_fun>
 800afe0:	4242      	negs	r2, r0
 800afe2:	4142      	adcs	r2, r0
 800afe4:	2301      	movs	r3, #1
 800afe6:	0025      	movs	r5, r4
 800afe8:	9202      	str	r2, [sp, #8]
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	9c00      	ldr	r4, [sp, #0]
 800afee:	e004      	b.n	800affa <__gethex+0x7e>
 800aff0:	9b00      	ldr	r3, [sp, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	e7ed      	b.n	800afd4 <__gethex+0x58>
 800aff8:	3401      	adds	r4, #1
 800affa:	7820      	ldrb	r0, [r4, #0]
 800affc:	f7ff ffa8 	bl	800af50 <__hexdig_fun>
 800b000:	1e07      	subs	r7, r0, #0
 800b002:	d1f9      	bne.n	800aff8 <__gethex+0x7c>
 800b004:	2201      	movs	r2, #1
 800b006:	0020      	movs	r0, r4
 800b008:	4990      	ldr	r1, [pc, #576]	@ (800b24c <__gethex+0x2d0>)
 800b00a:	f7ff fecf 	bl	800adac <strncmp>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d10d      	bne.n	800b02e <__gethex+0xb2>
 800b012:	2d00      	cmp	r5, #0
 800b014:	d106      	bne.n	800b024 <__gethex+0xa8>
 800b016:	3401      	adds	r4, #1
 800b018:	0025      	movs	r5, r4
 800b01a:	7820      	ldrb	r0, [r4, #0]
 800b01c:	f7ff ff98 	bl	800af50 <__hexdig_fun>
 800b020:	2800      	cmp	r0, #0
 800b022:	d102      	bne.n	800b02a <__gethex+0xae>
 800b024:	1b2d      	subs	r5, r5, r4
 800b026:	00af      	lsls	r7, r5, #2
 800b028:	e003      	b.n	800b032 <__gethex+0xb6>
 800b02a:	3401      	adds	r4, #1
 800b02c:	e7f5      	b.n	800b01a <__gethex+0x9e>
 800b02e:	2d00      	cmp	r5, #0
 800b030:	d1f8      	bne.n	800b024 <__gethex+0xa8>
 800b032:	2220      	movs	r2, #32
 800b034:	7823      	ldrb	r3, [r4, #0]
 800b036:	0026      	movs	r6, r4
 800b038:	4393      	bics	r3, r2
 800b03a:	2b50      	cmp	r3, #80	@ 0x50
 800b03c:	d11d      	bne.n	800b07a <__gethex+0xfe>
 800b03e:	7863      	ldrb	r3, [r4, #1]
 800b040:	2b2b      	cmp	r3, #43	@ 0x2b
 800b042:	d02d      	beq.n	800b0a0 <__gethex+0x124>
 800b044:	2b2d      	cmp	r3, #45	@ 0x2d
 800b046:	d02f      	beq.n	800b0a8 <__gethex+0x12c>
 800b048:	2300      	movs	r3, #0
 800b04a:	1c66      	adds	r6, r4, #1
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	7830      	ldrb	r0, [r6, #0]
 800b050:	f7ff ff7e 	bl	800af50 <__hexdig_fun>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	b2db      	uxtb	r3, r3
 800b058:	0005      	movs	r5, r0
 800b05a:	2b18      	cmp	r3, #24
 800b05c:	d82a      	bhi.n	800b0b4 <__gethex+0x138>
 800b05e:	7870      	ldrb	r0, [r6, #1]
 800b060:	f7ff ff76 	bl	800af50 <__hexdig_fun>
 800b064:	1e43      	subs	r3, r0, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	3601      	adds	r6, #1
 800b06a:	3d10      	subs	r5, #16
 800b06c:	2b18      	cmp	r3, #24
 800b06e:	d91d      	bls.n	800b0ac <__gethex+0x130>
 800b070:	9b04      	ldr	r3, [sp, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d000      	beq.n	800b078 <__gethex+0xfc>
 800b076:	426d      	negs	r5, r5
 800b078:	197f      	adds	r7, r7, r5
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	601e      	str	r6, [r3, #0]
 800b07e:	9b02      	ldr	r3, [sp, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d019      	beq.n	800b0b8 <__gethex+0x13c>
 800b084:	9b05      	ldr	r3, [sp, #20]
 800b086:	2606      	movs	r6, #6
 800b088:	425a      	negs	r2, r3
 800b08a:	4153      	adcs	r3, r2
 800b08c:	425b      	negs	r3, r3
 800b08e:	401e      	ands	r6, r3
 800b090:	0030      	movs	r0, r6
 800b092:	b009      	add	sp, #36	@ 0x24
 800b094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b096:	2301      	movs	r3, #1
 800b098:	2700      	movs	r7, #0
 800b09a:	9c00      	ldr	r4, [sp, #0]
 800b09c:	9302      	str	r3, [sp, #8]
 800b09e:	e7c8      	b.n	800b032 <__gethex+0xb6>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	1ca6      	adds	r6, r4, #2
 800b0a6:	e7d2      	b.n	800b04e <__gethex+0xd2>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e7fa      	b.n	800b0a2 <__gethex+0x126>
 800b0ac:	230a      	movs	r3, #10
 800b0ae:	435d      	muls	r5, r3
 800b0b0:	182d      	adds	r5, r5, r0
 800b0b2:	e7d4      	b.n	800b05e <__gethex+0xe2>
 800b0b4:	0026      	movs	r6, r4
 800b0b6:	e7e0      	b.n	800b07a <__gethex+0xfe>
 800b0b8:	9b00      	ldr	r3, [sp, #0]
 800b0ba:	9902      	ldr	r1, [sp, #8]
 800b0bc:	1ae3      	subs	r3, r4, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	2b07      	cmp	r3, #7
 800b0c2:	dc0a      	bgt.n	800b0da <__gethex+0x15e>
 800b0c4:	9803      	ldr	r0, [sp, #12]
 800b0c6:	f7fe f8e5 	bl	8009294 <_Balloc>
 800b0ca:	1e05      	subs	r5, r0, #0
 800b0cc:	d108      	bne.n	800b0e0 <__gethex+0x164>
 800b0ce:	002a      	movs	r2, r5
 800b0d0:	21e4      	movs	r1, #228	@ 0xe4
 800b0d2:	4b5f      	ldr	r3, [pc, #380]	@ (800b250 <__gethex+0x2d4>)
 800b0d4:	485f      	ldr	r0, [pc, #380]	@ (800b254 <__gethex+0x2d8>)
 800b0d6:	f7ff fe9d 	bl	800ae14 <__assert_func>
 800b0da:	3101      	adds	r1, #1
 800b0dc:	105b      	asrs	r3, r3, #1
 800b0de:	e7ef      	b.n	800b0c0 <__gethex+0x144>
 800b0e0:	0003      	movs	r3, r0
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	9302      	str	r3, [sp, #8]
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	001e      	movs	r6, r3
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	9b00      	ldr	r3, [sp, #0]
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	d338      	bcc.n	800b166 <__gethex+0x1ea>
 800b0f4:	9c05      	ldr	r4, [sp, #20]
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	c440      	stmia	r4!, {r6}
 800b0fa:	1ae4      	subs	r4, r4, r3
 800b0fc:	10a4      	asrs	r4, r4, #2
 800b0fe:	0030      	movs	r0, r6
 800b100:	612c      	str	r4, [r5, #16]
 800b102:	f7fe f9bf 	bl	8009484 <__hi0bits>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	0164      	lsls	r4, r4, #5
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	1a26      	subs	r6, r4, r0
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	429e      	cmp	r6, r3
 800b112:	dd52      	ble.n	800b1ba <__gethex+0x23e>
 800b114:	1af6      	subs	r6, r6, r3
 800b116:	0031      	movs	r1, r6
 800b118:	0028      	movs	r0, r5
 800b11a:	f7fe fd62 	bl	8009be2 <__any_on>
 800b11e:	1e04      	subs	r4, r0, #0
 800b120:	d00f      	beq.n	800b142 <__gethex+0x1c6>
 800b122:	2401      	movs	r4, #1
 800b124:	231f      	movs	r3, #31
 800b126:	0020      	movs	r0, r4
 800b128:	1e72      	subs	r2, r6, #1
 800b12a:	4013      	ands	r3, r2
 800b12c:	4098      	lsls	r0, r3
 800b12e:	0003      	movs	r3, r0
 800b130:	1151      	asrs	r1, r2, #5
 800b132:	9802      	ldr	r0, [sp, #8]
 800b134:	0089      	lsls	r1, r1, #2
 800b136:	5809      	ldr	r1, [r1, r0]
 800b138:	4219      	tst	r1, r3
 800b13a:	d002      	beq.n	800b142 <__gethex+0x1c6>
 800b13c:	42a2      	cmp	r2, r4
 800b13e:	dc34      	bgt.n	800b1aa <__gethex+0x22e>
 800b140:	2402      	movs	r4, #2
 800b142:	0031      	movs	r1, r6
 800b144:	0028      	movs	r0, r5
 800b146:	f7ff feb0 	bl	800aeaa <rshift>
 800b14a:	19bf      	adds	r7, r7, r6
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	42bb      	cmp	r3, r7
 800b152:	da42      	bge.n	800b1da <__gethex+0x25e>
 800b154:	0029      	movs	r1, r5
 800b156:	9803      	ldr	r0, [sp, #12]
 800b158:	f7fe f8e0 	bl	800931c <_Bfree>
 800b15c:	2300      	movs	r3, #0
 800b15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b160:	26a3      	movs	r6, #163	@ 0xa3
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	e794      	b.n	800b090 <__gethex+0x114>
 800b166:	3c01      	subs	r4, #1
 800b168:	7823      	ldrb	r3, [r4, #0]
 800b16a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b16c:	d012      	beq.n	800b194 <__gethex+0x218>
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	2b20      	cmp	r3, #32
 800b172:	d104      	bne.n	800b17e <__gethex+0x202>
 800b174:	9b05      	ldr	r3, [sp, #20]
 800b176:	c340      	stmia	r3!, {r6}
 800b178:	2600      	movs	r6, #0
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	9604      	str	r6, [sp, #16]
 800b17e:	7820      	ldrb	r0, [r4, #0]
 800b180:	f7ff fee6 	bl	800af50 <__hexdig_fun>
 800b184:	230f      	movs	r3, #15
 800b186:	4018      	ands	r0, r3
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	4098      	lsls	r0, r3
 800b18c:	3304      	adds	r3, #4
 800b18e:	4306      	orrs	r6, r0
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	e7ac      	b.n	800b0ee <__gethex+0x172>
 800b194:	9b00      	ldr	r3, [sp, #0]
 800b196:	42a3      	cmp	r3, r4
 800b198:	d8e9      	bhi.n	800b16e <__gethex+0x1f2>
 800b19a:	2201      	movs	r2, #1
 800b19c:	0020      	movs	r0, r4
 800b19e:	492b      	ldr	r1, [pc, #172]	@ (800b24c <__gethex+0x2d0>)
 800b1a0:	f7ff fe04 	bl	800adac <strncmp>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1e2      	bne.n	800b16e <__gethex+0x1f2>
 800b1a8:	e7a1      	b.n	800b0ee <__gethex+0x172>
 800b1aa:	0028      	movs	r0, r5
 800b1ac:	1eb1      	subs	r1, r6, #2
 800b1ae:	f7fe fd18 	bl	8009be2 <__any_on>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	d0c4      	beq.n	800b140 <__gethex+0x1c4>
 800b1b6:	2403      	movs	r4, #3
 800b1b8:	e7c3      	b.n	800b142 <__gethex+0x1c6>
 800b1ba:	9b00      	ldr	r3, [sp, #0]
 800b1bc:	2400      	movs	r4, #0
 800b1be:	429e      	cmp	r6, r3
 800b1c0:	dac4      	bge.n	800b14c <__gethex+0x1d0>
 800b1c2:	1b9e      	subs	r6, r3, r6
 800b1c4:	0029      	movs	r1, r5
 800b1c6:	0032      	movs	r2, r6
 800b1c8:	9803      	ldr	r0, [sp, #12]
 800b1ca:	f7fe fad1 	bl	8009770 <__lshift>
 800b1ce:	0003      	movs	r3, r0
 800b1d0:	3314      	adds	r3, #20
 800b1d2:	0005      	movs	r5, r0
 800b1d4:	1bbf      	subs	r7, r7, r6
 800b1d6:	9302      	str	r3, [sp, #8]
 800b1d8:	e7b8      	b.n	800b14c <__gethex+0x1d0>
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	685e      	ldr	r6, [r3, #4]
 800b1de:	42be      	cmp	r6, r7
 800b1e0:	dd6f      	ble.n	800b2c2 <__gethex+0x346>
 800b1e2:	9b00      	ldr	r3, [sp, #0]
 800b1e4:	1bf6      	subs	r6, r6, r7
 800b1e6:	42b3      	cmp	r3, r6
 800b1e8:	dc36      	bgt.n	800b258 <__gethex+0x2dc>
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d024      	beq.n	800b23c <__gethex+0x2c0>
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d026      	beq.n	800b244 <__gethex+0x2c8>
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d117      	bne.n	800b22a <__gethex+0x2ae>
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	42b3      	cmp	r3, r6
 800b1fe:	d114      	bne.n	800b22a <__gethex+0x2ae>
 800b200:	2b01      	cmp	r3, #1
 800b202:	d10b      	bne.n	800b21c <__gethex+0x2a0>
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	9a07      	ldr	r2, [sp, #28]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	2662      	movs	r6, #98	@ 0x62
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	2301      	movs	r3, #1
 800b210:	9a02      	ldr	r2, [sp, #8]
 800b212:	612b      	str	r3, [r5, #16]
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b218:	601d      	str	r5, [r3, #0]
 800b21a:	e739      	b.n	800b090 <__gethex+0x114>
 800b21c:	9900      	ldr	r1, [sp, #0]
 800b21e:	0028      	movs	r0, r5
 800b220:	3901      	subs	r1, #1
 800b222:	f7fe fcde 	bl	8009be2 <__any_on>
 800b226:	2800      	cmp	r0, #0
 800b228:	d1ec      	bne.n	800b204 <__gethex+0x288>
 800b22a:	0029      	movs	r1, r5
 800b22c:	9803      	ldr	r0, [sp, #12]
 800b22e:	f7fe f875 	bl	800931c <_Bfree>
 800b232:	2300      	movs	r3, #0
 800b234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b236:	2650      	movs	r6, #80	@ 0x50
 800b238:	6013      	str	r3, [r2, #0]
 800b23a:	e729      	b.n	800b090 <__gethex+0x114>
 800b23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f3      	bne.n	800b22a <__gethex+0x2ae>
 800b242:	e7df      	b.n	800b204 <__gethex+0x288>
 800b244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1dc      	bne.n	800b204 <__gethex+0x288>
 800b24a:	e7ee      	b.n	800b22a <__gethex+0x2ae>
 800b24c:	0800bf38 	.word	0x0800bf38
 800b250:	0800bdd1 	.word	0x0800bdd1
 800b254:	0800c0e6 	.word	0x0800c0e6
 800b258:	1e77      	subs	r7, r6, #1
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d12f      	bne.n	800b2be <__gethex+0x342>
 800b25e:	2f00      	cmp	r7, #0
 800b260:	d004      	beq.n	800b26c <__gethex+0x2f0>
 800b262:	0039      	movs	r1, r7
 800b264:	0028      	movs	r0, r5
 800b266:	f7fe fcbc 	bl	8009be2 <__any_on>
 800b26a:	0004      	movs	r4, r0
 800b26c:	231f      	movs	r3, #31
 800b26e:	117a      	asrs	r2, r7, #5
 800b270:	401f      	ands	r7, r3
 800b272:	3b1e      	subs	r3, #30
 800b274:	40bb      	lsls	r3, r7
 800b276:	9902      	ldr	r1, [sp, #8]
 800b278:	0092      	lsls	r2, r2, #2
 800b27a:	5852      	ldr	r2, [r2, r1]
 800b27c:	421a      	tst	r2, r3
 800b27e:	d001      	beq.n	800b284 <__gethex+0x308>
 800b280:	2302      	movs	r3, #2
 800b282:	431c      	orrs	r4, r3
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	0031      	movs	r1, r6
 800b288:	1b9b      	subs	r3, r3, r6
 800b28a:	2602      	movs	r6, #2
 800b28c:	0028      	movs	r0, r5
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	f7ff fe0b 	bl	800aeaa <rshift>
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	685f      	ldr	r7, [r3, #4]
 800b298:	2c00      	cmp	r4, #0
 800b29a:	d03f      	beq.n	800b31c <__gethex+0x3a0>
 800b29c:	9b01      	ldr	r3, [sp, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d010      	beq.n	800b2c6 <__gethex+0x34a>
 800b2a4:	2b03      	cmp	r3, #3
 800b2a6:	d012      	beq.n	800b2ce <__gethex+0x352>
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d106      	bne.n	800b2ba <__gethex+0x33e>
 800b2ac:	07a2      	lsls	r2, r4, #30
 800b2ae:	d504      	bpl.n	800b2ba <__gethex+0x33e>
 800b2b0:	9a02      	ldr	r2, [sp, #8]
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	4314      	orrs	r4, r2
 800b2b6:	421c      	tst	r4, r3
 800b2b8:	d10c      	bne.n	800b2d4 <__gethex+0x358>
 800b2ba:	2310      	movs	r3, #16
 800b2bc:	e02d      	b.n	800b31a <__gethex+0x39e>
 800b2be:	2401      	movs	r4, #1
 800b2c0:	e7d4      	b.n	800b26c <__gethex+0x2f0>
 800b2c2:	2601      	movs	r6, #1
 800b2c4:	e7e8      	b.n	800b298 <__gethex+0x31c>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f2      	beq.n	800b2ba <__gethex+0x33e>
 800b2d4:	692b      	ldr	r3, [r5, #16]
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	9304      	str	r3, [sp, #16]
 800b2de:	002b      	movs	r3, r5
 800b2e0:	9a04      	ldr	r2, [sp, #16]
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	1899      	adds	r1, r3, r2
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	1c54      	adds	r4, r2, #1
 800b2ea:	d01c      	beq.n	800b326 <__gethex+0x3aa>
 800b2ec:	3201      	adds	r2, #1
 800b2ee:	601a      	str	r2, [r3, #0]
 800b2f0:	002b      	movs	r3, r5
 800b2f2:	3314      	adds	r3, #20
 800b2f4:	2e02      	cmp	r6, #2
 800b2f6:	d13f      	bne.n	800b378 <__gethex+0x3fc>
 800b2f8:	9a01      	ldr	r2, [sp, #4]
 800b2fa:	9900      	ldr	r1, [sp, #0]
 800b2fc:	6812      	ldr	r2, [r2, #0]
 800b2fe:	3a01      	subs	r2, #1
 800b300:	428a      	cmp	r2, r1
 800b302:	d109      	bne.n	800b318 <__gethex+0x39c>
 800b304:	000a      	movs	r2, r1
 800b306:	201f      	movs	r0, #31
 800b308:	4010      	ands	r0, r2
 800b30a:	2201      	movs	r2, #1
 800b30c:	4082      	lsls	r2, r0
 800b30e:	1149      	asrs	r1, r1, #5
 800b310:	0089      	lsls	r1, r1, #2
 800b312:	58cb      	ldr	r3, [r1, r3]
 800b314:	4213      	tst	r3, r2
 800b316:	d13d      	bne.n	800b394 <__gethex+0x418>
 800b318:	2320      	movs	r3, #32
 800b31a:	431e      	orrs	r6, r3
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	601d      	str	r5, [r3, #0]
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	601f      	str	r7, [r3, #0]
 800b324:	e6b4      	b.n	800b090 <__gethex+0x114>
 800b326:	c301      	stmia	r3!, {r0}
 800b328:	4299      	cmp	r1, r3
 800b32a:	d8dc      	bhi.n	800b2e6 <__gethex+0x36a>
 800b32c:	68ab      	ldr	r3, [r5, #8]
 800b32e:	9a02      	ldr	r2, [sp, #8]
 800b330:	429a      	cmp	r2, r3
 800b332:	db18      	blt.n	800b366 <__gethex+0x3ea>
 800b334:	6869      	ldr	r1, [r5, #4]
 800b336:	9803      	ldr	r0, [sp, #12]
 800b338:	3101      	adds	r1, #1
 800b33a:	f7fd ffab 	bl	8009294 <_Balloc>
 800b33e:	1e04      	subs	r4, r0, #0
 800b340:	d104      	bne.n	800b34c <__gethex+0x3d0>
 800b342:	0022      	movs	r2, r4
 800b344:	2184      	movs	r1, #132	@ 0x84
 800b346:	4b1d      	ldr	r3, [pc, #116]	@ (800b3bc <__gethex+0x440>)
 800b348:	481d      	ldr	r0, [pc, #116]	@ (800b3c0 <__gethex+0x444>)
 800b34a:	e6c4      	b.n	800b0d6 <__gethex+0x15a>
 800b34c:	0029      	movs	r1, r5
 800b34e:	692a      	ldr	r2, [r5, #16]
 800b350:	310c      	adds	r1, #12
 800b352:	3202      	adds	r2, #2
 800b354:	0092      	lsls	r2, r2, #2
 800b356:	300c      	adds	r0, #12
 800b358:	f7ff fd4c 	bl	800adf4 <memcpy>
 800b35c:	0029      	movs	r1, r5
 800b35e:	9803      	ldr	r0, [sp, #12]
 800b360:	f7fd ffdc 	bl	800931c <_Bfree>
 800b364:	0025      	movs	r5, r4
 800b366:	692b      	ldr	r3, [r5, #16]
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	612a      	str	r2, [r5, #16]
 800b36c:	2201      	movs	r2, #1
 800b36e:	3304      	adds	r3, #4
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	18eb      	adds	r3, r5, r3
 800b374:	605a      	str	r2, [r3, #4]
 800b376:	e7bb      	b.n	800b2f0 <__gethex+0x374>
 800b378:	692a      	ldr	r2, [r5, #16]
 800b37a:	9902      	ldr	r1, [sp, #8]
 800b37c:	428a      	cmp	r2, r1
 800b37e:	dd0b      	ble.n	800b398 <__gethex+0x41c>
 800b380:	2101      	movs	r1, #1
 800b382:	0028      	movs	r0, r5
 800b384:	f7ff fd91 	bl	800aeaa <rshift>
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	3701      	adds	r7, #1
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	42bb      	cmp	r3, r7
 800b390:	da00      	bge.n	800b394 <__gethex+0x418>
 800b392:	e6df      	b.n	800b154 <__gethex+0x1d8>
 800b394:	2601      	movs	r6, #1
 800b396:	e7bf      	b.n	800b318 <__gethex+0x39c>
 800b398:	221f      	movs	r2, #31
 800b39a:	9c00      	ldr	r4, [sp, #0]
 800b39c:	9900      	ldr	r1, [sp, #0]
 800b39e:	4014      	ands	r4, r2
 800b3a0:	4211      	tst	r1, r2
 800b3a2:	d0f7      	beq.n	800b394 <__gethex+0x418>
 800b3a4:	9a04      	ldr	r2, [sp, #16]
 800b3a6:	189b      	adds	r3, r3, r2
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	f7fe f86a 	bl	8009484 <__hi0bits>
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	1b1b      	subs	r3, r3, r4
 800b3b4:	4298      	cmp	r0, r3
 800b3b6:	dbe3      	blt.n	800b380 <__gethex+0x404>
 800b3b8:	e7ec      	b.n	800b394 <__gethex+0x418>
 800b3ba:	46c0      	nop			@ (mov r8, r8)
 800b3bc:	0800bdd1 	.word	0x0800bdd1
 800b3c0:	0800c0e6 	.word	0x0800c0e6

0800b3c4 <L_shift>:
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	2520      	movs	r5, #32
 800b3ca:	1a9a      	subs	r2, r3, r2
 800b3cc:	0092      	lsls	r2, r2, #2
 800b3ce:	1aad      	subs	r5, r5, r2
 800b3d0:	6843      	ldr	r3, [r0, #4]
 800b3d2:	6804      	ldr	r4, [r0, #0]
 800b3d4:	001e      	movs	r6, r3
 800b3d6:	40ae      	lsls	r6, r5
 800b3d8:	40d3      	lsrs	r3, r2
 800b3da:	4334      	orrs	r4, r6
 800b3dc:	6004      	str	r4, [r0, #0]
 800b3de:	6043      	str	r3, [r0, #4]
 800b3e0:	3004      	adds	r0, #4
 800b3e2:	4288      	cmp	r0, r1
 800b3e4:	d3f4      	bcc.n	800b3d0 <L_shift+0xc>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}

0800b3e8 <__match>:
 800b3e8:	b530      	push	{r4, r5, lr}
 800b3ea:	6803      	ldr	r3, [r0, #0]
 800b3ec:	780c      	ldrb	r4, [r1, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	2c00      	cmp	r4, #0
 800b3f2:	d102      	bne.n	800b3fa <__match+0x12>
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	bd30      	pop	{r4, r5, pc}
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	0015      	movs	r5, r2
 800b3fe:	3d41      	subs	r5, #65	@ 0x41
 800b400:	2d19      	cmp	r5, #25
 800b402:	d800      	bhi.n	800b406 <__match+0x1e>
 800b404:	3220      	adds	r2, #32
 800b406:	3101      	adds	r1, #1
 800b408:	42a2      	cmp	r2, r4
 800b40a:	d0ef      	beq.n	800b3ec <__match+0x4>
 800b40c:	2000      	movs	r0, #0
 800b40e:	e7f3      	b.n	800b3f8 <__match+0x10>

0800b410 <__hexnan>:
 800b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b412:	680b      	ldr	r3, [r1, #0]
 800b414:	b08b      	sub	sp, #44	@ 0x2c
 800b416:	9201      	str	r2, [sp, #4]
 800b418:	9901      	ldr	r1, [sp, #4]
 800b41a:	115a      	asrs	r2, r3, #5
 800b41c:	0092      	lsls	r2, r2, #2
 800b41e:	188a      	adds	r2, r1, r2
 800b420:	9202      	str	r2, [sp, #8]
 800b422:	0019      	movs	r1, r3
 800b424:	221f      	movs	r2, #31
 800b426:	4011      	ands	r1, r2
 800b428:	9008      	str	r0, [sp, #32]
 800b42a:	9106      	str	r1, [sp, #24]
 800b42c:	4213      	tst	r3, r2
 800b42e:	d002      	beq.n	800b436 <__hexnan+0x26>
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	3304      	adds	r3, #4
 800b434:	9302      	str	r3, [sp, #8]
 800b436:	9b02      	ldr	r3, [sp, #8]
 800b438:	2500      	movs	r5, #0
 800b43a:	1f1f      	subs	r7, r3, #4
 800b43c:	003e      	movs	r6, r7
 800b43e:	003c      	movs	r4, r7
 800b440:	9b08      	ldr	r3, [sp, #32]
 800b442:	603d      	str	r5, [r7, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	9507      	str	r5, [sp, #28]
 800b448:	9305      	str	r3, [sp, #20]
 800b44a:	9503      	str	r5, [sp, #12]
 800b44c:	9b05      	ldr	r3, [sp, #20]
 800b44e:	3301      	adds	r3, #1
 800b450:	9309      	str	r3, [sp, #36]	@ 0x24
 800b452:	9b05      	ldr	r3, [sp, #20]
 800b454:	785b      	ldrb	r3, [r3, #1]
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d028      	beq.n	800b4ae <__hexnan+0x9e>
 800b45c:	9804      	ldr	r0, [sp, #16]
 800b45e:	f7ff fd77 	bl	800af50 <__hexdig_fun>
 800b462:	2800      	cmp	r0, #0
 800b464:	d155      	bne.n	800b512 <__hexnan+0x102>
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d819      	bhi.n	800b4a0 <__hexnan+0x90>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	4293      	cmp	r3, r2
 800b472:	dd12      	ble.n	800b49a <__hexnan+0x8a>
 800b474:	42b4      	cmp	r4, r6
 800b476:	d206      	bcs.n	800b486 <__hexnan+0x76>
 800b478:	2d07      	cmp	r5, #7
 800b47a:	dc04      	bgt.n	800b486 <__hexnan+0x76>
 800b47c:	002a      	movs	r2, r5
 800b47e:	0031      	movs	r1, r6
 800b480:	0020      	movs	r0, r4
 800b482:	f7ff ff9f 	bl	800b3c4 <L_shift>
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	2508      	movs	r5, #8
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d905      	bls.n	800b49a <__hexnan+0x8a>
 800b48e:	1f26      	subs	r6, r4, #4
 800b490:	2500      	movs	r5, #0
 800b492:	0034      	movs	r4, r6
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	6035      	str	r5, [r6, #0]
 800b498:	9307      	str	r3, [sp, #28]
 800b49a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	e7d5      	b.n	800b44c <__hexnan+0x3c>
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	2b29      	cmp	r3, #41	@ 0x29
 800b4a4:	d15a      	bne.n	800b55c <__hexnan+0x14c>
 800b4a6:	9b05      	ldr	r3, [sp, #20]
 800b4a8:	9a08      	ldr	r2, [sp, #32]
 800b4aa:	3302      	adds	r3, #2
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d053      	beq.n	800b55c <__hexnan+0x14c>
 800b4b4:	42b4      	cmp	r4, r6
 800b4b6:	d206      	bcs.n	800b4c6 <__hexnan+0xb6>
 800b4b8:	2d07      	cmp	r5, #7
 800b4ba:	dc04      	bgt.n	800b4c6 <__hexnan+0xb6>
 800b4bc:	002a      	movs	r2, r5
 800b4be:	0031      	movs	r1, r6
 800b4c0:	0020      	movs	r0, r4
 800b4c2:	f7ff ff7f 	bl	800b3c4 <L_shift>
 800b4c6:	9b01      	ldr	r3, [sp, #4]
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	d936      	bls.n	800b53a <__hexnan+0x12a>
 800b4cc:	001a      	movs	r2, r3
 800b4ce:	0023      	movs	r3, r4
 800b4d0:	cb02      	ldmia	r3!, {r1}
 800b4d2:	c202      	stmia	r2!, {r1}
 800b4d4:	429f      	cmp	r7, r3
 800b4d6:	d2fb      	bcs.n	800b4d0 <__hexnan+0xc0>
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	1c61      	adds	r1, r4, #1
 800b4dc:	1eda      	subs	r2, r3, #3
 800b4de:	2304      	movs	r3, #4
 800b4e0:	4291      	cmp	r1, r2
 800b4e2:	d805      	bhi.n	800b4f0 <__hexnan+0xe0>
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	1b1b      	subs	r3, r3, r4
 800b4ea:	089b      	lsrs	r3, r3, #2
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	9a01      	ldr	r2, [sp, #4]
 800b4f2:	18d3      	adds	r3, r2, r3
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	c304      	stmia	r3!, {r2}
 800b4f8:	429f      	cmp	r7, r3
 800b4fa:	d2fc      	bcs.n	800b4f6 <__hexnan+0xe6>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <__hexnan+0xfc>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	429f      	cmp	r7, r3
 800b506:	d127      	bne.n	800b558 <__hexnan+0x148>
 800b508:	2301      	movs	r3, #1
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	2005      	movs	r0, #5
 800b50e:	b00b      	add	sp, #44	@ 0x2c
 800b510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	3501      	adds	r5, #1
 800b516:	3301      	adds	r3, #1
 800b518:	9303      	str	r3, [sp, #12]
 800b51a:	2d08      	cmp	r5, #8
 800b51c:	dd06      	ble.n	800b52c <__hexnan+0x11c>
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	429c      	cmp	r4, r3
 800b522:	d9ba      	bls.n	800b49a <__hexnan+0x8a>
 800b524:	2300      	movs	r3, #0
 800b526:	2501      	movs	r5, #1
 800b528:	3c04      	subs	r4, #4
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	220f      	movs	r2, #15
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	4010      	ands	r0, r2
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	4303      	orrs	r3, r0
 800b536:	6023      	str	r3, [r4, #0]
 800b538:	e7af      	b.n	800b49a <__hexnan+0x8a>
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0dd      	beq.n	800b4fc <__hexnan+0xec>
 800b540:	2320      	movs	r3, #32
 800b542:	9a06      	ldr	r2, [sp, #24]
 800b544:	9902      	ldr	r1, [sp, #8]
 800b546:	1a9b      	subs	r3, r3, r2
 800b548:	2201      	movs	r2, #1
 800b54a:	4252      	negs	r2, r2
 800b54c:	40da      	lsrs	r2, r3
 800b54e:	3904      	subs	r1, #4
 800b550:	680b      	ldr	r3, [r1, #0]
 800b552:	4013      	ands	r3, r2
 800b554:	600b      	str	r3, [r1, #0]
 800b556:	e7d1      	b.n	800b4fc <__hexnan+0xec>
 800b558:	3f04      	subs	r7, #4
 800b55a:	e7cf      	b.n	800b4fc <__hexnan+0xec>
 800b55c:	2004      	movs	r0, #4
 800b55e:	e7d6      	b.n	800b50e <__hexnan+0xfe>

0800b560 <__ascii_mbtowc>:
 800b560:	b082      	sub	sp, #8
 800b562:	2900      	cmp	r1, #0
 800b564:	d100      	bne.n	800b568 <__ascii_mbtowc+0x8>
 800b566:	a901      	add	r1, sp, #4
 800b568:	1e10      	subs	r0, r2, #0
 800b56a:	d006      	beq.n	800b57a <__ascii_mbtowc+0x1a>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d006      	beq.n	800b57e <__ascii_mbtowc+0x1e>
 800b570:	7813      	ldrb	r3, [r2, #0]
 800b572:	600b      	str	r3, [r1, #0]
 800b574:	7810      	ldrb	r0, [r2, #0]
 800b576:	1e43      	subs	r3, r0, #1
 800b578:	4198      	sbcs	r0, r3
 800b57a:	b002      	add	sp, #8
 800b57c:	4770      	bx	lr
 800b57e:	2002      	movs	r0, #2
 800b580:	4240      	negs	r0, r0
 800b582:	e7fa      	b.n	800b57a <__ascii_mbtowc+0x1a>

0800b584 <_realloc_r>:
 800b584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b586:	0006      	movs	r6, r0
 800b588:	000c      	movs	r4, r1
 800b58a:	0015      	movs	r5, r2
 800b58c:	2900      	cmp	r1, #0
 800b58e:	d105      	bne.n	800b59c <_realloc_r+0x18>
 800b590:	0011      	movs	r1, r2
 800b592:	f7fd fdef 	bl	8009174 <_malloc_r>
 800b596:	0004      	movs	r4, r0
 800b598:	0020      	movs	r0, r4
 800b59a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b59c:	2a00      	cmp	r2, #0
 800b59e:	d103      	bne.n	800b5a8 <_realloc_r+0x24>
 800b5a0:	f7fd fd72 	bl	8009088 <_free_r>
 800b5a4:	2400      	movs	r4, #0
 800b5a6:	e7f7      	b.n	800b598 <_realloc_r+0x14>
 800b5a8:	f000 f83f 	bl	800b62a <_malloc_usable_size_r>
 800b5ac:	0007      	movs	r7, r0
 800b5ae:	4285      	cmp	r5, r0
 800b5b0:	d802      	bhi.n	800b5b8 <_realloc_r+0x34>
 800b5b2:	0843      	lsrs	r3, r0, #1
 800b5b4:	42ab      	cmp	r3, r5
 800b5b6:	d3ef      	bcc.n	800b598 <_realloc_r+0x14>
 800b5b8:	0029      	movs	r1, r5
 800b5ba:	0030      	movs	r0, r6
 800b5bc:	f7fd fdda 	bl	8009174 <_malloc_r>
 800b5c0:	9001      	str	r0, [sp, #4]
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0ee      	beq.n	800b5a4 <_realloc_r+0x20>
 800b5c6:	002a      	movs	r2, r5
 800b5c8:	42bd      	cmp	r5, r7
 800b5ca:	d900      	bls.n	800b5ce <_realloc_r+0x4a>
 800b5cc:	003a      	movs	r2, r7
 800b5ce:	0021      	movs	r1, r4
 800b5d0:	9801      	ldr	r0, [sp, #4]
 800b5d2:	f7ff fc0f 	bl	800adf4 <memcpy>
 800b5d6:	0021      	movs	r1, r4
 800b5d8:	0030      	movs	r0, r6
 800b5da:	f7fd fd55 	bl	8009088 <_free_r>
 800b5de:	9c01      	ldr	r4, [sp, #4]
 800b5e0:	e7da      	b.n	800b598 <_realloc_r+0x14>

0800b5e2 <__ascii_wctomb>:
 800b5e2:	0003      	movs	r3, r0
 800b5e4:	1e08      	subs	r0, r1, #0
 800b5e6:	d005      	beq.n	800b5f4 <__ascii_wctomb+0x12>
 800b5e8:	2aff      	cmp	r2, #255	@ 0xff
 800b5ea:	d904      	bls.n	800b5f6 <__ascii_wctomb+0x14>
 800b5ec:	228a      	movs	r2, #138	@ 0x8a
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	4240      	negs	r0, r0
 800b5f4:	4770      	bx	lr
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	700a      	strb	r2, [r1, #0]
 800b5fa:	e7fb      	b.n	800b5f4 <__ascii_wctomb+0x12>

0800b5fc <fiprintf>:
 800b5fc:	b40e      	push	{r1, r2, r3}
 800b5fe:	b517      	push	{r0, r1, r2, r4, lr}
 800b600:	4c05      	ldr	r4, [pc, #20]	@ (800b618 <fiprintf+0x1c>)
 800b602:	ab05      	add	r3, sp, #20
 800b604:	cb04      	ldmia	r3!, {r2}
 800b606:	0001      	movs	r1, r0
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	f000 f83c 	bl	800b688 <_vfiprintf_r>
 800b610:	bc1e      	pop	{r1, r2, r3, r4}
 800b612:	bc08      	pop	{r3}
 800b614:	b003      	add	sp, #12
 800b616:	4718      	bx	r3
 800b618:	2000001c 	.word	0x2000001c

0800b61c <abort>:
 800b61c:	2006      	movs	r0, #6
 800b61e:	b510      	push	{r4, lr}
 800b620:	f000 fa18 	bl	800ba54 <raise>
 800b624:	2001      	movs	r0, #1
 800b626:	f7f8 f85f 	bl	80036e8 <_exit>

0800b62a <_malloc_usable_size_r>:
 800b62a:	1f0b      	subs	r3, r1, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	1f18      	subs	r0, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	da01      	bge.n	800b638 <_malloc_usable_size_r+0xe>
 800b634:	580b      	ldr	r3, [r1, r0]
 800b636:	18c0      	adds	r0, r0, r3
 800b638:	4770      	bx	lr

0800b63a <__sfputc_r>:
 800b63a:	6893      	ldr	r3, [r2, #8]
 800b63c:	b510      	push	{r4, lr}
 800b63e:	3b01      	subs	r3, #1
 800b640:	6093      	str	r3, [r2, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	da04      	bge.n	800b650 <__sfputc_r+0x16>
 800b646:	6994      	ldr	r4, [r2, #24]
 800b648:	42a3      	cmp	r3, r4
 800b64a:	db07      	blt.n	800b65c <__sfputc_r+0x22>
 800b64c:	290a      	cmp	r1, #10
 800b64e:	d005      	beq.n	800b65c <__sfputc_r+0x22>
 800b650:	6813      	ldr	r3, [r2, #0]
 800b652:	1c58      	adds	r0, r3, #1
 800b654:	6010      	str	r0, [r2, #0]
 800b656:	7019      	strb	r1, [r3, #0]
 800b658:	0008      	movs	r0, r1
 800b65a:	bd10      	pop	{r4, pc}
 800b65c:	f000 f930 	bl	800b8c0 <__swbuf_r>
 800b660:	0001      	movs	r1, r0
 800b662:	e7f9      	b.n	800b658 <__sfputc_r+0x1e>

0800b664 <__sfputs_r>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	0006      	movs	r6, r0
 800b668:	000f      	movs	r7, r1
 800b66a:	0014      	movs	r4, r2
 800b66c:	18d5      	adds	r5, r2, r3
 800b66e:	42ac      	cmp	r4, r5
 800b670:	d101      	bne.n	800b676 <__sfputs_r+0x12>
 800b672:	2000      	movs	r0, #0
 800b674:	e007      	b.n	800b686 <__sfputs_r+0x22>
 800b676:	7821      	ldrb	r1, [r4, #0]
 800b678:	003a      	movs	r2, r7
 800b67a:	0030      	movs	r0, r6
 800b67c:	f7ff ffdd 	bl	800b63a <__sfputc_r>
 800b680:	3401      	adds	r4, #1
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d1f3      	bne.n	800b66e <__sfputs_r+0xa>
 800b686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b688 <_vfiprintf_r>:
 800b688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68a:	b0a1      	sub	sp, #132	@ 0x84
 800b68c:	000f      	movs	r7, r1
 800b68e:	0015      	movs	r5, r2
 800b690:	001e      	movs	r6, r3
 800b692:	9003      	str	r0, [sp, #12]
 800b694:	2800      	cmp	r0, #0
 800b696:	d004      	beq.n	800b6a2 <_vfiprintf_r+0x1a>
 800b698:	6a03      	ldr	r3, [r0, #32]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <_vfiprintf_r+0x1a>
 800b69e:	f7fc fd3b 	bl	8008118 <__sinit>
 800b6a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6a4:	07db      	lsls	r3, r3, #31
 800b6a6:	d405      	bmi.n	800b6b4 <_vfiprintf_r+0x2c>
 800b6a8:	89bb      	ldrh	r3, [r7, #12]
 800b6aa:	059b      	lsls	r3, r3, #22
 800b6ac:	d402      	bmi.n	800b6b4 <_vfiprintf_r+0x2c>
 800b6ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b6b0:	f7fc fe57 	bl	8008362 <__retarget_lock_acquire_recursive>
 800b6b4:	89bb      	ldrh	r3, [r7, #12]
 800b6b6:	071b      	lsls	r3, r3, #28
 800b6b8:	d502      	bpl.n	800b6c0 <_vfiprintf_r+0x38>
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d113      	bne.n	800b6e8 <_vfiprintf_r+0x60>
 800b6c0:	0039      	movs	r1, r7
 800b6c2:	9803      	ldr	r0, [sp, #12]
 800b6c4:	f000 f93e 	bl	800b944 <__swsetup_r>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d00d      	beq.n	800b6e8 <_vfiprintf_r+0x60>
 800b6cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ce:	07db      	lsls	r3, r3, #31
 800b6d0:	d503      	bpl.n	800b6da <_vfiprintf_r+0x52>
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	4240      	negs	r0, r0
 800b6d6:	b021      	add	sp, #132	@ 0x84
 800b6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6da:	89bb      	ldrh	r3, [r7, #12]
 800b6dc:	059b      	lsls	r3, r3, #22
 800b6de:	d4f8      	bmi.n	800b6d2 <_vfiprintf_r+0x4a>
 800b6e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b6e2:	f7fc fe3f 	bl	8008364 <__retarget_lock_release_recursive>
 800b6e6:	e7f4      	b.n	800b6d2 <_vfiprintf_r+0x4a>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	ac08      	add	r4, sp, #32
 800b6ec:	6163      	str	r3, [r4, #20]
 800b6ee:	3320      	adds	r3, #32
 800b6f0:	7663      	strb	r3, [r4, #25]
 800b6f2:	3310      	adds	r3, #16
 800b6f4:	76a3      	strb	r3, [r4, #26]
 800b6f6:	9607      	str	r6, [sp, #28]
 800b6f8:	002e      	movs	r6, r5
 800b6fa:	7833      	ldrb	r3, [r6, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <_vfiprintf_r+0x7c>
 800b700:	2b25      	cmp	r3, #37	@ 0x25
 800b702:	d148      	bne.n	800b796 <_vfiprintf_r+0x10e>
 800b704:	1b73      	subs	r3, r6, r5
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	42ae      	cmp	r6, r5
 800b70a:	d00b      	beq.n	800b724 <_vfiprintf_r+0x9c>
 800b70c:	002a      	movs	r2, r5
 800b70e:	0039      	movs	r1, r7
 800b710:	9803      	ldr	r0, [sp, #12]
 800b712:	f7ff ffa7 	bl	800b664 <__sfputs_r>
 800b716:	3001      	adds	r0, #1
 800b718:	d100      	bne.n	800b71c <_vfiprintf_r+0x94>
 800b71a:	e0ae      	b.n	800b87a <_vfiprintf_r+0x1f2>
 800b71c:	6963      	ldr	r3, [r4, #20]
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	189b      	adds	r3, r3, r2
 800b722:	6163      	str	r3, [r4, #20]
 800b724:	7833      	ldrb	r3, [r6, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d100      	bne.n	800b72c <_vfiprintf_r+0xa4>
 800b72a:	e0a6      	b.n	800b87a <_vfiprintf_r+0x1f2>
 800b72c:	2201      	movs	r2, #1
 800b72e:	2300      	movs	r3, #0
 800b730:	4252      	negs	r2, r2
 800b732:	6062      	str	r2, [r4, #4]
 800b734:	a904      	add	r1, sp, #16
 800b736:	3254      	adds	r2, #84	@ 0x54
 800b738:	1852      	adds	r2, r2, r1
 800b73a:	1c75      	adds	r5, r6, #1
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	60e3      	str	r3, [r4, #12]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	7013      	strb	r3, [r2, #0]
 800b744:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b746:	4b59      	ldr	r3, [pc, #356]	@ (800b8ac <_vfiprintf_r+0x224>)
 800b748:	2205      	movs	r2, #5
 800b74a:	0018      	movs	r0, r3
 800b74c:	7829      	ldrb	r1, [r5, #0]
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	f7fc fe09 	bl	8008366 <memchr>
 800b754:	1c6e      	adds	r6, r5, #1
 800b756:	2800      	cmp	r0, #0
 800b758:	d11f      	bne.n	800b79a <_vfiprintf_r+0x112>
 800b75a:	6822      	ldr	r2, [r4, #0]
 800b75c:	06d3      	lsls	r3, r2, #27
 800b75e:	d504      	bpl.n	800b76a <_vfiprintf_r+0xe2>
 800b760:	2353      	movs	r3, #83	@ 0x53
 800b762:	a904      	add	r1, sp, #16
 800b764:	185b      	adds	r3, r3, r1
 800b766:	2120      	movs	r1, #32
 800b768:	7019      	strb	r1, [r3, #0]
 800b76a:	0713      	lsls	r3, r2, #28
 800b76c:	d504      	bpl.n	800b778 <_vfiprintf_r+0xf0>
 800b76e:	2353      	movs	r3, #83	@ 0x53
 800b770:	a904      	add	r1, sp, #16
 800b772:	185b      	adds	r3, r3, r1
 800b774:	212b      	movs	r1, #43	@ 0x2b
 800b776:	7019      	strb	r1, [r3, #0]
 800b778:	782b      	ldrb	r3, [r5, #0]
 800b77a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b77c:	d016      	beq.n	800b7ac <_vfiprintf_r+0x124>
 800b77e:	002e      	movs	r6, r5
 800b780:	2100      	movs	r1, #0
 800b782:	200a      	movs	r0, #10
 800b784:	68e3      	ldr	r3, [r4, #12]
 800b786:	7832      	ldrb	r2, [r6, #0]
 800b788:	1c75      	adds	r5, r6, #1
 800b78a:	3a30      	subs	r2, #48	@ 0x30
 800b78c:	2a09      	cmp	r2, #9
 800b78e:	d950      	bls.n	800b832 <_vfiprintf_r+0x1aa>
 800b790:	2900      	cmp	r1, #0
 800b792:	d111      	bne.n	800b7b8 <_vfiprintf_r+0x130>
 800b794:	e017      	b.n	800b7c6 <_vfiprintf_r+0x13e>
 800b796:	3601      	adds	r6, #1
 800b798:	e7af      	b.n	800b6fa <_vfiprintf_r+0x72>
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	1ac0      	subs	r0, r0, r3
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	4083      	lsls	r3, r0
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	0035      	movs	r5, r6
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	e7cc      	b.n	800b746 <_vfiprintf_r+0xbe>
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	1d19      	adds	r1, r3, #4
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	9107      	str	r1, [sp, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	db01      	blt.n	800b7bc <_vfiprintf_r+0x134>
 800b7b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7ba:	e004      	b.n	800b7c6 <_vfiprintf_r+0x13e>
 800b7bc:	425b      	negs	r3, r3
 800b7be:	60e3      	str	r3, [r4, #12]
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	7833      	ldrb	r3, [r6, #0]
 800b7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7ca:	d10c      	bne.n	800b7e6 <_vfiprintf_r+0x15e>
 800b7cc:	7873      	ldrb	r3, [r6, #1]
 800b7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7d0:	d134      	bne.n	800b83c <_vfiprintf_r+0x1b4>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	3602      	adds	r6, #2
 800b7d6:	1d1a      	adds	r2, r3, #4
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	9207      	str	r2, [sp, #28]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	da01      	bge.n	800b7e4 <_vfiprintf_r+0x15c>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	425b      	negs	r3, r3
 800b7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e6:	4d32      	ldr	r5, [pc, #200]	@ (800b8b0 <_vfiprintf_r+0x228>)
 800b7e8:	2203      	movs	r2, #3
 800b7ea:	0028      	movs	r0, r5
 800b7ec:	7831      	ldrb	r1, [r6, #0]
 800b7ee:	f7fc fdba 	bl	8008366 <memchr>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d006      	beq.n	800b804 <_vfiprintf_r+0x17c>
 800b7f6:	2340      	movs	r3, #64	@ 0x40
 800b7f8:	1b40      	subs	r0, r0, r5
 800b7fa:	4083      	lsls	r3, r0
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	3601      	adds	r6, #1
 800b800:	4313      	orrs	r3, r2
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	7831      	ldrb	r1, [r6, #0]
 800b806:	2206      	movs	r2, #6
 800b808:	482a      	ldr	r0, [pc, #168]	@ (800b8b4 <_vfiprintf_r+0x22c>)
 800b80a:	1c75      	adds	r5, r6, #1
 800b80c:	7621      	strb	r1, [r4, #24]
 800b80e:	f7fc fdaa 	bl	8008366 <memchr>
 800b812:	2800      	cmp	r0, #0
 800b814:	d040      	beq.n	800b898 <_vfiprintf_r+0x210>
 800b816:	4b28      	ldr	r3, [pc, #160]	@ (800b8b8 <_vfiprintf_r+0x230>)
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d122      	bne.n	800b862 <_vfiprintf_r+0x1da>
 800b81c:	2207      	movs	r2, #7
 800b81e:	9b07      	ldr	r3, [sp, #28]
 800b820:	3307      	adds	r3, #7
 800b822:	4393      	bics	r3, r2
 800b824:	3308      	adds	r3, #8
 800b826:	9307      	str	r3, [sp, #28]
 800b828:	6963      	ldr	r3, [r4, #20]
 800b82a:	9a04      	ldr	r2, [sp, #16]
 800b82c:	189b      	adds	r3, r3, r2
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	e762      	b.n	800b6f8 <_vfiprintf_r+0x70>
 800b832:	4343      	muls	r3, r0
 800b834:	002e      	movs	r6, r5
 800b836:	2101      	movs	r1, #1
 800b838:	189b      	adds	r3, r3, r2
 800b83a:	e7a4      	b.n	800b786 <_vfiprintf_r+0xfe>
 800b83c:	2300      	movs	r3, #0
 800b83e:	200a      	movs	r0, #10
 800b840:	0019      	movs	r1, r3
 800b842:	3601      	adds	r6, #1
 800b844:	6063      	str	r3, [r4, #4]
 800b846:	7832      	ldrb	r2, [r6, #0]
 800b848:	1c75      	adds	r5, r6, #1
 800b84a:	3a30      	subs	r2, #48	@ 0x30
 800b84c:	2a09      	cmp	r2, #9
 800b84e:	d903      	bls.n	800b858 <_vfiprintf_r+0x1d0>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0c8      	beq.n	800b7e6 <_vfiprintf_r+0x15e>
 800b854:	9109      	str	r1, [sp, #36]	@ 0x24
 800b856:	e7c6      	b.n	800b7e6 <_vfiprintf_r+0x15e>
 800b858:	4341      	muls	r1, r0
 800b85a:	002e      	movs	r6, r5
 800b85c:	2301      	movs	r3, #1
 800b85e:	1889      	adds	r1, r1, r2
 800b860:	e7f1      	b.n	800b846 <_vfiprintf_r+0x1be>
 800b862:	aa07      	add	r2, sp, #28
 800b864:	9200      	str	r2, [sp, #0]
 800b866:	0021      	movs	r1, r4
 800b868:	003a      	movs	r2, r7
 800b86a:	4b14      	ldr	r3, [pc, #80]	@ (800b8bc <_vfiprintf_r+0x234>)
 800b86c:	9803      	ldr	r0, [sp, #12]
 800b86e:	f7fb fdf9 	bl	8007464 <_printf_float>
 800b872:	9004      	str	r0, [sp, #16]
 800b874:	9b04      	ldr	r3, [sp, #16]
 800b876:	3301      	adds	r3, #1
 800b878:	d1d6      	bne.n	800b828 <_vfiprintf_r+0x1a0>
 800b87a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b87c:	07db      	lsls	r3, r3, #31
 800b87e:	d405      	bmi.n	800b88c <_vfiprintf_r+0x204>
 800b880:	89bb      	ldrh	r3, [r7, #12]
 800b882:	059b      	lsls	r3, r3, #22
 800b884:	d402      	bmi.n	800b88c <_vfiprintf_r+0x204>
 800b886:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b888:	f7fc fd6c 	bl	8008364 <__retarget_lock_release_recursive>
 800b88c:	89bb      	ldrh	r3, [r7, #12]
 800b88e:	065b      	lsls	r3, r3, #25
 800b890:	d500      	bpl.n	800b894 <_vfiprintf_r+0x20c>
 800b892:	e71e      	b.n	800b6d2 <_vfiprintf_r+0x4a>
 800b894:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b896:	e71e      	b.n	800b6d6 <_vfiprintf_r+0x4e>
 800b898:	aa07      	add	r2, sp, #28
 800b89a:	9200      	str	r2, [sp, #0]
 800b89c:	0021      	movs	r1, r4
 800b89e:	003a      	movs	r2, r7
 800b8a0:	4b06      	ldr	r3, [pc, #24]	@ (800b8bc <_vfiprintf_r+0x234>)
 800b8a2:	9803      	ldr	r0, [sp, #12]
 800b8a4:	f7fc f88c 	bl	80079c0 <_printf_i>
 800b8a8:	e7e3      	b.n	800b872 <_vfiprintf_r+0x1ea>
 800b8aa:	46c0      	nop			@ (mov r8, r8)
 800b8ac:	0800c091 	.word	0x0800c091
 800b8b0:	0800c097 	.word	0x0800c097
 800b8b4:	0800c09b 	.word	0x0800c09b
 800b8b8:	08007465 	.word	0x08007465
 800b8bc:	0800b665 	.word	0x0800b665

0800b8c0 <__swbuf_r>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	0006      	movs	r6, r0
 800b8c4:	000d      	movs	r5, r1
 800b8c6:	0014      	movs	r4, r2
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d004      	beq.n	800b8d6 <__swbuf_r+0x16>
 800b8cc:	6a03      	ldr	r3, [r0, #32]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <__swbuf_r+0x16>
 800b8d2:	f7fc fc21 	bl	8008118 <__sinit>
 800b8d6:	69a3      	ldr	r3, [r4, #24]
 800b8d8:	60a3      	str	r3, [r4, #8]
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	071b      	lsls	r3, r3, #28
 800b8de:	d502      	bpl.n	800b8e6 <__swbuf_r+0x26>
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <__swbuf_r+0x3a>
 800b8e6:	0021      	movs	r1, r4
 800b8e8:	0030      	movs	r0, r6
 800b8ea:	f000 f82b 	bl	800b944 <__swsetup_r>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d003      	beq.n	800b8fa <__swbuf_r+0x3a>
 800b8f2:	2501      	movs	r5, #1
 800b8f4:	426d      	negs	r5, r5
 800b8f6:	0028      	movs	r0, r5
 800b8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	6820      	ldr	r0, [r4, #0]
 800b8fe:	b2ef      	uxtb	r7, r5
 800b900:	1ac0      	subs	r0, r0, r3
 800b902:	6963      	ldr	r3, [r4, #20]
 800b904:	b2ed      	uxtb	r5, r5
 800b906:	4283      	cmp	r3, r0
 800b908:	dc05      	bgt.n	800b916 <__swbuf_r+0x56>
 800b90a:	0021      	movs	r1, r4
 800b90c:	0030      	movs	r0, r6
 800b90e:	f7ff fa0f 	bl	800ad30 <_fflush_r>
 800b912:	2800      	cmp	r0, #0
 800b914:	d1ed      	bne.n	800b8f2 <__swbuf_r+0x32>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	3001      	adds	r0, #1
 800b91a:	3b01      	subs	r3, #1
 800b91c:	60a3      	str	r3, [r4, #8]
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	701f      	strb	r7, [r3, #0]
 800b926:	6963      	ldr	r3, [r4, #20]
 800b928:	4283      	cmp	r3, r0
 800b92a:	d004      	beq.n	800b936 <__swbuf_r+0x76>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	07db      	lsls	r3, r3, #31
 800b930:	d5e1      	bpl.n	800b8f6 <__swbuf_r+0x36>
 800b932:	2d0a      	cmp	r5, #10
 800b934:	d1df      	bne.n	800b8f6 <__swbuf_r+0x36>
 800b936:	0021      	movs	r1, r4
 800b938:	0030      	movs	r0, r6
 800b93a:	f7ff f9f9 	bl	800ad30 <_fflush_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0d9      	beq.n	800b8f6 <__swbuf_r+0x36>
 800b942:	e7d6      	b.n	800b8f2 <__swbuf_r+0x32>

0800b944 <__swsetup_r>:
 800b944:	4b2d      	ldr	r3, [pc, #180]	@ (800b9fc <__swsetup_r+0xb8>)
 800b946:	b570      	push	{r4, r5, r6, lr}
 800b948:	0005      	movs	r5, r0
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	000c      	movs	r4, r1
 800b94e:	2800      	cmp	r0, #0
 800b950:	d004      	beq.n	800b95c <__swsetup_r+0x18>
 800b952:	6a03      	ldr	r3, [r0, #32]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <__swsetup_r+0x18>
 800b958:	f7fc fbde 	bl	8008118 <__sinit>
 800b95c:	230c      	movs	r3, #12
 800b95e:	5ee2      	ldrsh	r2, [r4, r3]
 800b960:	0713      	lsls	r3, r2, #28
 800b962:	d423      	bmi.n	800b9ac <__swsetup_r+0x68>
 800b964:	06d3      	lsls	r3, r2, #27
 800b966:	d407      	bmi.n	800b978 <__swsetup_r+0x34>
 800b968:	2309      	movs	r3, #9
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	2340      	movs	r3, #64	@ 0x40
 800b96e:	2001      	movs	r0, #1
 800b970:	4313      	orrs	r3, r2
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	4240      	negs	r0, r0
 800b976:	e03a      	b.n	800b9ee <__swsetup_r+0xaa>
 800b978:	0752      	lsls	r2, r2, #29
 800b97a:	d513      	bpl.n	800b9a4 <__swsetup_r+0x60>
 800b97c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b97e:	2900      	cmp	r1, #0
 800b980:	d008      	beq.n	800b994 <__swsetup_r+0x50>
 800b982:	0023      	movs	r3, r4
 800b984:	3344      	adds	r3, #68	@ 0x44
 800b986:	4299      	cmp	r1, r3
 800b988:	d002      	beq.n	800b990 <__swsetup_r+0x4c>
 800b98a:	0028      	movs	r0, r5
 800b98c:	f7fd fb7c 	bl	8009088 <_free_r>
 800b990:	2300      	movs	r3, #0
 800b992:	6363      	str	r3, [r4, #52]	@ 0x34
 800b994:	2224      	movs	r2, #36	@ 0x24
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	4393      	bics	r3, r2
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	2300      	movs	r3, #0
 800b99e:	6063      	str	r3, [r4, #4]
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	2308      	movs	r3, #8
 800b9a6:	89a2      	ldrh	r2, [r4, #12]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	81a3      	strh	r3, [r4, #12]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10b      	bne.n	800b9ca <__swsetup_r+0x86>
 800b9b2:	21a0      	movs	r1, #160	@ 0xa0
 800b9b4:	2280      	movs	r2, #128	@ 0x80
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	0089      	lsls	r1, r1, #2
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	400b      	ands	r3, r1
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d003      	beq.n	800b9ca <__swsetup_r+0x86>
 800b9c2:	0021      	movs	r1, r4
 800b9c4:	0028      	movs	r0, r5
 800b9c6:	f000 f88f 	bl	800bae8 <__smakebuf_r>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	5ee2      	ldrsh	r2, [r4, r3]
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	0013      	movs	r3, r2
 800b9d2:	400b      	ands	r3, r1
 800b9d4:	420a      	tst	r2, r1
 800b9d6:	d00b      	beq.n	800b9f0 <__swsetup_r+0xac>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60a3      	str	r3, [r4, #8]
 800b9dc:	6963      	ldr	r3, [r4, #20]
 800b9de:	425b      	negs	r3, r3
 800b9e0:	61a3      	str	r3, [r4, #24]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	6923      	ldr	r3, [r4, #16]
 800b9e6:	4283      	cmp	r3, r0
 800b9e8:	d101      	bne.n	800b9ee <__swsetup_r+0xaa>
 800b9ea:	0613      	lsls	r3, r2, #24
 800b9ec:	d4be      	bmi.n	800b96c <__swsetup_r+0x28>
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}
 800b9f0:	0791      	lsls	r1, r2, #30
 800b9f2:	d400      	bmi.n	800b9f6 <__swsetup_r+0xb2>
 800b9f4:	6963      	ldr	r3, [r4, #20]
 800b9f6:	60a3      	str	r3, [r4, #8]
 800b9f8:	e7f3      	b.n	800b9e2 <__swsetup_r+0x9e>
 800b9fa:	46c0      	nop			@ (mov r8, r8)
 800b9fc:	2000001c 	.word	0x2000001c

0800ba00 <_raise_r>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	0004      	movs	r4, r0
 800ba04:	000d      	movs	r5, r1
 800ba06:	291f      	cmp	r1, #31
 800ba08:	d904      	bls.n	800ba14 <_raise_r+0x14>
 800ba0a:	2316      	movs	r3, #22
 800ba0c:	6003      	str	r3, [r0, #0]
 800ba0e:	2001      	movs	r0, #1
 800ba10:	4240      	negs	r0, r0
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <_raise_r+0x24>
 800ba1a:	008a      	lsls	r2, r1, #2
 800ba1c:	189b      	adds	r3, r3, r2
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	d108      	bne.n	800ba36 <_raise_r+0x36>
 800ba24:	0020      	movs	r0, r4
 800ba26:	f000 f831 	bl	800ba8c <_getpid_r>
 800ba2a:	002a      	movs	r2, r5
 800ba2c:	0001      	movs	r1, r0
 800ba2e:	0020      	movs	r0, r4
 800ba30:	f000 f81a 	bl	800ba68 <_kill_r>
 800ba34:	e7ed      	b.n	800ba12 <_raise_r+0x12>
 800ba36:	2a01      	cmp	r2, #1
 800ba38:	d009      	beq.n	800ba4e <_raise_r+0x4e>
 800ba3a:	1c51      	adds	r1, r2, #1
 800ba3c:	d103      	bne.n	800ba46 <_raise_r+0x46>
 800ba3e:	2316      	movs	r3, #22
 800ba40:	6003      	str	r3, [r0, #0]
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7e5      	b.n	800ba12 <_raise_r+0x12>
 800ba46:	2100      	movs	r1, #0
 800ba48:	0028      	movs	r0, r5
 800ba4a:	6019      	str	r1, [r3, #0]
 800ba4c:	4790      	blx	r2
 800ba4e:	2000      	movs	r0, #0
 800ba50:	e7df      	b.n	800ba12 <_raise_r+0x12>
	...

0800ba54 <raise>:
 800ba54:	b510      	push	{r4, lr}
 800ba56:	4b03      	ldr	r3, [pc, #12]	@ (800ba64 <raise+0x10>)
 800ba58:	0001      	movs	r1, r0
 800ba5a:	6818      	ldr	r0, [r3, #0]
 800ba5c:	f7ff ffd0 	bl	800ba00 <_raise_r>
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	46c0      	nop			@ (mov r8, r8)
 800ba64:	2000001c 	.word	0x2000001c

0800ba68 <_kill_r>:
 800ba68:	2300      	movs	r3, #0
 800ba6a:	b570      	push	{r4, r5, r6, lr}
 800ba6c:	4d06      	ldr	r5, [pc, #24]	@ (800ba88 <_kill_r+0x20>)
 800ba6e:	0004      	movs	r4, r0
 800ba70:	0008      	movs	r0, r1
 800ba72:	0011      	movs	r1, r2
 800ba74:	602b      	str	r3, [r5, #0]
 800ba76:	f7f7 fe27 	bl	80036c8 <_kill>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d103      	bne.n	800ba86 <_kill_r+0x1e>
 800ba7e:	682b      	ldr	r3, [r5, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d000      	beq.n	800ba86 <_kill_r+0x1e>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	200004b0 	.word	0x200004b0

0800ba8c <_getpid_r>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	f7f7 fe15 	bl	80036bc <_getpid>
 800ba92:	bd10      	pop	{r4, pc}

0800ba94 <__swhatbuf_r>:
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	000e      	movs	r6, r1
 800ba98:	001d      	movs	r5, r3
 800ba9a:	230e      	movs	r3, #14
 800ba9c:	5ec9      	ldrsh	r1, [r1, r3]
 800ba9e:	0014      	movs	r4, r2
 800baa0:	b096      	sub	sp, #88	@ 0x58
 800baa2:	2900      	cmp	r1, #0
 800baa4:	da0c      	bge.n	800bac0 <__swhatbuf_r+0x2c>
 800baa6:	89b2      	ldrh	r2, [r6, #12]
 800baa8:	2380      	movs	r3, #128	@ 0x80
 800baaa:	0011      	movs	r1, r2
 800baac:	4019      	ands	r1, r3
 800baae:	421a      	tst	r2, r3
 800bab0:	d114      	bne.n	800badc <__swhatbuf_r+0x48>
 800bab2:	2380      	movs	r3, #128	@ 0x80
 800bab4:	00db      	lsls	r3, r3, #3
 800bab6:	2000      	movs	r0, #0
 800bab8:	6029      	str	r1, [r5, #0]
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	b016      	add	sp, #88	@ 0x58
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	466a      	mov	r2, sp
 800bac2:	f000 f853 	bl	800bb6c <_fstat_r>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	dbed      	blt.n	800baa6 <__swhatbuf_r+0x12>
 800baca:	23f0      	movs	r3, #240	@ 0xf0
 800bacc:	9901      	ldr	r1, [sp, #4]
 800bace:	021b      	lsls	r3, r3, #8
 800bad0:	4019      	ands	r1, r3
 800bad2:	4b04      	ldr	r3, [pc, #16]	@ (800bae4 <__swhatbuf_r+0x50>)
 800bad4:	18c9      	adds	r1, r1, r3
 800bad6:	424b      	negs	r3, r1
 800bad8:	4159      	adcs	r1, r3
 800bada:	e7ea      	b.n	800bab2 <__swhatbuf_r+0x1e>
 800badc:	2100      	movs	r1, #0
 800bade:	2340      	movs	r3, #64	@ 0x40
 800bae0:	e7e9      	b.n	800bab6 <__swhatbuf_r+0x22>
 800bae2:	46c0      	nop			@ (mov r8, r8)
 800bae4:	ffffe000 	.word	0xffffe000

0800bae8 <__smakebuf_r>:
 800bae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baea:	2602      	movs	r6, #2
 800baec:	898b      	ldrh	r3, [r1, #12]
 800baee:	0005      	movs	r5, r0
 800baf0:	000c      	movs	r4, r1
 800baf2:	b085      	sub	sp, #20
 800baf4:	4233      	tst	r3, r6
 800baf6:	d007      	beq.n	800bb08 <__smakebuf_r+0x20>
 800baf8:	0023      	movs	r3, r4
 800bafa:	3347      	adds	r3, #71	@ 0x47
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	6123      	str	r3, [r4, #16]
 800bb00:	2301      	movs	r3, #1
 800bb02:	6163      	str	r3, [r4, #20]
 800bb04:	b005      	add	sp, #20
 800bb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb08:	ab03      	add	r3, sp, #12
 800bb0a:	aa02      	add	r2, sp, #8
 800bb0c:	f7ff ffc2 	bl	800ba94 <__swhatbuf_r>
 800bb10:	9f02      	ldr	r7, [sp, #8]
 800bb12:	9001      	str	r0, [sp, #4]
 800bb14:	0039      	movs	r1, r7
 800bb16:	0028      	movs	r0, r5
 800bb18:	f7fd fb2c 	bl	8009174 <_malloc_r>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d108      	bne.n	800bb32 <__smakebuf_r+0x4a>
 800bb20:	220c      	movs	r2, #12
 800bb22:	5ea3      	ldrsh	r3, [r4, r2]
 800bb24:	059a      	lsls	r2, r3, #22
 800bb26:	d4ed      	bmi.n	800bb04 <__smakebuf_r+0x1c>
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4393      	bics	r3, r2
 800bb2c:	431e      	orrs	r6, r3
 800bb2e:	81a6      	strh	r6, [r4, #12]
 800bb30:	e7e2      	b.n	800baf8 <__smakebuf_r+0x10>
 800bb32:	2380      	movs	r3, #128	@ 0x80
 800bb34:	89a2      	ldrh	r2, [r4, #12]
 800bb36:	6020      	str	r0, [r4, #0]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	81a3      	strh	r3, [r4, #12]
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	6120      	str	r0, [r4, #16]
 800bb40:	6167      	str	r7, [r4, #20]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00c      	beq.n	800bb60 <__smakebuf_r+0x78>
 800bb46:	0028      	movs	r0, r5
 800bb48:	230e      	movs	r3, #14
 800bb4a:	5ee1      	ldrsh	r1, [r4, r3]
 800bb4c:	f000 f820 	bl	800bb90 <_isatty_r>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d005      	beq.n	800bb60 <__smakebuf_r+0x78>
 800bb54:	2303      	movs	r3, #3
 800bb56:	89a2      	ldrh	r2, [r4, #12]
 800bb58:	439a      	bics	r2, r3
 800bb5a:	3b02      	subs	r3, #2
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	9a01      	ldr	r2, [sp, #4]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	e7cc      	b.n	800bb04 <__smakebuf_r+0x1c>
	...

0800bb6c <_fstat_r>:
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	b570      	push	{r4, r5, r6, lr}
 800bb70:	4d06      	ldr	r5, [pc, #24]	@ (800bb8c <_fstat_r+0x20>)
 800bb72:	0004      	movs	r4, r0
 800bb74:	0008      	movs	r0, r1
 800bb76:	0011      	movs	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f7 fe05 	bl	8003788 <_fstat>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d103      	bne.n	800bb8a <_fstat_r+0x1e>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d000      	beq.n	800bb8a <_fstat_r+0x1e>
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
 800bb8c:	200004b0 	.word	0x200004b0

0800bb90 <_isatty_r>:
 800bb90:	2300      	movs	r3, #0
 800bb92:	b570      	push	{r4, r5, r6, lr}
 800bb94:	4d06      	ldr	r5, [pc, #24]	@ (800bbb0 <_isatty_r+0x20>)
 800bb96:	0004      	movs	r4, r0
 800bb98:	0008      	movs	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f7 fe02 	bl	80037a4 <_isatty>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d103      	bne.n	800bbac <_isatty_r+0x1c>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d000      	beq.n	800bbac <_isatty_r+0x1c>
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	46c0      	nop			@ (mov r8, r8)
 800bbb0:	200004b0 	.word	0x200004b0

0800bbb4 <_init>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	46c0      	nop			@ (mov r8, r8)
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_fini>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	46c0      	nop			@ (mov r8, r8)
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr
